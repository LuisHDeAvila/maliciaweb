{
	"api_id": "1",
	"name": "Background Fetch API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Background Fetch API provides a method for managing downloads that may take a significant amount of time such as movies, audio files, and software.When a web application requires the user to download large files, this often presents a problem in that the user needs to stay connected to the page for the download to complete. If they lose connectivity, close the tab or navigate away from the page the download stops.The Background Synchronization API provides a way for service workers to defer processing until a user is connected; however it can't be used for long running tasks such as downloading a large file. Background Sync requires that the service worker stays alive until the fetch is completed, and to conserve battery life and to prevent unwanted tasks happening in the background the browser will at some point terminate the task.The Background Fetch API solves this problem. It creates a way for a web developer to tell the browser to perform some fetches in the background, for example when the user clicks a button to download a video file. The browser then performs the fetches in a user-visible way, displaying progress to the user and giving them a method to cancel the download. Once the download is complete the browser then opens the service worker, at which point your application can do something with the response if required.The Background Fetch API will enable the fetch to happen if the user starts the process while offline. Once they are connected it will begin. If the user goes off line, the process pauses until the user is on again.A map where the keys are background fetch IDs and the values are BackgroundFetchRegistration objects.Represents a Background Fetch.Represents an individual fetch request and response.The event type passed to onbackgroundfetchabort and onbackgroundfetchclick.The event type passed to onbackgroundfetchsuccess and onbackgroundfetchfail.Before using Background Fetch, check for browser support.\n  Using Background Fetch requires a registered service worker. Then call backgroundFetch.fetch() to perform a fetch. This\n  returns a promise that resolves with a BackgroundFetchRegistration.\nA background fetch may fetch a number of files. In our example the fetch requests an MP3 and a JPEG. This enables a package of files that the user sees as one item (for example a podcast and artwork) to be downloaded at once.You can find a demo application which implements Background Fetch here.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Background_Fetch_API"
},
{
	"api_id": "2",
	"name": "Background Tasks API",
	"description": "The Cooperative Scheduling of Background Tasks API (also referred to as the Background Tasks API or the requestIdleCallback() API) provides the ability to queue tasks to be executed automatically by the user agent when it determines that there is free time to do so.Note: This API is not available in Web Workers.The main thread of a Web browser is centered around its event loop. This code draws any pending updates to the Document currently being displayed, runs any JavaScript code the page needs to run, accepts events from input devices, and dispatches those events to the elements that should receive them. In addition, the event loop handles interactions with the operating system, updates to the browser's own user interface, and so forth. It's an extremely busy chunk of code, and your main JavaScript code may run right inside this thread along with all of this. Certainly most if not all code that is capable of making changes to the DOM is running in the main thread, since it's common for user interface changes to only be available to the main thread.Because event handling and screen updates are two of the most obvious ways users notice performance issues, it's important for your code to be a good citizen of the Web and help to prevent stalls in the execution of the event loop. In the past, there's been no way to do this reliably other than by writing code that's as efficient as possible and by offloading as much work as possible to workers. Window.requestIdleCallback() makes it possible to become actively engaged in helping to ensure that the browser's event loop runs smoothly, by allowing the browser to tell your code how much time it can safely use without causing the system to lag. If you stay within the limit given, you can make the user's experience much better.Because idle callbacks are intended to give your code a way to cooperate with the event loop to ensure that the system is utilized to its full potential without over-tasking it, resulting in lag or other performance problems, you should be thoughtful about how you go about using them.Because the Background Tasks API is fairly new, your code may need to be able to work on browsers that don't yet support it. You can do so with a simple shim that uses setTimeout() as a fallback option. This isn't a polyfill, since it's not functionally identical; setTimeout() doesn't let you make use of idle periods, but instead runs your code when possible, leaving us to do the best we can to avoid causing the user to experience performance lag.If window.requestIdleCallback is undefined, we create it here. The function begins by recording the time at which our implementation was called. We'll be using that to compute the value returned by our shim for timeRemaining().Then we call setTimeout(), passing into it a function which runs the callback passed into our implementation of requestIdleCallback(). The callback is passed an object which conforms to IdleDeadline, with didTimeout set to false and a timeRemaining() method which is implemented to give the callback 50 milliseconds of time to begin with. Each time timeRemaining() is called, it subtracts the elapsed time from the original 50 milliseconds to determine the amount of time left.As a result, while our shim doesn't constrain itself to the amount of idle time left in the current event loop pass like the true requestIdleCallback(), it does at least limit the callback to no more than 50 milliseconds of run time per pass.The implementation of our shim for cancelIdleCallback() is much simpler:If cancelIdleCallback() isn't defined, this creates one which passes the specified callback ID through to clearTimeout().Now your code will work even on browsers that don't support the Background Tasks API, albeit not as efficiently.The Background Tasks API adds only one new interface:An object of this type is passed to the idle callback to provide an estimate of how long the idle period is expected to last, as well as whether or not the callback is running because its timeout period has expired.The Window interface is also augmented by this API to offer the new requestIdleCallback() and cancelIdleCallback() methods.In this example, we'll take a look at how you can use requestIdleCallback() to run time-consuming, low-priority tasks during time the browser would otherwise be idle. In addition, this example demonstrates how to schedule updates to the document content using requestAnimationFrame().Below you'll find only the HTML and JavaScript for this example. The CSS is not shown, since it's not particularly crucial to understanding this functionality.In order to be oriented about what we're trying to accomplish, let's have a look at the HTML. This establishes a box (id="container") that's used to present the progress of an operation (because you never know how long decoding "quantum filament tachyon emissions" will take, after all) as well as a second main box (id="logBox"), which is used to display textual output.The progress box uses a <progress> element to show the progress, along with a label with sections that are changed to present numeric information about the progress. In addition, there's a "Start" button (creatively given the ID "startButton"), which the user will use to start the data processing.Now that the document structure is defined, construct the JavaScript code that will do the work. The goal: to be able to add requests to call functions to a queue, with an idle callback that runs those functions whenever the system is idle for long enough a time to make progress.These variables are used to manage the list of tasks that are waiting to be performed, as well as status information about the task queue and its execution:Next we have variables which reference the DOM elements we need to interact with. These elements are:Finally, we set up a couple of variables for other items:Next, let's look at the way we manage the tasks that need to be performed. We're going to do this by creating a FIFO queue of tasks, which we'll run as time allows during the idle callback period.First, we need a function that enqueues tasks for future execution. That function, enqueueTask(), looks like this:enqueueTask() accepts as input two parameters:To enqueue the task, we push an object onto the taskList array; the object contains the taskHandler and taskData values under the names handler and data, respectively, then increment totalTaskCount, which reflects the total number of tasks which have ever been enqueued (we don't decrement it when tasks are removed from the queue).Next, we check to see if we already have an idle callback created; if taskHandle is 0, we know there isn't an idle callback yet, so we call requestIdleCallback() to create one. It's configured to call a function called runTaskQueue(), which we'll look at shortly, and with a timeout of 1 second, so that it will be run at least once per second even if there isn't any actual idle time available.Our idle callback handler, runTaskQueue(), gets called when the browser determines there's enough idle time available to let us do some work or our timeout of one second expires. This function's job is to run our enqueued tasks.runTaskQueue()'s core is a loop which continues as long as there's time left (as determined by checking deadline.timeRemaining) to be sure it's more than 0 or if the timeout limit was reached (deadline.didTimeout is true), and as long as there are tasks in the task list.For each task in the queue that we have time to execute, we do the following:When time runs out, if there are still tasks left in the list, we call requestIdleCallback() again so that we can continue to process the tasks the next time there's idle time available. If the queue is empty, we set taskHandle to 0 to indicate that we don't have a callback scheduled. That way, we'll know to request a callback next time enqueueTask() is called.One thing we want to be able to do is update our document with log output and progress information. However, you can't safely change the DOM from within an idle callback. Instead, we'll use requestAnimationFrame() to ask the browser to call us when it's safe to update the display.DOM changes are scheduled by calling the scheduleStatusRefresh() function.This is a simple function. It checks to see if we've already scheduled a display refresh by checking the value of statusRefreshScheduled. If it's false, we call requestAnimationFrame() to schedule a refresh, providing the updateDisplay() function to be called to handle that work.The updateDisplay() function is responsible for drawing the contents of the progress box and the log. It's called by the browser when the DOM is in a safe condition for us to apply changes during the process of rendering the next frame.First, scrolledToEnd is set to true if the text in the log is scrolled to the bottom; otherwise it's set to false. We'll use that to determine if we should update the scroll position to ensure that the log stays at the end when we're done adding content to it.Next, we update the progress and status information if any tasks have been enqueued.Then, if there's text waiting to be added to the log (that is, if logFragment isn't null), we append it to the log element using Element.appendChild() and set logFragment to null so we don't add it again.If the log was scrolled to the end when we started, we make sure it still is. Then we set statusRefreshScheduled to false to indicate that we've handled the refresh and that it's safe to request a new one.The log() function adds the specified text to the log. Since we don't know at the time log() is called whether or not it's safe to immediately touch the DOM, we will cache the log text until it's safe to update. Above, in the code for updateDisplay(), you can find the code that actually adds the logged text to the log element when the animation frame is being updated.First, we create a DocumentFragment object named logFragment if one doesn't currently exist. This element is a pseudo-DOM into which we can insert elements without immediately changing the main DOM itself.We then create a new <div> element and set its contents to match the input text. Then we append the new element to the end of the pseudo-DOM in logFragment. logFragment will accumulate log entries until the next time updateDisplay() is called because the DOM for the changes.Now that we've got the task management and display maintenance code done, we can actually start setting up code to run tasks that get work done.The function we'll be using as our task handler—that is, the function that will be used as the value of the task object's handler property—is logTaskHandler(). It's a simple function that outputs a bunch of stuff to the log for each task. In your own application, you'd replace this code with whatever task it is you wish to perform during idle time. Just remember that anything you want to do that changes the DOM needs to be handled through requestAnimationFrame().Everything is triggered when the user clicks the Start button, which causes the decodeTechnoStuff() function to be called.decodeTechnoStuff() starts by zeroing the values of totalTaskCount (the number of tasks added to the queue so far) and currentTaskNumber (the task currently being run), and then calls updateDisplay() to reset the display to its "nothing's happened yet" state.This example will create a random number of tasks (between 100 and 200 of them). To do so, we use the getRandomIntInclusive() function that's provided as an example in the documentation for Math.random() to get the number of tasks to create.Then we start a loop to create the actual tasks. For each task, we create an object, taskData, which includes two properties:Each task is then enqueued by calling enqueueTask(), passing in logTaskHandler() as the handler function and the taskData object as the object to pass into the function when it's called.Below is the actual functioning result of the code above. Try it out, play with it in your browser's developer tools, and experiment with using it in your own code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API"
},
{
	"api_id": "3",
	"name": "Barcode Detection API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Note: This feature is available in Web WorkersExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Barcode Detection API detects linear and two-dimensional barcodes in images.Support for barcode recognition within web apps unlocks a variety of use cases through supported barcode formats. QR codes can be used for online payments, web navigation or establishing social media connections, Aztec codes can be used to scan boarding passes and shopping apps can use EAN or UPC barcodes to compare prices of physical items.\n  Detection is achieved through the detect() method, which takes an image object; it can be one of these objects:\n  an SVGImageElement,\n  an HTMLVideoElement,\n  an HTMLCanvasElement,\n  an ImageBitmap,\n  an OffscreenCanvas,\n  a VideoFrame,\n  a Blob,\n  or an ImageData.\n  Optional parameters can be passed to the BarcodeDetector constructor to provide hints on which barcode formats to detect.\nThe Barcode Detection API supports the following barcode formats:You can check for formats supported by the user agent via the getSupportedFormats() method.The BarcodeDetector interface of the Barcode Detection API allows detection of linear and two dimensional barcodes in images.This example tests for browser compatibility and creates a new barcode detector object, with specified supported formats.The following example calls the getSupportFormat() method and logs the results to the console.This example uses the detect() method to detect the barcodes within the given image. These are iterated over and the barcode data is logged to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API"
},
{
	"api_id": "4",
	"name": "Battery Status API",
	"description": "The Battery Status API, more often referred to as the Battery API, provides information about the system's battery charge level and lets you be notified by events that are sent when the battery level or charging status change. This can be used to adjust your app's resource usage to reduce battery drain when the battery is low, or to save changes before the battery runs out in order to prevent data loss.Note: This API is not available in Web Workers (not exposed via WorkerNavigator).Provides information about the system's battery charge level.Returns a Promise that resolves with a BatteryManager object.In this example, we watch for changes both to the charging status (whether or not we're plugged in and charging) and for changes to the battery level and timing. This is done by listening for the chargingchange, levelchange, chargingtimechange, dischargingtimechange events.See also the example in the specification.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API"
},
{
	"api_id": "5",
	"name": "Beacon API",
	"description": "The Beacon API is used to send an asynchronous and non-blocking request to a web server. The request does not expect a response. Unlike requests made using XMLHttpRequest or the Fetch API, the browser guarantees to initiate beacon requests before the page is unloaded and to run them to completion.The main use case for the Beacon API is to send analytics such as client-side events or session data to the server. Historically, websites have used XMLHttpRequest for this, but browsers do not guarantee to send these asynchronous requests in some circumstances (for example, if the page is about to be unloaded). To combat this, websites have resorted to various techniques, such as making the request synchronous, that have a bad effect on responsiveness. Because beacon requests are both asynchronous and guaranteed to be sent, they combine good performance characteristics and reliability.For more details about the motivation for and usage of this API, see the documentation for the navigator.sendBeacon() method.Note: This API is not available in Web Workers (not exposed via WorkerNavigator).This API defines a single method: navigator.sendBeacon().The method takes two arguments, the URL and the data to send in the request. The data argument is optional and its type may be a TypedArray, a DataView, a Blob, a string literal or object, or a FormData object. If the browser successfully queues the request for delivery, the method returns "true"; otherwise, it returns "false".",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API"
},
{
	"api_id": "6",
	"name": "Web Bluetooth API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Web Bluetooth API provides the ability to connect and interact with Bluetooth Low Energy peripherals.Note: This API is not available in Web Workers (not exposed via WorkerNavigator).Returns a Promise to a BluetoothDevice object with the specified options.Provides properties of a particular BluetoothRemoteGATTCharacteristic.Represents a Bluetooth device inside a particular script execution environment.Represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral's service.Represents a GATT Descriptor, which provides further information about a characteristic's value.Represents a GATT Server on a remote device.Represents a service provided by a GATT server, including a device, a list of referenced services, and a list of the characteristics of this service.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API"
},
{
	"api_id": "7",
	"name": "Broadcast Channel API",
	"description": "The Broadcast Channel API allows basic communication between browsing contexts (that is, windows, tabs, frames, or iframes) and workers on the same origin.Note: This feature is available in Web WorkersBy creating a BroadcastChannel object, you can receive any messages that are posted to it. You don't have to maintain a reference to the frames or workers you wish to communicate with: they can "subscribe" to a particular channel by constructing their own BroadcastChannel with the same name, and have bi-directional communication between all of them.\n  \nA client joins a broadcast channel by creating a BroadcastChannel object. Its constructor takes one single parameter: the name of the channel. If it is the first to connect to that broadcast channel name, the underlying channel is created.It is enough to call the postMessage() method on the created BroadcastChannel object, which takes any object as an argument. An example string message:Data sent to the channel is serialized using the structured clone algorithm. That means you can send a broad variety of data objects safely without having to serialize them yourself.The API doesn't associate any semantics to messages, so it is up to the code to know what kind of messages to expect and what to do with them.When a message is posted, a message event is dispatched to each BroadcastChannel object connected to this channel. A function can be run for this event using the onmessage event handler:To leave a channel, call the close() method on the object. This disconnects the object from the underlying channel, allowing garbage collection.The Broadcast Channel API's self-contained interface allows cross-context communication. It can be used to detect user actions in other tabs within a same origin, like when the user logs in or out.The messaging protocol is not defined and the different browsing contexts need to implement it themselves; there is no negotiation nor requirement from the specification.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API"
},
{
	"api_id": "8",
	"name": "CSS Counter Styles",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSS Counter Styles module allows to define custom counter styles, which can be used for CSS list-marker and generated-content counters.Represents an @counter-style rule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Counter_Styles"
},
{
	"api_id": "9",
	"name": "CSS Font Loading API",
	"description": "The CSS Font Loading API provides events and interfaces for dynamically loading font resources.Note: This feature is available in Web Workers (self.fonts provides access to FontFaceSet).Represents a single usable font face.An interface loading font faces and checking their download statuses.Fired whenever a FontFaceSet loads.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API"
},
{
	"api_id": "10",
	"name": "CSS Painting API",
	"description": "The CSS Painting API — part of the CSS Houdini umbrella of APIs — allows developers to write JavaScript functions that can draw directly into an element's background, border, or content.Essentially, the CSS Painting API contains functionality allowing developers to create custom values for paint(), a CSS <image> function. You can then apply these values to properties like background-image to set complex custom backgrounds on an element.For example:The API defines PaintWorklet, a worklet that can be used to programmatically generate an image that responds to computed style changes. To find out more about how this is used, consult Using the CSS Painting API.Programmatically generates an image where a CSS property expects a file. Access this interface through CSS.paintWorklet.The global execution context of the paintWorklet.Implements a subset of the CanvasRenderingContext2D API. It has an output bitmap that is the size of the object it is rendering to.Returns the read-only values of the output bitmap's width and height.A dictionary providing a subset of CanvasRenderingContext2D settings.The following example creates a list of items with a background image that rotates between three different colors and three widths. In a supporting browser you will see something like the image below.\n  \nTo achieve this we'll define two custom CSS properties, --boxColor and --widthSubtractor.In our worklet, we can reference these custom properties.We used the inputProperties() method in the registerPaint() class to get the values of two custom properties set on an element that has boxbg applied to it and then used those within our paint() function. The inputProperties() method can return all properties affecting the element, not just custom properties.In our CSS, we define the --boxColor and --widthSubtractor custom properties.In our <script> we register the worklet:While you can't play with the worklet's script, you can alter the custom property values in DevTools to change the colors and width of the background image.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API"
},
{
	"api_id": "11",
	"name": "CSS Typed Object Model API",
	"description": "The CSS Typed Object Model API simplifies CSS property manipulation by exposing CSS values as typed JavaScript objects rather than strings. This not only simplifies CSS manipulation, but also lessens the negative impact on performance as compared to HTMLElement.style.Generally, CSS values can be read and written in JavaScript as strings, which can be slow and cumbersome. CSS Typed Object Model API provides interfaces to interact with underlying values, by representing them with specialized JS objects that can be manipulated and understood more easily and more reliably than string parsing and concatenation. This is easier for authors (for example, numeric values are reflected with actual JS numbers, and have unit-aware mathematical operations defined for them). It is also generally faster, as values can be directly manipulated and then cheaply translated back into underlying values without having to both build and parse strings of CSS.CSS Typed OM both allows for the performant manipulation of values assigned to CSS properties while enabling maintainable code that is both more understandable and easier to write.The CSSStyleValue interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API. An instance of this class may be used anywhere a string is expected.The parse() method of the CSSStyleValue interface allows a CSSNumericValue to be constructed from a CSS string. It sets a specific CSS property to the specified values and returns the first value as a CSSStyleValue object.The parseAll() method of the CSSStyleValue interface sets all occurrences of a specific CSS property to the specified value and returns an array of CSSStyleValue objects, each containing one of the supplied values.The StylePropertyMap interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.Method of StylePropertyMap interface that changes the CSS declaration with the given property to the value given.Method that adds a new CSS declaration to the StylePropertyMap with the given property and value.Method that removes the CSS declaration with the given property from the StylePropertyMap.Method that removes all declarations in the StylePropertyMap.The CSSUnparsedValue interface of the CSS Typed Object Model API represents property values that reference custom properties. It consists of a list of string fragments and variable references.Creates a new CSSUnparsedValue object which represents property values that reference custom properties.Method returning an array of a given object's own enumerable property [key, value] pairs in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).Method executing a provided function once for each element of the CSSUnparsedValue.Method returning a new array iterator object that contains the keys for each index in the array.The CSSKeywordValue interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.Constructor creates a new CSSKeywordValue() object which represents CSS keywords and other identifiers.Property of the CSSKeywordValue interface returning or setting the value of the CSSKeywordValue.CSSStyleValue is the base class through which all CSS values are expressed. Subclasses include:An interface representing values for properties that take an image, for example background-image, list-style-image, or border-image-source.An interface which creates an object to represent CSS keywords and other identifiers. When used where a string is expected, it will return the value of CSSKeyword.value.A tree of subclasses representing numeric values that are more complicated than a single value and unit, including:An interface representing operations that all numeric values can perform, including:Represents values for properties that take a position, for example object-position.An interface representing a list of transform list values. They "contain" one or more CSSTransformComponents, which represent individual transform function values.An interface representing numeric values that can be represented as a single unit, or a named number and percentage.Represents property values that reference custom properties. It consists of a list of string fragments and variable references.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"
},
{
	"api_id": "12",
	"name": "CSS Object Model (CSSOM)",
	"description": "The CSS Object Model is a set of APIs allowing the manipulation of CSS from JavaScript. It is much like the DOM, but for the CSS rather than the HTML. It allows users to read and modify CSS style dynamically.The values of CSS are represented untyped, that is using String objects.Several other interfaces are also extended by the CSSOM-related specifications: Document, Window, Element, HTMLElement, HTMLImageElement, Range, MouseEvent, and SVGElement.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.All these features have been added little by little over the years to the different browsers: it was a quite complex process that can't be summarized in a simple table. Please refer to the specific interfaces for its availability.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"
},
{
	"api_id": "13",
	"name": "Canvas API",
	"description": "The Canvas API provides a means for drawing graphics via JavaScript and the HTML <canvas> element. Among other things, it can be used for animation, game graphics, data visualization, photo manipulation, and real-time video processing.The Canvas API largely focuses on 2D graphics. The WebGL API, which also uses the <canvas> element, draws hardware-accelerated 2D and 3D graphics.This simple example draws a green rectangle onto a canvas.The Document.getElementById() method gets a reference to the HTML <canvas> element. Next, the HTMLCanvasElement.getContext() method gets that element's context—the thing onto which the drawing will be rendered.The actual drawing is done using the CanvasRenderingContext2D interface. The fillStyle property makes the rectangle green. The fillRect() method places its top-left corner at (10, 10), and gives it a size of 150 units wide by 100 tall.Note: The interfaces related to the WebGLRenderingContext are referenced under WebGL.Note: OffscreenCanvas is also available in web workers.CanvasCaptureMediaStreamTrack is a related interface.A comprehensive tutorial covering both the basic usage of the Canvas API and its advanced features.A hands-on, book-length introduction to the Canvas API and WebGL.A handy reference for the Canvas API.Combining <video> and <canvas> to manipulate video data in real time.The Canvas API is extremely powerful, but not always simple to use. The libraries listed below can make the creation of canvas-based projects faster and easier.Note: See the WebGL API for 2D and 3D libraries that use WebGL.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"
},
{
	"api_id": "14",
	"name": "Channel Messaging API",
	"description": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.Note: This feature is available in Web WorkersA message channel is created using the MessageChannel() constructor. Once created, the two ports of the channel can be accessed through the MessageChannel.port1 and MessageChannel.port2 properties (which both return MessagePort objects.) The app that created the channel uses port1, and the app at the other end of the port uses port2 — you send a message to port2, and transfer the port over to the other browsing context using window.postMessage along with two arguments (the message to send, and the object to transfer ownership of, in this case the port itself.)When these transferable objects are transferred, they are no longer usable on the context they previously belonged to. A port, after it is sent, can no longer be used by the original context.The other browsing context can listen for the message using onmessage, and grab the contents of the message using the event's data attribute. You could then respond by sending a message back to the original document using MessagePort.postMessage.When you want to stop sending messages down the channel, you can invoke MessagePort.close to close the ports.Find out more about how to use this API in Using channel messaging.Creates a new message channel to send messages across.Controls the ports on the message channel, allowing sending of messages from one port and listening out for them arriving at the other.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API"
},
{
	"api_id": "15",
	"name": "Clipboard API",
	"description": "The Clipboard API provides the ability to respond to clipboard commands (cut, copy, and paste) as well as to asynchronously read from and write to the system clipboard.Note: This API is not available in Web Workers (not exposed via WorkerNavigator).This API is designed to supersede accessing the clipboard using document.execCommand().\n  Note: The clipboard is a data buffer that is used for short-term, data storage and/or data transfers, this can be between documents or applications\n  It is usually implemented as an anonymous, temporary data buffer, sometimes called the paste buffer, that can be accessed from most or all programs within the environment via defined programming interfaces.\n  A typical application accesses clipboard functionality by mapping user input such as keybindings, menu selections, etc. to these interfaces.Instead of creating a Clipboard object through instantiation, you access the system clipboard through the Navigator.clipboard global:This snippet fetches the text from the clipboard and appends it to the first element found with the class editor. Since readText() (and read(), for that matter) returns an empty string if the clipboard isn't text, this code is safe.Provides an interface for reading and writing text and data to or from the system clipboard. The specification refers to this as the 'Async Clipboard API.'Represents events providing information related to modification of the clipboard, that is cut, copy, and paste events. The specification refers to this as the 'Clipboard Event API'.Represents a single item format, used when reading or writing data.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"
},
{
	"api_id": "16",
	"name": "Compression Streams API",
	"description": "The Compression Streams API provides a JavaScript API for compressing and decompressing streams of data using the gzip or deflate formats.Built in compression means that JavaScript applications will not need to include a compression library, which makes the download size of the application smaller.Compresses a stream of data.Decompresses a stream of data.In this example a stream is compressed using gzip compression.In the following example a function decompresses a blob using gzip.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API"
},
{
	"api_id": "17",
	"name": "Console API",
	"description": "The Console API provides functionality to allow developers to perform debugging tasks, such as logging messages or the values of variables at set points in your code, or timing how long an operation takes to complete.Note: This feature is available in Web WorkersThe Console API started as a largely proprietary API, with different browsers implementing it, albeit it in inconsistent ways. The Console API spec was created to define consistent behavior, and all modern browsers eventually settled on implementing this behavior — although some implementations still have their own additional proprietary functions. Find out about these at:Usage is very simple — the console object — available via window.console, or WorkerGlobalScope.console in workers; accessible using just console — contains many methods that you can call to perform rudimentary debugging tasks, generally focused around logging various values to the browser's Web Console.By far the most commonly-used method is console.log, which is used to log the current value contained inside a specific variable.Provides rudimentary debugging functionality, including logging, stack traces, timers, and counters.See the console reference page for more examples.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Console_API"
},
{
	"api_id": "18",
	"name": "Contact Picker API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Contact Picker API allows users to select entries from their contact list and share limited details of the selected entries with a website or application.Note: This API is not available in Web Workers (not exposed via WorkerNavigator).Note: The Contact Picker API should not be confused with the deprecated Contact API.Access to contacts has long been a feature available within native applications. The Contacts Picker API brings that functionality to web applications.Use cases include selecting contacts to message via an email or chat application, selecting a contacts phone number for use with voice over IP (VOIP), or for discovering contacts who have already joined a social platform. User agents can also offer a consistent experience with other applications on a users device.When calling the select method of the ContactsManager interface, the user is presented with a contact picker, whereby they can then select contact information to share with the web application. User interaction is required before permission to display the contact picker is granted and access to contacts is not persistent; the user must grant access every time a request is made by the application.This API is only available from a secure top-level browsing context and very carefully considers the sensitivity and privacy of contact data. The onus is on the user for choosing data to share and only allows specific data for selected contacts, with no access to any data for other contacts.Represents a physical address.Provides a way for users to select and share limited details of contacts with a web application.Returns a ContactsManager object instance, from which all other functionality can be accessed.The following code checks whether the Contact Picker API is supported.The following asynchronous function uses the getProperties() method to check for supported properties.The following example sets an array of properties to be retrieved for each contact, as well as setting an options object to allow for multiple contacts to be selected.An asynchronous function is then defined which uses the select() method to present the user with a contact picker interface and handle the chosen results.handleResults() is a developer defined function.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Contact_Picker_API"
},
{
	"api_id": "19",
	"name": "Content Index API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Content Index API allows developers to register their offline enabled content with the browser.As it stands, offline web content is not easily discoverable by users. Content indexing allows developers to tell the browser about their specific offline content. This allows users to discover and view what is available, whilst giving developers the ability to add and manage this content. Examples could be a news website prefetching the latest articles in the background, or a content streaming app registering downloaded content.The Content Index API is an extension to service workers, which allows developers to add URLs and metadata of already cached pages, under the scope of the current service worker. The browser can then use these entries to display offline reading to a user. As a developer you can also display these entries within your application.Indexed entries do not automatically expire. It's good practice to present an interface for clearing out entries, or periodically remove older entries.Note: The API supports indexing URLs corresponding to HTML documents. A URL for a cached media file, for example, can't be indexed directly. Instead, you need to provide a URL for a page that displays media, and which works offline.The ContentIndex interface provides functionality to register content available offline.The ContentIndexEvent interface of the Content Index API defines the object used to represent the contentdelete event.The following additions to the ServiceWorker have been specified in the Content Index API spec to provide an entry point for using content indexing.Returns a reference to the ContentIndex interface for indexing cached pages.An event fired when content is removed by the user agent.All the following examples assume a service worker has been registered. For more information see the Service Worker API.Here we get a reference to the ServiceWorkerRegistration, then check for the index property, which gives us access to the content index interface.Here we're declaring an item in the correct format and creating an asynchronous function which uses the add() method to register it with the content index.The below example shows an asynchronous function that retrieves items within the content index and iterates over each entry, building a list for the interface.Below is an asynchronous function, that removes an item from the content index.All the above methods are available within the scope of the service worker. They are accessible from the WorkerGlobalScope.self property:When an item is removed from the user agent interface, a contentdelete event is received by the service worker.The contentdelete event is only fired when the deletion happens due to interaction with the browser's built-in user interface. It is not fired when the ContentIndex.delete() method is called.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Content_Index_API"
},
{
	"api_id": "20",
	"name": "Cookie Store API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Cookie Store API provides an asynchronous API for managing cookies, while also exposing cookies to Service Worker API,The existing method of getting and setting cookies involves working with document.cookie as a string of key/value pairs. In addition to this being cumbersome and error prone, it also has a host of issues in the context of modern web development.The document.cookie interface is synchronous, single-threaded, and blocking. When writing a cookie you must wait for the browser to update the string of all cookies. In addition, the reliance on document means that cookies cannot be accessed by service workers which cannot access the document object.The Cookie Store API provides an updated method of managing cookies. It is asynchronous and promise-based, therefore does not block the event loop. It does not rely on document and so is available to service workers. The methods for getting and setting cookies also provide more feedback by way of error messages. This means that web developers do not have to set then immediately read back a cookie to check that setting was successful.The CookieStore interface enables getting and setting cookies.The CookieStoreManager interface provides a service worker registration to enable service workers to subscribe to cookie change events.A CookieChangeEvent named change is dispatched against CookieStore objects in Window contexts when any script-visible cookies changes occur.An ExtendableCookieChangeEvent named change is dispatched against ServiceWorkerGlobalScope events when any script-visible cookie changes occur that match the service worker's cookie change subscription list.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API"
},
{
	"api_id": "21",
	"name": "Credential Management API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Credential Management API lets a website store and retrieve password, public key, and federated credentials. These capabilities allow users to sign in without typing passwords, see the federated account they used to sign in to a site, and resume a session without the explicit sign-in flow of an expired session.This API lets websites interact with a user agent's password system directly so that websites can deal in a uniform way with site credentials and user agents can provide better assistance with the management of their credentials. For example, user agents have a particularly hard time dealing with federated identity providers or esoteric sign-in mechanisms.To address these problems, the Credential Management API provides ways for a website to store and retrieve different types of credentials. This gives users capabilities such as seeing the federated account they used to sign on to a site, or resuming a session without the explicit sign-in flow of an expired session.Note: This API is restricted to top-level contexts. Calls to get() and store() within an <iframe> element will resolve without effect.Later version of the spec allow credentials to be retrieved from a different subdomain. For example, a password stored in login.example.com may be used to log in to www.example.com. To take advantage of this, a password must be explicitly stored by calling CredentialsContainer.store(). This is sometimes referred to as public suffix list (PSL) matching; however the spec only recommends using PSL to determine the effective scope of a credential. It does not require it. Hence browsers may vary in their implementation.Provides information about an entity as a prerequisite to a trust decision.Exposes methods to request credentials and notify the user agent when interesting events occur such as successful sign in or sign out. This interface is accessible from navigator.credentials.Provides information about credentials from a federated identity provider, which is an entity that a website trusts to correctly authenticate a user, and which provides an API for that purpose. OpenID Connect is an example of such a framework.Provides information about a username/password pair.Provides a credential for logging in using a more secure system based on asymmetric cryptography instead of a password.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API"
},
{
	"api_id": "22",
	"name": "Document Object Model (DOM)",
	"description": "The Document Object Model (DOM) connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language.The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree. With them, you can change the document's structure, style, or content.Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed.To learn more about what the DOM is and how it represents documents, see our article Introduction to the DOM.The Document Object Model has been highly simplified. To achieve this, the following interfaces present in the different DOM level 3 or earlier specifications have been removed. It is uncertain whether some may be reintroduced in the future or not, but for the time being they should be considered obsolete and should be avoided:A document containing HTML is described using the Document interface, which is extended by the HTML specification to include various HTML-specific features. In particular, the Element interface is enhanced to become HTMLElement and various subclasses, each representing one of (or a family of closely related) elements.The HTML DOM API provides access to various browser features such as tabs and windows, CSS styles and stylesheets, browser history, and so forth. These interfaces are discussed further in the HTML DOM API documentation.Here are the DOM APIs for data types used in the definitions of SVG properties and attributes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"
},
{
	"api_id": "23",
	"name": "Encoding API",
	"description": "The Encoding API provides a mechanism for handling text in various character encodings, including legacy non-UTF-8 encodings.The API provides four interfaces: TextDecoder, TextEncoder, TextDecoderStream and TextEncoderStream.Note: This feature is available in Web Workers",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API"
},
{
	"api_id": "24",
	"name": "Encrypted Media Extensions API",
	"description": "The Encrypted Media Extensions API provides interfaces for controlling the playback of content which is subject to a digital restrictions management scheme.Contains the content and related data when the content decryption module (CDM) generates a message for the session.Represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.Represents a context for message exchange with a content decryption module (CDM).A read-only map of media key statuses by key IDs.Provides access to a Key System for decryption and/or a content protection provider.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API"
},
{
	"api_id": "25",
	"name": "EyeDropper API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The EyeDropper API provides a mechanism for creating an eyedropper tool. Using this tool, users can sample colors from their screens, including outside of the browser window.Creative applications often allow users to sample colors from drawings or shapes in the application to reuse. Web applications can use the EyeDropper API to provide a similar eyedropper mode, provided by the browser.Using the API, a web application can start the eyedropper mode. Once started, the cursor changes to indicate to the user that the mode is active. The user can then either select a color from anywhere on the screen, or dismiss the eyedropper mode by pressing Escape.To prevent malicious websites from getting pixel data from a user's screen without them realizing, the EyeDropper API implements the following measures:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API"
},
{
	"api_id": "26",
	"name": "Fetch API",
	"description": "The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.Note: This feature is available in Web WorkersFetch provides a generic definition of Request and Response objects (and other things involved with network requests). This will allow them to be used wherever they are needed in the future, whether it's for service workers, Cache API, and other similar things that handle or modify requests and responses, or any kind of use case that might require you to generate your responses programmatically (that is, the use of computer program or personal programming instructions).It also defines related concepts such as CORS and the HTTP Origin header semantics, supplanting their separate definitions elsewhere.For making a request and fetching a resource, use the fetch() method. It is implemented in multiple interfaces, specifically Window and WorkerGlobalScope. This makes it available in pretty much any context you might want to fetch resources in.The fetch() method takes one mandatory argument, the path to the resource you want to fetch. It returns a Promise that resolves to the Response to that request — as soon as the server responds with headers — even if the server response is an HTTP error status. You can also optionally pass in an init options object as the second argument (see Request).Once a Response is retrieved, there are a number of methods available to define what the body content is and how it should be handled.You can create a request and response directly using the Request() and Response() constructors, but it's uncommon to do this directly. Instead, these are more likely to be created as results of other API actions (for example, FetchEvent.respondWith() from service workers).The fetch specification differs from jQuery.ajax() in three main ways:Note: Find out more about using the Fetch API features in Using Fetch, and study concepts in Fetch basic concepts.Browsers have started to add experimental support for the AbortController and AbortSignal interfaces (aka The Abort API), which allow operations like Fetch and XHR to be aborted if they have not already completed. See the interface pages for more details.The fetch() method used to fetch a resource.Represents response/request headers, allowing you to query them and take different actions depending on the results.Represents a resource request.Represents the response to a request.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
},
{
	"api_id": "27",
	"name": "File API",
	"description": "The File API enables web applications to access files and their contents.Web applications can access files when the user makes them available, either using a file <input> element or via drag and drop.Sets of files made available in this way are represented as FileList objects, which enable a web application to retrieve individual File objects. In turn File objects provide access to metadata such as the file's name, size, type, and last modified date.File objects can be passed to FileReader objects to access the contents of the file. The FileReader interface is asynchronous, but a synchronous version, available only in web workers, is provided by the FileReaderSync interface.Represents a "Binary Large Object", meaning a file-like object of immutable, raw data; a Blob can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.Provides information about a file and allows JavaScript in a web page to access its content.Returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.Enables web applications to asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.Enables web applications to synchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.Creates a URL that can be used to fetch a File or Blob object.Releases an existing object URL which was previously created by calling URL.createObjectURL().In this example, we provide a file <input> element, and when the user selects a file, we read the contents of the first file selected as text, and display the result in a <div>.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/File_API"
},
{
	"api_id": "28",
	"name": "File System Access API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The File System Access API allows read, write and file management capabilities.This API allows interaction with files on a user's local device, or on a user-accessible network file system. Core functionality of this API includes reading files, writing or saving files, and access to directory structure.Most of the interaction with files and directories is accomplished through handles. A parent FileSystemHandle class helps define two child classes: FileSystemFileHandle and FileSystemDirectoryHandle, for files and directories respectively.These handles represent the file or directory on the user's system. You must first gain access to them by showing the user a file or directory picker. The methods which allow this are window.showOpenFilePicker and window.showDirectoryPicker. Once these are called, the file picker presents itself and the user selects either a file or directory. Once this happens successfully, a handle is returned. You can also gain access to file handles via the DataTransferItem.getAsFileSystemHandle() method of the HTML Drag and Drop API.The handle provides its own functionality and there are a few differences depending on whether a file or directory was selected (see the interfaces section for specific details). You then can access file data, or information (including children) of the directory selected.There is also "save" functionality, using the FilesystemWritableFileStream interface. Once the data you'd like to save is in a format of Blob, String object, string literal or buffer, you can open a stream and save the data to a file. This can be the existing file or a new file.This API opens up potential functionality the web has been lacking. Still, security has been of utmost concern when designing the API, and access to file/directory data is disallowed unless the user specifically permits it.The FileSystemHandle interface is an object which represents an entry. Multiple handles can represent the same entry. For the most part you do not work with FileSystemEntry directly but rather it's child interfaces FileSystemFileEntry and FileSystemDirectoryEntry.Provides a handle to a file system entry.provides a handle to a file system directory.is a WritableStream object with additional convenience methods, which operates on a single file on disk.The below code allows the user to choose a file from the file picker and then tests to see whether the handle returned is a file or directoryThe following asynchronous function presents a file picker and once a file is chosen, uses the getFile() method to retrieve the contents.The following example returns a directory handle with the specified name. If the directory does not exist, it is created.The following asynchronous function uses resolve() to find the path to a chosen file, relative to a specified directory handle.The following asynchronous function opens the save file picker, which returns a FileSystemFileHandle once a file is selected. A writable stream is then created using the FileSystemFileHandle.createWritable() method.A user defined Blob is then written to the stream which is subsequently closed.The following show different examples of options that can be passed into the write() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API"
},
{
	"api_id": "29",
	"name": "File and Directory Entries API",
	"description": "The File and Directory Entries API simulates a local file system that web apps can navigate within and access files in. You can develop apps which read, write, and create files and/or directories in a virtual, sandboxed file system.There are two ways to get access to file systems defined in the current specification draft:The File and Directory Entries API includes the following interfaces:Represents a file system.The basic interface representing a single entry in a file system. This is implemented by other interfaces which represent files or directories.Represents a single file in a file system.Represents a single directory in a file system.Created by calling FileSystemDirectoryEntry.createReader(), this interface provides the functionality which lets you read the contents of a directory.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API"
},
{
	"api_id": "30",
	"name": "Fullscreen API",
	"description": "The Fullscreen API adds methods to present a specific Element (and its descendants) in fullscreen mode, and to exit fullscreen mode once it is no longer needed. This makes it possible to present desired content—such as an online game—using the user's entire screen, removing all browser user interface elements and other applications from the screen until fullscreen mode is shut off.See the article Guide to the Fullscreen API for details on how to use the API.Note: Support for this API varies somewhat across browsers, with many requiring vendor prefixes and/or not implementing the latest specification. See the Browser compatibility section below for details on support for this API. You may wish to consider using a library such as Fscreen for vendor agnostic access to the Fullscreen API.The Fullscreen API has no interfaces of its own. Instead, it augments several other interfaces to add the methods, properties, and event handlers needed to provide fullscreen functionality. These are listed in the following sections.The Fullscreen API adds methods to the Document and Element interfaces to allow turning off and on fullscreen mode.Requests that the user agent switch from fullscreen mode back to windowed mode. Returns a Promise which is resolved once fullscreen mode has been completely shut off.Asks the user agent to place the specified element (and, by extension, its descendants) into fullscreen mode, removing all of the browser's UI elements as well as all other applications from the screen. Returns a Promise which is resolved once fullscreen mode has been activated.The Document interface provides properties that can be used to determine if fullscreen mode is supported and available, and if fullscreen mode is currently active, which element is using the screen.The fullscreenElement property tells you the Element that's currently being displayed in fullscreen mode on the DOM (or shadow DOM). If this is null, the document (or shadow DOM) is not in fullscreen mode.The fullscreenEnabled property tells you whether or not it is possible to engage fullscreen mode. This is false if fullscreen mode is not available for any reason (such as the "fullscreen" feature not being allowed, or fullscreen mode not being supported).A Boolean value which is true if the document has an element currently being displayed in fullscreen mode; otherwise, this returns false.Note: Use the fullscreenElement property on the Document or ShadowRoot instead; if it's not null, then it's an Element currently being displayed in fullscreen mode.The Fullscreen API defines two events which can be used to detect when fullscreen mode is turned on and off, as well as when errors occur during the process of changing between fullscreen and windowed modes.Sent to an Element when it transitions into or out of fullscreen mode.Sent to an Element if an error occurs while attempting to switch it into or out of fullscreen mode.The availability of fullscreen mode can be controlled using Feature Policy. The fullscreen mode feature is identified by the string "fullscreen", with a default allow-list value of "self", meaning that fullscreen mode is permitted in top-level document contexts, as well as to nested browsing contexts loaded from the same origin as the top-most document.See Using Feature Policy to learn more about using Feature Policy to control access to an API.Users can choose to exit fullscreen mode by pressing the ESC (or F11) key, rather than waiting for the site or app to programmatically do so. Make sure you provide, somewhere in your user interface, appropriate user interface elements that inform the user that this option is available to them.Note: Navigating to another page, changing tabs, or switching to another application using any application switcher (or Alt-Tab) will likewise exit fullscreen mode.In this example, a video is presented in a web page. Pressing the Enter key lets the user toggle between windowed and fullscreen presentation of the video.View Live ExampleWhen the page is loaded, this code is run to set up an event listener to watch for the Enter key.This code is called by the event handler above when the user hits the Enter key.This starts by looking at the value of the document's fullscreenElement attribute. In a real-world deployment, at this time, you'll want to check for prefixed versions of this (mozFullScreenElement, msFullscreenElement, or webkitFullscreenElement, for example). If the value is null, the document is currently in windowed mode, so we need to switch to fullscreen mode; otherwise, it's the element that's currently in fullscreen mode. Switching to fullscreen mode is done by calling Element.requestFullscreen() on the <video> element.If fullscreen mode is already active (fullscreenElement is not null), we call exitFullscreen() on the document to shut off fullscreen mode.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"
},
{
	"api_id": "31",
	"name": "Gamepad API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Gamepad API is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way. It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected, and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.Represents a gamepad/controller connected to the computer.Represents a button on one of the connected controllers.The event object representing events fired that are related to gamepads.Represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.Represents the pose of a controller (e.g. position and orientation in 3D space) in the case of a WebVR controller. This is not used by the newer WebXR standard.See also the extensions to the Gamepad interface, for features that allow you to access the above information.An extension to the Navigator object that returns an array of Gamepad objects, one for each connected gamepad.An event that will fire when a gamepad is connected.An event that will fire when a gamepad is disconnected.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API"
},
{
	"api_id": "32",
	"name": "Geolocation API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.WebExtensions that wish to use the Geolocation object must add the "geolocation" permission to their manifest. The user's operating system will prompt the user to allow location access the first time it is requested.You will often want to retrieve a user's location information in your web app, for example to plot their location on a map, or display personalized information relevant to their location.The Geolocation API is accessed via a call to navigator.geolocation; this will cause the user's browser to ask them for permission to access their location data. If they accept, then the browser will use the best available functionality on the device to access this information (for example, GPS).The developer can now access this location information in a couple of different ways:In both cases, the method call takes up to three arguments:For further information on Geolocation usage, read Using the Geolocation API.The main class of this API — contains methods to retrieve the user's current position, watch for changes in their position, and clear a previously-set watch.Represents the position of a user. A GeolocationPosition instance is returned by a successful call to one of the methods contained inside Geolocation, inside a success callback, and contains a timestamp plus a GeolocationCoordinates object instance.Represents the coordinates of a user's position; a GeolocationCoordinates instance contains latitude, longitude, and other important related information.A GeolocationPositionError is returned by an unsuccessful call to one of the methods contained inside Geolocation, inside an error callback, and contains an error code and message.The entry point into the API. Returns a Geolocation object instance, from which all other functionality can be accessed.See Using the Geolocation API for example code.As Wi-Fi-based locating is often provided by Google, the vanilla Geolocation API may be unavailable in China. You may use local third-party providers such as Baidu, Autonavi, or Tencent. These services use the user's IP address and/or a local app to provide enhanced positioning.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"
},
{
	"api_id": "33",
	"name": "The HTML DOM API",
	"description": "The HTML DOM API is made up of the interfaces that define the functionality of each of the elements in HTML, as well as any supporting types and interfaces they rely upon.The functional areas included in the HTML DOM API include:In this article, we'll focus on the parts of the HTML DOM that involve engaging with HTML elements. Discussion of other areas, such as Drag and Drop, WebSockets, Web Storage, etc. can be found in the documentation for those APIs.The Document Object Model (DOM) is an architecture that describes the structure of a document; each document is represented by an instance of the interface Document. A document, in turn, consists of a hierarchical tree of nodes, in which a node is a fundamental record representing a single object within the document (such as an element or text node).Nodes may be strictly organizational, providing a means for grouping other nodes together or for providing a point at which a hierarchy can be constructed; other nodes may represent visible components of a document. Each node is based on the Node interface, which provides properties for getting information about the node as well as methods for creating, deleting, and organizing nodes within the DOM.Nodes don't have any concept of including the content that is actually displayed in the document. They're empty vessels. The fundamental notion of a node that can represent visual content is introduced by the Element interface. An Element object instance represents a single element in a document created using either HTML or an XML vocabulary such as SVG.For example, consider a document with two elements, one of which has two more elements nested inside it:\n  \nWhile the Document interface is defined as part of the DOM specification, the HTML specification significantly enhances it to add information specific to using the DOM in the context of a web browser, as well as to using it to represent HTML documents specifically.Among the things added to Document by the HTML standard are:The Element interface has been further adapted to represent HTML elements specifically by introducing the HTMLElement interface, which all more specific HTML element classes inherit from. This expands the Element class to add HTML-specific general features to the element nodes. Properties added by HTMLElement include for example hidden and innerText. HTMLElement also adds all the global event handlers.An HTML document is a DOM tree in which each of the nodes is an HTML element, represented by the HTMLElement interface. The HTMLElement class, in turn, implements Node, so every element is also a node (but not the other way around). This way, the structural features implemented by the Node interface are also available to HTML elements, allowing them to be nested within each other, created and deleted, moved around, and so forth.The HTMLElement interface is generic, however, providing only the functionality common to all HTML elements such as the element's ID, its coordinates, the HTML making up the element, information about scroll position, and so forth.In order to expand upon the functionality of the core HTMLElement interface to provide the features needed by a specific element, the HTMLElement class is subclassed to add the needed properties and methods. For example, the <canvas> element is represented by an object of type HTMLCanvasElement. HTMLCanvasElement augments the HTMLElement type by adding properties such as height and methods like getContext() to provide canvas-specific features.The overall inheritance for HTML element classes looks like this:\n  \nAs such, an element inherits the properties and methods of all of its ancestors. For example, consider a <a> element, which is represented in the DOM by an object of type HTMLAnchorElement. The element, then, includes the anchor-specific properties and methods described in that class's documentation, but also those defined by HTMLElement and Element, as well as from Node and, finally, EventTarget.Each level defines a key aspect of the utility of the element. From Node, the element inherits concepts surrounding the ability for the element to be contained by another element, and to contain other elements itself. Of special importance is what is gained by inheriting from EventTarget: the ability to receive and handle events such as mouse clicks, play and pause events, and so forth.There are elements that share commonalities and thus have an additional intermediary type. For example, the <audio> and <video> elements both present audiovisual media. The corresponding types, HTMLAudioElement and HTMLVideoElement, are both based upon the common type HTMLMediaElement, which in turn is based upon HTMLElement and so forth. HTMLMediaElement defines the methods and properties held in common between audio and video elements.These element-specific interfaces make up the majority of the HTML DOM API, and are the focus of this article. To learn more about the actual structure of the DOM, see Introduction to the DOM.The features exposed by the HTML DOM are among the most commonly-used APIs in the web developer's arsenal. All but the most simple web applications will use some features of the HTML DOM.The majority of the interfaces that comprise the HTML DOM API map almost one-to-one to individual HTML elements, or to a small group of elements with similar functionality. In addition, the HTML DOM API includes a few interfaces and types to support the HTML element interfaces.These interfaces represent specific HTML elements (or sets of related elements which have the same properties and methods associated with them).These interfaces offer access to the browser window and document that contain the HTML, as well as to the browser's state, available plugins (if any), and various configuration options.These interfaces provide structure and functionality required by the elements used to create and manage forms, including the <form> and <input> elements.These interfaces represent objects used by the Canvas API as well as the <img> element and <picture> elements.The media interfaces provide HTML access to the contents of the media elements: <audio> and <video>.These interfaces are used by the HTML_Drag_and_Drop_API to represent individual draggable (or dragged) items, groups of dragged or draggable items, and to handle the drag and drop process.The History API interfaces let you access information about the browser's history, as well as to shift the browser's current tab forward and backward through that history.These interfaces are used by the Web Components API to create and manage the available custom elements.These supporting object types are used in a variety of ways in the HTML DOM API. In addition, PromiseRejectionEvent represents the event delivered when a JavaScript Promise is rejected.Several interfaces are technically defined in the HTML specification while actually being part of other APIs.The Web_Storage_API provides the ability for websites to store data either temporarily or permanently on the user's device for later re-use.These interfaces are used by the Web_Workers_API both to establish the ability for workers to interact with an app and its content, but also to support messaging between windows or apps.These interfaces, defined by the HTML specification, are used by the WebSockets_API.The EventSource interface represents the source which sent or is sending server-sent events.In this example, an <input> element's input event is monitored in order to update the state of a form's "submit" button based on whether or not a given field currently has a value.This code uses the Document interface's getElementById() method to get the DOM object representing the <input> elements whose IDs are userName and sendButton. With these, we can access the properties and methods that provide information about and grant control over these elements.The HTMLInputElement object for the "Send" button's disabled property is set to true, which disables the "Send" button so it can't be clicked. In addition, the user name input field is made the active focus by calling the focus() method it inherits from HTMLElement.Then addEventListener() is called to add a handler for the input event to the user name input. This code looks at the length of the current value of the input; if it's zero, then the "Send" button is disabled if it's not already disabled. Otherwise, the code ensures that the button is enabled.With this in place, the "Send" button is always enabled whenever the user name input field has a value, and disabled when it's empty.The HTML for the form looks like this:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API"
},
{
	"api_id": "34",
	"name": "HTML Drag and Drop API",
	"description": "HTML Drag and Drop interfaces enable applications to use drag-and-drop features in browsers.The user may select draggable elements with a mouse, drag those elements to a droppable element, and drop them by releasing the mouse button. A translucent representation of the draggable elements follows the pointer during the drag operation.You can customize which elements can become draggable, the type of feedback the draggable elements produce, and the droppable elements.This overview of HTML Drag and Drop includes a description of the interfaces, basic steps to add drag-and-drop support to an application, and an interoperability summary of the interfaces.HTML drag-and-drop uses the DOM event model and drag events inherited from mouse events. A typical drag operation begins when a user selects a draggable element, drags the element to a droppable element, and then releases the dragged element.During drag operations, several event types are fired, and some events might fire many times, such as the drag and dragover events.Each drag event type has an associated global event handler:Note: Neither dragstart nor dragend events are fired when dragging a file into the browser from the OS.The HTML Drag and Drop interfaces are DragEvent, DataTransfer, DataTransferItem and DataTransferItemList.The DragEvent interface has a constructor and one dataTransfer property, which is a DataTransfer object.DataTransfer objects include the drag event's state, such as the type of drag being done (like copy or move), the drag's data (one or more items), and the MIME type of each drag item. DataTransfer objects also have methods to add or remove items to the drag's data.The DragEvent and DataTransfer interfaces should be the only ones needed to add HTML Drag and Drop capabilities to an application. (Firefox supports some Gecko-specific extensions to the DataTransfer object, but those extensions will only work on Firefox.)Each DataTransfer object contains an items property, which is a list of DataTransferItem objects. A DataTransferItem object represents a single drag item, each with a kind property (either string or file) and a type property for the data item's MIME type. The DataTransferItem object also has methods to get the drag item's data.The DataTransferItemList object is a list of DataTransferItem objects. The list object has methods to add a drag item to the list, remove a drag item from the list, and clear the list of all drag items.A key difference between the DataTransfer and DataTransferItem interfaces is that the former uses the synchronous getData() method to access a drag item's data, but the latter instead uses the asynchronous getAsString() method.Note: DragEvent and DataTransfer are broadly supported on desktop browsers. However, the DataTransferItem and DataTransferItemList interfaces have limited browser support. See Interoperability for more information about drag-and-drop interoperability.Mozilla and Firefox support some features not in the standard drag-and-drop model. These are convenience functions to help with dragging multiple items or non-string data (such as files). For more information, see Dragging and Dropping Multiple Items. Additionally, see the DataTransfer reference page for all of the Gecko-specific properties and Gecko-specific methods.This section is a summary of the basic steps to add drag-and-drop functionality to an application.Making an element draggable requires adding the draggable attribute and the ondragstart global event handler, as shown in the following code sample:For more information, see:The application is free to include any number of data items in a drag operation. Each data item is a string of a particular type — typically a MIME type such as text/html.Each drag event has a dataTransfer property that holds the event's data. This property (which is a DataTransfer object) also has methods to manage drag data. The setData() method is used to add an item to the drag data, as shown in the following example.By default, the browser supplies an image that appears beside the pointer during a drag operation. However, an application may define a custom image with the setDragImage() method, as shown in the following example.Learn more about drag feedback images in:The dropEffect property is used to control the feedback the user is given during a drag-and-drop operation. It typically affects which cursor the browser displays while dragging. For example, when the user hovers over a drop target, the browser's cursor may indicate the type of operation that will occur.Three effects may be defined:During the drag operation, drag effects may be modified to indicate that certain effects are allowed at certain locations.The following example shows how to use this property.For more details, see:By default, the browser prevents anything from happening when dropping something onto most HTML elements. To change that behavior so that an element becomes a drop zone or is droppable, the element must have both ondragover and ondrop event handler attributes.The following example shows how to use those attributes, and includes basic event handlers for each attribute.Note that each handler calls preventDefault() to prevent additional event processing for this event (such as touch events or pointer events).For more information, see:The handler for the drop event is free to process the drag data in an application-specific way.Typically, an application uses the getData() method to retrieve drag items and then process them accordingly. Additionally, application semantics may differ depending on the value of the dropEffect and/or the state of modifier keys.The following example shows a drop handler getting the source element's id from the drag data, and then using the id to move the source element to the drop element:For more information, see:At the end of a drag operation, the dragend event fires at the source element — the element that was the target of the drag start.This event fires regardless of whether the drag completed or was canceled. The dragend event handler can check the value of the dropEffect property to determine if the drag operation succeeded or not.For more information about handling the end of a drag operation, see:As can be seen in the DataTransferItem interface's Browser Compatibility table, drag-and-drop interoperability is relatively broad among desktop browsers (except the DataTransferItem and DataTransferItemList interfaces have less support). This data also indicates drag-and-drop support among mobile browsers is very low.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API"
},
{
	"api_id": "35",
	"name": "HTML Sanitizer API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The HTML Sanitizer API allow developers to take untrusted strings of HTML and Document or DocumentFragment objects, and sanitize them for safe insertion into a document's DOM.\n  Web applications often need to work with untrusted HTML on the client side, for example, as part of a client-side templating solution or for rendering user generated content, or when including data in a frame from another site.\n  The Sanitizer API allows for rendering of this potentially untrusted HTML in a safe manner.\n\n  To access the API you would use the Sanitizer() constructor to create and configure a Sanitizer instance.\n  The configuration options parameter allows you to specify the allowed and dis-allowed elements and attributes, and to enable custom elements and comments.\n\n  The most common use-case - preventing XSS - is handled by the default configuration.\n  Creating a Sanitizer() with a custom configuration is necessary only to handle additional, application-specific use cases.\nThe API has three main methods for sanitizing data:The result of parsing a string of HTML depends on the context/the element into which it is inserted.\n  For example, an HTML string containing <td> elements is valid if inserted under a <table> elements, but will be dropped if inserted in a <div> element.\n  Similarly, an <em> element is a valid node in a <div> but the tag will be escaped if used in a <textarea>:\nThe target element must therefore be known when the parser is run and the resulting subtree must be inserted into that same type of element in the DOM, or the result will be incorrect.\n  For this reason when using Sanitizer.sanitizeFor() developers must specify the tag of the eventual target element as a parameter, and the method returns a matching HTML element with the parsed string as a child (for example, the target tag "div" results in a returned object that is an instance of HTMLDivElement).\n  The return type ensures that a user always has the context in which the object must be inserted into the DOM.\nThis consideration does not matter for Element.setHTML() as it is called on a particular element and the context is therefore implicit.\n  The parser may also perform normalization operations on the input string.\n  As a result, even if the HTML is valid and the sanitizer method does nothing, the sanitized output may not precisely match the unsanitized input.\n  This applies to both methods.\nProvides the functionality to define a sanitizer configuration, to sanitize untrusted strings of HTML for later insertion into the DOM, and to sanitize Document and DocumentFragment objects.Parses a string of HTML into a subtree of nodes, sanitizes it using a Sanitizer object, then sets it as a child of the current element.The following examples show how to use the sanitizer API using the default sanitizer (at time of writing configuration operations are not yet supported).The code below demonstrates how Element.setHTML() is used to sanitize a string of HTML and insert it into the Element with an id of target.The script element is disallowed by the default sanitizer so the alert is removed.The example below shows the same sanitization operation using the Sanitizer.sanitizeFor() method, with the intent of later inserting the returned element into a <div> element:\n  Note: If you really must perform a string-to-string operation you can extract the string using innerHTML,\n  but you must remember to use the correct context when the string is applied:\n  To sanitize data from an <iframe> with id userFrame:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API"
},
{
	"api_id": "36",
	"name": "Performance API",
	"description": "The High Resolution Time standard defines a Performance interface that supports client-side latency measurements within applications. The Performance interfaces are considered high resolution because they are accurate to a thousandth of a millisecond (subject to hardware or software constraints). The interfaces support a number of use cases including calculating frame-rates (potentially important in animations) and benchmarking (such as the time to load a resource).Since a platform's system clock is subject to various skews (such as NTP adjustments), the interfaces support a monotonic clock i.e. a clock that is always increasing. As such, the Performance API defines a DOMHighResTimeStamp type rather than using the Date.now() interface.The DOMHighResTimeStamp type, as its name implies, represents a high resolution point in time. This type is a double and is used by the performance interfaces. The value could be a discrete point in time or the difference in time between two discrete points in time.The unit of DOMHighResTimeStamp is milliseconds and should be accurate to 5 µs (microseconds). However, If the browser is unable to provide a time value accurate to 5 microseconds (because, for example, due to hardware or software constraints), the browser can represent the value as a time in milliseconds accurate to a millisecond.The Performance interface has two methods. The now() method returns a DOMHighResTimeStamp whose value that depends on the navigation start and scope. If the scope is a window, the value is the time the browser context was created and if the scope is a worker, the value is the time the worker was created.The toJSON() method returns a serialization of the Performance object, for those attributes that can be serialized.The Performance interface has two properties. The timing property returns a PerformanceTiming object containing latency-related performance information such as the start of navigation time, start and end times for redirects, start and end times for responses, etc.The navigation property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, such as the page was navigated to from history, the page was navigated to by following a link, etc.Provides methods and properties containing timing-related performance information for the given page.Provides methods and properties the encapsulate a single performance metric that is part of the performance timeline.An abstract interface for performance entries with an entry type of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.An abstract interface for performance entries with an entry type of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.Provides methods and properties to store and retrieve high resolution timestamps or metrics regarding the browser's document navigation events.Provides methods and properties used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.Provides methods and properties for retrieving and analyzing detailed network timing data regarding the loading of an application's resources.As shown in the Performance interface's Browser Compatibility table, most of these interfaces are broadly implemented by desktop browsers.To test your browser's support for the Performance interface, run the perf-api-support application.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Performance_API"
},
{
	"api_id": "37",
	"name": "History API",
	"description": "The DOM Window object provides access to the browser's session history (not to be confused for WebExtensions history) through the history object. It exposes useful methods and properties that let you navigate back and forth through the user's history, and manipulate the contents of the history stack.Moving backward and forward through the user's history is done using the back(), forward(), and go() methods.To move backward through history:This acts exactly as if the user clicked on the Back button in their browser toolbar.Similarly, you can move forward (as if the user clicked the Forward button), like this:You can use the go() method to load a specific page from session history, identified by its relative position to the current page. (The current page's relative position is 0.)To move back one page (the equivalent of calling back()):To move forward a page, just like calling forward():Similarly, you can move forward 2 pages by passing 2, and so forth.Another use for the go() method is to refresh the current page by either passing 0, or by invoking it without an argument:You can determine the number of pages in the history stack by looking at the value of the length property:Allows manipulation of the browser session history (that is, the pages visited in the tab or frame that the current page is loaded in).The following example assigns a listener to the onpopstate property. And then illustrates some of the methods of the history object to add, replace, and move within the browser history for the current tab.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/History_API"
},
{
	"api_id": "38",
	"name": "MediaStream Image Capture API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaStream Image Capture API is an API for capturing images or videos from a photographic device. In addition to capturing data, it also allows you to retrieve information about device capabilities such as image size, red-eye reduction and whether or not there is a flash and what they are currently set to. Conversely, the API allows the capabilities to be configured within the constraints what the device allows.The process of retrieving an image or video stream happens as described below. The example code is adapted from Chrome's Image Capture examples.First, get a reference to a device by calling MediaDevices.getUserMedia(). The example below says give me whatever video device is available, though the getUserMedia() method allows more specific capabilities to be requested. This method returns a Promise that resolves with a MediaStream object.Next, isolate the visual part of the media stream. Do this by calling MediaStream.getVideoTracks(). This returns an array of MediaStreamTrack objects. The code below assumes that the first item in the MediaStreamTrack array is the one to use. You can use the properties of the MediaStreamTrack objects to select the one you need.At this point, you might want to configure the device capabilities before capturing an image. You can do this by calling applyConstraints() on the track object before doing anything else.Finally, pass the MediaStreamTrack object to the ImageCapture() constructor. Though a MediaStream holds several types of tracks and provides multiple methods for retrieving them, the ImageCapture constructor will throw a DOMException of type NotSupportedError if MediaStreamTrack.kind is not "video".An interface for capturing images from a photographic device referenced through a valid MediaStreamTrack.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API"
},
{
	"api_id": "39",
	"name": "IndexedDB API",
	"description": "IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data. While Web Storage is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data. IndexedDB provides a solution. This is the main landing page for MDN's IndexedDB coverage — here we provide links to the full API reference and usage guides, browser support details, and some explanation of key concepts.Note: This feature is available in Web WorkersNote: IndexedDB API is powerful, but may seem too complicated for simple cases. If you'd prefer a simple API, try libraries in See also section that make IndexedDB more programmer-friendly.IndexedDB is a transactional database system, like an SQL-based RDBMS. However, unlike SQL-based RDBMSes, which use fixed-column tables, IndexedDB is a JavaScript-based object-oriented database. IndexedDB lets you store and retrieve objects that are indexed with a key; any objects supported by the structured clone algorithm can be stored. You need to specify the database schema, open a connection to your database, and then retrieve and update data within a series of transactions.Note: Like most web storage solutions, IndexedDB follows a same-origin policy. So while you can access stored data within a domain, you cannot access data across different domains.Operations performed using IndexedDB are done asynchronously, so as not to block applications.There are a number of web technologies that store data of one kind or another on the client side (i.e. on your local disk). IndexedDB is most commonly talked about. The process by which the browser works out how much space to allocate to web data storage and what to delete when that limit is reached is not simple, and differs between browsers. Browser storage limits and eviction criteria attempts to explain how this works, at least in the case of Firefox.To get access to a database, call open() on the indexedDB attribute of a window object. This method returns an IDBRequest object; asynchronous operations communicate to the calling application by firing events on IDBRequest objects.Provides access to a database. This is the interface implemented by the global object indexedDB and is therefore the entry point for the API.Represents a request to open a database.Represents a connection to a database. It's the only way to get a transaction on the database.Represents a transaction. You create a transaction on a database, specify the scope (such as which object stores you want to access), and determine the kind of access (read only or readwrite) that you want.Generic interface that handles database requests and provides access to results.Represents an object store that allows access to a set of data in an IndexedDB database, looked up via primary key.Also allows access to a subset of data in an IndexedDB database, but uses an index to retrieve the record(s) rather than the primary key. This is sometimes faster than using IDBObjectStore.Iterates over object stores and indexes.Iterates over object stores and indexes and returns the cursor's current value.Defines a key range that can be used to retrieve data from a database in a certain range.Defines a key range that can be used to retrieve data from a database in a certain range, sorted according to the rules of the locale specified for a certain index (see createIndex()'s optionalParameters.). This interface isn't part of the 2.0 specification.This specification fires events with the following custom interface:The IDBVersionChangeEvent interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"
},
{
	"api_id": "40",
	"name": "Intersection Observer API",
	"description": "The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.Historically, detecting visibility of an element, or the relative visibility of two elements in relation to each other, has been a difficult task for which solutions have been unreliable and prone to causing the browser and the sites the user is accessing to become sluggish. As the web has matured, the need for this kind of information has grown. Intersection information is needed for many reasons, such as:Implementing intersection detection in the past involved event handlers and loops calling methods like Element.getBoundingClientRect() to build up the needed information for every element affected. Since all this code runs on the main thread, even one of these can cause performance problems. When a site is loaded with these tests, things can get downright ugly.Consider a web page that uses infinite scrolling. It uses a vendor-provided library to manage the advertisements placed periodically throughout the page, has animated graphics here and there, and uses a custom library that draws notification boxes and the like. Each of these has its own intersection detection routines, all running on the main thread. The author of the web site may not even realize this is happening, since they may know very little about the inner workings of the two libraries they are using. As the user scrolls the page, these intersection detection routines are firing constantly during the scroll handling code, resulting in an experience that leaves the user frustrated with the browser, the web site, and their computer.The Intersection Observer API lets code register a callback function that is executed whenever an element they wish to monitor enters or exits another element (or the viewport), or when the amount by which the two intersect changes by a requested amount. This way, sites no longer need to do anything on the main thread to watch for this kind of element intersection, and the browser is free to optimize the management of intersections as it sees fit.One thing the Intersection Observer API can't tell you: the exact number of pixels that overlap or specifically which ones they are; however, it covers the much more common use case of "If they intersect by somewhere around N%, I need to do something."The Intersection Observer API allows you to configure a callback that is called when either of these circumstances occur:Typically, you'll want to watch for intersection changes with regard to the target element's closest scrollable ancestor, or, if the target element isn't a descendant of a scrollable element, the device's viewport. To watch for intersection relative to the device's viewport, specify null for root option. Keep reading for a more detailed explanation about intersection observer options.Whether you're using the viewport or some other element as the root, the API works the same way, executing a callback function you provide whenever the visibility of the target element changes so that it crosses desired amounts of intersection with the root.The degree of intersection between the target element and its root is the intersection ratio. This is a representation of the percentage of the target element which is visible as a value between 0.0 and 1.0.Create the intersection observer by calling its constructor and passing it a callback function to be run whenever a threshold is crossed in one direction or the other:A threshold of 1.0 means that when 100% of the target is visible within the element specified by the root option, the callback is invoked.The options object passed into the IntersectionObserver() constructor let you control the circumstances under which the observer's callback is invoked. It has the following fields:The element that is used as the viewport for checking visibility of the target. Must be the ancestor of the target. Defaults to the browser viewport if not specified or if null.Margin around the root. Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left). The values can be percentages. This set of values serves to grow or shrink each side of the root element's bounding box before computing intersections. Defaults to all zeros.Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed. If you only want to detect when visibility passes the 50% mark, you can use a value of 0.5. If you want the callback to run every time visibility passes another 25%, you would specify the array [0, 0.25, 0.5, 0.75, 1]. The default is 0 (meaning as soon as even one pixel is visible, the callback will be run). A value of 1.0 means that the threshold isn't considered passed until every pixel is visible.Once you have created the observer, you need to give it a target element to watch:Whenever the target meets a threshold specified for the IntersectionObserver, the callback is invoked. The callback receives a list of IntersectionObserverEntry objects and the observer:The list of entries received by the callback includes one entry for each target which reported a change in its intersection status. Check the value of the isIntersecting property to see if the entry represents an element that currently intersects with the root.Be aware that your callback is executed on the main thread. It should operate as quickly as possible; if anything time-consuming needs to be done, use Window.requestIdleCallback().Also, note that if you specified the root option, the target must be a descendant of the root element.All areas considered by the Intersection Observer API are rectangles; elements which are irregularly shaped are considered as occupying the smallest rectangle which encloses all of the element's parts. Similarly, if the visible portion of an element is not rectangular, the element's intersection rectangle is considered to be the smallest rectangle that contains all the visible portions of the element.It's useful to understand a bit about how the various properties provided by IntersectionObserverEntry describe an intersection.Before we can track the intersection of an element with a container, we need to know what that container is. That container is the intersection root, or root element. This can be either a specific element in the document which is an ancestor of the element to be observed, or null to use the document's viewport as the container.The root intersection rectangle is the rectangle used to check against the target or targets. This rectangle is determined like this:The root intersection rectangle can be adjusted further by setting the root margin, rootMargin, when creating the IntersectionObserver. The values in rootMargin define offsets added to each side of the intersection root's bounding box to create the final intersection root bounds (which are disclosed in IntersectionObserverEntry.rootBounds when the callback is executed).Rather than reporting every infinitesimal change in how much a target element is visible, the Intersection Observer API uses thresholds. When you create an observer, you can provide one or more numeric values representing percentages of the target element which are visible. Then, the API only reports changes to visibility which cross these thresholds.For example, if you want to be informed every time a target's visibility passes backward or forward through each 25% mark, you would specify the array [0, 0.25, 0.5, 0.75, 1] as the list of thresholds when creating the observer.When the callback is invoked, it receives a list of IntersectionObserverEntry objects, one for each observed target which has had the degree to which it intersects the root change such that the amount exposed crosses over one of the thresholds, in either direction.You can see if the target currently intersects the root by looking at the entry's isIntersecting property; if its value is true, the target is at least partially intersecting the root element or document. This lets you determine whether the entry represents a transition from the elements intersecting to no longer intersecting or a transition from not intersecting to intersecting.Note that it's possible to have a non-zero intersection rectangle, which can happen if the intersection is exactly along the boundary between the two or the area of boundingClientRect is zero. This state of the target and root sharing a boundary line is not considered enough to be considered transitioning into an intersecting state.To get a feeling for how thresholds work, try scrolling the box below around. Each colored box within it displays the percentage of itself that's visible in all four of its corners, so you can see these ratios change over time as you scroll the container. Each box has a different set of thresholds:The browser computes the final intersection rectangle as follows; this is all done for you, but it can be helpful to understand these steps in order to better grasp exactly when intersections will occur.When the amount of a target element which is visible within the root element crosses one of the visibility thresholds, the IntersectionObserver object's callback is executed. The callback receives as input an array of all of IntersectionObserverEntry objects, one for each threshold which was crossed, and a reference to the IntersectionObserver object itself.Each entry in the list of thresholds is an IntersectionObserverEntry object describing one threshold that was crossed; that is, each entry describes how much of a given element is intersecting with the root element, whether or not the element is considered to be intersecting or not, and the direction in which the transition occurred.The code snippet below shows a callback which keeps a counter of how many times elements transition from not intersecting the root to intersecting by at least 75%. For a threshold value of 0.0 (default) the callback is called approximately upon transition of the boolean value of isIntersecting. The snippet thus first checks that the transition is a positive one, then determines whether intersectionRatio is above 75%, in which case it increments the counter.The primary interface for the Intersection Observer API. Provides methods for creating and managing an observer which can watch any number of target elements for the same intersection configuration. Each observer can asynchronously observe changes in the intersection between one or more target elements and a shared ancestor element or with their top-level Document's viewport. The ancestor or viewport is referred to as the root.Describes the intersection between the target element and its root container at a specific moment of transition. Objects of this type can only be obtained in two ways: as an input to your IntersectionObserver callback, or by calling IntersectionObserver.takeRecords().This simple example causes a target element to change its color and transparency as it becomes more or less visible. At Timing element visibility with the Intersection Observer API, you can find a more extensive example showing how to time how long a set of elements (such as ads) are visible to the user and to react to that information by recording statistics or by updating elements.The HTML for this example is very short, with a primary element which is the box that we'll be targeting (with the creative ID "box") and some contents within the box.The CSS isn't terribly important for the purposes of this example; it lays out the element and establishes that the background-color and border attributes can participate in CSS transitions, which we'll use to affect the changes to the element as it becomes more or less obscured.Finally, let's take a look at the JavaScript code that uses the Intersection Observer API to make things happen.First, we need to prepare some variables and install the observer.The constants and variables we set up here are:A constant which indicates how many thresholds we want to have between a visibility ratio of 0.0 and 1.0.This variable will be used to record what the visibility ratio was the last time a threshold was crossed; this will let us figure out whether the target element is becoming more or less visible.A string defining a color we'll apply to the target element when the visibility ratio is increasing. The word "ratio" in this string will be replaced with the target's current visibility ratio, so that the element not only changes color but also becomes increasingly opaque as it becomes less obscured.Similarly, this is a string defining a color we'll apply when the visibility ratio is decreasing.We call Window.addEventListener() to start listening for the load event; once the page has finished loading, we get a reference to the element with the ID "box" using querySelector(), then call the createObserver() method we'll create in a moment to handle building and installing the intersection observer.The createObserver() method is called once page load is complete to handle actually creating the new IntersectionObserver and starting the process of observing the target element.This begins by setting up an options object containing the settings for the observer. We want to watch for changes in visibility of the target element relative to the document's viewport, so root is null. We need no margin, so the margin offset, rootMargin, is specified as "0px". This causes the observer to watch for changes in the intersection between the target element's bounds and those of the viewport, without any added (or subtracted) space.The list of visibility ratio thresholds, threshold, is constructed by the function buildThresholdList(). The threshold list is built programmatically in this example since there are a number of them and the number is intended to be adjustable.Once options is ready, we create the new observer, calling the IntersectionObserver() constructor, specifying a function to be called when intersection crosses one of our thresholds, handleIntersect(), and our set of options. We then call observe() on the returned observer, passing into it the desired target element.We could opt to monitor multiple elements for visibility intersection changes with respect to the viewport by calling observer.observe() for each of those elements, if we wanted to do so.The buildThresholdList() function, which builds the list of thresholds, looks like this:This builds the array of thresholds—each of which is a ratio between 0.0 and 1.0, by pushing the value i/numSteps onto the thresholds array for each integer i between 1 and numSteps. It also pushes 0 to include that value. The result, given the default value of numSteps (20), is the following list of thresholds:We could, of course, hard-code the array of thresholds into our code, and often that's what you'll end up doing. But this example leaves room for adding configuration controls to adjust the granularity, for example.When the browser detects that the target element (in our case, the one with the ID "box") has been unveiled or obscured such that its visibility ratio crosses one of the thresholds in our list, it calls our handler function, handleIntersect():For each IntersectionObserverEntry in the list entries, we look to see if the entry's intersectionRatio is going up; if it is, we set the target's background-color to the string in increasingColor (remember, it's "rgba(40,
	40,
	190, ratio)"), replaces the word "ratio" with the entry's intersectionRatio. The result: not only does the color get changed, but the transparency of the target element changes, too; as the intersection ratio goes down, the background color's alpha value goes down with it, resulting in an element that's more transparent.Similarly, if the intersectionRatio is going down, we use the string decreasingColor and replace the word "ratio" in that with the intersectionRatio before setting the target element's background-color.Finally, in order to track whether the intersection ratio is going up or down, we remember the current ratio in the variable prevRatio.Below is the resulting content. Scroll this page up and down and notice how the appearance of the box changes as you do so.There's an even more extensive example at Timing element visibility with the Intersection Observer API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"
},
{
	"api_id": "41",
	"name": "Layout Instability API",
	"description": "The Layout Instability API provides interfaces for measuring and reporting layout shifts.A layout shift happens when any element that is visible in the viewport changes its start position between two frames. These elements are described as being unstable, and contribute to a poor Cumulative Layout Shift (CLS) score, indicating a lack of visual stability.The Layout Instability API provides a way to measure and report on these layout shifts. All tools for debugging layout shifts, including those in DevTools, use this API. The API can also be used to observe and debug layout shifts by logging the information to the console, to send the data to a server endpoint, or to Google Analytics.Provides insights into the stability of web pages based on movements of the elements on the page.Provides debugging information about elements which have shifted.The following example observes all layout shifts, and prints them to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Layout_Instability_API"
},
{
	"api_id": "42",
	"name": "Long Tasks API",
	"description": "\n  The experimental Long Tasks API gives us visibility into tasks that take 50 milliseconds or more.\n  The 50 ms threshold comes from the RAIL Model, in particular the "Response: process events in under 50 ms" section.\nTasks that block the main thread for 50 ms or more cause, among other issues:Some key terms or ideas that are utilized by the Long Tasks API.Any uninterrupted period where the main UI thread is busy for 50 ms or longer. Common examples include:The "culprit browsing context container", or "the container" for short, is the top level page, iframe, embed or object that the task occurred within.A list of containers that the task occurred within. For tasks that don't occur within the top level page, the containerId, containerName and containerSrc fields may provide information as to the source of the task.Reports instances of long tasks.Returns information about the work involved in a long task and its associate frame context.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Long_Tasks_API"
},
{
	"api_id": "43",
	"name": "Media Capabilities API",
	"description": "The Media Capabilities API allows developers to determine decoding and encoding abilities of the device, exposing information such as whether media is supported and whether playback should be smooth and power efficient, with real time feedback about playback to better enable adaptive streaming, and access to display property information.This example defines an audio configuration then checks to see if the user agent supports decoding that media configuration, and whether it will perform well in terms of smoothness and power efficiency.There are a myriad of video and audio codecs. Different browsers support different media types and new media types are always being developed. With the Media Capabilities API, developers can ensure each user is getting the best bitrate and storage savings for their browser, device, and OS capabilities.Whether a device uses hardware or software decoding impacts how smooth and power efficient the video decoding is and how efficient the playback will be. The Media Capabilities API enables determining which codecs are supported and how performant a media file will be both in terms of smoothness and power efficiency.The Media Capabilities API provide more powerful features than say MediaRecorder.isTypeSupported() or HTMLMediaElement.canPlayType(), which only address general browser support, not performance. The API also provides abilities to access display property information such as supported color gamut, dynamic range abilities, and real-time feedback about the playback.To test support, smoothness, and power efficiency of a video or audio file, you use the MediaCapabilities interface's encodingInfo() and decodingInfo() methods.Media capabilities information enables websites to enable adaptive streaming to alter the quality of content based on actual user-perceived quality, and react to a pick of CPU/GPU usage in real time.Provides information about the decoding abilities of the device, system and browser based on codecs, profile, resolution, and bitrates. The information can be used to serve optimal media streams to the user and determine if playback should be smooth and power efficient .Will describe the color gamut, or the range of color, the screen can display (not currently supported anywhere).Will describe the known luminance characteristics of the screen (not currently supported anywhere).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API"
},
{
	"api_id": "44",
	"name": "Media Capture and Streams API (Media Stream)",
	"description": "The Media Capture and Streams API, often called the Media Streams API or MediaStream API, is an API related to WebRTC which provides support for streaming audio and video data.It provides the interfaces and methods for working with the streams and their constituent tracks, the constraints associated with data formats, the success and error callbacks when using the data asynchronously, and the events that are fired during the process.The API is based on the manipulation of a MediaStream object representing a flux of audio- or video-related data. See an example in Get the media stream.A MediaStream consists of zero or more MediaStreamTrack objects, representing various audio or video tracks. Each MediaStreamTrack may have one or more channels. The channel represents the smallest unit of a media stream, such as an audio signal associated with a given speaker, like left or right in a stereo audio track.MediaStream objects have a single input and a single output. A MediaStream object generated by getUserMedia() is called local, and has as its source input one of the user's cameras or microphones. A non-local MediaStream may be representing a media element, like <video> or <audio>, a stream originating over the network, and obtained via the WebRTC RTCPeerConnection API, or a stream created using the Web Audio API MediaStreamAudioDestinationNode.The output of the MediaStream object is linked to a consumer. It can be a media element, like <audio> or <video>, the WebRTC RTCPeerConnection API or a Web Audio API MediaStreamAudioSourceNode.In these reference articles, you'll find the fundamental information you'll need to know about each of the interfaces that make up the Media Capture and Streams API.Early versions of the Media Capture and Streams API specification included separate AudioStreamTrack and VideoStreamTrack interfaces—each based upon MediaStreamTrack—which represented streams of those types. These no longer exist, and you should update any existing code to instead use MediaStreamTrack directly.The Capabilities, constraints, and settings article discusses the concepts of constraints and capabilities, as well as media settings, and includes a Constraint Exerciser that lets you experiment with the results of different constraint sets being applied to the audio and video tracks coming from the computer's A/V input devices (such as its webcam and microphone).The Taking still photos with getUserMedia() article shows how to use getUserMedia() to access the camera on a computer or mobile phone with getUserMedia() support and take a photo with it.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API"
},
{
	"api_id": "45",
	"name": "Media Session API",
	"description": "The Media Session API provides a way to customize media notifications. It does this by providing metadata for display by the user agent for the media your web app is playing.It also provides action handlers that the browser can use to access platform media keys such as hardware keys found on keyboards, headsets, remote controls, and software keys found in notification areas and on lock screens of mobile devices. So you can seamlessly control web-provided media via your device, even when not looking at the web page.The aim is to allow users to know what's playing and to control it, without needing to open the specific page that launched it. To be able to support the Media Session API, a browser first needs a mechanism by which to access and be controlled by the OS-level media controls (such as Firefox's MediaControl).The MediaMetadata interface lets a web site provide rich metadata to the platform UI for media that is playing. This metadata includes the title, artist (creator) name, album (collection), and artwork. The platform can show this metadata in media centers, notifications, device lockscreens, etc.The MediaSession interface lets users control playback of media through user-agent defined interface elements. Interaction with these elements triggers action handlers in the web page, playing the media. Since multiple pages may be simultaneously using this API, the user agent is responsible for calling the correct page's action handlers. The user agent provides default behaviors, when no page-defined behavior is available.The primary interface for the Media Session API is the MediaSession interface. Rather than creating your own MediaSession instance, you access the API using the navigator.mediaSession property. For example, to set the current state of the media session to playing:Allows a web page to provide rich media metadata for display in a platform UI.Allows a web page to provide custom behaviors for standard media playback interactions.A MediaImage object contains information describing an image associated with the media. This might be a CD or DVD cover, a movie poster, a poster frame, or the like.The following example shows feature detection for the Media Session API. It then instantiates a metadata object for the session, and adds action handlers for the user control actions:Some user agents disable autoplay for media elements on mobile devices and require a user gesture to start media. The following example adds a pointerup event to an on-page play button, which is then used to kick off the media session code:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Media_Session_API"
},
{
	"api_id": "46",
	"name": "Media Source API",
	"description": "The Media Source API, formally known as Media Source Extensions (MSE), provides functionality enabling plugin-free web-based streaming media. Using MSE, media streams can be created via JavaScript, and played using <audio> and <video> elements.Playing video and audio has been available in web applications without plugins for a few years now, but the basic features offered have really only been useful for playing single whole tracks. We can't, for example, combine/split arraybuffers. Streaming media has up until recently been the domain of Flash, with technologies like Flash Media Server serving video streams using the RTMP protocol.With Media Source Extensions (MSE), this is changing. MSE allows us to replace the usual single track src value fed to media elements with a reference to a MediaSource object, which is a container for information like the ready state of the media for being played, and references to multiple SourceBuffer objects that represent the different chunks of media that make up the entire stream. MSE gives us finer grained control over how much and how often content is fetched, and some control over memory usage details, such as when buffers are evicted. It lays the groundwork for adaptive bitrate streaming clients (such as those using DASH or HLS) to be built on its extensible API.Creating assets that work with MSE in modern browsers is a laborious process, taking significant time, computing power, and energy. The usage of external utilities to massage the content into a suitable format is required. While browser support for the various media containers with MSE is spotty, usage of the H.264 video codec, AAC audio codec, and MP4 container format is a common baseline. MSE also provides an API for runtime detection of container and codec support.If you do not require explicit control of video quality over time, the rate at which content is fetched, or the rate at which memory is evicted, then the <video> and <source> tags may well be a simple and adequate solution.Dynamic Adaptive Streaming over HTTP (DASH) is a protocol for specifying how adaptive content should be fetched. It is effectively a layer built on top of MSE for building adaptive bitrate streaming clients. While there are other protocols available (such as HTTP Live Streaming (HLS)), DASH has the most platform support.DASH moves lots of logic out of the network protocol and into the client side application logic, using the simpler HTTP protocol to fetch files. Indeed, one can support DASH with a simple static file server, which is also great for CDNs. This is in direct contrast with previous streaming solutions that required expensive licenses for proprietary non-standard client/server protocol implementations.The two most common use cases for DASH involve watching content "on demand" or "live." On demand allows a developer to take their time transcoding the assets into multiple resolutions of various quality.Live profile content can introduce latency due to its transcoding and broadcasting, so DASH is not suitable for real time communication like WebRTC is. It can however support significantly more client connections than WebRTC.There are numerous available free and open source tools for transcoding content and preparing it for use with DASH, DASH file servers, and DASH client libraries written in JavaScript.Represents a media source to be played via an HTMLMediaElement object.Represents a chunk of media to be passed into an HTMLMediaElement via a MediaSource object.A simple container list for multiple SourceBuffer objects.Contains information about the quality of video being played by a <video> element, such as number of dropped or corrupted frames. Returned by the HTMLVideoElement.getVideoPlaybackQuality() method.Creates an object URL pointing to a MediaSource object that can then be specified as the src value of an HTML media element to play a media stream.When a MediaSource object is played by an HTML media element, this property will return a TimeRanges object that contains the time ranges that the user is able to seek to.Returns a VideoPlaybackQuality object for the currently played video.Returns the SourceBuffer that created the track in question.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API"
},
{
	"api_id": "47",
	"name": "MediaStream Recording API",
	"description": "The MediaStream Recording API, sometimes referred to as the Media Recording API or the MediaRecorder API, is closely affiliated with the Media Capture and Streams API and the WebRTC API. The MediaStream Recording API makes it possible to capture the data generated by a MediaStream or HTMLMediaElement object for analysis, processing, or saving to disk. It's also surprisingly easy to work with.The MediaStream Recording API is comprised of a single major interface, MediaRecorder, which does all the work of taking the data from a MediaStream and delivering it to you for processing. The data is delivered by a series of dataavailable events, already in the format you specify when creating the MediaRecorder. You can then process the data further or write it to file as desired.The process of recording a stream is simple:Note: Individual Blobs containing slices of the recorded media will not necessarily be individually playable. The media needs to be reassembled before playback.If anything goes wrong during recording, an error event is sent to the MediaRecorder. You can listen for error events by setting up a onerror event handler.Example here, we use an HTML Canvas as source of the MediaStream, and stop recording after 9 seconds.You can also use the properties of the MediaRecorder object to determine the state of the recording process, and its pause() and resume() methods to pause and resume recording of the source media.If you need or want to check to see if a specific MIME type is supported, that's possible as well. Just call MediaRecorder.isTypeSupported().If your goal is to record camera and/or microphone input, you may wish to examine the available input devices before beginning the process of constructing the MediaRecorder. To do so, you'll need to call navigator.mediaDevices.enumerateDevices() to get a list of the available media devices. You can then examine that list and identify the potential input sources, and even filter the list based on desired criteria.In this code snippet, enumerateDevices() is used to examine the available input devices, locate those which are audio input devices, and create <option> elements that are then added to a <select> element representing an input source picker.Code similar to this can be used to let the user restrict the set of devices they wish to use.To learn more about using the MediaStream Recording API, see Using the MediaStream Recording API, which shows how to use the API to record audio clips. A second article, Recording a media element, describes how to receive a stream from an <audio> or <video> element and use the captured stream (in this case, recording it and saving it to a local disk).Each time a chunk of media data is finished being recorded, it's delivered to consumers in Blob form using a BlobEvent of type dataavailable.The primary interface that implements the MediaStream Recording API.The interface that represents errors thrown by the MediaStream Recording API. Its error property is a DOMException that specifies that error occurred.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API"
},
{
	"api_id": "48",
	"name": "Navigation Timing API",
	"description": "The Navigation Timing API provides data that can be used to measure the performance of a web site. Unlike JavaScript-based libraries that have historically been used to collect similar information, the Navigation Timing API can be much more accurate and reliable.Note: This article currently describes Navigation Timing Level 1. There is a specification for Level 2, but it is not yet covered here.You can use the Navigation Timing API to gather performance data on the client side, which you can then transmit to a server using XMLHttpRequest or other techniques.This API lets you measure data that was previously difficult to obtain, such as the amount of time needed to unload the previous page, how long domain lookups take, the total time spent executing the window's load handler, and so forth.The window.performance property returns a Performance object. While this interface is defined by the High Resolution Time API, the Navigation Timing API adds two properties: timing and navigation, of the types below.Provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.Used as the type for the value of timing, objects of this type contain timing information that can provide insight into web page performance.The type used to return the value of navigation, which contains information explaining the context of the load operation described by this Performance instance.The Navigation Timing API can be used to gather performance data on the client side to be sent to a server via XHR as well as measure data that was very difficult to measure by other means such as time to unload a previous page, domain look up time, window.onload total time, etc.To compute the total amount of time it took to load the page, you can use the following code:This subtracts the time at which navigation began (navigationStart) from the time at which the load event handler returns (loadEventEnd). This gives you the perceived page load time.You can calculate the time elapsed between the beginning of a request and the completion of getting the response using code like this:Here, the time at which the request was initiated (requestStart). from the time at which the response was finished being received (responseEnd).As another example of an interesting piece of data you can obtain using the Navigation Timing API that you can't otherwise easily get, you can get the amount of time it took to render the page:This is obtained by starting with the time at which loading of the DOM and its dependencies is complete (domComplete) and subtracting from it the time at which parsing of the DOM began (domLoading).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API"
},
{
	"api_id": "49",
	"name": "Network Information API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The Network Information API provides information about the system's connection in terms of general connection type (e.g., 'wifi, 'cellular', etc.).\n  This can be used to select high definition content or low definition content based on the user's connection.\nThe interface consists of a single NetworkInformation object, an instance of which is returned by the Navigator.connection property.Note: This feature is available in Web WorkersProvides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes. The NetworkInformation interface cannot be instantiated. It is instead accessed through the Navigator interface.This example watches for changes to the user's connection.The connection object is useful for deciding whether to preload resources that take large amounts of bandwidth or memory. This example would be called soon after page load to check for a connection type where preloading a video may not be desirable. If a cellular connection is found, then the preloadVideo flag is set to false. For simplicity and clarity, this example only tests for one connection type. A real-world use case would likely use a switch statement or some other method to check all of the possible values of NetworkInformation.type. Regardless of the type value you can get an estimate of connection speed through the NetworkInformation.effectiveType property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API"
},
{
	"api_id": "50",
	"name": "Page Visibility API",
	"description": "The Page Visibility API provides events you can watch for to know when a document becomes visible or hidden, as well as features to look at the current visibility state of the page.Note: The Page Visibility API is especially useful for saving resources and improving performance by letting a page avoid performing unnecessary tasks when the document isn't visible.When the user minimizes the window or switches to another tab, the API sends a visibilitychange event to let listeners know the state of the page has changed. You can detect the event and perform some actions or behave differently. For example, if your web app is playing a video, it can pause the video when the user puts the tab into the background, and resume playback when the user returns to the tab. The user doesn't lose their place in the video, the video's soundtrack doesn't interfere with audio in the new foreground tab, and the user doesn't miss any of the video in the meantime.Visibility states of an <iframe> are the same as the parent document. Hiding an <iframe> using CSS properties (such as display: none;) doesn't trigger visibility events or change the state of the document contained within the frame.Let's consider a few use cases for the Page Visibility API.Developers have historically used imperfect proxies to detect this. For example, watching for blur and focus events on the window helps you know when your page is not the active page, but it does not tell you that your page is actually hidden to the user. The Page Visibility API addresses this.Note: While onblur and onfocus will tell you if the user switches windows, it doesn't necessarily mean it's hidden. Pages only become hidden when the user switches tabs or minimizes the browser window containing the tab.Separately from the Page Visibility API, user agents typically have a number of policies in place to mitigate the performance impact of background or hidden tabs. These may include:Some processes are exempt from this throttling behavior. In these cases, you can use the Page Visibility API to reduce the tabs' performance impact while they're hidden.View live example (video with sound).The example, which pauses the video when you switch to another tab and plays again when you return to its tab, was created with the following code:The Page Visibility API adds the following properties to the Document interface:Returns true if the page is in a state considered to be hidden to the user, and false otherwise.A string indicating the document's current visibility state. Possible values are:The page content may be at least partially visible. In practice this means that the page is the foreground tab of a non-minimized window.The page's content is not visible to the user, either due to the document's tab being in the background or part of a window that is minimized, or because the device's screen is off.The page's content is being prerendered and is not visible to the user. A document may start in the prerender state, but will never switch to this state from any other state, since a document can only prerender once.Note: Not all browsers support prerendering.The page is in the process of being unloaded from memory.Note: Not all browsers support the unloaded value.The Page Visibility API adds the following events to the Document interface:Fired when the content of a tab has become visible or has been hidden.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API"
},
{
	"api_id": "51",
	"name": "Payment Request API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Payment Request API provides a consistent user experience for both merchants and users. It is not a new way for paying for things; rather, it's a way for users to select their preferred way of paying for things, and make that information available to a merchant.Many problems related to online shopping-cart abandonment can be traced to checkout forms, which can be difficult and time consuming to fill out and often require multiple steps to complete. The Payment Request API is meant to reduce the number of steps needed to complete a payment online, potentially doing away with checkout forms. It aims to make the checkout process easier, by having payment apps store a user's details, which are then passed along to a merchant, hopefully without requiring an HTML form.To request a payment, a web page creates a PaymentRequest object in response to a user action that initiates a payment, such as clicking a "Purchase" button. The PaymentRequest allows the web page to exchange information with the user agent while the user provides input to complete the transaction.You can find a complete guide in Using the Payment Request API.Note: The API is available inside cross-origin <iframe> elements only if they have had the allowpaymentrequest attribute set on them.An object that contains address information; used for billing and shipping addresses, for example.An object that provides the API for creating and managing the user agent's payment interface.An event delivered to a payment handler when a PaymentRequest is made.Enables the web page to update the details of the payment request in response to a user action.Represents the user changing payment instrument (e.g., switching from one payment method to another).An object returned after the user selects a payment method and approves a payment request.Represents the browser requiring the merchant (website) to validate themselves as allowed to use a particular payment handler (e.g., registered as allowed to use Apple Pay).A dictionary containing strings providing descriptive explanations of any errors in any PaymentAddress entries which have errors.An object describing changes that need to be made to the payment details in the event that the server needs to update information following the instantiation of the payment interface but before the user begins to interact with it.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API"
},
{
	"api_id": "52",
	"name": "Performance API",
	"description": "The High Resolution Time standard defines a Performance interface that supports client-side latency measurements within applications. The Performance interfaces are considered high resolution because they are accurate to a thousandth of a millisecond (subject to hardware or software constraints). The interfaces support a number of use cases including calculating frame-rates (potentially important in animations) and benchmarking (such as the time to load a resource).Since a platform's system clock is subject to various skews (such as NTP adjustments), the interfaces support a monotonic clock i.e. a clock that is always increasing. As such, the Performance API defines a DOMHighResTimeStamp type rather than using the Date.now() interface.The DOMHighResTimeStamp type, as its name implies, represents a high resolution point in time. This type is a double and is used by the performance interfaces. The value could be a discrete point in time or the difference in time between two discrete points in time.The unit of DOMHighResTimeStamp is milliseconds and should be accurate to 5 µs (microseconds). However, If the browser is unable to provide a time value accurate to 5 microseconds (because, for example, due to hardware or software constraints), the browser can represent the value as a time in milliseconds accurate to a millisecond.The Performance interface has two methods. The now() method returns a DOMHighResTimeStamp whose value that depends on the navigation start and scope. If the scope is a window, the value is the time the browser context was created and if the scope is a worker, the value is the time the worker was created.The toJSON() method returns a serialization of the Performance object, for those attributes that can be serialized.The Performance interface has two properties. The timing property returns a PerformanceTiming object containing latency-related performance information such as the start of navigation time, start and end times for redirects, start and end times for responses, etc.The navigation property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, such as the page was navigated to from history, the page was navigated to by following a link, etc.Provides methods and properties containing timing-related performance information for the given page.Provides methods and properties the encapsulate a single performance metric that is part of the performance timeline.An abstract interface for performance entries with an entry type of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.An abstract interface for performance entries with an entry type of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.Provides methods and properties to store and retrieve high resolution timestamps or metrics regarding the browser's document navigation events.Provides methods and properties used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.Provides methods and properties for retrieving and analyzing detailed network timing data regarding the loading of an application's resources.As shown in the Performance interface's Browser Compatibility table, most of these interfaces are broadly implemented by desktop browsers.To test your browser's support for the Performance interface, run the perf-api-support application.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Performance_API"
},
{
	"api_id": "53",
	"name": "Performance Timeline",
	"description": "The Performance Timeline API defines extensions to the Performance interface to support client-side latency measurements within applications. The extensions provide interfaces to retrieve performance entry metrics based on specific filter criteria. The standard also includes interfaces that allow an application to define performance observer callbacks that are notified when specific performance events are added to the browser's performance timeline.This document provides an overview of the standard's interfaces. For more details about the interfaces, see the reference pages and Using Performance Timeline.Note: This feature is available in Web WorkersThe Performance Timeline API extends the Performance interface with three methods that provide different mechanisms to get a set of performance records (metrics), depending on the specified filter criteria. The methods are:Returns all recorded performance entries or, optionally, the entries based on the specified name, performance type and/or the initiatorType (such as an HTML element).Returns the recorded performance entries based on the specified name and optionally the performance type.Returns the recorded performance entries based on the specified performance type.The PerformanceEntry interface encapsulates a single performance entry — that is, a single data point or metric in the performance timeline. This interface has the following four properties, and these properties are extended (with additional constraints) by other interfaces (such as PerformanceMark):The name of the performance entry when the metric was created.The type of performance metric (for example, "mark").A high resolution timestamp representing the starting time for the performance entry.A high resolution timestamp representing the time value of the duration of the performance event. (Some performance entry types have no concept of duration and this value is set to '0' for such types.)This interface includes a toJSON() method that returns the serialization of the PerformanceEntry object. The serialization is specific to the performance entry's type.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The performance observer interfaces allow an application to register an observer for specific performance event types, and when one of those event types is recorded, the application is notified of the event via the observer's callback function that was specified when the observer was created.When the observer (callback) is invoked, the callback's parameters include a performance observer entry list that contains only observed performance entries. That is, the list contains entries only for the event types that were specified when the observer's observe() method was invoked. The performance observer entry list interface has the same three getEntries*() methods as the Performance interface. However, note there is one key difference with these methods; the performance observer entry list versions are used to retrieve observed performance entries within the observer callback.Besides the PerformanceObserver's interface's observe() method (which is used to register the entry types to observe), the PerformanceObserver interface also has a disconnect() method that stops an observer from receiving further events.Performance observers were added to the Level 2 version of the standard and were not widely implemented.A summary of the interfaces' implementation status is provided below, including a link to more detailed information.To test your browser's support for these interfaces, run the perf-api-support application.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Performance_Timeline"
},
{
	"api_id": "54",
	"name": "Web Periodic Background Synchronization API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Web Periodic Background Synchronization API provides a way to register tasks to be run in a service worker at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests.The Periodic Background Sync API allows web applications to alert their service worker to make any updates, at a periodic time interval. Uses may include fetching latest content whilst a device is connected to Wi-Fi, or allowing background updates to an application.The minimum time interval is set when the API is invoked; however the user agent might also take into account other factors which affect when the service worker receives the event. For instance previous website engagement, or connection to a known network.The PeriodicSyncManager interface is available through ServiceWorkerRegistration.periodicSync. A unique tag identifier is set to 'name' the sync event, which can then be listened for within the ServiceWorker script. Once the event is received you can then run any functionality available, such as updating caches or fetching new resources.As this API relies on service workers, functionality provided by this API is only available in a secure context.Note: At the time of writing, the Web Periodic Background Synchronization API is only available through an installed Progressive Web AppRegisters tasks to be run in a service worker at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests.Represents a synchronization event, sent to the global scope of a ServiceWorker. It provides a way to run tasks in the service worker with network connectivity.The following additions to the Service Worker API are specified in the Periodic Background Sync specification to provide an entry point for using Periodic Background Sync.Returns a reference to the PeriodicSyncManager interface for registering tasks to run at specific intervals.An event handler fired whenever a periodicsync event occurs. This happens at timed intervals, that are specified when registering a PeriodicSyncManager.The following examples show how to use the interface.The following asynchronous function registers a periodic background sync at a minimum interval of one day from a browsing context:This code checks to see if a Periodic Background Sync task with a given tag is registered.The following code removes a Periodic Background Sync task to stop articles syncing in the background.The following example shows how to respond to a periodic sync event in the service worker.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API"
},
{
	"api_id": "55",
	"name": "Permissions API",
	"description": "The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context. For example, the Permissions API can be used to determine if permission to access a particular API has been granted or denied.Note: This feature is available in Web Workers (although not current versions of Firefox, as WorkerNavigator.permissions is not implemented).Historically different APIs handle their own permissions inconsistently — for example the Notifications API allows for explicit checking of permission status and requesting permission, whereas the Geolocation API doesn't (which causes problems if the user denied the initial permission request). The Permissions API provides the tools to allow developers to implement a better user experience as far as permissions are concerned.The permissions property has been made available on the Navigator object, both in the standard browsing context and the worker context (WorkerNavigator — so permission checks are available inside workers), and returns a Permissions object that provides access to the Permissions API functionality.Once you have this object you can then perform permission-related tasks, for example querying a permission using the Permissions.query() method to return a promise that resolves with the PermissionStatus for a specific API.Not all APIs' permission statuses can be queried using the Permissions API. Notable APIs that are Permissions-aware include:More APIs will gain Permissions API support over time.We have made a simple example available called Location Finder. You can run the example live, or view the source code on GitHub.Read more about how it works in our article Using the Permissions API.Provides access to the Permissions object from the main context and worker context respectively.Provides the core Permission API functionality, such as methods for querying and revoking permissions.Provides access to the current status of a permission, and an event handler to respond to changes in permission status.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API"
},
{
	"api_id": "56",
	"name": "Picture-in-Picture API",
	"description": "The Picture-in-Picture API allow websites to create a floating video window always on top of other windows so that users may continue consuming media while they interact with other content sites, or applications on their device.Represents the floating video window; contains width and height properties, and an onresize event handler property.The Picture-in-Picture API adds methods to the HTMLVideoElement and Document interfaces to allow toggling of the floating video window.Requests that the user agent enters the video into picture-in-picture modeRequests that the user agent returns the element in picture-in-picture mode back into its original box.The Picture-in-Picture API augments the HTMLVideoElement, Document, and ShadowRoot interfaces with properties that can be used to determine if the floating video window mode is supported and available, if picture-in-picture mode is currently active, and which video is floating.The autoPictureInPicture property will automatically enter and leave the picture-in-picture mode for a video element when the user switches tab and/or applications.The disablePictureInPicture property will provide a hint to the user agent to not suggest the picture-in-picture to users or to request it automatically.The pictureInPictureEnabled property tells you whether or not it is possible to engage picture-in-picture mode. This is false if picture-in-picture mode is not available for any reason (e.g. the "picture-in-picture" feature has been disallowed, or picture-in-picture mode is not supported).The pictureInPictureElement property tells you which Element is currently being displayed in the floating window (or in the shadow DOM). If this is null, the document (or shadow DOM) has no node currently in picture-in-picture mode.The Picture-in-Picture API defines three events, which can be used to detect when picture-in-picture mode is toggled and when the floating video window is resized.Sent to a HTMLVideoElement when it enters picture-in-picture mode.Sent to a HTMLVideoElement when it leaves picture-in-picture mode.Sent to a PictureInPictureWindow when it changes size.The :picture-in-picture CSS pseudo-class matches the video element currently in picture-in-picture mode, allowing you to configure your stylesheets to automatically adjust the size, style, or layout of content when a video switches back and forth between picture-in-picture and traditional presentation modes.The availability of picture-in-picture mode can be controlled using Feature Policy. The fullscreen mode feature is identified by the string "picture-in-picture", with a default allow-list value of "self", meaning that picture-in-picture mode is permitted in top-level document contexts, as well as to nested browsing contexts loaded from the same origin as the top-most document.See Using Feature Policy to learn more about using Feature Policy to control access to an API.In this example, a video is presented in a web page. Clicking the button below lets the user toggle the floating video window.This code is called by a click handler when the user clicks the "Toggle Picture-in-Picture" button:This block starts by looking at the value of the document's pictureInPictureElement attribute.If the value is not null, it's the element that's currently in picture-in-picture mode, that is in a floating window. We call document.exitPictureInPicture() to bring the video back into its initial box.If the value is null, no video is in the floating window. So we can request a video to enter the picture-in-picture mode. We do it by calling HTMLVideoElement.requestPictureInPicture() on the <video> element.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Picture-in-Picture_API"
},
{
	"api_id": "57",
	"name": "Pointer events",
	"description": "Much of today's web content assumes the user's pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed. Pointer events address that need.Note: Pointer events are not available in Web Workers.Pointer events are DOM events that are fired for a pointing device. They are designed to create a single DOM event model to handle pointing input devices such as a mouse, pen/stylus or touch (such as one or more fingers).The pointer is a hardware-agnostic device that can target a specific set of screen coordinates. Having a single event model for pointers can simplify creating Web sites and applications and provide a good user experience regardless of the user's hardware. However, for scenarios when device-specific handling is desired, pointer events defines a pointerType property to inspect the device type which produced the event.The events needed to handle generic pointer input are analogous to mouse events (mousedown/pointerdown, mousemove/pointermove, etc.). Consequently, pointer event types are intentionally similar to mouse event types.Additionally, a pointer event contains the usual properties present in mouse events (client coordinates, target element, button states, etc.) in addition to new properties for other forms of input: pressure, contact geometry, tilt, etc. In fact, the PointerEvent interface inherits all of the MouseEvent properties, thus facilitating the migration of content from mouse events to pointer events.The condition when a pointer has a non-zero value for the buttons property. For example, in the case of a pen, when the pen has physical contact with the digitizer, or at least one button is pressed while hovering.Any pointer input device that can produce events. A pointer is considered active if it can still produce further events. For example, a pen that is a down state is considered active because it can produce additional events when the pen is lifted or moved.A sensing device with a surface that can detect contact. Most commonly, the sensing device is a touch-enabled screen that can sense input from an input device such as a pen, stylus, or finger. Some sensing devices can detect the close proximity of the input device, and the state is expressed as a hover following the mouse.The process the browser uses to determine a target element for a pointer event. Typically, this is determined by considering the pointer's location and also the visual layout of elements in a document on screen media.A hardware-agnostic representation of input devices that can target a specific coordinate (or set of coordinates) on a screen. Examples of pointer input devices are mouse, pen/stylus, and touch contacts.Pointer capture allows the events for a pointer to be retargeted to a particular element other than the normal hit test result of the pointer's location.A DOM event fired for a pointer.The primary interface is the PointerEvent interface which has a constructor plus several event types and associated global event handlers.The standard also includes some extensions to the Element and Navigator interfaces.The following sub-sections contain short descriptions of each interface and property.The PointerEvent interface extends the MouseEvent interface and has the following properties. (All of the following properties are Read only .)A unique identifier for the pointer causing the event.The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.the height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.the normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.The plane angle (in degrees, in the range of -90 to 90) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis.the plane angle (in degrees, in the range of -90 to 90) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis.The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.Indicates the device type that caused the event (mouse, pen, touch, etc.)Indicates if the pointer represents the primary pointer of this pointer type.Pointer events have ten event types, seven of which have similar semantics to their mouse event counterparts (down, up, move, over, out, enter, and leave).Below is a short description of each event type and its associated Global Event Handler.There are three extensions to the Element interface:Designates a specific element as the capture target of future pointer events.This method releases (stops) pointer capture that was previously set for a specific pointer event.The Navigator.maxTouchPoints property is used to determine the maximum number of simultaneous touch points that are supported at any single point in time.This section contains examples of basic usage of using the pointer events interfaces.This example registers a handler for every event type for the given element.This example illustrates accessing all of a pointer event's properties.In some scenarios there may be multiple pointers (for example a device with both a touchscreen and a mouse) or a pointer supports multiple contact points (for example a touchscreen that supports multiple finger touches). The application can use the isPrimary property to identify a master pointer among the set of active pointers for each pointer type. If an application only wants to support a primary pointer, it can ignore all pointer events that are not primary.For mouse there is only one pointer, so it will always be the primary pointer. For touch input, a pointer is considered primary if the user touched the screen when there were no other active touches. For pen and stylus input, a pointer is considered primary if the user's pen initially contacted the screen when there were no other active pens contacting the screen.Some pointer devices, such as mouse and pen, support multiple buttons and the button presses can be chorded i.e. pressing an additional button while another button on the pointer device is already pressed.To determine the state of button presses, pointer events uses the button and buttons properties of the MouseEvent interface (that PointerEvent inherits from).The following table provides the values of button and buttons for the various device button states.Note: The button property indicates a change in the state of the button. However, as in the case of touch, when multiple events occur with one event, all of them have the same value.Pointer capture allows events for a particular pointer event to be re-targeted to a particular element instead of the normal hit test at a pointer's location. This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element (for example by scrolling).The following example shows pointer capture being set on an element.The following example shows a pointer capture being released (when a pointercancel event occurs. The browser does this automatically when a pointerup or pointercancel event occurs.The touch-action CSS property is used to specify whether or not the browser should apply its default (native) touch behavior (such as zooming or panning) to a region. This property may be applied to all elements except: non-replaced inline elements, table rows, row groups, table columns, and column groups.A value of auto means the browser is free to apply its default touch behavior (to the specified region) and the value of none disables the browser's default touch behavior for the region. The values pan-x and pan-y, mean that touches that begin on the specified region are only for horizontal and vertical scrolling, respectively. The value manipulation means the browser may consider touches that begin on the element are only for scrolling and zooming.In the following example, the browser's default touch behavior is disabled for the div element.In the following example, default touch behavior is disabled for some button elements.In the following example, when the target element is touched, it will only pan in the horizontal direction.Although the pointer event interfaces enable applications to create enhanced user experiences on pointer enabled devices, the reality is the vast majority of today's web content is designed to only work with mouse input. Consequently, even if a browser supports pointer events, the browser must still process mouse events so content that assumes mouse-only input will work as is without direct modification. Ideally, a pointer enabled application does not need to explicitly handle mouse input. However, because the browser must process mouse events, there may be some compatibility issues that need to be handled. This section contains information about pointer event and mouse event interaction and the ramifications for application developers.The browser may map generic pointer input to mouse events for compatibility with mouse-based content. This mapping of events is called compatibility mouse events. Authors can prevent the production of certain compatibility mouse events by canceling the pointerdown event but note that:Here are some best practices to consider when using pointer events:Some additional values have been defined for the css touch-action property as part of the Pointer Events specification, but currently those values have limited implementation support.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events"
},
{
	"api_id": "58",
	"name": "Pointer Lock API",
	"description": "The Pointer Lock API (formerly called Mouse Lock API) provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view. It is ideal for first person 3D games, for example.More than that, the API is useful for any applications that require significant mouse input to control movements, rotate objects, and change entries, for example allowing users to control the viewing angle by moving the mouse around without any button clicking. The buttons are then freed up for other actions. Other examples include apps for viewing maps or satellite imagery.Pointer lock lets you access mouse events even when the cursor goes past the boundary of the browser or screen. For example, your users can continue to rotate or manipulate a 3D model by moving the mouse without end. Without Pointer lock, the rotation or manipulation stops the moment the pointer reaches the edge of the browser or screen. Game players can now click buttons and swipe the mouse cursor back and forth without worrying about leaving the game play area and accidentally clicking another application that would take mouse focus away from the game.Pointer lock is related to mouse capture. Mouse capture provides continued delivery of events to a target element while a mouse is being dragged, but it stops when the mouse button is released. Pointer lock is different from mouse capture in the following ways:This section provides a brief description of each property and method related to the pointer lock specification.The Pointer lock API, similar to the Fullscreen API, extends DOM elements by adding a new method, requestPointerLock(). As it has recently unprefixed, you would currently declare it something like this, for example if you wanted to request pointer lock on a canvas element:Note: If a user has exited pointer lock via the default unlock gesture, or pointer lock has not previously been entered for this document, an event generated as a result of an engagement gesture must be received by the document before requestPointerLock will succeed. (from https://w3c.github.io/pointerlock/#extensions-to-the-element-interface)The Pointer lock API also extends the Document interface, adding both a new property and a new method. The new property is used for accessing the currently locked element (if any), and is named pointerLockElement and the new method on Document is exitPointerLock() and, as the name implies, it is used to exit the pointer lock.The pointerLockElement property is useful for determining if any element is currently pointer locked (e.g., for doing a Boolean check) and also for obtaining a reference to the locked element, if any.Here is an example of using pointerLockElement:The Document.exitPointerLock() method is used to exit pointer lock, and like requestPointerLock, works asynchronously using the pointerlockchange and pointerlockerror events, which you'll see more about below.When the Pointer lock state changes—for example, when calling requestPointerLock(), exitPointerLock(), the user pressing the ESC key, etc.—the pointerlockchange event is dispatched to the document. This is a simple event and contains no extra data.When there is an error caused by calling requestPointerLock() or exitPointerLock(), the pointerlockerror event is dispatched to the document. This is a simple event and contains no extra data.Note: until Firefox 50 the above events were prefixed with moz in Firefox.The Pointer lock API extends the normal MouseEvent interface with movement attributes. Two new attributes to mouse events—movementX and movementY—provide the change in mouse positions. The values of the parameters are the same as the difference between the values of MouseEvent properties, screenX and screenY, which are stored in two subsequent mousemove events, eNow and ePrevious. In other words, the Pointer lock parameter movementX = eNow.screenX - ePrevious.screenX.When Pointer lock is enabled, the standard MouseEvent properties clientX, clientY, screenX, and screenY are held constant, as if the mouse is not moving. The movementX and movementY properties continue to provide the mouse's change in position. There is no limit to movementX and movementY values if the mouse is continuously moving in a single direction. The concept of the mouse cursor does not exist and the cursor cannot move off the window or be clamped by a screen edge.The parameters movementX and movementY are valid regardless of the mouse lock state, and are available even when unlocked for convenience.When the mouse is unlocked, the system cursor can exit and re-enter the browser window. If that happens, movementX and movementY could be set to zero.We've written a simple pointer lock demo to show you how to use it to set up a simple control system (see source code). The demo looks like this:\n  \nThis demo uses JavaScript to draw a ball on top of an <canvas> element. When you click the canvas, pointer lock is then used to remove the mouse pointer and allow you to move the ball directly using the mouse. Let's see how this works.We set initial x and y positions on the canvas:The pointer lock methods are currently prefixed, so next we'll fork them for the different browser implementations.Now we set up an event listener to run the requestPointerLock() method on the canvas when it is clicked, which initiates pointer lock.Now for the dedicated pointer lock event listener: pointerlockchange. When this occurs, we run a function called lockChangeAlert() to handle the change.This function checks the pointLockElement property to see if it is our canvas. If so, it attached an event listener to handle the mouse movements with the updatePosition() function. If not, it removes the event listener again.The updatePosition() function updates the position of the ball on the canvas (x and y), and also includes if() statements to check whether the ball has gone off the edges of the canvas. If so, it makes the ball wrap around to the opposite edge. It also includes a check whether a requestAnimationFrame() call has previously been made, and if so, calls it again as required, and calls the canvasDraw() function that updates the canvas scene. A tracker is also set up to write out the X and Y values to the screen, for reference.The canvasDraw() function draws the ball in the current x and y positions:Pointer lock can only lock one iframe at a time. If you lock one iframe, you cannot try to lock another iframe and transfer the target to it; pointer lock will error out. To avoid this limitation, first unlock the locked iframe, and then lock the other.While iframes work by default, "sandboxed" iframes block Pointer lock. To avoid this limitation, use <iframe sandbox="allow-pointer-lock">.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API"
},
{
	"api_id": "59",
	"name": "Presentation API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Presentation API lets a user agent (such as a Web browser) effectively display web content through large presentation devices such as projectors and network-connected televisions. Supported types of multimedia devices include both displays which are wired using HDMI, DVI, or the like, or wireless, using DLNA, Chromecast, AirPlay, or Miracast.\n  \nIn general, a web page uses the Presentation Controller API to specify the web content to be rendered on presentation device and initiate the presentation session. With Presentation Receiver API, the presenting web content obtains the session status. With providing both the controller page and the receiver one with a messaged-based channel, a Web developer can implement the interaction between these two pages.Depending on the connection mechanism provided by the presentation device, any controller- and receiver page can be rendered by the same user agent, or by separated user agents.In controlling browsing context, the Presentation interface provides a mechanism to override the browser default behavior of launching presentation to external screen. In receiving browsing context, Presentation interface provides the access to the available presentation connections.Initiates or reconnects to a presentation made by a controlling browsing context.A PresentationAvailability object is associated with available presentation displays and represents the presentation display availability for a presentation request.The PresentationConnectionAvailableEvent is fired on a PresentationRequest when a connection associated with the object is created.Each presentation connection is represented by a PresentationConnection object.A PresentationConnectionCloseEvent is fired when a presentation connection enters a closed state.The PresentationReceiver allows a receiving browsing context to access the controlling browsing contexts and communicate with them.PresentationConnectionList represents the collection of non-terminated presentation connections. It is also a monitor for the event of new available presentation connection.Example codes below highlight the usage of main features of the Presentation API: controller.html implements the controller and presentation.html implements the presentation. Both pages are served from the domain http://example.org (http://example.org/controller.html and http://example.org/presentation.html). These examples assume that the controlling page is managing one presentation at a time. Please refer to the comments in the code examples for further details.Presentation API polyfill contains a JavaScript polyfill of the Presentation API specification under standardization within the Second Screen Working Group at W3C. The polyfill is mostly intended for exploring how the Presentation API may be implemented on top of different presentation mechanisms.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Presentation_API"
},
{
	"api_id": "60",
	"name": "Prioritized Task Scheduling API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Note: This feature is available in Web WorkersThe Prioritized Task Scheduling API provides a standardized way to prioritize all tasks belonging to an application, whether they defined in a website developer's code, or in third party libraries and frameworks.\n  The task priorities are very course-grained, and are based around whether tasks block user interaction, or otherwise impact the user experience, or can run in the background.\n  Developers and frameworks may implement more fine-grained prioritization schemes within the broad categories define by the API\nThe API is promise-based and supports the ability to set and change task priorities, to delay tasks being added to the scheduler, to abort tasks, and to monitor for priority change and abort events.\n  The API is available in both window and worker threads using the scheduler property on the global object.\n  This property can be tested to feature-check for API support.\nThe main API method is Scheduler.postTask(), which takes a callback function ("the task") and returns a promise that resolves with the return value of the function, or rejects with an error.\n  The simplest form of the API is as shown below.\n  This creates a task with default priority user-visible that has a fixed priority and cannot be aborted.\n\n  Because the method returns a promise you can wait on its resolution asynchronously using then, and catch errors thrown by the task callback function (or when the task is aborted) using catch.\n  The callback function can be any kind of function (below we demonstrate an arrow function).\nThe same task might be waited on using await/async as shown below (note, this is run in an Immediately Invoked Function Expression (IIFE)):\n  You can also specify an options object to the postTask() method if you want to change the default behavior.\n  The options are:\nThe same example as above with a priority option would look like this:Scheduled tasks are run in priority order, followed by the order that they were added to the scheduler queue.There are just three priorities, which are listed below (ordered from highest to lowest):\n  Tasks that stop users from interacting with the page.\n  This includes rendering the page to the point where it can be used, or responding to user input.\n  \n  Tasks that are visible to the user but not necessarily blocking user actions.\n  This might include rendering non-essential parts of the page, such as non-essential images or animations.\n  This is the default priority.\n  Tasks that are not time-critical.\n  This might include log processing or initializing third party libraries that aren't required for rendering.\n  \n  There are many use cases where the task priority never needs to change, while for others it does.\n  For example fetching an image might change from a background task to user-visible as a carousel is scrolled into the viewing area.\nTask priorities can be set as static (immutable) or dynamic (modifiable) depending on the arguments passed to Scheduler.postTask().=\n  Task priority is immutable if a value is specified in the options.priority argument.\n  The given value will be used for the task priority and cannot be changed.\n\n  The priority is modifiable only if a TaskSignal is passed to the options.signal argument and options.priority is not set.\n  In this case the task will take its initial priority from the signal priority, and the priority can subsequently be changed by calling TaskController.setPriority() on the controller associated with the signal.\nIf the priority is not set with options.priority or by passing a TaskSignal to options.signal then it defaults to user-visible (and is by definition immutable)\n  Note that a task that needs to be aborted must set options.signal to either TaskSignal or AbortSignal.\n  However for a task with an immutable priority, AbortSignal more clearly indicates that the task priority cannot be changed using the signal.\n\n  Interface with method for adding prioritized tasks to be scheduled.\n  An object of this interface is available on the Window or WorkerGlobalScope global objects (this.scheduler).\n  Interface that supports both aborting a task and changing its priority.Interface for a signal object that allows you to abort a task and change its priority, if required, using a TaskController object.The interface for the prioritychange event, sent when the priority for a task is changed.Note: If the task priority never needs to be changed, you can use an AbortController and its associated AbortSignal instead of TaskController and TaskSignal.The Prioritized Task Scheduling API extends the following APIs, adding the listed features:\n  This property is the entry point for using this API.\n  It is implemented on Window and WorkerGlobalScope, making an instance of Scheduler available through this in most scopes.\n  \n  Note that the examples below use mylog() to write to a text area.\n  The code for the log area and method is generally hidden in order to not to distract from more relevant code.\nCheck whether prioritized task scheduling is supported by testing for the scheduler property in the global "this" exposed to the current scope.The code below prints "Feature: Supported" if the API is supported on this browser.\n  Tasks are posted using Scheduler.postTask(), specifying a callback function (task) in the first argument, and an optional second argument that can be used to specify a task priority, signal, and/or delay.\n  The method returns a Promise that resolves with the return value of the callback function, or rejects with either an abort error or an error thrown in the function.\n\n  Because it returns a promise, Scheduler.postTask() can be chained with other promises.\n  Below we show how to wait on the promise to resolve using then.\n  This uses the default priority (user-visible).\n\n  The method can also be used with await inside an async function.\n  The code below shows how you might use this approach to wait on a user-blocking task.\n\n  In some cases you might not need to wait on completion at all.\n  For simplicity many of the examples here simply log the result as the task executes.\n\n  The log below shows the output of the three tasks above.\n  Note that the order they are run depends on the priority first, and then the declaration order.\n\n  Task priorities may be set using priority parameter in the optional second argument.\n  Priorities that are set in this way are immutable (cannot be changed).\n\n  Below we post two groups of three tasks, each member in reverse order of priority.\n  The final task has the default priority.\n  When run, each task simply logs it's expected order (we're not waiting on the result because we don't need to in order to show execution order).\nThe output below shows that the tasks are executed in priority order, and then declaration order.\n  Task priorities can also take their initial value from a TaskSignal passed to postTask() in the optional second argument.\n  If set in this way, the priority of the task can then be changed using the controller associated with the signal.\nNote: Setting and changing task priorities using a signal only works when the options.priority argument to postTask() is not set, and when the options.signal is a TaskSignal (and not an AbortSignal).The code below first shows how to create a TaskController, setting the initial priority of its signal to user-blocking in the TaskController() constructor.\n  The code then uses addEventListener() to add an event listener to the controller's signal (we could alternatively use the TaskSignal.onprioritychange property to add an event handler).\n  The event handler uses previousPriority on the event to get the original priority and TaskSignal.priority on the event target to get the new/current priority.\nThe task is then posted, passing in the signal, and then we immediately change the priority to background by calling TaskController.setPriority() on the controller.\n  The output below demonstrates that the priority was successfully changed to background from user-blocking.\n  Note that in this case the priority is changed before the task is executed, but it could equally have been changed while the task was running.\n\n  Tasks can be aborted using either TaskController and AbortController, in exactly the same way.\n  The only difference is that you must use TaskController if you also want to set the task priority.\n\n  The code below creates a controller and passes its signal to the task.\n  The task is then immediately aborted.\n  This causes the promise to be rejected with an AbortError, which is caught in the catch block and logged.\n  Note that we could also have listened for the abort event fired on the TaskSignal or AbortSignal and logged the abort there.\nThe log below shows the aborted task.\n  Tasks can be delayed by specifying an integer number of milliseconds in the options.delay parameter to postTask().\n  This effectively adds the task to the prioritized queue on a timeout, as might be created using setTimeout().\n  The delay is the minimum amount of time before the task is added to the scheduler; it may be longer.\nThe code below shows two tasks added (as arrow functions) with a delay.\n  Refresh the page.\n  Note that the second string appears in log after about 2 seconds.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API"
},
{
	"api_id": "61",
	"name": "Proximity Events",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Warning: The Proximity Events APIs are not supported by any current major browser, and should not be used. This page is provided for historical interest.The proximity events are a handy way to know when a user is close to a device. These events make it possible to react to such a change, for example by shutting down the screen of a smartphone when the user is having a phone call with the device close to their ear.There are two proximity events (see links for documentation.):The difference between them is that UserProximityEvent simply notifies true when the user is considered "close", while DeviceProximityEvent provides an estimate of the actual distance to a nearby object.Note: Obviously, the API requires the device to have a proximity sensor, which are mostly available only on mobile devices. Devices without such a sensor may support those events but will never fire them.This feature is no longer on track to become a standard. Its historical specification is still available.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events"
},
{
	"api_id": "62",
	"name": "Push API",
	"description": "The Push API gives web applications the ability to receive messages pushed to them from a server, whether or not the web app is in the foreground, or even currently loaded, on a user agent. This lets developers deliver asynchronous notifications and updates to users that opt in, resulting in better engagement with timely new content.Warning: When implementing PushManager subscriptions, it is vitally important that you protect against CSRF/XSRF issues in your app. See the following articles for more information:For an app to receive push messages, it has to have an active service worker. When the service worker is active, it can subscribe to push notifications, using PushManager.subscribe().The resulting PushSubscription includes all the information that the application needs to send a push message: an endpoint and the encryption key needed for sending data.The service worker will be started as necessary to handle incoming push messages, which are delivered to the onpush event handler. This allows apps to react to push messages being received, for example, by displaying a notification (using ServiceWorkerRegistration.showNotification().)Each subscription is unique to a service worker. The endpoint for the subscription is a unique capability URL: knowledge of the endpoint is all that is necessary to send a message to your application. The endpoint URL therefore needs to be kept secret, or other applications might be able to send push messages to your application.Activating a service worker to deliver a push message can result in increased resource usage, particularly of the battery. Different browsers have different schemes for handling this, there is currently no standard mechanism. Firefox allows a limited number (quota) of push messages to be sent to an application, although Push messages that generate notifications are exempt from this limit. The limit is refreshed each time the site is visited. In Chrome there are no limits.Represents a push action, sent to the global scope of a ServiceWorker. It contains information sent from an application to a PushSubscription.Provides a way to receive notifications from third-party servers, as well as request URLs for push notifications.Provides access to push data sent by a server, and includes methods to manipulate the received data.Provides a subscription's URL endpoint, and allows unsubscribing from a push service.Represents the options associated with the push subscription.The following additions to the Service Worker API have been specified in the Push API spec to provide an entry point for using Push messages. They also monitor and respond to push and subscription change events.Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status. This is the entry point into using Push messaging.An event handler fired whenever a push event occurs; that is, whenever a server push message is received.An event handler fired whenever a pushsubscriptionchange event occurs; for example, when a push subscription has been invalidated, or is about to be invalidated (e.g. when a push service sets an expiration time.)Mozilla's ServiceWorker Cookbook contains many useful Push examples.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Push_API"
},
{
	"api_id": "63",
	"name": "Reporting API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Reporting API provides a generic reporting mechanism for web applications to use to make reports available based on various platform features (for example Content Security Policy, Feature-Policy, or feature deprecation reports) in a consistent manner.There are a number of different features and problems on the web platform that generate information useful to web developers when they are trying to fix bugs or improve their websites in other ways. Such information can include:The Reporting API's purpose is to provide a consistent reporting mechanism that can be used to make such information available to developers in the form of reports represented by JavaScript objects. There are a few ways to use it, which are detailed in the sections below.Each unique origin you want to retrieve reports for can be given a series of endpoints, which are URLs that can receive given reports from a user agent.The Report-To HTTP header is used to specify details about the different endpoints that a user-agent has available to it for delivering reports to. You can then retrieve reports by making a request to those URLs.The endpoints are arranged into groups; an endpoint group can work together to provide load balancing (each endpoint will receive a specified proportion of report traffic) and safeguarding against failure (fallback endpoints can be specified to use if the primary ones fail).Note: There is no absolute guarantee of report delivery — a report could still fail to be collected if a serious error occurs.Reports sent to endpoints can be retrieved independently of the running of the websites they relate to, which is useful — a crash for example could bring down a web site and stop anything running, but a report could still be obtained to give the developer some clues as to why it happened.Reports can also be obtained via ReportingObserver objects created via JavaScript inside the website you are aiming to get reports on. This method is not as failsafe as the Report-To method described above — any page crash could stop you retrieving the reports — but it is easier to set up, and more flexible.A ReportingObserver object is created using the ReportingObserver() constructor, which is passed two parameters:Methods are then available on the observer to start collecting reports (ReportingObserver.observe()), retrieve the reports currently in the report queue (ReportingObserver.takeRecords()), and disconnect the observer so it can no longer collect records (ReportingObserver.disconnect()).The Reporting API spec also defines a Generate Test Report WebDriver extension, which allows you to simulate report generation during automation. Reports generated via WebDriver are observed by any registered ReportObserver objects present in the loaded website. This is not yet documented.Create ReportingObserver instances using its constructor, which can then be used to collect and access reports.An object representing a single report.Allows options to be set in the constructor when creating a reporting observer.The spec defines the following report types:Indicates that a WebAPI or other browser feature being used in the website is expected to stop working in a future release. Indicated by a Report.body property with a DeprecationReportBody return value.Indicates that a request made by the website has been denied by the browser, e.g. for security or user annoyance reasons. Indicated by a Report.body property with a InterventionReportBody return value.Indicates that the website stopped running due to a browser crash. Indicated by a Report.body property with a CrashReportBody return value.In our deprecation_report.html example, we create a simple reporting observer to observe usage of deprecated features on our web page:We then tell it to start observing reports using ReportingObserver.observe(); this tells the observer to start collecting reports in its report queue, and runs the callback function specified inside the constructor:Later on in the example we deliberately use the deprecated version of MediaDevices.getUserMedia():This causes a deprecation report to be generated; because of the event handler we set up inside the ReportingObserver() constructor, we can now click the button to display the report details.\n  \nNote: If you look at the complete source code, you'll notice that we actually call the deprecated getUserMedia() method twice. After the first time we call ReportingObserver.takeRecords(), which returns the first generated report and empties the queue. Because of this, when the button is pressed only the second report is listed.Support is at an early stage right now. Firefox supports the JavaScript API and the Report-To header behind preferences:Chrome is also working on an implementation: information about Chrome implementation.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Reporting_API"
},
{
	"api_id": "64",
	"name": "Resize Observer API",
	"description": "The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size, with notifications being delivered to the observer each time the size changes.There are a whole raft of use cases for responsive design techniques (and others besides) that respond to changes in an element's size, but previously their implementations have often been hacky and/or brittle.For example, media queries / window.matchMedia are great for updating layouts at specific points when the viewport changes sizes, but what if you want to change layout in response to a specific element's size changing, which isn't the outer container?To achieve this, a limited solution would be to listen to changes to a suitable event that hints at the element you are interested in changing size (e.g. the window resize event), then figure out what the new dimensions or other features of the element after a resize using Element.getBoundingClientRect or Window.getComputedStyle, for example.Such a solution tends to only work for limited use cases, be bad for performance (continually calling the above methods would result in a big performance hit), and often won't work when the browser window size is not changed.The Resize Observer API provides a solution to exactly these kinds of problems, and more besides, allowing you to easily observe and respond to changes in the size of an element's content or border box in a performant way. It provides a JavaScript solution to the often-discussed lack of element queries in the web platform.Usage is simple, and pretty much the same as other observers, such as Performance Observer or Intersection Observer — you create a new ResizeObserver object using the ResizeObserver() constructor, then use ResizeObserver.observe() to make it look for changes to a specific element's size. A callback function set up inside the constructor then runs every time the size changes, providing access to the new dimensions and allowing you to do anything you like in response to those changes.Provides the ability to register new observers and to start and stop observing elements.Describes a single element which has been resized, identifying the element and its new size.You find a couple of simple examples on our GitHub repo:The code will usually follow this kind of pattern (taken from resize-observer-border-radius.html):",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API"
},
{
	"api_id": "65",
	"name": "Resource Timing API",
	"description": "The Resource Timing interfaces enable retrieving and analyzing detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to load a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.The interface's properties create a resource loading timeline with high-resolution timestamps for network events such as redirect start and end times, DNS lookup start and end times, request start, response start and end times, etc. The interface also includes other properties that provide data about the size of the fetched resource as well as the type of resource that initiated the fetch.This document provides an overview of the Resource Timing interfaces. For more details about the interfaces including examples see each interface's reference page, Using the Resource Timing API, and the references in the See also section. For a graphical representation of the resource timing processing model see the resource timing phases figure.Note: This feature is available in Web WorkersThe PerformanceResourceTiming interface extends the PerformanceEntry for performance entries which have an entryType of "resource".Several of the Resource Timing properties return high-resolution timestamps. These timestamps have a DOMHighResTimeStamp type and as its name implies, they represent a high-resolution point in time. This type is a double and its value is a discrete point in time or the difference in time between two discrete points in time.The unit of DOMHighResTimeStamp is milliseconds and should be accurate to 5 µs (microseconds). However, If the browser is unable to provide a time value accurate to 5 µs (because, for example, due to hardware or software constraints), the browser can represent a the value as a time in milliseconds accurate to a millisecond.An application can get timestamps for the various stages used to load a resource. The first property in the processing model is startTime which returns the timestamp immediately before the resource loading process begins. The fetchStart timestamps follows and redirect processing (if applicable) and precedes DNS lookup. The next stages are connectStart and connectEnd which are the timestamps immediately before and after connecting to the server, respectively. The last three timestamps are, in order: requestStart - the timestamp before the browser starts requesting the resource from the server; responseStart - the timestamp after the browser receives the first byte of the response from the server; and responseEnd - the timestamp after the browser receives the last byte of the resource. If the resource is loaded via a secure connection a secureConnectionStart timestamp will be available between the connection start and end events.Note: When CORS is in effect, many of these values are returned as zero unless the server's access policy permits these values to be shared. This requires the server providing the resource to send the Timing-Allow-Origin HTTP response header with a value specifying the origin or origins which are allowed to get the restricted timestamp values.The properties which are returned as 0 by default when loading a resource from a domain other than the one of the web page itself: redirectStart, redirectEnd, domainLookupStart, domainLookupEnd, connectStart, connectEnd, secureConnectionStart, requestStart, and responseStart.The PerformanceResourceTiming interface also includes several network timing properties. The redirectStart and redirectEnd properties return timestamps for redirect start and end times, respectively. Likewise, the domainLookupStart and domainLookupEnd properties return timestamps for DNS lookup start and end times, respectively.This would be a nice place to have a diagram showing the relationships between these segments of the resource loading time.The PerformanceResourceTiming interface has three properties that can be used to obtain size data about a resource. The transferSize property returns the size (in octets) of the fetched resource including the response header fields plus the response payload body.The encodedBodySize property returns the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings. decodedBodySize returns the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings.The nextHopProtocol property returns the network protocol used to fetch the resource.The initiatorType property returns the type of resource that initiated the performance entry such as "css" for a CSS resource, "xmlhttprequest" for an XMLHttpRequest and "img" for an image (such as a JPEG).If the current context is a worker, the workerStart property can be used to obtain a DOMHighResTimeStamp when the worker was started.The Resource Timing API includes two methods that extend the Performance interface. The clearResourceTimings() method removes all "resource" type performance entries from the browser's resource performance entry buffer. The setResourceTimingBufferSize() method sets the resource performance entry buffer size to the specified number of resource performance entries.The PerformanceResourceTiming interface's toJSON() method returns a JSON serialization of a "resource" type performance entry.As shown in the PerformanceResourceTiming interface's Browser Compatibility table, most of these interfaces are broadly implemented by desktop browsers. However, note that some properties have little to no implementation so see each property's "Browser compatibility" section for more specific interoperability data.To test your browser's support for these interfaces, run the perf-api-support application.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API"
},
{
	"api_id": "66",
	"name": "Screen Capture API",
	"description": "The Screen Capture API introduces additions to the existing Media Capture and Streams API to let the user select a screen or portion of a screen (such as a window) to capture as a media stream. This stream can then be recorded or shared with others over the network.The Screen Capture API is relatively simple to use. Its sole method is MediaDevices.getDisplayMedia(), whose job is to ask the user to select a screen or portion of a screen to capture in the form of a MediaStream.To start capturing video from the screen, you call getDisplayMedia() on the instance of Media navigator.mediaDevices:The Promise returned by getDisplayMedia() resolves to a MediaStream which streams the captured media.See the article Using the Screen Capture API for a more in-depth look at how to use the API to capture screen contents as a stream.The Screen Capture API doesn't have any interfaces of its own; instead, it adds one method to the existing MediaDevices interface.The getDisplayMedia() method is added to the MediaDevices interface. Similar to getUserMedia(), this method creates a promise that resolves with a MediaStream containing the display area selected by the user, in a format that matches the specified options.The Screen Capture API adds properties to the following dictionaries defined by other specifications.A ConstrainDOMString indicating whether or not the cursor should be included in the captured display surface's stream, and if it should always be visible or if it should only be visible while the mouse is in motion.A ConstrainDOMString indicating what type of display surface is to be captured. The value is one of application, browser, monitor, or window.Indicates whether or not the video in the stream represents a logical display surface (that is, one which may not be entirely visible onscreen, or may be completely offscreen). A value of true indicates a logical display surface is to be captured.A string which indicates whether or not the display surface currently being captured includes the mouse cursor, and if so, whether it's only visible while the mouse is in motion or if it's always visible. The value is one of always, motion, or never.A string indicating what type of display surface is currently being captured. The value is one of application, browser, monitor, or window.A Boolean value which is true if the video being captured doesn't directly correspond to a single onscreen display area.A Boolean which is true if the user agent and device support the MediaTrackConstraints.cursor constraint.A Boolean which is true if the current environment supports the MediaTrackConstraints.displaySurface constraint.A Boolean which is true if the current environment supports the constraint MediaTrackConstraints.logicalSurface.The following dictionaries are defined by the Screen Capture API.An enumerated string type used to provide the value for the cursor property for the settings and constraints. The possible values are always, motion, and never.An enumerated string type which is used to identify the kind of display surface to capture. This type is used for the displaySurface property in the constraints and settings objects, and has the possible values application, browser, monitor, and window.User agents that support Feature Policy (either using HTTP's Feature-Policy header or the <iframe> attribute allow) can specify a desire to use the Screen Capture API using the policy control directive display-capture:The default allow list is self, which lets the any content within the document use Screen Capture.See Using Feature Policy for a more in-depth explanation of how Feature Policy is used.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API"
},
{
	"api_id": "67",
	"name": "Screen Orientation API",
	"description": "The Screen Orientation API provides information about the orientation of the screen.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Screen_Orientation_API"
},
{
	"api_id": "68",
	"name": "Screen Wake Lock API",
	"description": "The Screen Wake Lock API provides a way to prevent devices from dimming or locking the screen when an application needs to keep running.Most devices by default turn off their screen after a specified amount of time to prolong the life of the hardware. Modern devices do this to save on battery power. Whilst this is a useful feature, some applications need the screen to stay awake to be their most useful.The Screen Wake Lock API prevents the screen from turning off, dimming or locking. It allows for a simple platform-based solution which up until now could only be achieved via workarounds which were potentially power hungry. Only visible (active) documents can acquire the screen wake lock.There are plenty of use cases for keeping a screen on, including reading an ebook, map navigation, following a recipe, presenting to an audience, scanning a QR/barcode or applications that use voice or gesture control, rather than tactile input (the default way to keep a screen awake).You acquire a WakeLockSentinel object by calling the navigator.wakeLock.request() Promise-based method that resolves if the platform allows it. A request may be rejected for a number of reasons, including system settings (such as power save mode or low battery level) or if the document is not active or visible.The sentinel is attached to the underlying system wake lock. It can be released by the system, again if the battery power is too low or the document is not active or visible. It can also be released manually via the WakeLockSentinel.release() method. It is good practice to store a reference to the sentinel object to control release later and also to reacquire the lock if need be.The Screen Wake Lock API should be used to keep the screen on to benefit usability. It's a good idea to show some feedback on the interface to show if wake lock is active and a way for the user to disable it if they wish.The WakeLock interface prevents device screens from dimming or locking when an application needs to keep running.Provides a handle to the underlying platform wake lock and if referenced can be manually released and reacquired. Get an instance of the object by calling WakeLock.request.Returns a WakeLock object instance, from which all other functionality can be accessed.This code checks for wake lock support and updates the UI accordingly.The following example demonstrates how to request a WakeLockSentinel object. The WakeLock.request method is Promise-based and so we can create an asynchronous function, which in turn updates the UI to reflect the wake lock is active.The following example shows how to release the previously acquired wake lock.This example updates the UI if the wake lock has been released for any reason (such as navigating away from the active window/tab).The following code reacquires the wake lock should the visibility of the document change and the wake lock is released.You can find the complete code on GitHub here. The demo uses a button to acquire a wake lock and also release it, which in turn updates the UI. The UI also updates if the wake lock is released automatically for any reason. There's a checkbox which when checked, will automatically reacquire the wake lock if the document's visibility state changes and becomes visible again.Access to Screen Wake Lock API is controlled by Feature Policy directive screen-wake-lock. Refer to Using Feature Policy for reference how to use it.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API"
},
{
	"api_id": "69",
	"name": "Selection API",
	"description": "Note: This API is not available in Web Workers (not exposed via WorkerNavigator).The Selection API enables developers to access and manipulate the portion of a document selected by the user.The Window.getSelection() and Document.getSelection() methods return a Selection object representing the portion of the document selected by the user. A Selection object provides methods to:The Selection API also provides two events, both firing on Document:An interface which represents the part of the document selected by the user or the current position of the caret.A method returning a Selection object representing the current selection or current position of the caret.A method returning a Selection object representing the current selection or current position of the caret.An event which is fired when the current selection is changed.An event which is fired when a user starts a new selection.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Selection_API"
},
{
	"api_id": "70",
	"name": "Sensor APIs",
	"description": "The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.Although the Generic Sensor API specification defines a Sensor interface, as a web developer you will never use it. Instead you'll use one of its subclasses to retrieve specific kinds of sensor data. For example, the accelerometer interface returns the acceleration of the device along all three axes at the time it is read.Sensors may or may not correspond exactly to a physical device sensor. For example, the Gyroscope interface corresponds exactly to a physical device interface. Alternatively, the AbsoluteOrientationSensor interface provides information that is algorithmically aggregated from two or more device sensors. These sensor types are referred to as low-level and high-level respectively. The latter type of sensor is also called a fusion sensor (alternatively, virtual or synthetic sensors).Sensor interfaces are only proxies for the underlying device sensors. Consequently, feature detection is more complicated for sensors than it is for other APIs. The presence of a sensor API does not tell you whether that API is connected to a real hardware sensor, whether that sensor works, if it's still connected, or even whether the user has granted access to it. Making all this information consistently available is costly to performance and battery life.Therefore, feature detection for sensor APIs must include both detection of the APIs themselves and defensive programming strategies (see below).The examples below show three methods for detecting sensor APIs. Additionally you can put object instantiation inside a try...catch block. Notice that detection through the Navigator interface is not one of the available options.As stated in Feature Detection, checking for a particular sensor API is insufficient for feature detection. The existence of an actual sensor must be confirmed as well. This is where defensive programming is needed. Defensive programming requires three strategies.The code example below illustrates these principles. The try...catch block catches errors thrown during sensor instantiation. It listens for error events to catch errors thrown during use. The only time anything is shown to the user is when permissions need to be requested and when the sensor type isn't supported by the device.Note: If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Sensor readings may not be taken unless the user grants permission to a specific sensor type. Do this using the Permissions API. A brief example, shown below, requests permission before attempting to use the sensor.An alternative approach is to attempt to use the sensor and listen for the SecurityError.The following table describes for each sensor type, the name required for the Permissions API, the <iframe> element's allow attribute and the Feature-Policy directive.Sensor readings are received through the reading event callback which is inherited by all sensor types. Reading frequency is decided by you, accomplished with an option passed to a sensor's constructor. The option is a number that specifies the number of readings per second. A whole number or decimal may be used, the latter for frequencies less than a second. The actual reading frequency depends device hardware and consequently may be less than requested.The following example illustrates this using the Magnetometer sensor.Describes the device's physical orientation in relation to the Earth's reference coordinate system.Provides the acceleration applied to the device along all three axes.Returns the current light level or illuminance of the ambient light around the hosting device.Provides the gravity applied to the device along all three axes.Provides the angular velocity of the device along all three axes.Provides the acceleration applied to the device along all three axes, but without the contribution of gravity.Provides information about the magnetic field as detected by the device's primary magnetometer sensor.The base class for the AbsoluteOrientationSensor. This interface cannot be used directly, instead it provides properties and methods accessed by interfaces that inherit from it.Describes the device's physical orientation without regard to the Earth's reference coordinate system.The base class for all the other sensor interfaces. This interface cannot be used directly. Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.Provides information about errors thrown by a Sensor or related interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor_APIs"
},
{
	"api_id": "71",
	"name": "Server-sent events",
	"description": "Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page.Note: This feature is available in Web WorkersNote: Firefox does not currently support the use of server-sent events in service workers (it does support them in dedicated and shared workers). See bug 1681218.To learn how to use server-sent events, see our article Using server-sent events.Defines all the features that handle connecting to a server, receiving events/data, errors, closing a connection, etc.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events"
},
{
	"api_id": "72",
	"name": "Service Worker API",
	"description": "Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.A service worker is an event-driven worker registered against an origin and a path. It takes the form of a JavaScript file that can control the web-page/site that it is associated with, intercepting and modifying navigation and resource requests, and caching resources in a very granular fashion to give you complete control over how your app behaves in certain situations (the most obvious one being when the network is not available).A service worker is run in a worker context: it therefore has no DOM access, and runs on a different thread to the main JavaScript that powers your app, so it is non-blocking. It is designed to be fully async; as a consequence, APIs such as synchronous XHR and Web Storage can't be used inside a service worker.Service workers only run over HTTPS, for security reasons. Having modified network requests, wide open to man in the middle attacks would be really bad. In Firefox, Service Worker APIs are also hidden and cannot be used when the user is in private browsing mode.Note: On Firefox, for testing you can run service workers over HTTP (insecurely); simply check the Enable Service Workers over HTTP (when toolbox is open) option in the Firefox Devtools options/gear menu.Note: Unlike previous attempts in this area such as AppCache, service workers don't make assumptions about what you are trying to do, but then break when those assumptions are not exactly right. Instead, service workers give you much more granular control.Note: Service workers make heavy use of promises, as generally they will wait for responses to come through, after which they will respond with a success or failure action. The promises architecture is ideal for this.A service worker is first registered using the ServiceWorkerContainer.register() method. If successful, your service worker will be downloaded to the client and attempt installation/activation (see below) for URLs accessed by the user inside the whole origin, or inside a subset specified by you.At this point, your service worker will observe the following lifecycle:The service worker is immediately downloaded when a user first accesses a service worker–controlled site/page.After that, it is updated when:Installation is attempted when the downloaded file is found to be new — either different to an existing service worker (byte-wise compared), or the first service worker encountered for this page/site.If this is the first time a service worker has been made available, installation is attempted, then after a successful installation, it is activated.If there is an existing service worker available, the new version is installed in the background, but not yet activated — at this point it is called the worker in waiting. It is only activated when there are no longer any pages loaded that are still using the old service worker. As soon as there are no more pages to be loaded, the new service worker activates (becoming the active worker). Activation can happen sooner using ServiceWorkerGlobalScope.skipWaiting() and existing pages can be claimed by the active worker using Clients.claim().You can listen for the install event; a standard action is to prepare your service worker for usage when this fires, for example by creating a cache using the built in storage API, and placing assets inside it that you'll want for running your app offline.There is also an activate event. The point where this event fires is generally a good time to clean up old caches and other things associated with the previous version of your service worker.Your service worker can respond to requests using the FetchEvent event. You can modify the response to these requests in any way you want, using the FetchEvent.respondWith() method.Note: Because install/activate events could take a while to complete, the service worker spec provides a waitUntil() method. Once it is called on install or activate events with a promise, functional events such as fetch and push will wait until the promise is successfully resolved.For a complete tutorial to show how to build up your first basic example, read Using Service Workers.Service workers are also intended to be used for such things as:In the future, service workers will be able to do a number of other useful things for the web platform that will bring it closer towards native app viability. Interestingly, other specifications can and will start to make use of the service worker context, for example:Represents the storage for Request / Response object pairs that are cached as part of the ServiceWorker life cycle.Represents the storage for Cache objects. It provides a master directory of all the named caches that a ServiceWorker can access, and maintains a mapping of string names to corresponding Cache objects.Represents the scope of a service worker client. A service worker client is either a document in a browser context or a SharedWorker, which is controlled by an active worker.Represents a container for a list of Client objects; the main way to access the active service worker clients at the current origin.Extends the lifetime of the install and activate events dispatched on the ServiceWorkerGlobalScope, as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched to the ServiceWorker, until it upgrades database schemas, and deletes outdated cache entries, etc.The event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.The parameter passed into the onfetch handler, FetchEvent represents a fetch action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. It contains information about the request and resulting response, and provides the FetchEvent.respondWith() method, which allows us to provide an arbitrary response back to the controlled page.The parameter passed into the oninstall handler, the InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. As a child of ExtendableEvent, it ensures that functional events such as FetchEvent are not dispatched during installation.Provides methods for managing the preloading of resources with a service worker.Returns a ServiceWorkerContainer object, which provides access to registration, removal, upgrade, and communication with the ServiceWorker objects for the associated document.The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.Represents a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same ServiceWorker object.Provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister, and update service workers, and access the state of service workers and their registrations.Represents the global execution context of a service worker.Represents a message sent to a ServiceWorkerGlobalScope.Represents a service worker registration.The SyncEvent interface represents a sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.Provides an interface for registering and listing sync registrations.Represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. This is a special type of Client object, with some additional methods and properties available.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"
},
{
	"api_id": "73",
	"name": "Storage API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Note: This feature is available in Web WorkersThe Storage Standard defines a common, shared storage system to be used by all APIs and technologies that store content-accessible data for individual Web sites. The Storage API gives sites' code the ability to find out how much space they can use, how much they are already using, and even control whether or not they need to be alerted before the user agent disposes of site data in order to make room for other things.Site storage—the data stored for a Web site which is managed by the Storage Standard—includes:The site storage system described by the Storage Standard and interacted with using the Storage API consists of a single site storage unit for each origin. In essence, every Web site or Web application has its own storage unit into which its data gets placed. The diagram below shows a site storage pool with three storage units within, showing how storage units can have different data types stored within and may have different quotas (maximum storage limits).\n  \nUser agents are likely to use various techniques to determine the quota for various origins. One of the most likely methods—one which the specification specifically encourages, in fact—would be to consider the popularity and/or usage levels of individual sites to determine what their quotas should be. It's also conceivable that the browser might offer a user interface to customize these quotas.The actual data storage within each site storage unit is called its box. Each site storage unit has exactly one box into which all of its data is placed, and has a box mode that describes the data retention policy for that box. There are two modes:The user agent will try to retain the data contained in the box for as long as it can, but will not warn users if storage space runs low and it becomes necessary to clear the box in order to relieve the storage pressure.The user agent will retain the data as long as possible, clearing all "best-effort" boxes before considering clearing a box marked "persistent". If it becomes necessary to consider clearing persistent boxes, the user agent will notify the user and provide a way to clear one or more persistent boxes as needed.To change an origin's box mode requires permission to use the "persistent-storage" feature.If the site or app has the "persistent-storage" feature permission, it can use the StorageManager.persist() method to request that its box be made persistent. It's also possible for the user agent to decide to make the site's storage unit persistent due to usage characteristics or other metrics. The "persistent-storage" feature's permission-related flags, algorithms, and types are all set to the standard defaults for a permission, except that the permission state must be the same across the entire origin, and that if the permission state isn't "granted" (meaning that for whatever reason, access to the persistent storage feature was denied), the origin's site storage unit's box mode is always "best-effort".Note: See Using the Permissions API for further details about obtaining and managing permissions.When clearing site storage units, an origin's box is treated as a single entity; if the user agent needs to clear it and the user approves, the entire data store is cleared rather than providing some means of clearing only data from individual APIs.If a box is marked as "persistent", the contents won't be cleared by the user agent without either the data's origin itself or the user specifically doing so. This includes scenarios such as the user selecting a "Clear Caches" or "Clear Recent History" option. The user will be asked specifically for permission to remove persistent site storage units.The user agent determines, using whatever mechanism it chooses, the maximum amount of storage a given site can use. This maximum is the origin's quota. The amount of this space which is in use by the site is called its usage. Both of these values are estimates; there are several reasons why they're not precise:User agents may use any method they choose to determine the size of origins' quotas, and are encouraged by the specification to provide popular or frequently-used sites with extra space.To determine the estimated quota and usage values for a given origin, use the navigator.storage.estimate() method, which returns a promise that, when resolved, receives an object that contains these figures. For example:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage_API"
},
{
	"api_id": "74",
	"name": "Storage Access API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Storage Access API provides a way for embedded, cross-origin content to gain unrestricted access to storage that it would normally only have access to in a first-party context (we refer to this as an origin's first-party storage).The API provides methods that allow embedded resources to check whether they currently have access to their first-party storage, and to request access to their first-party storage from the user agent.Most browsers implement a number of storage access policies that restrict access to cookies and site data for embedded, cross-origin resources. These restrictions range from giving embedded resources under each top-level origin a unique storage space to outright blocking of storage access when resources are loaded in a third-party context.The semantics around third-party cookie blocking policies in particular differ from browser to browser, but the core functionality is similar: cross-origin resources embedded in a third-party context are not given access to the same cookies and site storage that they would have access to when loaded in a first-party context.These cookie blocking policies are known to break embedded cross-origin content that requires access to its first-party storage. As an example, federated logins often require access to authentication cookies stored in first-party storage, and will require the user to sign in on each site separately (or completely break) if those cookies are not available. In the case of breakage, site owners have often encouraged users to add their site as an exception or to disable the policy entirely. As a consequence, users who wish to continue to interact with embedded content are forced to greatly relax their blocking policy for resources loaded from all embedded origins and possibly across all websites.The Storage Access API is intended to solve this problem; embedded cross-origin content can request unrestricted access to its first-party storage on a site-by-site basis via the Document.requestStorageAccess() method, and check whether it already has access via the Document.hasStorageAccess() method.In addition, sandboxed <iframe>s cannot be granted storage access by default for security reasons. The API therefore also adds the allow-storage-access-by-user-activation sandbox token. The embedding website needs to add this to allow storage access requests to be successful, along with allow-scripts and allow-same-origin to allow it to call the API, and execute in an origin that can have cookies:The API is designed to limit the potential storage exceptions to origins for which the user has shown an intent to interact. This is enforced through the following constraints:The browser may decide to involve the user in the decision of whether to grant an incoming storage access request. Specifics regarding the lifetime of a storage grant and the circumstances under which the browser may decide to inform the user are currently being worked through and will be announced once ready.When requestStorageAccess() is called by an embedded, cross-origin document, the user agent may choose to involve the user in the decision of whether to grant storage access to the requesting origin. Prompting heuristics currently vary across the two implementers of the Storage Access API — Safari shows prompts for all embedded tracking content that has not previously received storage access, while Firefox only prompts users after a tracking origin has requested storage access on more than a threshold number of sites. See Document.requestStorageAccess() for more details.Although the API surface is the same, websites using the Storage Access API should expect differences in the level and extent of storage access they receive between Firefox and Safari. This is caused by differences in the storage access policies implemented in the two browsers. Design properties unique to Firefox are summarized here:Documentation for Firefox's new storage access policy for blocking tracking cookies includes a detailed description of the scope of storage access grants.The storage API methods are implemented on the Document interface:Returns a Promise that resolves with a boolean value indicating whether the document has access to its first-party storage.Returns a Promise that resolves if the access to first-party storage was granted, and rejects if access was denied.Note: User interaction propagates to the Promise returned by both of these methods, allowing the callers to take actions that require user interaction without requiring a second click from the user. For example, a caller could open a pop-up window from the resolved Promise without triggering Firefox's pop-up blocker.The <iframe> element's sandbox attribute has a new token, allow-storage-access-by-user-activation, which permits sandboxed <iframe>s to use the Storage Access API to request storage access.The API is currently only at the proposal stage — the standardization process has yet to begin. You can currently find specification details of the API at Apple's Introducing Storage Access API blog post, and WHATWG HTML issue 3338 — Proposal: Storage Access API.Using the Storage Access API",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API"
},
{
	"api_id": "75",
	"name": "Streams API",
	"description": "The Streams API allows JavaScript to programmatically access streams of data received over the network and process them as desired by the developer.Note: This feature is available in Web WorkersStreaming involves breaking a resource that you want to receive over a network down into small chunks, then processing it bit by bit. This is something browsers do anyway when receiving assets to be shown on webpages — videos buffer and more is gradually available to play, and sometimes you'll see images display gradually as more is loaded.But this has never been available to JavaScript before. Previously, if we wanted to process a resource of some kind (be it a video, or a text file, etc.), we'd have to download the entire file, wait for it to be deserialized into a suitable format, then process the whole lot after it is fully received.With Streams being available to JavaScript, this all changes — you can now start processing raw data with JavaScript bit by bit as soon as it is available on the client-side, without needing to generate a buffer, string, or blob.\n  \nThere are more advantages too — you can detect when streams start or end, chain streams together, handle errors and cancel streams as required, and react to the speed the stream is being read at.The basic usage of Streams hinges around making responses available as streams. For example, the response body returned by a successful fetch request can be exposed as a ReadableStream, and you can then read it using a reader created with ReadableStream.getReader(), cancel it with ReadableStream.cancel(), etc.More complicated uses involve creating your own stream using the ReadableStream() constructor, for example to process data inside a service worker.You can also write data to streams using WritableStream.Note: You can find a lot more details about the theory and practice of streams in our articles — Streams API concepts, Using readable streams, and Using writable streams.Represents a readable stream of data. It can be used to handle response streams of the Fetch API, or developer-defined streams (e.g. a custom ReadableStream() constructor).Represents a default reader that can be used to read stream data supplied from a network (e.g. a fetch request).Represents a controller allowing control of a ReadableStream's state and internal queue. Default controllers are for streams that are not byte streams.Provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.Represents a default writable stream writer that can be used to write chunks of data to a writable stream.Represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.Represents a set of transformable data.Provides methods to manipulate the ReadableStream and WritableStream associated with a transform stream.Provides a built-in byte length queuing strategy that can be used when constructing streams.Provides a built-in chunk counting queuing strategy that can be used when constructing streams.When a new Request object is constructed, you can pass it a ReadableStream in the body property of its RequestInit dictionary. This Request could then be passed to a fetch() to commence fetching the stream.The response body returned by a successful fetch request is exposed by default as a ReadableStream, and can have a reader attached to it, etc.Represents a BYOB ("bring your own buffer") reader that can be used to read stream data supplied by the developer (e.g. a custom ReadableStream() constructor).Represents a controller allowing control of a ReadableStream's state and internal queue. Byte stream controllers are for byte streams.Represents a pull into request in a ReadableByteStreamController.We have created a directory of examples to go along with the Streams API documentation — see mdn/dom-examples/streams. The examples are as follows:Examples from other developers:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Streams_API"
},
{
	"api_id": "76",
	"name": "Touch events",
	"description": "To provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.The touch events interfaces are relatively low-level APIs that can be used to support application-specific multi-touch interactions such as a two-finger gesture. A multi-touch interaction starts when a finger (or stylus) first touches the contact surface. Other fingers may subsequently touch the surface and optionally move across the touch surface. The interaction ends when the fingers are removed from the surface. During this interaction, an application receives touch events during the start, move, and end phases.Touch events are similar to mouse events except they support simultaneous touches and at different locations on the touch surface. The TouchEvent interface encapsulates all of the touchpoints that are currently active. The Touch interface, which represents a single touchpoint, includes information such as the position of the touch point relative to the browser viewport.The touch-sensitive surface. This may be a screen or trackpad.A point of contact with the surface. This may be a finger (or elbow, ear, nose, whatever, but typically a finger) or stylus.Represents an event that occurs when the state of touches on the surface changes.Represents a single point of contact between the user and the touch surface.Represents a group of touches; this is used when the user has, for example, multiple fingers on the surface at the same time.This example tracks multiple touchpoints at a time, allowing the user to draw in a <canvas> with more than one finger at a time. It will only work on a browser that supports touch events.Note: The text below uses the term "finger" when describing the contact with the surface, but it could, of course, also be a stylus or other contact method.\n  When the page loads, the startup() function shown below will be called.\n  This sets up all the event listeners for our <canvas> element so we can handle the touch events as they occur.\nWe'll keep track of the touches in-progress.When a touchstart event occurs, indicating that a new touch on the surface has occurred, the handleStart() function below is called.This calls event.preventDefault() to keep the browser from continuing to process the touch event (this also prevents a mouse event from also being delivered). Then we get the context and pull the list of changed touch points out of the event's TouchEvent.changedTouches property.After that, we iterate over all the Touch objects in the list, pushing them onto an array of active touchpoints and drawing the start point for the draw as a small circle; we're using a 4-pixel wide line, so a 4-pixel radius circle will show up neatly.Each time one or more fingers move, a touchmove event is delivered, resulting in our handleMove() function being called. Its responsibility in this example is to update the cached touch information and to draw a line from the previous position to the current position of each touch.This iterates over the changed touches as well, but it looks in our cached touch information array for the previous information about each touch to determine the starting point for each touch's new line segment to be drawn. This is done by looking at each touch's Touch.identifier property. This property is a unique integer for each touch and remains consistent for each event during the duration of each finger's contact with the surface.This lets us get the coordinates of the previous position of each touch and use the appropriate context methods to draw a line segment joining the two positions together.After drawing the line, we call Array.splice() to replace the previous information about the touchpoint with the current information in the ongoingTouches array.When the user lifts a finger off the surface, a touchend event is sent. We handle this by calling the handleEnd() function below. Its job is to draw the last line segment for each touch that ended and remove the touchpoint from the ongoing touch list.This is very similar to the previous function; the only real differences are that we draw a small square to mark the end and that when we call Array.splice(), we remove the old entry from the ongoing touch list, without adding in the updated information. The result is that we stop tracking that touchpoint.If the user's finger wanders into browser UI, or the touch otherwise needs to be canceled, the touchcancel event is sent, and we call the handleCancel() function below.Since the idea is to immediately abort the touch, we remove it from the ongoing touch list without drawing a final line segment.This example uses two convenience functions that should be looked at briefly to help make the rest of the code more clear.\n  To make each touch's drawing look different, the colorForTouch() function is used to pick a color based on the touch's unique identifier.\n  This identifier is an opaque number, but we can at least rely on it differing between the currently-active touches.\n\n  The result from this function is a string that can be used when calling <canvas> functions to set drawing colors.\n  For example, for a Touch.identifier value of 10, the resulting string is "#a31".\nSome browsers (mobile Safari, for one) re-use touch objects between events, so it's best to copy the properties you care about, rather than referencing the entire object.The ongoingTouchIndexById() function below scans through the ongoingTouches array to find the touch matching the given identifier then returns that touch's index into the array.You can test this example on mobile devices by touching the box below.\n  Note: More generally, the example will work on platforms that provide touch events.\n  You can test this on desktop platforms that can simulate such events:\n  This section provides additional tips on how to handle touch events in your web application.Since calling preventDefault() on a touchstart or the first touchmove event of a series prevents the corresponding mouse events from firing, it's common to call preventDefault() on touchmove rather than touchstart. That way, mouse events can still fire and things like links will continue to work. Alternatively, some frameworks have taken to re-firing touch events as mouse events for this same purpose. (This example is oversimplified and may result in strange behavior. It is only intended as a guide.)One technique for preventing things like pinchZoom on a page is to call preventDefault() on the second touch in a series. This behavior is not well defined in the touch events spec and results in different behavior for different browsers (i.e., iOS will prevent zooming but still allow panning with both fingers; Android will allow zooming but not panning; Opera and Firefox currently prevent all panning and zooming.) Currently, it's not recommended to depend on any particular behavior in this case, but rather to depend on meta viewport to prevent zooming.Touch events are typically available on devices with a touch screen, but many browsers make the touch events API unavailable on all desktop devices, even those with touch screens.The reason for this is that some websites use the availability of parts of the touch events API as an indicator that the browser is running on a mobile device. If the touch events API is available, these websites will assume a mobile device and serve mobile-optimized content. This may then provide a poor experience for users of desktop devices that have touch screens.To support both touch and mouse across all types of devices, use pointer events instead.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Touch_events"
},
{
	"api_id": "77",
	"name": "UI Events",
	"description": "The UI Events API defines a system for handling user interactions such as mouse and keyboard input. This includes:Passed into handlers for composition events. Composition events enable a user to enter characters that might not be available on the physical keyboard.Passed into handlers for focus events, which are associated with elements receiving or losing focus.Passed into handlers for input events, which are associated with the user entering some input; for example, using an <input> element.Passed into handlers for keyboard up/down events.Passed into event handlers for mouse events, including mouse move, mousing over and out, and mouse button up or down. Note that auxclick, click, and dblclick events are passed PointerEvent objects.Deprecated, Firefox-only, non-standard interface for scroll events. Use WheelEvent instead.Passed into mutation event handlers, which were designed to allow notifications of changes to the DOM. Now deprecated: use MutationObserver instead.A base from which other UI events inherit, and also the event interface passed into some events such as load and unload.Passed into the handler for the wheel event, which fires when the user rotates a mouse wheel or similar user interface component such as a touchpad.Fired when loading a resource has been aborted (for example, because the user canceled it).Fired when the user clicks the non-primary pointer button.Fired just before the DOM is about to be updated with some user input.Fired when an element has lost focus.Fired when the user clicks the primary pointer button.Fired when a text composition system (such as a speech-to-text processor) has finished its session; for example, because the user has closed it.Fired when the user has started a new session with a text composition system.Fired when a text composition system updates its text with a new character, reflected in an update to the data property of the CompositionEvent.Fired just before a context menu is invoked.Fired when the user double-clicks the primary pointer button.Fired when a resource fails to load or can't be processed (for example, if an image is invalid or a script has an error).Fired when an element has received focus.Fired when an element is just about to receive focus.Fired when an element is just about to lose focus.Fired just after the DOM has been updated with some user input (for example, some text input).Fired when the user has pressed a key.Fired when the user has pressed a key, only if the key produces a character value. Use keydown instead.Fired when the user has released a key.Fired when the whole page has loaded, including all dependent resources such as stylesheets and images.Fired when the user presses a button on a mouse or other pointing device, while the pointer is over the element.Fired when a mouse or other pointing device is moved inside the boundary of the element or one of its descendants.Fired when a mouse or other pointing device is moved outside the boundary of the element and all of its descendants.Fired when a mouse or other pointing device is moved while over an element.Fired when a mouse or other pointing device is moved outside the boundary of the element.Fired when a mouse or other pointing device is moved outside the element.Fired when the user releases a button on a mouse or other pointing device, while the pointer is over the element.Fired when the user selects some text.Fired when the document or a child resource are being unloaded.Fired when the user rotates a mouse wheel or similar user interface component such as a touchpad.This example logs mouse events along with the X and Y coordinates at which the event was generated. Try moving the mouse into the yellow and red squares, and clicking or double-clicking.This example logs keydown, beforeinput and, input events. Try typing into the text area. Note that keys like Shift produce keydown events but not input events.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/UI_Events"
},
{
	"api_id": "78",
	"name": "URL API",
	"description": "The URL API is a component of the URL standard, which defines what constitutes a valid Uniform Resource Locator and the API that accesses and manipulates URLs. The URL standard also defines concepts such as domains, hosts, and IP addresses, and also attempts to describe in a standard way the legacy application/x-www-form-urlencoded MIME type used to submit web forms' contents as a set of key/value pairs.Note: This feature is available in Web WorkersThe majority of the URL standard is taken up by the definition of a URL and how it is structured and parsed. Also covered are definitions of various terms related to addressing of computers on a network, and the algorithms for parsing IP addresses and DOM addresses are specified. More interesting to most developers is the API itself.Creating an URL object for a given URL parses the URL and provides quick access to its constituent parts through its properties.The snippet above creates a URL object for the article you're reading right now, then fetches the host and pathname properties. In this case, those strings are developer.mozilla.org and /en-US/docs/Web/API/URL_API, respectively.Most of the properties of URL are settable; you can write new values to them to alter the URL represented by the object. For example, to create a URL and set its username:Setting the value of username not only sets that property's value, but it updates the overall URL. After executing the code snippet above, the value returned by addr.href is https://someguy@example.com/login. This is true for any of the writable properties.The search property on a URL contains the query string portion of the URL. For example, if the URL is https://example.com/login?user=someguy&page=news, then the value of the search property is ?user=someguy&page=news. You can also look up the values of individual parameters with the URLSearchParams object's get() method:For example, in the above snippet, the username and target page are taken from the query and passed to appropriate functions that are used by the site's code to log in and route the user to their desired destination within the site.Other functions within URLSearchParams let you change the value of keys, add and delete keys and their values, and even sort the list of parameters.The URL API is a simple one, with only a couple of interfaces to its name:If you want to process the parameters included in a URL, you could do it manually, but it's much easier to create a URL object to do it for you. The fillTableWithParameters() function below takes as input a HTMLTableElement object representing a <table>. Rows are added to the table, one for each key found in the parameters, with the first column containing the key's name, and the second column having the value.Note the call to URLSearchParams.sort() to sort the parameter list before generating the table.A working version of this example can be found on Glitch. Just add parameters to the URL when loading the page to see them in the table. For instance, try https://url-api.glitch.me?from=mdn&excitement=high&likelihood=inconceivable.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/URL_API"
},
{
	"api_id": "79",
	"name": "URL Pattern API",
	"description": "\n  The URL Pattern API defines a syntax that is used to create URL pattern\n  matchers. These patterns can be matched against URLs or individual URL\n  components. The URL Pattern API is used by the URLPattern\n  interface.\n\n  The pattern syntax is based on the syntax from the\n  path-to-regexp library. Patterns\n  can contain:\n\n  You can find details about the syntax in the pattern syntax\n  section below.\nThe URL Pattern API only has a single related interface:\n  The syntax for patterns is based on the\n  path-to-regexp JavaScript library.\n  This syntax is similar to the one used in\n  Ruby on Rails, or JavaScript frameworks like\n  Express or Next.js.\n\n  Each pattern can contain a combination of fixed text and groups. The fixed text\n  is a sequence of characters that is matched exactly. Groups match an arbitrary\n  string based on matching rules. Each URL part has its own default rules that are\n  explained below, but they can be overwritten.\n\n  By default, a group matching the pathname part of the URL will match all\n  characters but the forward slash (/). In the hostname part, the group will\n  match all characters except the dot (.). In all other parts, the group will\n  match all characters. The segment wildcard is non-greedy, meaning that it will\n  match the shortest possible string.\n\n  Instead of using the default match rules for a group, you can use a regex for\n  each group. This regex defines the matching rules for the group. Below is an\n  example of a regex matcher on a named group that constrains the group to only\n  match if it contains one or more digits:\nSome regex patterns do not work as you may expect:\n  Groups can either be named or unnamed. Named groups are specified by prefixing\n  the group name with a colon (:). Regexp groups that are not prefixed by a\n  colon and a name are unnamed. Unnamed groups are numerically indexed in the match\n  result based on their order in the pattern.\n\n  Groups can also have modifiers. These are specified after the group name (or\n  after the regexp if there is one). There are three modifiers: ? to make the\n  group optional, + to make the group repeat one or more times, and * to make\n  the group repeat zero or more times.\n\n  Patterns can also contain group delimiters. These are pieces of a pattern that\n  are surrounded by curly braces ({}). These group delimiters are not captured\n  in the match result like capturing groups, but can still have modifiers applied\n  to them, just like groups. If group delimiters are not modified by a modifier,\n  they are treated as if the items in them were just part of the parent pattern.\n  Group delimiters may not contain other group delimiters, but may contain any\n  other pattern items (capturing groups, regex, wildcard, or fixed text).\n\n  In patterns that match against the pathname part of a URL, groups get an\n  automatic slash (/) prefix added if the group definition is preceded by a\n  slash (/). This is useful for groups with modifiers, as it allows for\n  repeating groups to work as expected.\n\n  If you do not want automatic prefixing, you can disable it by surrounding the\n  group with group delimiters ({}). Group delimiters do not have automatic\n  prefixing behavior.\n\n  The wildcard token (*) is a shorthand for an unnamed capturing group that\n  matches all characters zero or more times. You can place this anywhere in the\n  pattern. The wildcard is greedy, meaning that it will match the longest possible\n  string.\n\n  When a pattern is parsed it is automatically normalized to a canonical form. For\n  example, unicode characters are percent encoded in the pathname property,\n  punycode encoding is used in the hostname, default port numbers are elided,\n  paths like /foo/./bar/ are collapsed to just /foo/bar, etc. In addition,\n  there are some pattern representations that parse to the same underlying\n  meaning, like foo and {foo}. Such cases are normalized to the simplest form.\n  In this case {foo} gets changed to foo.\n\n  The following example shows how a URLPattern filters a specific URL component.\n  When the URLPattern() constructor is called with a structured object of\n  component patterns any missing components default to the * wildcard value.\n\n  The following example shows how to construct a URLPattern from a full URL\n  string with embedded patterns. For example, a : can be both the URL protocol\n  suffix, like https:, and the beginning of a named pattern group, like :foo.\n  It "just works" if there is no ambiguity between whether a character is part of\n  the URL syntax or part of the pattern syntax.\n\n  The following example shows how a URLPattern constructed from an ambiguous\n  string will favor treating characters as part of the pattern syntax. In this\n  case the : character could be the protocol component suffix or it could be the\n  prefix for a named group in the pattern. The constructor chooses to treat this\n  as part of the pattern and therefore determines this is a relative pathname\n  pattern. Since there is no base URL the relative pathname cannot be resolved and\n  it throws an error.\n\n  The following example shows how an ambiguous constructor string character can be\n  escaped to be treated as a URL separator instead of a pattern character. Here\n  : is escaped as \\:.\nThe following example shows how test() and exec() can use base URLs.\n  The follow example shows how base URLs can also be used to construct the\n  URLPattern. Note that the base URL in these cases is treated strictly as a URL\n  and cannot contain any pattern syntax itself.\n\n  Also, since the base URL provides a value for every component the resulting\n  URLPattern will also have a value for every component, even if it's the empty\n  string. This means you do not get the "default to wildcard" behavior.\n\n  The following example shows how input values that match pattern groups can later\n  be accessed from the exec() result object. Unnamed groups are assigned index\n  numbers sequentially.\n\n  The following example shows how groups can be given custom names which can be\n  used to accessed the matched value in the result object.\n\n  The following example shows how a matching group can use a custom regular\n  expression.\n\n  The following example shows how to use a custom regular expression with a named\n  group.\n\n  The following example shows how to make a matching group optional by placing a\n  ? modifier after it. For the pathname component this also causes any preceding\n  / character to be treated as an optional prefix to the group.\n\n  The following example shows how a matching group can be made repeated by placing\n  + modifier after it. In the pathname component this also treats the /\n  prefix as special. It is repeated with the group.\n\n  The following example shows how to make a matching group that is both optional\n  and repeated. Do this by placing a * modifier after the group. Again, the\n  pathname component treats the / prefix as special. It both becomes optional\n  and is also repeated with the group.\n\n  The following example shows how curly braces can be used to denote a custom\n  prefix and/or suffix to be operated on by a subsequent ?, *, or +\n  modifier.\n\n  The following example shows how curly braces can be used to denote fixed text\n  values as optional or repeated without using a matching group.\n\n  The following example shows how many features can be combined across multiple\n  URL components.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/URL_Pattern_API"
},
{
	"api_id": "80",
	"name": "Vibration API",
	"description": "Most modern mobile devices include vibration hardware, which lets software code provide physical feedback to the user by causing the device to shake. The Vibration API offers Web apps the ability to access this hardware, if it exists, and does nothing if the device doesn't support it.Vibration is described as a pattern of on-off pulses, which may be of varying lengths. The pattern may consist of either a single integer, describing the number of milliseconds to vibrate, or an array of integers describing a pattern of vibrations and pauses. Vibration is controlled with a single method: Navigator.vibrate().You may pulse the vibration hardware one time by specifying either a single value or an array consisting of only one value:Both of these examples vibrate the device for 200 ms.An array of values describes alternating periods in which the device is vibrating and not vibrating. Each value in the array is converted to an integer, then interpreted alternately as the number of milliseconds the device should vibrate and the number of milliseconds it should not be vibrating. For example:This vibrates the device for 200 ms, then pauses for 100 ms before vibrating the device again for another 200 ms.You may specify as many vibration/pause pairs as you like, and you may provide either an even or odd number of entries; it's worth noting that you don't have to provide a pause as your last entry since the vibration automatically stops at the end of each vibration period.Calling Navigator.vibrate() with a value of 0, an empty array, or an array containing all zeros will cancel any currently ongoing vibration pattern.Some basic setInterval and clearInterval action will allow you to create persistent vibration:Of course, the snippet above doesn't take into account the array method of vibration; persistent array-based vibration will require calculating the sum of the array items and creating an interval based on that number (with an additional delay, probably).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API"
},
{
	"api_id": "81",
	"name": "Visual Viewport API",
	"description": "The Visual Viewport API provides an explicit mechanism for querying and modifying the properties of the window's visual viewport. The visual viewport is the visual portion of a screen excluding on-screen keyboards, areas outside of a pinch-zoom area, or any other on-screen artifact that doesn't scale with the dimensions of a page.The mobile web contains two viewports, the layout viewport and the visual viewport. The layout viewport covers all the elements on a page and the visual viewport is what is actually visible on the screen. When the user pinch-zooms into the page, the visual viewport shrinks but the layout viewport is unchanged. User-interface features like the on-screen keyboard (OSK) can shrink the visual viewport without affecting the layout viewport.What happens when a web page element needs to be visible on screen regardless of the visible portion of a web page? For example, what if you need a set of image controls to remain on screen regardless of the pinch zoom level of the device? Current browsers vary in how they handle this. The visual viewport lets web developers solve this by positioning elements relative to what's shown on screen.To access a window's visual viewport, you can obtain a VisualViewport object from the window.visualViewport property. The object includes a set of properties describing the viewport. It also adds two events, onresize and onscroll, that fire whenever the visual viewport changes. These events allow you to position elements relative to the visual viewport that would normally be anchored to the layout viewport.A read-only reference to the window's VisualViewport object. If this property doesn't exist, the API is unsupported.Represents the visual viewport for a given window. A window's VisualViewport object provides information about the viewport's position and size, and receives the resize and scroll events you can monitor to know when changes occur to the window's viewport.The code below is based on the sample in the specification, though it adds a few things that make it function better. It shows a function called viewportHandler(). When called it queries the offsetLeft and height properties for values it uses in a CSS translate() method. You invoke this function by passing it to both event calls.One thing that may not be clear in this example is the use of the pendingUpdate flag and the call to requestAnimationFrame(). The pendingUpdate flag serves to prevent multiple invocations of the transform that can occur when onresize and onscroll fire at the same time. Using requestAnimationFrame() ensures that the transform occurs before the next render.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API"
},
{
	"api_id": "82",
	"name": "Web Animations API",
	"description": "The Web Animations API allows for synchronizing and timing changes to the presentation of a Web page, i.e. animation of DOM elements. It does so by combining two models: the Timing Model and the Animation Model.The Web Animations API provides a common language for browsers and developers to describe animations on DOM elements. To get more information on the concepts behind the API and how to use it, read Using the Web Animations API.Provides playback controls and a timeline for an animation node or source. Can take an object created with the KeyframeEffect() constructor.Describes sets of animatable properties and values, called keyframes and their timing options. These can then be played using the Animation() constructor.Represents the timeline of animation. This interface exists to define timeline features (inherited by DocumentTimeline and future timeline objects) and is not itself accessed by developers.Actually part of CSS Animations.Represents animation timelines, including the default document timeline (accessed using the Document.timeline property).The Web Animations API adds some new features to document and element.The DocumentTimeline object representing the default document timeline.Returns an Array of Animation objects currently in effect on elements in the document.A shortcut method for creating and playing an animation on an element. It returns the created Animation object instance.Returns an Array of Animation objects currently affecting an element or which are scheduled to do so in future.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API"
},
{
	"api_id": "83",
	"name": "Web Audio API",
	"description": "The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing developers to choose audio sources, add effects to audio, create audio visualizations, apply spatial effects (such as panning) and much more.The Web Audio API involves handling audio operations inside an audio context, and has been designed to allow modular routing. Basic audio operations are performed with audio nodes, which are linked together to form an audio routing graph. Several sources — with different types of channel layout — are supported even within a single context. This modular design provides the flexibility to create complex audio functions with dynamic effects.Audio nodes are linked into chains and simple webs by their inputs and outputs. They typically start with one or more sources. Sources provide arrays of sound intensities (samples) at very small timeslices, often tens of thousands of them per second. These could be either computed mathematically (such as OscillatorNode), or they can be recordings from sound/video files (like AudioBufferSourceNode and MediaElementAudioSourceNode) and audio streams (MediaStreamAudioSourceNode). In fact, sound files are just recordings of sound intensities themselves, which come in from microphones or electric instruments, and get mixed down into a single, complicated wave.Outputs of these nodes could be linked to inputs of others, which mix or modify these streams of sound samples into different streams. A common modification is multiplying the samples by a value to make them louder or quieter (as is the case with GainNode). Once the sound has been sufficiently processed for the intended effect, it can be linked to the input of a destination (BaseAudioContext.destination), which sends the sound to the speakers or headphones. This last connection is only necessary if the user is supposed to hear the audio.A simple, typical workflow for web audio would look something like this:\n  \nTiming is controlled with high precision and low latency, allowing developers to write code that responds accurately to events and is able to target specific samples, even at a high sample rate. So applications such as drum machines and sequencers are well within reach.The Web Audio API also allows us to control how audio is spatialized. Using a system based on a source-listener model, it allows control of the panning model and deals with distance-induced attenuation induced by a moving source (or moving listener).Note: You can read about the theory of the Web Audio API in a lot more detail in our article Basic concepts behind Web Audio API.The Web Audio API can seem intimidating to those that aren't familiar with audio or music terms, and as it incorporates a great deal of functionality it can prove difficult to get started if you are a developer.It can be used to incorporate audio into your website or application, by providing atmosphere like futurelibrary.no, or auditory feedback on forms. However, it can also be used to create advanced interactive instruments. With that in mind, it is suitable for both developers and musicians alike.We have a simple introductory tutorial for those that are familiar with programming but need a good introduction to some of the terms and structure of the API.There's also a Basic Concepts Behind Web Audio API article, to help you understand the way digital audio works, specifically in the realm of the API. This also includes a good introduction to some of the concepts the API is built upon.Learning coding is like playing cards — you learn the rules, then you play, then you go back and learn the rules again, then you play again. So if some of the theory doesn't quite fit after the first tutorial and article, there's an advanced tutorial which extends the first one to help you practice what you've learnt, and apply some more advanced techniques to build up a step sequencer.We also have other tutorials and comprehensive reference material available that covers all features of the API. See the sidebar on this page for more.If you are more familiar with the musical side of things, are familiar with music theory concepts, want to start building instruments, then you can go ahead and start building things with the advanced tutorial and others as a guide (the above-linked tutorial covers scheduling notes, creating bespoke oscillators and envelopes, as well as an LFO among other things.)If you aren't familiar with the programming basics, you might want to consult some beginner's JavaScript tutorials first and then come back here — see our Beginner's JavaScript learning module for a great place to begin.The Web Audio API has a number of interfaces and associated events, which we have split up into nine categories of functionality.General containers and definitions that shape audio graphs in Web Audio API usage.The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode. An audio context controls the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an AudioContext before you do anything else, as everything happens inside a context.The AudioNode interface represents an audio-processing module like an audio source (e.g. an HTML <audio> or <video> element), audio destination, intermediate processing module (e.g. a filter like BiquadFilterNode, or volume control like GainNode).The AudioParam interface represents an audio-related parameter, like one of an AudioNode. It can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.Provides a map-like interface to a group of AudioParam interfaces, which means it provides the methods forEach(), get(), has(), keys(), and values(), as well as a size property.The BaseAudioContext interface acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively. You wouldn't use BaseAudioContext directly — you'd use its features via one of these two inheriting interfaces.The ended event is fired when playback has stopped because the end of the media was reached.Interfaces that define audio sources for use in the Web Audio API.The AudioScheduledSourceNode is a parent interface for several types of audio source node interfaces. It is an AudioNode.The OscillatorNode interface represents a periodic waveform, such as a sine or triangle wave. It is an AudioNode audio-processing module that causes a given frequency of wave to be created.The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the BaseAudioContext.decodeAudioData method, or created with raw data using BaseAudioContext.createBuffer. Once decoded into this form, the audio can then be put into an AudioBufferSourceNode.The AudioBufferSourceNode interface represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It is an AudioNode that acts as an audio source.The MediaElementAudioSourceNode interface represents an audio source consisting of an HTML5 <audio> or <video> element. It is an AudioNode that acts as an audio source.The MediaStreamAudioSourceNode interface represents an audio source consisting of a MediaStream (such as a webcam, microphone, or a stream being sent from a remote computer). If multiple audio tracks are present on the stream, the track whose id comes first lexicographically (alphabetically) is used. It is an AudioNode that acts as an audio source.A node of type MediaStreamTrackAudioSourceNode represents an audio source whose data comes from a MediaStreamTrack. When creating the node using the createMediaStreamTrackSource() method to create the node, you specify which track to use. This provides more control than MediaStreamAudioSourceNode.Interfaces for defining effects that you want to apply to your audio sources.The BiquadFilterNode interface represents a simple low-order filter. It is an AudioNode that can represent different kinds of filters, tone control devices, or graphic equalizers. A BiquadFilterNode always has exactly one input and one output.The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, and is often used to achieve a reverb effect.The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once.The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output.The WaveShaperNode interface represents a non-linear distorter. It is an AudioNode that use a curve to apply a waveshaping distortion to the signal. Beside obvious distortion effects, it is often used to add a warm feeling to the signal.Describes a periodic waveform that can be used to shape the output of an OscillatorNode.Implements a general infinite impulse response (IIR) filter; this type of filter can be used to implement tone-control devices and graphic equalizers as well.Once you are done processing your audio, these interfaces define where to output it.The AudioDestinationNode interface represents the end destination of an audio source in a given context — usually the speakers of your device.The MediaStreamAudioDestinationNode interface represents an audio destination consisting of a WebRTC MediaStream with a single AudioMediaStreamTrack, which can be used in a similar way to a MediaStream obtained from getUserMedia(). It is an AudioNode that acts as an audio destination.If you want to extract time, frequency, and other data from your audio, the AnalyserNode is what you need.The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information, for the purposes of data analysis and visualization.To split and merge audio channels, you'll use these interfaces.The ChannelSplitterNode interface separates the different channels of an audio source out into a set of mono outputs.The ChannelMergerNode interface reunites different mono inputs into a single output. Each input will be used to fill a channel of the output.These interfaces allow you to add audio spatialization panning effects to your audio sources.The AudioListener interface represents the position and orientation of the unique person listening to the audio scene used in audio spatialization.The PannerNode interface represents the position and behavior of an audio source signal in 3D space, allowing you to create complex panning effects.The StereoPannerNode interface represents a simple stereo panner node that can be used to pan an audio stream left or right.Using audio worklets, you can define custom audio nodes written in JavaScript or WebAssembly. Audio worklets implement the Worklet interface, a lightweight version of the Worker interface.The AudioWorklet interface is available through the AudioContext object's audioWorklet, and lets you add modules to the audio worklet to be executed off the main thread.The AudioWorkletNode interface represents an AudioNode that is embedded into an audio graph and can pass messages to the corresponding AudioWorkletProcessor.The AudioWorkletProcessor interface represents audio processing code running in a AudioWorkletGlobalScope that generates, processes, or analyzes audio directly, and can pass messages to the corresponding AudioWorkletNode.The AudioWorkletGlobalScope interface is a WorkletGlobalScope-derived object representing a worker context in which an audio processing script is run; it is designed to enable the generation, processing, and analysis of audio data directly using JavaScript in a worklet thread rather than on the main thread.Before audio worklets were defined, the Web Audio API used the ScriptProcessorNode for JavaScript-based audio processing. Because the code runs in the main thread, they have bad performance. The ScriptProcessorNode is kept for historic reasons but is marked as deprecated.The ScriptProcessorNode interface allows the generation, processing, or analyzing of audio using JavaScript. It is an AudioNode audio-processing module that is linked to two buffers, one containing the current input, one containing the output. An event, implementing the AudioProcessingEvent interface, is sent to the object each time the input buffer contains new data, and the event handler terminates when it has filled the output buffer with data.The audioprocess event is fired when an input buffer of a Web Audio API ScriptProcessorNode is ready to be processed.The AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.It is possible to process/render an audio graph very quickly in the background — rendering it to an AudioBuffer rather than to the device's speakers — with the following.The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't really render the audio but rather generates it, as fast as it can, in a buffer.The complete event is fired when the rendering of an OfflineAudioContext is terminated.The OfflineAudioCompletionEvent represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event uses this interface.In this tutorial, we're going to cover sound creation and modification, as well as timing and scheduling. We're going to introduce sample loading, envelopes, filters, wavetables, and frequency modulation. If you're familiar with these terms and you're looking for an introduction to their application within with the Web Audio API, you've come to the right place.This article explains how to create an audio worklet processor and use it in a Web Audio application.This article explains some of the audio theory behind how the features of the Web Audio API work, to help you make informed decisions while designing how audio is routed through your app. If you are not already a sound engineer, it will give you enough background to understand why the Web Audio API works as it does.This article demonstrates how to use a ConstantSourceNode to link multiple parameters together so they share the same value, which can be changed by setting the value of the ConstantSourceNode.offset parameter.This article presents the code and working demo of a video keyboard you can play using the mouse. The keyboard allows you to switch among the standard waveforms as well as one custom waveform, and you can control the main gain using a volume slider beneath the keyboard. This example makes use of the following Web API interfaces: AudioContext, OscillatorNode, PeriodicWave, and GainNode.In this article, we cover the differences in Web Audio API since it was first implemented in WebKit and how to update your code to use the modern Web Audio API.While working on your Web Audio API code, you may find that you need tools to analyze the graph of nodes you create or to otherwise debug your work. This article discusses tools available to help you do that.The IIRFilterNode interface of the Web Audio API is an AudioNode processor that implements a general infinite impulse response (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers, and the filter response parameters can be specified, so that it can be tuned as needed. This article looks at how to implement one, and use it in a simple example.Let's take a look at getting started with the Web Audio API. We'll briefly look at some concepts, then study a simple boombox example that allows us to load an audio track, play and pause it, and change its volume and stereo panning.One of the most interesting features of the Web Audio API is the ability to extract frequency, waveform, and other data from your audio source, which can then be used to create visualizations. This article explains how, and provides a couple of basic use cases.There's no strict right or wrong way when writing creative code. As long as you consider security, performance, and accessibility, you can adapt to your own style. In this article, we'll share a number of best practices — guidelines, tips, and tricks for working with the Web Audio API.As if its extensive variety of sound processing (and other) options wasn't enough, the Web Audio API also includes facilities to allow you to emulate the difference in sound as a listener moves around a sound source, for example panning as you move around a sound source inside a 3D game.\n  The official term for this is spatialization, and this article will cover the basics of how to implement such a system.You can find a number of examples at our webaudio-example repo on GitHub.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API"
},
{
	"api_id": "84",
	"name": "Web Authentication API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Web Authentication API is an extension of the Credential Management API that enables strong authentication with public key cryptography, enabling passwordless authentication and/or secure second-factor authentication without SMS texts.The Web Authentication API (also referred to as WebAuthn) uses asymmetric (public-key) cryptography instead of passwords or SMS texts for registering, authenticating, and second-factor authentication with websites. This has some benefits:Many websites already have pages that allow users to register new accounts or sign in to an existing account, and the Web Authentication API acts as a replacement or supplement to those on those existing webpages. Similar to the other forms of the Credential Management API, the Web Authentication API has two basic methods that correspond to register and login:Note: Both create() and get() require a secure context (i.e. the server is connected by HTTPS or is the localhost), and will not be available for use if the browser is not operating in a secure context.In their most basic forms, both create() and get() receive a very large random number called the "challenge" from the server and they return the challenge signed by the private key back to the server. This proves to the server that a user is in possession of the private key required for authentication without revealing any secrets over the network.In order to understand how the create() and get() methods fit into the bigger picture, it is important to understand that they sit between two components that are outside the browser:A typical registration process has six steps, as illustrated in Figure 1 and described further below. This is a simplification of the data required for the registration process that is only intended to provide an overview. The full set of required fields, optional fields, and their meanings for creating a registration request can be found in the PublicKeyCredentialCreationOptions dictionary. Likewise, the full set of response fields can be found in the PublicKeyCredential interface (where PublicKeyCredential.response is the AuthenticatorAttestationResponse interface). Note most JavaScript programmers that are creating an application will only really care about steps 1 and 5 where the create() function is called and subsequently returns; however, steps 2, 3, and 4 are essential to understanding the processing that takes place in the browser and authenticator and what the resulting data means.\n  \nFigure 1 - a diagram showing the sequence of actions for a web authentication registration and the essential data associated with each action.First (labeled step 0 in the diagram), the application makes the initial registration request. The protocol and format of this request are outside the scope of the Web Authentication API.After this, the registration steps are:After a user has registered with web authentication, they can subsequently authenticate (a.k.a. - login or sign-in) with the service. The authentication flow looks similar to the registration flow, and the illustration of actions in Figure 2 may be recognizable as being similar to the illustration of registration actions in Figure 1. The primary differences between registration and authentication are that: 1) authentication doesn't require user or relying party information; and 2) authentication creates an assertion using the previously generated key pair for the service rather than creating an attestation with the key pair that was burned into the authenticator during manufacturing. Again, the description of authentication below is a broad overview rather than getting into all the options and features of the Web Authentication API. The specific options for authenticating can be found in the PublicKeyCredentialRequestOptions dictionary, and the resulting data can be found in the PublicKeyCredential interface (where PublicKeyCredential.response is the AuthenticatorAssertionResponse interface) .\n  \nFigure 2 - similar to Figure 1, a diagram showing the sequence of actions for a web authentication and the essential data associated with each action.First (labeled step 0 in the diagram), the application makes the initial authentication request. The protocol and format of this request are outside the scope of the Web Authentication API.After this, the authentication steps are:Provides information about an entity as a prerequisite to a trust decision.Exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen. This interface is accessible from Navigator.credentials. The Web Authentication specification adds a publicKey member to the create() and get() methods to either create a new public key pair or get an authentication for a key pair, respectively.Provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password.The base interface for AuthenticatorAttestationResponse and AuthenticatorAssertionResponse, which provide a cryptographic root of trust for a key pair. Returned by CredentialsContainer.create() and CredentialsContainer.get(), respectively, the child interfaces include information from the browser such as the challenge origin. Either may be returned from PublicKeyCredential.response.Returned by CredentialsContainer.create() when a PublicKeyCredential is passed, and provides a cryptographic root of trust for the new key pair that has been generated.Returned by CredentialsContainer.get() when a PublicKeyCredential is passed, and provides proof to a service that it has a key pair and that the authentication request is valid and approved.The options passed to CredentialsContainer.create().The options passed to CredentialsContainer.get().Warning: For security reasons, web authentication calls (create() and get()) are cancelled if the browser window loses focus while the call is pending.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API"
},
{
	"api_id": "85",
	"name": "Web Crypto API",
	"description": "The Web Crypto API is an interface allowing a script to use cryptographic primitives in order to build systems using cryptography.Note: This feature is available in Web WorkersWarning: The Web Crypto API provides a number of low-level cryptographic primitives. It's very easy to misuse them, and the pitfalls involved can be very subtle.Even assuming you use the basic cryptographic functions correctly, secure key management and overall security system design are extremely hard to get right, and are generally the domain of specialist security experts.Errors in security system design and implementation can make the security of the system completely ineffective.Please learn and experiment, but don't guarantee or imply the security of your work before an individual knowledgeable in this subject matter thoroughly reviews it. The Crypto 101 Course can be a great place to start learning about the design and implementation of secure systems.Some browsers implemented an interface called Crypto without having it well defined or being cryptographically sound. In order to avoid confusion, methods and properties of this interface have been removed from browsers implementing the Web Crypto API, and all Web Crypto API methods are available on a new interface: SubtleCrypto. The Crypto.subtle property gives access to an object implementing it.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API"
},
{
	"api_id": "86",
	"name": "Web MIDI API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Web MIDI API connects to and interacts with Musical Instrument Digital Interface (MIDI) Devices.The interfaces deal with the practical aspects of sending and receiving MIDI messages. Therefore, the API can be used for musical and non-musical uses, with any MIDI device connected to your computer.Represents all of the available MIDI input ports.Represents all of the available MIDI output ports.Provides the methods to list input and output devices, and to access an individual device.Represents an individual MIDI port.Provides a method for dealing with MIDI messages from an input port.Queues messages to the linked MIDI port. Messages can be sent immediately or after a specified delay.The event passed to MIDIInput.midimessage_event.The event passed to the MIDIAccess.statechange_event and MIDIPort.statechange_event events, when a port becomes available or unavailable.\n  The navigator.requestMIDIAccess() method returns a promise that resolves to a MIDIAccess, which can then be used to access a MIDI device.\n  The method must be called in a secure context.\nIn this example the list of input and output ports are retrieved and printed to the console.This example prints incoming MIDI messages on a single port to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API"
},
{
	"api_id": "87",
	"name": "Notifications API",
	"description": "Note: This feature is available in Web WorkersSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Notifications API allows web pages to control the display of system notifications to the end user. These are outside the top-level browsing context viewport, so therefore can be displayed even when the user has switched tabs or moved to a different app. The API is designed to be compatible with existing notification systems, across different platforms.On supported platforms, showing a system notification generally involves two things. First, the user needs to grant the current origin permission to display system notifications, which is generally done when the app or site initializes, using the Notification.requestPermission() method. This should be done in response to a user gesture, such as clicking a button, for example:This is not only best practice — you should not be spamming users with notifications they didn't agree to — but going forward browsers will explicitly disallow notifications not triggered in response to a user gesture. Firefox is already doing this from version 72, for example.This will spawn a request dialog, along the following lines:\n  \nFrom here the user can choose to allow notifications from this origin, or block them. Once a choice has been made, the setting will generally persist for the current session.Note: As of Firefox 44, the permissions for Notifications and Push have been merged. If permission is granted for notifications, push will also be enabled.Next, a new notification is created using the Notification() constructor. This must be passed a title argument, and can optionally be passed an options object to specify options, such as text direction, body text, icon to display, notification sound to play, and more.In addition, the Notifications API spec specifies a number of additions to the ServiceWorker API, to allow service workers to fire notifications.Note: To find out more about using notifications in your own app, read Using the Notifications API.Defines a notification object.Includes the ServiceWorkerRegistration.showNotification() and ServiceWorkerRegistration.getNotifications() method, for controlling the display of notifications.Includes the onnotificationclick handler, for firing custom functions when a notification is clicked.A specific type of event object, based on ExtendableEvent, which represents a notification that has fired.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API"
},
{
	"api_id": "88",
	"name": "Web Share API",
	"description": "The Web Share API provides a mechanism for sharing text, links, files, and other content to an arbitrary share target selected by the user.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Note: This API is not available in Web Workers (not exposed via WorkerNavigator).Note: This API should not be confused with the Web Share Target API, which allows a website to specify itself as a share target.\n  The Web Share API allows a site to share text, links, files, and other content to user-selected share targets, utilizing the sharing mechanisms of the underlying operating system.\n  These share targets typically include the system clipboard, email, contacts or messaging applications, and Bluetooth or Wi-Fi channels.\n\n  The API has just two methods.\n  The navigator.canShare() method may be used to first validate whether some data is "sharable", prior to passing it to navigator.share() for sending.\n\n  The navigator.share() method invokes the native sharing mechanism of the underlying operating system and passes the specified data.\n  It requires transient activation, and hence must be triggered off a UI event like a button click.\n  Further, the method must specify valid data that is supported for sharing by the native implementation.\n\n  The Web Share API is gated by the web-share permission policy.\n  If the policy is supported but has not been granted, both methods will indicate that the data is not sharable.\nReturns a boolean indicating whether the specified data is sharable.\n  Returns a Promise that resolves if the passed data was successfully sent to a share target.\n  This method must be called on a button click or other user activation (requires transient activation).\n  The code below shows how you can share a link using navigator.share(), triggered off a button click.The above example is taken from our Web share test (see the source code). You can also see this as a live example in navigator.share().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Share_API"
},
{
	"api_id": "89",
	"name": "Web Speech API",
	"description": "\n  The Web Speech API enables you to incorporate voice data into web apps.\n  The Web Speech API has two parts: SpeechSynthesis (Text-to-Speech), and SpeechRecognition (Asynchronous Speech Recognition.)\n\n  The Web Speech API makes web apps able to handle voice data.\n  There are two components to this API:\nFor more details on using these features, see Using the Web Speech API.The controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service.Represents a single word that has been recognized by the speech recognition service.Represents error messages from the recognition service.The event object for the result and nomatch events, and contains all the data associated with an interim or final speech recognition result.The words or patterns of words that we want the recognition service to recognize.Represents a list of SpeechGrammar objects.Represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.Represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in continuous mode.The controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.Contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.Contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.\n  Represents a speech request.\n  It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)\n  \n  Represents a voice that the system supports.\n  Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.\n  Specified out as part of a [NoInterfaceObject] interface called SpeechSynthesisGetter, and Implemented by the Window object, the speechSynthesis property provides access to the SpeechSynthesis controller, and therefore the entry point to speech synthesis functionality.The Web Speech API examples on GitHub contains demos to illustrate speech recognition and synthesis.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API"
},
{
	"api_id": "90",
	"name": "Web Storage API",
	"description": "The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies.The two mechanisms within Web Storage are as follows:These mechanisms are available via the Window.sessionStorage and Window.localStorage properties (to be more precise, in supporting browsers the Window object implements the WindowLocalStorage and WindowSessionStorage objects, which the localStorage and sessionStorage properties hang off) — invoking one of these will create an instance of the Storage object, through which data items can be set, retrieved and removed. A different Storage object is used for the sessionStorage and localStorage for each origin — they function and are controlled separately.Note: From Firefox 45 onwards, when the browser crashes/restarts, the amount of data saved per origin is limited to 10MB. This has been done to avoid memory issues caused by excessive usage of web storage.Note: Access to Web Storage from third-party IFrames is denied if the user has disabled third-party cookies (Firefox implements this behavior from version 43 onwards.)Note: Web Storage is not the same as mozStorage (Mozilla's XPCOM interfaces to SQLite) or the Session store API (an XPCOM storage utility for use by extensions).Allows you to set, retrieve and remove data for a specific domain and storage type (session or local).The Web Storage API extends the Window object with two new properties — Window.sessionStorage and Window.localStorage — which provide access to the current domain's session and local Storage objects respectively, and a storage event handler that fires when a storage area changes (e.g. a new item is stored.)The storage event is fired on a document's Window object when a storage area changes.To illustrate some typical web storage usage, we have created a simple example, imaginatively called Web Storage Demo. The landing page provides controls that can be used to customize the color, font and decorative image. When you choose different options, the page is instantly updated; in addition your choices are stored in localStorage, so that when you leave the page then load it again later on your choices are remembered.In addition, we have provided an event output page — if you load this page in another tab, then make changes to your choices in the landing page, you'll see the updated storage information outputted as the StorageEvent is fired.Most modern browsers support a privacy option called 'Incognito', 'Private Browsing' or something similar that doesn't store data like history and cookies. This is fundamentally incompatible with Web Storage for obvious reasons. As such, browser vendors are experimenting with different scenarios for how to deal with this incompatibility.Most browsers have opted for a strategy where storage APIs are still available and seemingly fully functional, with the one big difference that all stored data is wiped after the browser is closed. For these browsers there are still different interpretations of what should be done with existing stored data (from a regular browsing session). Should it be available to read when in Private mode? Then there are some browsers, most notably Safari, that have opted for a solution where storage is available, but is empty and has a quota of 0 bytes assigned, effectively making it impossible to write data to it.Developers should be aware of these different implementations and take them into account when developing websites depending on Web Storage APIs. For more information please have a look at this WHATWG blog post that specifically deals with this topic.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API"
},
{
	"api_id": "91",
	"name": "Web Workers API",
	"description": "Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.A worker is an object created using a constructor (e.g. Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread.In addition to the standard JavaScript set of functions (such as String, Array, Object, JSON, etc.), you can run almost any code you like inside a worker thread. There are some exceptions: for example, you can't directly manipulate the DOM from inside a worker, or use some default methods and properties of the window object. For information about the code that you can run see worker global context and functions, and supported web APIs below.Data is sent between workers and the main thread via a system of messages — both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler (the message is contained within the Message event's data property). The data is copied rather than shared.Workers may in turn spawn new workers, as long as those workers are hosted within the same origin as the parent page. In addition, workers may use XMLHttpRequest for network I/O, with the exception that the responseXML and channel attributes on XMLHttpRequest always return null.There are a number of different types of workers:Note: As per the Web workers Spec, worker error events should not bubble (see bug 1188141. This has been implemented in Firefox 42.Workers run in a different global context than the current window! While Window is not directly available to workers, many of the same methods are defined in a shared mixin (WindowOrWorkerGlobalScope), and made available to workers through their own WorkerGlobalScope-derived contexts:Some of the functions (a subset) that are common to all workers and to the main thread (from WindowOrWorkerGlobalScope) are: atob(), btoa(), clearInterval(), clearTimeout(),dump() \n  Non-Standard\n, setInterval(), setTimeout().The following functions are only available to workers:Note: If a listed API is supported by a platform in a particular version, then it can generally be assumed to be available in web workers. You can also test support for a particular object/function using the site: https://worker-playground.glitch.me/The following Web APIs are available to workers: Barcode Detection API, Broadcast Channel API, Cache API, Channel Messaging API,Console API, Web Crypto API (Crypto), CustomEvent, Encoding API (TextEncoder, TextDecoder, etc.), Fetch API, FileReader, FileReaderSync (only works in workers!), FormData, ImageData, IndexedDB, Network Information API, Notifications API, Performance API (including: Performance, PerformanceEntry, PerformanceMeasure, PerformanceMark, PerformanceObserver, PerformanceResourceTiming), Promise, Server-sent events, ServiceWorkerRegistration, URL API (e.g. URL), WebGL with OffscreenCanvas (enabled behind a feature preference setting gfx.offscreencanvas.enabled), WebSocket, XMLHttpRequest.Workers can also spawn other workers, so these APIs are also available: Worker, WorkerGlobalScope, WorkerLocation, WorkerNavigator.Represents a running worker thread, allowing you to pass messages to the running worker code.Defines the absolute location of the script executed by the Worker.Represents a specific kind of worker that can be accessed from several browsing contexts (i.e. windows, tabs, or iframes) or even other workers.Represents the generic scope of any worker (doing the same job as Window does for normal web content). Different types of worker have scope objects that inherit from this interface and add more specific features.Represents the scope of a dedicated worker, inheriting from WorkerGlobalScope and adding some dedicated features.Represents the scope of a shared worker, inheriting from WorkerGlobalScope and adding some dedicated features.Represents the identity and state of the user agent (the client):We have created a couple of simple demos to show basic usage:You can find out more information on how these demos work in Using Web Workers.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"
},
{
	"api_id": "92",
	"name": "WebCodecs API",
	"description": "\n  The WebCodecs API gives web developers low-level access to the individual frames of a video stream and chunks of audio.\n  It is useful for web applications that require full control over the way media is processed.\n  For example, video or audio editors, and video conferencing.\n\n  Many Web APIs use media codecs internally.\n  For example, the Web Audio API, and the WebRTC API.\n  However these APIs do not allow developers to work with individual frames of a video stream and unmuxed chunks of encoded audio or video.\n\n  Web developers have typically used WebAssembly in order to get around this limitation,\n  and to work with media codecs in the browser.\n  However, this requires additional bandwidth to download codecs that already exist in the browser,\n  reducing performance and power efficiency, and adding additional development overhead.\n\n  The WebCodecs API provides access to codecs that are already in the browser.\n  It gives access to raw video frames, chunks of audio data, image decoders, audio and video encoders and decoders.\nDecodes EncodedAudioChunk objects.Decodes EncodedVideoChunk objects.Encodes AudioData objects.Encodes VideoFrame objects.Represents codec-specific encoded audio bytes.Represents codec-specific encoded video bytes.Represents unencoded audio data.Represents a frame of unencoded video data.Represents the color space of a video frame.Unpacks and decodes image data, giving access to the sequence of frames in an animated image.Represents the list of tracks available in the image.Represents an individual image track.\n  In the following example, frames are returned from a MediaStreamTrackProcessor, then encoded.\n  See the full example and read more about it in the article Video processing with WebCodecs.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API"
},
{
	"api_id": "93",
	"name": "WebGL: 2D and 3D graphics for the web",
	"description": "WebGL (Web Graphics Library) is a JavaScript API for rendering high-performance interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins. WebGL does so by introducing an API that closely conforms to OpenGL ES 2.0 that can be used in HTML5 <canvas> elements. This conformance makes it possible for the API to take advantage of hardware graphics acceleration provided by the user's device.Support for WebGL is present in Firefox 4+, Google Chrome 9+, Opera 12+, Safari 5.1+, Internet Explorer 11+, and Microsoft Edge build 10240+; however, the user's device must also have hardware that supports these features.The WebGL 2 API introduces support for much of the OpenGL ES 3.0 feature set; it's provided through the WebGL2RenderingContext interface.The <canvas> element is also used by the Canvas API to do 2D graphics on web pages.WebGL 2 is a major update to WebGL which is provided through the WebGL2RenderingContext interface. It is based on OpenGL ES 3.0 and new features include:See also the blog post "WebGL 2 lands in Firefox" and webglsamples.org/WebGL2Samples for a few demos.Below, you'll find an assortment of guides to help you learn WebGL concepts and tutorials that offer step-by-step lessons and examples.A guide to variables, buffers, and other types of data used when writing WebGL code.Tips and suggestions to help you improve the quality, performance, and reliability of your WebGL content.A guide to using WebGL extensions.A beginner's guide to WebGL core concepts. A good place to start if you don't have previous WebGL experience.This example demonstrates the simple animation of a one-color shape. Topics examined are adapting to aspect ratio differences, a function to build shader programs from sets of multiple shaders, and the basics of drawing in WebGL.A series of live samples with short explanations that showcase WebGL concepts and capabilities. The examples are sorted according to topic and level of difficulty, covering the WebGL rendering context, shader programming, textures, geometry, user interaction, and more.A detailed explanation of the three core matrices that are typically used to represent a 3D object view: the model, view and projection matrices.A useful guide to how 3D transform matrices work, and can be used on the web — both for WebGL calculations and in CSS3 transforms.In addition to the browser, the GPU itself also needs to support the feature. So, for example, S3 Texture Compression (S3TC) is only available on Tegra-based tablets. Most browsers make the WebGL context available through the webgl context name, but older ones need experimental-webgl as well. In addition, the upcoming WebGL 2 is fully backwards-compatible and will have the context name webgl2.Starting with Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7), there are two preferences available which let you control the capabilities of WebGL for testing purposes:A Boolean property that, when true, enables a minimum capability mode. When in this mode, WebGL is configured to only support the bare minimum feature set and capabilities required by the WebGL specification. This lets you ensure that your WebGL code will work on any device or browser, regardless of their capabilities. This is false by default.A Boolean property that, when true, disables all WebGL extensions. This is false by default.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API"
},
{
	"api_id": "94",
	"name": "WebHID API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.A Human Interface Device (HID) is a type of device that takes input from or provides output to humans. It also refers to the HID protocol, a standard for bi-directional communication between a host and a device that is designed to simplify the installation procedure. The HID protocol was originally developed for USB devices but has since been implemented over many other protocols, including Bluetooth.Provides methods for connecting to HID devices, listing attached HID devices and event handlers for connected HID devices.Represents an HID device. It's possible for a single physical device to be represented by multiple HIDDevice objects.Passed to HIDDevice.inputreport_event when an input report is received from any associated HID device.Passed to HID.onconnect and HID.ondisconnect when a device is connected or disconnected.You can connect to a device with the requestDevice() method. In this case, we select from all the available devices.We can retrieve all the devices the website has been granted access to previously and log the device names to the console.We can register event listeners for disconnection of any HID devices.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebHID_API"
},
{
	"api_id": "95",
	"name": "WebRTC API",
	"description": "WebRTC (Web Real-Time Communication) is a technology that enables Web applications and sites to capture and optionally stream audio and/or video media, as well as to exchange arbitrary data between browsers without requiring an intermediary. The set of standards that comprise WebRTC makes it possible to share data and perform teleconferencing peer-to-peer, without requiring that the user install plug-ins or any other third-party software.WebRTC consists of several interrelated APIs and protocols which work together to achieve this. The documentation you'll find here will help you understand the fundamentals of WebRTC, how to set up and use both data and media connections, and more.Because implementations of WebRTC are still evolving, and because each browser has different levels of support for codecs and WebRTC features, you should strongly consider making use of the Adapter.js library provided by Google before you begin to write your code.Adapter.js uses shims and polyfills to smooth over the differences among the WebRTC implementations across the environments supporting it. Adapter.js also handles prefixes and other naming differences to make the entire WebRTC development process easier, with more broadly compatible results. The library is also available as an NPM package.To learn more about Adapter.js, see Improving compatibility using WebRTC adapter.js.WebRTC serves multiple purposes; together with the Media Capture and Streams API, they provide powerful multimedia capabilities to the Web, including support for audio and video conferencing, file exchange, screen sharing, identity management, and interfacing with legacy telephone systems including support for sending DTMF (touch-tone dialing) signals. Connections between peers can be made without requiring any special drivers or plug-ins, and can often be made without any intermediary servers.Connections between two peers are represented by the RTCPeerConnection interface. Once a connection has been established and opened using RTCPeerConnection, media streams (MediaStreams) and/or data channels (RTCDataChannels) can be added to the connection.Media streams can consist of any number of tracks of media information; tracks, which are represented by objects based on the MediaStreamTrack interface, may contain one of a number of types of media data, including audio, video, and text (such as subtitles or even chapter names). Most streams consist of at least one audio track and likely also a video track, and can be used to send and receive both live media or stored media information (such as a streamed movie).You can also use the connection between two peers to exchange arbitrary binary data using the RTCDataChannel interface. This can be used for back-channel information, metadata exchange, game status packets, file transfers, or even as a primary channel for data transfer.more details and links to relevant guides and tutorials neededBecause WebRTC provides interfaces that work together to accomplish a variety of tasks, we have divided up the reference by category. Please see the sidebar for an alphabetical list.These interfaces, dictionaries, and types are used to set up, open, and manage WebRTC connections. Included are interfaces representing peer media connections, data channels, and interfaces used when exchanging information on the capabilities of each peer in order to select the best possible configuration for a two-way media connection.Represents a WebRTC connection between the local computer and a remote peer. It is used to handle efficient streaming of data between the two peers.Represents a bi-directional data channel between two peers of a connection.Represents events that occur while attaching a RTCDataChannel to a RTCPeerConnection. The only event sent with this interface is datachannel.Represents the parameters of a session. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.Provides information detailing statistics for a connection or for an individual track on the connection; the report can be obtained by calling RTCPeerConnection.getStats(). Details about using WebRTC statistics can be found in WebRTC Statistics API.Represents a candidate Interactive Connectivity Establishment (ICE) server for establishing an RTCPeerConnection.Represents information about an ICE transport.Represents events that occur in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate.Manages the encoding and transmission of data for a MediaStreamTrack on an RTCPeerConnection.Manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.The interface used to represent a track event, which indicates that an RTCRtpReceiver object was added to the RTCPeerConnection object, indicating that a new incoming MediaStreamTrack was created and added to the RTCPeerConnection.Provides information which describes a Stream Control Transmission Protocol (SCTP) transport and also provides a way to access the underlying Datagram Transport Layer Security (DTLS) transport over which SCTP packets for all of an RTCPeerConnection's data channels are sent and received.Defines how to connect to a single ICE server (such as a STUN or TURN server).Contains information about a given contributing source (CSRC) including the most recent time a packet that the source contributed was played out.The amount of data currently buffered by the data channel—as indicated by its bufferedAmount property—has decreased to be at or below the channel's minimum buffered data size, as specified by bufferedAmountLowThreshold.The data channel has completed the closing process and is now in the closed state. Its underlying data transport is completely closed at this point. You can be notified before closing completes by watching for the closing event instead.The RTCDataChannel has transitioned to the closing state, indicating that it will be closed soon. You can detect the completion of the closing process by watching for the close event.The connection's state, which can be accessed in connectionState, has changed.A new RTCDataChannel is available following the remote peer opening a new data channel. This event's type is RTCDataChannelEvent.An RTCErrorEvent indicating that an error occurred on the data channel.An RTCErrorEvent indicating that an error occurred on the RTCDtlsTransport. This error will be either dtls-failure or fingerprint-failure.The RTCIceTransport's gathering state has changed.An RTCPeerConnectionIceEvent which is sent whenever the local device has identified a new ICE candidate which needs to be added to the local peer by calling setLocalDescription().An RTCPeerConnectionIceErrorEvent indicating that an error has occurred while gathering ICE candidates.Sent to an RTCPeerConnection when its ICE connection's state—found in the iceconnectionstate property—changes.Sent to an RTCPeerConnection when its ICE gathering state—found in the icegatheringstate property—changes.A message has been received on the data channel. The event is of type MessageEvent.Informs the RTCPeerConnection that it needs to perform session negotiation by calling createOffer() followed by setLocalDescription().The underlying data transport for the RTCDataChannel has been successfully opened or re-opened.The currently-selected pair of ICE candidates has changed for the RTCIceTransport on which the event is fired.The track event, of type RTCTrackevent is sent to an RTCPeerConnection when a new track is added to the connection following the successful negotiation of the media's streaming.Sent to the peer connection when its signalingstate has changed. This happens as a result of a call to either setLocalDescription() or setRemoteDescription().The state of the RTCDtlsTransport has changed.The state of the RTCIceTransport has changed.The state of the RTCSctpTransport has changed.Indicates the state of an RTCSctpTransport instance.These APIs are used to manage user identity and security, in order to authenticate the user for a connection.Enables a user agent is able to request that an identity assertion be generated or validated.Represents the identity of the remote peer of the current connection. If no peer has yet been set and verified this interface returns null. Once set it can't be changed.Registers an identity provider (idP).Represents a certificate that an RTCPeerConnection uses to authenticate.These interfaces and events are related to interactivity with Public-Switched Telephone Networks (PTSNs). They're primarily used to send tone dialing sounds—or packets representing those tones—across the network to the remote peer.Manages the encoding and transmission of Dual-Tone Multi-Frequency (DTMF) signaling for an RTCPeerConnection.Used by the tonechange event to indicate that a DTMF tone has either begun or ended. This event does not bubble (except where otherwise stated) and is not cancelable (except where otherwise stated).Either a new DTMF tone has begun to play over the connection, or the last tone in the RTCDTMFSender's toneBuffer has been sent and the buffer is now empty. The event's type is RTCDTMFToneChangeEvent.This article introduces the protocols on top of which the WebRTC API is built.A guide to how WebRTC connections work and how the various protocols and interfaces can be used together to build powerful communication apps.WebRTC lets you build peer-to-peer communication of arbitrary data, audio, or video—or any combination thereof—into a browser application. In this article, we'll look at the lifetime of a WebRTC session, from establishing the connection all the way through closing the connection when it's no longer needed.Perfect negotiation is a design pattern which is recommended for your signaling process to follow, which provides transparency in negotiation while allowing both sides to be either the offerer or the answerer, without significant coding needed to differentiate the two.A tutorial and example which turns a WebSocket-based chat system created for a previous example and adds support for opening video calls among participants. The chat server's WebSocket connection is used for WebRTC signaling.A guide to the codecs which WebRTC requires browsers to support as well as the optional ones supported by various popular browsers. Included is a guide to help you choose the best codecs for your needs.This guide covers how you can use a peer connection and an associated RTCDataChannel to exchange arbitrary data between two peers.WebRTC's support for interacting with gateways that link to old-school telephone systems includes support for sending DTMF tones using the RTCDTMFSender interface. This guide shows how to do so.The WebRTC organization provides on GitHub the WebRTC adapter to work around compatibility issues in different browsers' WebRTC implementations. The adapter is a JavaScript shim which lets your code to be written to the specification so that it will "just work" in all browsers with WebRTC support.The RTCDataChannel interface is a feature which lets you open a channel between two peers over which you may send and receive arbitrary data. The API is intentionally similar to the WebSocket API, so that the same programming model can be used for each.This tutorial is a step-by-step guide on how to build a phone using Peer.js",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"
},
{
	"api_id": "96",
	"name": "WebUSB API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The WebUSB API provides a way to expose non-standard Universal Serial Bus (USB) compatible devices services to the web, to make USB safer and easier to use.USB is the de-facto standard for wired peripherals. The USB devices that you connect to your computer are typically grouped into a number of device classes—such as keyboards, mice, video devices, and so on. These are supported using the operating system's class driver. Many of these are also web accessible via the WebHID API.In addition to these standardized devices, there are a large number of devices that don't fit into any class. These need custom drivers, and are inaccessible from the web due to the native code required to take advantage of them. Installing one of these devices often involves searching on a manufacturer's website for drivers and, should you wish to use the device on another computer, repeating the process again.WebUSB provides a way for these non-standardized USB device services to be exposed to the web. This means that hardware manufacturers will be able to provide a way for their device to be accessed from the web, without having to provide their own API.When connecting a new WebUSB-compatible device, the browser displays a notification providing a link to the manufacturer's website. On arriving at the site the browser prompts for permission to connect to the device, then the device is ready for use. No drivers need be downloaded and installed.Provides attributes and methods for finding and connecting USB devices from a web page.The event type passed to USB.onconnect or USB.ondisconnect when the user agent detects a new USB device has been connected to, or disconnected from the host.Provides access to metadata about a paired USB device and methods for controlling it.Represents the result from requesting a transfer of data from the USB device to the USB host.Represents the status of an individual packet from a request to transfer data from the USB device to the USB host over an isochronous endpoint.Represents the result from requesting a transfer of data from the USB device to the USB host.Represents the status of an individual packet from a request to transfer data from the USB host to the USB device over an isochronous endpoint.Represents the result from requesting a transfer of data from the USB host to the USB device.Provides information about a particular configuration of a USB device and the interfaces that it supports.Provides information about an interface provided by the USB device.Provides information about a particular configuration of an interface provided by the USB device.Provides information about an endpoint provided by the USB device.The following example demonstrates how to access a connected Arduino device using USB.requestDevice(), which has a vendorId of 0x2341.You can find all connected devices with USB.getDevices(). In the following example, with the Arduino device connected, product and manufacturer name are printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebUSB_API"
},
{
	"api_id": "97",
	"name": "WebVR API",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Note: WebVR API is replaced by WebXR API. WebVR was never ratified as a standard, was implemented and enabled by default in very few browsers and supported a small number of devices.WebVR provides support for exposing virtual reality devices — for example, head-mounted displays like the Oculus Rift or HTC Vive — to web apps, enabling developers to translate position and movement information from the display into movement around a 3D scene. This has numerous, interesting applications, from virtual product tours and interactive training apps to immersive first-person games.Any VR devices attached to your computer will be returned by the Navigator.getVRDisplays() method; each one will be represented by a VRDisplay object.\n  \nVRDisplay is the central interface in the WebVR API — via its properties and methods you can access functionality to:A typical (simple) WebVR app would work like so:In addition, WebVR 1.1 adds a number of events on the Window object to allow JavaScript to respond to changes to the status of the display.Note: You can find a lot more out about how the API works in our Using the WebVR API and WebVR Concepts articles.The WebVR API, which was never ratified as a web standard, has been deprecated in favor of the WebXR API, which is well on track toward finishing the standardization process. As such, you should try to update existing code to use the newer API instead. Generally the transition should be fairly painless.Additionally, on some devices and/or browsers, WebVR requires that the page be loaded using a secure context, over an HTTPS connection. If the page is not fully secure, the WebVR methods and functions will not be available. You can easily test for this by checking to see if the Navigator method getVRDisplays() is NULL:Many WebVR hardware setups feature controllers that go along with the headset. These can be used in WebVR apps via the Gamepad API, and specifically the Gamepad Extensions API that adds API features for accessing controller pose, haptic actuators, and more.Note: Our Using VR controllers with WebVR article explains the basics of how to use VR controllers with WebVR apps.Represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.Describes the capabilities of a VRDisplay — it's features can be used to perform VR device capability tests, for example can it return position information.Represents the event object of WebVR-related events (see the window object extensions listed below).Represents all the information needed to render a single frame of a VR scene; constructed by VRDisplay.getFrameData().Represents the position state at a given timestamp (which includes orientation, position, velocity, and acceleration.)Provides access to all the information required to correctly render a scene for each given eye, including field of view information.Represents a field of view defined by 4 different degree values describing the view from a center point.Represents a layer to be presented in a VRDisplay.Represents the values describing the stage area for devices that support room-scale experiences.The WebVR API extends the following APIs, adding the listed features.Returns the VRDisplay.displayId of the associated VRDisplay — the VRDisplay that the gamepad is controlling the displayed scene of.Returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true).Returns a promise that resolves to an array of VRDisplay objects representing any available VR displays connected to the computer.Fired when the presenting state of a VR display changes — i.e. goes from presenting to not presenting or vice versa.Fired when a compatible VR display has been connected to the computer.Fired when a compatible VR display has been disconnected from the computer.Fired when a display is able to be presented to.Fired when a display can no longer be presented to.Fired when presentation to a display has been paused for some reason by the browser, OS, or VR hardware.Fired when presentation to a display has resumed after being blurred.You can find a number of examples at these locations:This API was specified in the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API"
},
{
	"api_id": "98",
	"name": "Web Video Text Tracks Format (WebVTT)",
	"description": "Web Video Text Tracks Format (WebVTT) is a format for displaying timed text tracks (such as subtitles or captions) using the <track> element. The primary purpose of WebVTT files is to add text overlays to a <video>. WebVTT is a text based format, which must be encoded using UTF-8. Where you can use spaces you can also use tabs. There is also a small API available to represent and manage these tracks and the data needed to perform the playback of the text at the correct times.The MIME type of WebVTT is text/vtt.A WebVTT file (.vtt) contains cues, which can be either a single line or multiple lines, as shown below:The structure of a WebVTT consists of the following components, some of them optional, in this order:Let's re-examine one of our previous examples, and look at the cue structure in a bit more detail.In the case of each cue:We can also place comments in our .vtt file, to help us remember important information about the parts of our file. These should be on separate lines, starting with the string NOTE. You'll find more about these in the below section.It is important to not use "extra" blank lines within a cue, for example between the timings line and the cue payload. WebVTT is line based; a blank line will close the cue.Comments are an optional component that can be used to add information to a WebVTT file. Comments are intended for those reading the file and are not seen by users. Comments may contain newlines but cannot contain a blank line, which is equivalent to two consecutive newlines. A blank line signifies the end of a comment.A comment cannot contain the string "-->", the ampersand character (&), or the less-than sign (<). If you wish to use such characters, you need to escape them using for example &amp; for ampersand and &lt; for less-than. It is also recommended that you use the greater-than escape sequence (&gt;) instead of the greater-than character (>) to avoid confusion with tags.A comment consists of three parts:You can style WebVTT cues by looking for elements which match the ::cue pseudo-element.Here, all video elements are styled to use a gray linear gradient as their backgrounds, with a foreground color of "papayawhip". In addition, text boldfaced using the <b> element are colored "peachpuff".The HTML snippet below actually handles displaying the media itself.You can also define the style directly in the WebVTT file. In this case, you insert your CSS rules into the file with each rule preceded by the string "STYLE" all by itself on a line of text, as shown below:We can also use identifiers inside WebVTT file, which can be used for defining a new style for some particular cues in the file. The example where we wanted the transcription text to be red highlighted and the other part to remain normal, we can define it as follows using CSS. Where it must be noted that the CSS uses escape sequences the way they are used in HTML pages:Positioning of text tracks is also supported, by including positioning information after the timings in a cue, as seen below (see Cue settings for more information):A cue is a single subtitle block that has a single start time, end time, and textual payload. Example 6 consists of the header, a blank line, and then five cues separated by blank lines. A cue consists of five components:The identifier is a name that identifies the cue. It can be used to reference the cue from a script. It must not contain a newline and cannot contain the string "-->". It must end with a single newline. They do not have to be unique, although it is common to number them (e.g., 1, 2, 3, ...).A cue timing indicates when the cue is shown. It has a start and end time which are represented by timestamps. The end time must be greater than the start time, and the start time must be greater than or equal to all previous start times. Cues may have overlapping timings.If the WebVTT file is being used for chapters (<track> kind is chapters) then the file cannot have overlapping timings.Each cue timing contains five components:The timestamps must be in one of two formats:Where the components are defined as follows:Cue settings are optional components used to position where the cue payload text will be displayed over the video. This includes whether the text is displayed horizontally or vertically. There can be zero or more of them, and they can be used in any order so long as each setting is used no more than once.The cue settings are added to the right of the cue timings. There must be one or more spaces between the cue timing and the first setting and between each setting. A setting's name and value are separated by a colon. The settings are case sensitive so use lower case as shown. There are five cue settings:The first line demonstrates no settings. The second line might be used to overlay text on a sign or label. The third line might be used for a title. The last line might be used for an Asian language.The payload is where the main information or content is located. In normal usage the payload contains the subtitles to be displayed. The payload text may contain newlines but it cannot contain a blank line, which is equivalent to two consecutive newlines. A blank line signifies the end of a cue.A cue text payload cannot contain the string "-->", the ampersand character (&), or the less-than sign (<). Instead use the escape sequence "&amp;" for ampersand and "&lt;" for less-than. It is also recommended that you use the greater-than escape sequence "&gt;" instead of the greater-than character (>) to avoid confusion with tags. If you are using the WebVTT file for metadata these restrictions do not apply.In addition to the three escape sequences mentioned above, there are fours others. They are listed in the table below.There are a number of tags, such as <bold>, that can be used. However, if the WebVTT file is used in a <track> element where the attribute kind is chapters then you cannot use tags.The following tags are the HTML tags allowed in a cue and require opening and closing tags (e.g., <b>text</b>).The methods used in WebVTT are those which are used to alter the cue or region as the attributes for both interfaces are different. We can categorize them for better understanding relating to each interface in WebVTT:There are few steps that can be followed to write a simple webVTT file. Before start, it must be noted that you can make use of a notepad and then save the file as '.vtt' file. Steps are given below:CSS pseudo classes allow us to classify the type of object which we want to differentiate from other types of objects. It works in similar manner in WebVTT files as it works in HTML file.It is one of the good features supported by WebVTT is the localization and use of class elements which can be used in same way they are used in HTML and CSS to classify the style for particular type of objects, but here these are used for styling and classifying the Cues as shown below:In the above example it can be observed that we can use the identifier and pseudo class name for defining the language of caption, where <i> tag is for italics.The type of pseudo class is determined by the selector it is using and working is similar in nature as it works in HTML. Following CSS pseudo classes can be used:Where p and a are the tags which are used in HTML for paragraph and link, respectively and they can be replaced by identifiers which are used for Cues in WebVTT file.Prior to Firefox 50, the AlignSetting enum (representing possible values for VTTCue.align) incorrectly included the value "middle" instead of "center". This has been corrected.WebVTT was implemented in Firefox 24 behind the preference media.webvtt.enabled, which is disabled by default; you can enable it by setting this preference to true. WebVTT is enabled by default starting in Firefox 31 and can be disabled by setting the preference to false.Prior to Firefox 58, the REGION keyword was creating VTTRegion objects, but they were not being used. Firefox 58 now fully supports VTTRegion and its use; however, this feature is disabled by default behind the preference media.webvtt.regions.enabled; set it to true to enable region support in Firefox 58. Regions are enabled by default starting in Firefox 59 (see bugs bug 1338030 and bug 1415805).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API"
},
{
	"api_id": "99",
	"name": "WebXR Device API",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.WebXR is a group of standards which are used together to support rendering 3D scenes to hardware designed for presenting virtual worlds (virtual reality, or VR), or for adding graphical imagery to the real world, (augmented reality, or AR). The WebXR Device API implements the core of the WebXR feature set, managing the selection of output devices, render the 3D scene to the chosen device at the appropriate frame rate, and manage motion vectors created using input controllers.WebXR-compatible devices include fully-immersive 3D headsets with motion and orientation tracking, eyeglasses which overlay graphics atop the real world scene passing through the frames, and handheld mobile phones which augment reality by capturing the world with a camera and augment that scene with computer-generated imagery.To accomplish these things, the WebXR Device API provides the following key capabilities:At the most basic level, a scene is presented in 3D by computing the perspective to apply to the scene in order to render it from the viewpoint of each of the user's eyes by computing the position of each eye and rendering the scene from that position, looking in the direction the user is currently facing. Each of these two images is rendered into a single framebuffer, with the left eye's rendered image on the left and the right eye's viewpoint rendered into the right half of the buffer. Once both eyes' perspectives on the scene have been rendered, the resulting framebuffer is delivered to the WebXR device to be presented to the user through their headset or other appropriate display device.While the older WebVR API was designed solely to support Virtual Reality (VR), WebXR provides support for both VR and Augmented Reality (AR) on the web. Support for AR functionality is added by the WebXR Augmented Reality Module.A typical XR device can have either 3 or 6 degrees of freedom and might or might not have an external positional sensor.The equipment may also include an accelerometer, barometer, or other sensors which are used to sense when the user moves through space, rotates their head, or the like.The following guides and tutorials are a great resource to learn how to comprehend WebXR and the underlying 3D and VR/AR graphics concepts.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API"
},
{
	"api_id": "100",
	"name": "The WebSocket API (WebSockets)",
	"description": "The WebSocket API is an advanced technology that makes it possible to open a two-way interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.Note: While a WebSocket connection is functionally somewhat similar to standard Unix-style sockets, they are not related.The primary interface for connecting to a WebSocket server and then sending and receiving data on the connection.The event sent by the WebSocket object when the connection closes.The event sent by the WebSocket object when a message is received from the server.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"
},
{
	"api_id": "101",
	"name": "Window Controls Overlay API",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The Window Controls Overlay API gives Progressive Web Apps installed on desktop operating systems the ability to hide the default window title bar and display their own content\n  over the full surface area of the app window, turning the control buttons (maximize, minimize, and close) into an overlay.\nBefore using this feature, the following conditions must be true:Progressive Web Apps installed on desktop devices can be displayed in standalone app windows, just like native apps. Here is what an application window looks like:\n  \nAs seen above, the app window is made of two main areas:The title bar area contains the system-critical maximize, minimize, and close buttons (their position may vary across operating systems), the name of the application (which comes from the <title> HTML element in the page), and possibly user-agent-specific PWA buttons.With the Window Controls Overlay feature, Progressive Web Apps can display their web content over the whole app window surface area. Because the window control buttons and user-agent-specific PWA buttons must remain visible, they get turned into an overlay displayed on top of the web content.\n  \nThe part of the title bar that normally contains the application name is hidden, and the area that it normally occupies becomes available via the Window Controls Overlay API.PWAs can use the API to position content in this area, and avoid having content hidden behind the control buttons overlay, similar to how web authors can account for the presence of notches on certain mobile devices.\n  Progressive Web Apps can position their web content in the area that the title bar normally occupies by using the titlebar-area-x, titlebar-area-y, titlebar-area-width, and titlebar-area-height CSS environment variables.\n  See Using env() to ensure content is not obscured by window control buttons in desktop PWAs.\nProvides information about the visibility and geometry of the title bar and an event to know whenever it changes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Window_Controls_Overlay_API"
},
{
	"api_id": "102",
	"name": "XMLHttpRequest",
	"description": "XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.XMLHttpRequest is used heavily in AJAX programming.Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML.If your communication needs to involve receiving event data or message data from a server, consider using server-sent events through the EventSource interface. For full-duplex communication, WebSockets may be a better choice.Note: This feature is available in Web Workers, except for Service WorkersThe constructor initializes an XMLHttpRequest. It must be called before any other method calls.This interface also inherits properties of XMLHttpRequestEventTarget and of EventTarget.Returns a number representing the state of the request.Returns an ArrayBuffer, a Blob, a Document, a JavaScript object, or a string, depending on the value of XMLHttpRequest.responseType, that contains the response entity body.Returns a string that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent.Specifies the type of the response.Returns the serialized URL of the response or the empty string if the URL is null.Returns a Document containing the response to the request, or null if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML. Not available in Web Workers.Returns the HTTP response status code of the request.Returns a string containing the response string returned by the HTTP server. Unlike XMLHttpRequest.status, this includes the entire text of the response message ("OK", for example).Note: According to the HTTP/2 specification RFC 7540, section 8.1.2.4: Response Pseudo-Header Fields, HTTP/2 does not define a way to carry the version or reason phrase that is included in an HTTP/1.1 status line.The time in milliseconds a request can take before automatically being terminated.A XMLHttpRequestUpload representing the upload process.Returns true if cross-site Access-Control requests should be made using credentials such as cookies or authorization headers; otherwise false.The channel used by the object when performing the request.A boolean. If true, the request will be sent without cookie and authentication headers.A boolean. If true, the same origin policy will not be enforced on the request.A boolean. It indicates whether or not the object represents a background service request.Aborts the request if it has already been sent.Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.Initializes a request.Overrides the MIME type returned by the server.Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.Sets the value of an HTTP request header. You must call setRequestHeader() after open(), but before send().\n  Fired when a request has been aborted, for example because the program called XMLHttpRequest.abort().\n  Also available via the onabort event handler property.\n  \n  Fired when the request encountered an error.\n  Also available via the onerror event handler property.\n  \n  Fired when an XMLHttpRequest transaction completes successfully.\n  Also available via the onload event handler property.\n  \n  Fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).\n  Also available via the onloadend event handler property.\n  \n  Fired when a request has started to load data.\n  Also available via the onloadstart event handler property.\n  \n  Fired periodically when a request receives more data.\n  Also available via the onprogress event handler property.\n  \n  Fired whenever the readyState property changes.\n  Also available via the onreadystatechange event handler property.\n  \n  Fired when progress is terminated due to preset time expiring.\n  Also available via the ontimeout event handler property.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"
},
{
	"api_id": "103",
	"name": "AbortController",
	"description": "The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.You can create a new AbortController object using the AbortController() constructor. Communicating with a DOM request is done using an AbortSignal object.Creates a new AbortController object instance.Returns an AbortSignal object instance, which can be used to communicate with, or to abort, a DOM request.Aborts a DOM request before it has completed. This is able to abort fetch requests, consumption of any response bodies, and streams.Note: There are additional examples in the AbortSignal reference.In the following snippet, we aim to download a video using the Fetch API.We first create a controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request and allows us to abort it by calling AbortController.abort(), as seen below in the second event listener.Note: When abort() is called, the fetch() promise rejects with a DOMException named AbortError.You can find a full working example on GitHub; you can also see it running live.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController"
},
{
	"api_id": "104",
	"name": "AbortSignal",
	"description": "The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a fetch request) and abort it if required via an AbortController object.The AbortSignal interface also inherits properties from its parent interface, EventTarget.A Boolean that indicates whether the request(s) the signal is communicating with is/are aborted (true) or not (false).A JavaScript value providing the abort reason, once the signal has aborted.The AbortSignal interface inherits methods from its parent interface, EventTarget.Throws the signal's abort reason if the signal has been aborted; otherwise it does nothing.Returns an AbortSignal instance that is already set as aborted.Returns an AbortSignal instance that will automatically abort after a specified time.Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Invoked when the DOM requests the signal is communicating with is/are aborted.\n  Also available via the onabort property.\n  The following snippet shows how we might use a signal to abort downloading a video using the Fetch API.We first create an abort controller using the AbortController() constructor, then grab a reference to its associated AbortSignal object using the AbortController.signal property.\n  When the fetch request is initiated, we pass in the AbortSignal as an option inside the request's options object (the {signal} below). This associates the signal and controller with the fetch request, and allows us to abort it by calling AbortController.abort().\n  Below you can see that the fetch operation is aborted in the second event listener, which triggered when the abort button (abortBtn) is clicked.\nNote: When abort() is called, the fetch() promise rejects with an "AbortError" DOMException.You can find a full working example on GitHub; you can also see it running live.\n  If you need to abort the operation on timeout then you can use the static AbortSignal.timeout() method.\n  This returns an AbortSignal that will automatically timeout after a certain number of milliseconds.\n\n  The code snippet below shows how you would either succeed in downloading a file, or handle a timeout error after 5 seconds.\n  Note that when there is a timeout the fetch() promise rejects with a "TimeoutError" DOMException.\n  This allows code to differentiate between timeouts (for which user notification is probably required), and user aborts.\nfetch() isn't designed to combine multiple signals, so you can't abort a download "directly" due to either of AbortController.abort() being called or an AbortSignal timeout (though as in the preceding example, a timeout signal will abort if triggered by inbuilt browser mechanisms like a stop button).\n  To trigger on multiple signals they must be daisy chained.\n  The code snippet below shows how you might call AbortController.abort() in the handler for a separate timer.\nNote: Unlike when using AbortSignal.timeout(), there is no way to tell whether the final abort was caused by a timeout.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"
},
{
	"api_id": "105",
	"name": "AbsoluteOrientationSensor",
	"description": "The AbsoluteOrientationSensor interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new AbsoluteOrientationSensor object.No specific properties; inherits methods from its ancestors OrientationSensor and Sensor.No specific methods; inherits methods from its ancestors OrientationSensor and Sensor.No specific events; inherits methods from its ancestor, Sensor.The following example, which is loosely based on Intel's Orientation Phone demo, instantiates an AbsoluteOrientationSensor with a frequency of 60 times a second. On each reading it uses OrientationSensor.quaternion to rotate a visual model of a phone.Using orientation sensors requires requesting permissions for multiple device sensors. Because the Permissions interface uses promises, a good way to request permissions is to use Promise.all.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AbsoluteOrientationSensor"
},
{
	"api_id": "106",
	"name": "AbstractRange",
	"description": "The AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.Note: As an abstract interface, you will not directly instantiate an object of type AbstractRange. Instead, you will use the Range or StaticRange interfaces. To understand the difference between those two interfaces, and how to choose which is appropriate for your needs.A Boolean value which is true if the range is collapsed. A collapsed range is a range whose start position and end position are the same, resulting in a zero-character-long range.The Node object in which the end of the range, as specified by the endOffset property, is located.An integer value indicating the offset, in characters, from the beginning of the node's contents to the beginning of the range represented by the range object. This value must be less than the length of the endContainer node.The DOM Node in which the beginning of the range, as specified by the startOffset property, is located.An integer value indicating the offset, in characters, from the beginning of the node's contents to the last character of the contents referred to by the range object. This value must be less than the length of the node indicated in startContainer.The AbstractRange interface does provide any methods.All ranges of content within a document are described using instances of interfaces based on AbstractRange. There are two such interfaces:The Range interface has been around for a long time and has only recently been redefined to be based upon AbstractRange as the need arose to define other forms of range data. Range provides methods that allow you to alter the range's endpoints, as well as methods to compare ranges, detect intersections between ranges, and so forth.A StaticRange is a basic range which cannot be changed once it's been created. Specifically, as the node tree mutates and changes, the range does not. This is useful when you need to specify a range that will only be used once, since it avoids the performance and resource impact of the more complex Range interface.When trying to access the contents of an element, keep in mind that the element itself is a node, but so is any text inside it. In order to set a range endpoint within the text of an element, be sure to find the text node inside the element:This example creates a new range, range, and sets its starting point to the third child node of the first element whose class is elementclass. The end point is set to be the middle of the first child of the span, and then the range is used to copy the contents of the range.In order to define a range of characters within a document in a way that is able to span across zero or more node boundaries, and which is as resilient as possible to changes to the DOM, you can't specify the offset to the first and last characters in the HTML. There are a few good reasons for that.First, after your page is loaded, the browser isn't thinking in terms of HTML. Once it's been loaded, the page is a tree of DOM Node objects, so you need to specify the beginning and ending locations of a range in terms of nodes and positions within nodes.Second, in order to support the mutability of the DOM tree as much as possible, you need a way to represent positions relative to nodes in the tree, rather than global positions within the entire document. By defining points within the document as offsets within a given node, those positions remain consistent with the content even as nodes are added to, removed from, or moved around within the DOM tree—within reason. There are fairly obvious limitations (such as if a node is moved to be after the endpoint of a range, or if the content of a node is heavily altered), but it's far better than nothing.Third, using node-relative positions to define the start and end positions will generally be easier to make perform well. Rather than having to negotiate the DOM figuring out what your global offset refers to, the user agent (browser) can instead go directly to the node indicated by the starting position and start from there, working its way forward until it reaches the given offset into the ending node.To illustrate this, consider the HTML below:After loading the HTML and constructing the DOM representation of the document, the resulting DOM tree looks like this:In this diagram, the nodes representing HTML elements are shown in green. Eah row beneath them shows the next layer of depth into the DOM tree. Blue nodes are text nodes, containing the text that gets shown onscreen. Each element's contents are linked below it in the tree, potentially spawning a series of branches below as elements include other elements and text nodes.If you want to create a range that incorporates the contents of the <p> element whose contents are "A <em>very</em> interesting thing happened on the way to the forum...", you can do so like this:Since we wish to select the entire contents of the <p> element, including its descendants, this works perfectly.If we wish to instead copy the text "An interesting thing..." from the <section>'s heading (an h2 element) through the end of the letters "ve" in the <em> within the paragraph below it, the following code would work:Here an interesting problem arises—we are capturing content from multiple nodes located at different levels of the DOM hierarchy, and then only part of one of them. What should the result look like?As it turns out, the DOM specification fortunately addresses this exact issue. For example, in this case, we're calling cloneContents() on the range to create a new DocumentFragment object providing a DOM subtree which replicates the contents of the specified range. To do this, cloneContents() constructs all the nodes needed to preserve the structure of the indicated range, but no more than necessary.In this example, the start of the specified range is found within the text node below the section's heading, which means that the new DocumentFragment will need to contain an h2 and, below it, a text node.The range's end is located below the <p> element, so that will be needed within the new fragment. So will the text node containing the word "A", since that's included in the range. Finally, an <em> and a text node below it will be added below the <p> as well.The contents of the text nodes are then determined by the offsets into those text nodes given when calling setStart() and setEnd(). Given the offset of 11 into the heading's text, that node will contain "An interesting thing...". Similarly, the last text node will contain "ve", given the request for the first two characters of the ending node.The resulting document fragment looks like this:\n  \nNotice especially that the contents of this fragment are all below the shared common parent of the topmost nodes within it. The parent <section> is not needed to replicate the cloned content, so it isn't included.Consider this simple HTML fragment of HTML.Imagine using a Range to extract the word "paragraph" from this. The code to do that looks like the following:First we get references to the paragraph node itself as well as to the second child node within the paragraph. The first child is the <strong> element. The second child is the text node " is a paragraph.".With the text node reference in hand, we create a new Range object by calling createRange() on the Document itself. We set the starting position of the range to the sixth character of the text node's string, and the end position to the length of the text node's string minus one. This sets the range to encompass the word "paragraph".We then finish up by calling cloneContents() on the Range to create a new DocumentFragment object which contains the portion of the document encompassed by the range. After that, we use appendChild() to add that fragment at the end of the document's body, as obtained from document.body.The result looks like this:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange"
},
{
	"api_id": "107",
	"name": "Accelerometer",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Accelerometer interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.If a feature policy blocks the use of a feature, it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new Accelerometer object.In addition to the properties listed below, Accelerometer inherits properties from its parent interfaces, Sensor and EventTarget.Returns a double containing the acceleration of the device along the device's x axis.Returns a double containing the acceleration of the device along the device's y axis.Returns a double containing the acceleration of the device along the device's z axis.Accelerometer doesn't have own methods. However, it inherits methods from its parent interfaces, Sensor and EventTarget.Accelerometer doesn't have own events. However, it inherits events from its parent interface, Sensor.Acceleration is typically read in the reading event callback. In the example below this occurs sixty times a second.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer"
},
{
	"api_id": "108",
	"name": "AddressErrors",
	"description": "The AddressErrors dictionary is used by the Payment Request API to report validation errors in a physical address (typically a billing address or a shipping address). Any members which are present indicate that a validation error occurred for the member of the same name in an address described using PaymentAddress.AddressErrors is the type of the object returned by shippingAddressErrors in the object passed into PaymentRequestUpdateEvent.updateWith() by the shippingaddresschange event handler if a change to the address resulted in a validation error occurring.See the examples below to see how this works.A string which, if present, indicates that the addressLine property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the city property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the country property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the dependentLocality property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the organization property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the phone property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the postalCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the recipient property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the region property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.A string which, if present, indicates that the sortingCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.These properties have been removed from the specification and should no longer be used.A string which, if present, indicates that the languageCode property of the PaymentAddress could not be validated. The contents of the string provide a human-readable explanation of the validation failure, and ideally suggestions to correct the problem.Keep in mind that some violation errors may be outside the ability of the user to fix. Try to avoid asking the user to make corrections to things they can't change, and there may be situations in which you need to allow validation errors to be accepted anyway (for example, if you validate addresses against a postal service database and a new home has been built and its address is not yet in the database).This first example is just a snippet showing an implementation of the event handler for the shippingaddresschange event which checks to be sure the chosen address is located within one of a limited number of countries.See Handling address changes for a description of how this code works.Here we'll see a complete, working version of the example above (except of course that it's not connected to an actual payment handler, so no payments are actually processed). In the example, we're handling a donation to an organization that will be sending a "thank you" gift to the donor, so it requests shipping information along with allowing the donation payment itself.First, we declare the variables supportedHandlers, which is compatible with PaymentMethodData, and defaultPaymentDetails, which is an object containing the properties described in PaymentRequestUpdateEvent.updateWith.supportedHandlers describes the supported payment handlers and the details for those. In this example, only the Example Pay payment handler is supported.defaultPaymentDetails describes the payment being requested. A description of the total amount being requested (including a label and the currency used), a list of the line items (in this case only one, "Original donation amount"), and a list of shipping options available; in this case only one.The main payment processing code is found in the process() method, up next.This code creates a new PaymentRequest, providing the supported handlers and payment options we set up above, as well as additional options (in this case, that we want to ask for shipping information).After that, we set up the handler for the shippingaddresschange event so we can validate address information and call the request's show() method to start running the payment UI.The handleAddressChange() method, called when shippingaddresschange events occur, is where we'll look to see if the country is one of those we allow as shipping destinations.The shippingaddresschange event doesn't receive the PaymentRequest object directly, so we fetch it from the target property of the event. If the request's shippingAddress has a value for country which isn't in the array validCountries, we generate the error.That's done by removing all shipping options currently set on the request, then set up an object named shippingAddressErrors which contains a country property which is an error message describing why the stated country isn't being permitted as a value.Then an object is created with its error set to a generic message about address errors and with the reset of the object's values taken from shippingAddressErrors, and, using "...defaultPaymentDetails" as the final entry in the object, the remainder of the properties' values are taken from defaultPaymentDetails.The final step is to call the event's updateWith() method, passing along the updateDetails object. This lets the Payment Request API know to present the specified error or errors but to allow the user to keep trying to edit the address.This code creates a handler for the load event on the window which in turn adds the needed click event handler to the "Donate Now" button so that clicking it starts the payment process.See addEventListener() for information about event handlers and how they work.Here's the simple HTML for this example.The final product is below.Note: if you have content blocking features enabled in your browser, the example may not work inline below. In that case, you can view the example on its own page.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AddressErrors"
},
{
	"api_id": "109",
	"name": "AesCbcParams",
	"description": "The AesCbcParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CBC algorithm.A string. This should be set to AES-CBC.An ArrayBuffer, a TypedArray, or a DataView. The initialization vector. Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret (for example, it may be transmitted unencrypted along with the ciphertext).See the examples for SubtleCrypto.encrypt() and SubtleCrypto.decrypt().Browsers that support the "AES-CBC" algorithm for the SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AesCbcParams"
},
{
	"api_id": "110",
	"name": "AesCtrParams",
	"description": "The AesCtrParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CTR algorithm.AES is a block cipher, meaning that it splits the message into blocks and encrypts it a block at a time. In CTR mode, every time a block of the message is encrypted, an extra block of data is mixed in. This extra block is called the "counter block".A given counter block value must never be used more than once with the same key:Typically this is achieved by splitting the initial counter block value into two concatenated parts:Essentially: the nonce should ensure that counter blocks are not reused from one message to the next, while the counter should ensure that counter blocks are not reused within a single message.Note: See Appendix B of the NIST SP800-38A standard for more information.A string. This should be set to AES-CTR.An ArrayBuffer, a TypedArray, or a DataView — the initial value of the counter block. This must be 16 bytes long (the AES block size). The rightmost length bits of this block are used for the counter, and the rest is used for the nonce. For example, if length is set to 64, then the first half of counter is the nonce and the second half is used for the counter.A Number — the number of bits in the counter block that are used for the actual counter. The counter must be big enough that it doesn't wrap: if the message is n blocks and the counter is m bits long, then the following must be true: n <= 2^m. The NIST SP800-38A standard, which defines CTR, suggests that the counter should occupy half of the counter block (see Appendix B.2), so for AES it would be 64.See the examples for SubtleCrypto.encrypt() and SubtleCrypto.decrypt().Browsers that support the "AES-CTR" algorithm for the SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AesCtrParams"
},
{
	"api_id": "111",
	"name": "AesGcmParams",
	"description": "The AesGcmParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-GCM algorithm.For details of how to supply appropriate values for this parameter, see the specification for AES-GCM: NIST SP800-38D, in particular section 5.2.1.1 on Input Data.A string. This should be set to AES-GCM.An ArrayBuffer, a TypedArray, or a DataView with the initialization vector. This must be unique for every encryption operation carried out with a given key. Put another way: never reuse an IV with the same key. The AES-GCM specification recommends that the IV should be 96 bits long, and typically contains bits from a random number generator. Section 8.2 of the specification outlines methods for constructing IVs. Note that the IV does not have to be secret, just unique: so it is OK, for example, to transmit it in the clear alongside the encrypted message.An ArrayBuffer, a TypedArray, or a DataView. This contains additional data that will not be encrypted but will be authenticated along with the encrypted data. If additionalData is given here then the same data must be given in the corresponding call to decrypt(): if the data given to the decrypt() call does not match the original data, the decryption will throw an exception. This gives you a way to authenticate associated data without having to encrypt it.The bit length of additionalData must be smaller than 2^64 - 1.The additionalData property is optional and may be omitted without compromising the security of the encryption operation.A Number. This determines the size in bits of the authentication tag generated in the encryption operation and used for authentication in the corresponding decryption.According to the Web Crypto specification this must have one of the following values: 32, 64, 96, 104, 112, 120, or 128. The AES-GCM specification recommends that it should be 96, 104, 112, 120 or 128, although 32 or 64 bits may be acceptable in some applications: Appendix C of the specification provides additional guidance here.tagLength is optional and defaults to 128 if it is not specified.See the examples for SubtleCrypto.encrypt() and SubtleCrypto.decrypt().Browsers that support the "AES-GCM" algorithm for the SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams"
},
{
	"api_id": "112",
	"name": "AesKeyGenParams",
	"description": "A string. This should be set to AES-CBC, AES-CTR, AES-GCM, or AES-KW, depending on the algorithm you want to use.A Number — the length in bits of the key to generate. This must be one of: 128, 192, or 256.See the examples for SubtleCrypto.generateKey().Browsers that support any of the AES-based algorithms for the SubtleCrypto.generateKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AesKeyGenParams"
},
{
	"api_id": "113",
	"name": "AmbientLightSensor",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The AmbientLightSensor interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new AmbientLightSensor object.Returns the current light level in lux of the ambient light level around the hosting device.AmbientLightSensor doesn't have own methods. However, it inherits methods from its parent interfaces, Sensor and EventTarget.AmbientLightSensor doesn't have own events. However, it inherits events from its parent interface, Sensor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AmbientLightSensor"
},
{
	"api_id": "114",
	"name": "AnalyserNode",
	"description": "The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.An AnalyserNode has exactly one input and one output. The node works even if the output is not connected.\n  \nCreates a new instance of an AnalyserNode object.Inherits properties from its parent, AudioNode.An unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.An unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.A double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using getByteFrequencyData().A double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using getByteFrequencyData().A double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother.Inherits methods from its parent, AudioNode.Copies the current frequency data into a Float32Array array passed into it.Copies the current frequency data into a Uint8Array (unsigned byte array) passed into it.Copies the current waveform, or time-domain, data into a Float32Array array passed into it.Copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it.Note: See the guide Visualizations with Web Audio API for more information on creating audio visualizations.The following example shows basic usage of an AudioContext to create an AnalyserNode, then requestAnimationFrame and <canvas> to collect time domain data repeatedly and draw an "oscilloscope style" output of the current audio input. For more complete applied examples/information, check out our Voice-change-O-matic demo (see app.js lines 128–205 for relevant code).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode"
},
{
	"api_id": "115",
	"name": "ANGLE_instanced_arrays",
	"description": "The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the "ANGLE" suffix.Despite the name "ANGLE", this extension works on any device if the hardware supports it and not just on Windows when using the ANGLE library. "ANGLE" just indicates that this extension has been written by the ANGLE library authors.This extension exposes one new constant, which can be used in the gl.getVertexAttrib() method:Returns a GLint describing the frequency divisor used for instanced rendering when used in the gl.getVertexAttrib() as the pname parameter.This extension exposes three new methods.Behaves identically to gl.drawArrays() except that multiple instances of the range of elements are executed, and the instance advances for each iteration.Behaves identically to gl.drawElements() except that multiple instances of the set of elements are executed and the instance advances between each set.Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with ext.drawArraysInstancedANGLE() and ext.drawElementsInstancedANGLE().The following example shows how to draw a given geometry multiple times with a single draw call.Warning: The following is educational, not production level code. It should generally be avoided to construct data / buffers within the rendering loop or right before use.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays"
},
{
	"api_id": "116",
	"name": "Animation",
	"description": "The Animation interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.Creates a new Animation object instance.The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a timeline, is inactive or hasn't been played yet, its value is null.Gets and sets the AnimationEffect associated with this animation. This will usually be a KeyframeEffect object.Returns the current finished Promise for this animation.Gets and sets the String used to identify the animation.Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.Returns an enumerated value describing the playback state of an animation.Gets or sets the playback rate of the animation.Returns the current ready Promise for this animation.Returns the replace state of the animation. This will be active if the animation has been replaced, or persisted if Animation.persist() has been invoked on it.Gets or sets the scheduled time when an animation's playback should begin.Gets or sets the timeline associated with this animation.Clears all keyframeEffects caused by this animation and aborts its playback.Commits the end styling state of an animation to the element being animated, even after that animation has been removed. It will cause the end styling state to be written to the element being animated, in the form of properties inside a style attribute.Seeks either end of an animation, depending on whether the animation is playing or reversing.Suspends playing of an animation.Explicitly persists an animation, when it would otherwise be removed due to the browser's Automatically removing filling animations behavior.Starts or resumes playing of an animation, or begins the animation again if it previously finished.Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.Sets the speed of an animation after first synchronizing its playback position.Fires when the Animation.cancel() method is called or when the animation enters the "idle" play state from another state.Fires when the animation finishes playing.Fires when the animation is removed (i.e., put into an active replace state).It is possible to trigger a large number of animations on the same element. If they are indefinite (i.e., forwards-filling), this can result in a huge animations list, which could create a memory leak. For this reason, modern browsers have implemented the part of the Web Animations spec that automatically removes overriding forward filling animations, unless the developer explicitly specifies to keep them.You can see this in action in our simple replace indefinite animations demo. The related JavaScript features are:Blinking and flashing animation can be problematic for people with cognitive concerns such as Attention Deficit Hyperactivity Disorder (ADHD). Additionally, certain kinds of motion can be a trigger for Vestibular disorders, epilepsy, and migraine, and Scotopic sensitivity.Consider providing a mechanism for pausing or disabling animation, as well as using the Reduced Motion Media Query to create a complimentary experience for users who have expressed a preference for no animated experiences.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Animation"
},
{
	"api_id": "117",
	"name": "AnimationEffect",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The AnimationEffect interface of the Web Animations API defines current and future animation effects like KeyframeEffect, which can be passed to Animation objects for playing, and KeyframeEffect (which is used by CSS Animations and Transitions).Returns the object associated with the animation containing all the animation's timing values.Returns the calculated timing properties for this AnimationEffect.Updates the specified timing properties of this AnimationEffect.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect"
},
{
	"api_id": "118",
	"name": "AnimationEvent",
	"description": "The AnimationEvent interface represents events providing information related to animations.Creates an AnimationEvent event with the given parameters.Also inherits properties from its parent Event.A string containing the value of the animation-name that generated the animation.A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''.Inherits methods from its parent, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent"
},
{
	"api_id": "119",
	"name": "AnimationPlaybackEvent",
	"description": "The AnimationPlaybackEvent interface of the Web Animations API represents animation events.As animations play, they report changes to their playState through animation events.Constructs a new AnimationPlaybackEvent object instance.The current time of the animation that generated the event.The time value of the timeline of the animation that generated the event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent"
},
{
	"api_id": "120",
	"name": "AnimationTimeline",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The AnimationTimeline interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by DocumentTimeline and future timeline types) and is not itself directly used by developers. Anywhere you see AnimationTimeline, you should use DocumentTimeline or any other timeline type instead.Returns the time value in milliseconds for this timeline or null if this timeline is inactive.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline"
},
{
	"api_id": "121",
	"name": "atob()",
	"description": "\n  The atob() function decodes a\n  string of data which has been encoded using Base64 encoding. You can use\n  the btoa() method to encode and transmit\n  data which may otherwise cause communication problems, then transmit it and use the\n  atob() method to decode the data again. For example, you can encode,\n  transmit, and decode control characters such as ASCII values 0 through 31.\n\n  For use with Unicode or UTF-8 strings, see the note on "Unicode strings" in the page\n  for btoa().\nAn ASCII string containing decoded data from encodedData.Thrown if encodedData is not valid base64.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/atob"
},
{
	"api_id": "122",
	"name": "Attr",
	"description": "The Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()), but certain functions (e.g., Element.getAttributeNode()) or means of iterating return Attr instances.The core idea of an object of type Attr is the association between a name and a value. An attribute may also be part of a namespace and, in this case, it also has a URI identifying the namespace, and a prefix that is an abbreviation for the namespace.The name is deemed local when it ignores the eventual namespace prefix and deemed qualified when it includes the prefix of the namespace, if any, separated from the local name by a colon (:). We have three cases: an attribute outside of a namespace, an attribute inside a namespace without a prefix defined, an attribute inside a namespace with a prefix:Note: This interface represents only attributes present in the tree representation of the Element, being a SVG, an HTML or a MathML element. It doesn't represent the property of an interface associated with such element, such as HTMLTableElement for a <table> element. (See this article for more information about attributes and how they are reflected into properties.)This interface also inherits the properties of its parent interfaces, Node and EventTarget.A string representing the local part of the qualified name of the attribute.The attribute's qualified name. If the attribute is not in a namespace, it will be the same as localName property.A string representing the URI of the namespace of the attribute, or null if there is no namespace.The Element the attribute belongs to.A string representing the namespace prefix of the attribute, or null if a namespace without prefix or no namespace are specified.This property always returns true.The attribute's value, a string that can be set and get using this property.This interface has no specific methods, but inherits the methods of its parent interfaces, Node and EventTarget.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr"
},
{
	"api_id": "123",
	"name": "AudioBuffer",
	"description": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the MediaElementAudioSourceNode are more suitable. The buffer contains data in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between -1 and +1, that is, a 32-bit floating point buffer, with each sample between -1.0 and 1.0. If the AudioBuffer has multiple channels, they are stored in separate buffers.Creates and returns a new AudioBuffer object instance.Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.Returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).Copies the samples from the specified channel of the AudioBuffer to the destination array.Copies the samples to the specified channel of the AudioBuffer, from the source array.The following simple example shows how to create an AudioBuffer and fill it with random white noise. You can find the full source code at our webaudio-examples repository; a running live version is also available.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer"
},
{
	"api_id": "124",
	"name": "AudioBufferSourceNode",
	"description": "The AudioBufferSourceNode interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer.This interface is especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network. To play sounds which require accurate timing but must be streamed from the network or played from disk, use a AudioWorkletNode to implement its playback.An AudioBufferSourceNode has no inputs and exactly one output, which has the same number of channels as the AudioBuffer indicated by its buffer property. If there's no buffer set—that is, if buffer is null—the output contains a single channel of silence (every sample is 0).An AudioBufferSourceNode can only be played once; after each call to start(), you have to create a new node if you want to play the same sound again. Fortunately, these nodes are very inexpensive to create, and the actual AudioBuffers can be reused for multiple plays of the sound. Indeed, you can use these nodes in a "fire and forget" manner: create the node, call start() to begin playing the sound, and don't even bother to hold a reference to it. It will automatically be garbage-collected at an appropriate time, which won't be until sometime after the sound has finished playing.Multiple calls to stop() are allowed. The most recent call replaces the previous one, if the AudioBufferSourceNode has not already reached the end of the buffer.\n  \nCreates and returns a new AudioBufferSourceNode object. As an alternative, you can use the BaseAudioContext.createBufferSource() factory method; see Creating an AudioNode.Inherits properties from its parent, AudioScheduledSourceNode.An AudioBuffer that defines the audio asset to be played, or when set to the value null, defines a single channel of silence (in which every sample is 0.0).A k-rate AudioParam representing detuning of playback in cents. This value is compounded with playbackRate to determine the speed at which the sound is played. Its default value is 0 (meaning no detuning), and its nominal range is -∞ to ∞.A Boolean attribute indicating if the audio asset must be replayed when the end of the AudioBuffer is reached. Its default value is false.A floating-point value indicating the time, in seconds, at which playback of the AudioBuffer must begin when loop is true. Its default value is 0 (meaning that at the beginning of each loop, playback begins at the start of the audio buffer).A floating-point number indicating the time, in seconds, at which playback of the AudioBuffer stops and loops back to the time indicated by loopStart, if loop is true. The default value is 0.An a-rate AudioParam that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with detune to determine the final playback rate.Inherits event handlers from its parent, AudioScheduledSourceNode.Inherits methods from its parent, AudioScheduledSourceNode, and overrides the following method:.Schedules playback of the audio data contained in the buffer, or begins playback immediately. Additionally allows the start offset and play duration to be set.In this example, we create a two-second buffer, fill it with white noise, and then play it using an AudioBufferSourceNode. The comments should clearly explain what is going on.Note: You can also run the code live, or view the source.Note: For a decodeAudioData() example, see the AudioContext.decodeAudioData() page.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode"
},
{
	"api_id": "125",
	"name": "AudioContext",
	"description": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.An audio context controls both the creation of the nodes it contains and the execution of the audio processing, or decoding. You need to create an AudioContext before you do anything else, as everything happens inside a context. It's recommended to create one AudioContext and reuse it instead of initializing a new one each time, and it's OK to use a single AudioContext for several different audio sources and pipeline concurrently.Creates and returns a new AudioContext object.Also inherits properties from its parent interface, BaseAudioContext.Returns the number of seconds of processing latency incurred by the AudioContext passing the audio from the AudioDestinationNode to the audio subsystem.Returns an estimation of the output latency of the current audio context.Also inherits methods from its parent interface, BaseAudioContext.Closes the audio context, releasing any system audio resources that it uses.Creates a MediaElementAudioSourceNode associated with an HTMLMediaElement. This can be used to play and manipulate audio from <video> or <audio> elements.Creates a MediaStreamAudioSourceNode associated with a MediaStream representing an audio stream which may come from the local computer microphone or other sources.Creates a MediaStreamAudioDestinationNode associated with a MediaStream representing an audio stream which may be stored in a local file or sent to another computer.Creates a MediaStreamTrackAudioSourceNode associated with a MediaStream representing an media stream track.Returns a new AudioTimestamp object containing two audio timestamp values relating to the current audio context.Resumes the progression of time in an audio context that has previously been suspended/paused.Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process.Basic audio context declaration:Cross browser variant:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext"
},
{
	"api_id": "126",
	"name": "AudioData",
	"description": "The AudioData interface of the WebCodecs API represents an audio sample.AudioData is a transferable object.An audio track consists of a stream of audio samples, each sample representing a captured moment of sound. An AudioData object is a representation of such a sample. Working alongside the interfaces of the Insertable Streams API, you can break a stream into individual AudioData objects with MediaStreamTrackProcessor, or construct an audio track from a stream of frames with MediaStreamTrackGenerator.Note: Find out more about audio on the web in Digital audio concepts.An AudioData object contains a reference to an attached media resource. This media resource contains the actual audio sample data described by the object. A media resource is maintained by the user agent until it is no longer referenced by an AudioData object, for example when AudioData.close() is called.To return the sample format of an AudioData use the AudioData.format property. The format may be described as interleaved or planar. In interleaved formats, the audio samples from the different channels are laid out in a single buffer, described as a plane. This plane contains a number of elements equal to AudioData.numberOfFrames * AudioData.numberOfChannels.In planar format, the number of planes is equal to AudioData.numberOfChannels, and each plane is a buffer containing a number of elements equal to AudioData.numberOfFrames.Creates a new AudioData object.Returns the sample format of the audio.Returns the sample rate of the audio in Hz.Returns the number of frames.Returns the number of audio channels.Returns the duration of the audio in microseconds.Returns the timestamp of the audio in microseconds.Returns the number of bytes required to hold the sample as filtered by options passed into the method.Copies the samples from the specified plane of the AudioData object to the destination.Creates a new AudioData object with reference to the same media resource as the original.Clears all states and releases the reference to the media resource.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioData"
},
{
	"api_id": "127",
	"name": "AudioDecoder",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The AudioDecoder interface of the WebCodecs API decodes chunks of audio.Creates a new AudioDecoder object.An integer representing the number of decode queue requests.Represents the state of the underlying codec and whether it is configured for decoding.Enqueues a control message to configure the audio decoder for decoding chunks.Enqueues a control message to decode a given chunk of audio.Returns a promise that resolves once all pending messages in the queue have been completed.Resets all states including configuration, control messages in the control message queue, and all pending callbacks.Ends all pending work and releases system resources.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioDecoder"
},
{
	"api_id": "128",
	"name": "AudioDestinationNode",
	"description": "The AudioDestinationNode interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will "record" the audio data when used with an OfflineAudioContext.AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.The AudioDestinationNode of a given AudioContext can be retrieved using the AudioContext.destination property.Inherits properties from its parent, AudioNode.An unsigned long defining the maximum number of channels that the physical device can handle.No specific method; inherits methods from its parent, AudioNode.There is no complex set up for using an AudioDestinationNode — by default, this represents the output of the user's system (e.g. their speakers), so you can get it hooked up inside an audio graph using only a few lines of code:To see a more complete implementation, check out one of our MDN Web Audio examples, such as Voice-change-o-matic or Violent Theremin.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode"
},
{
	"api_id": "129",
	"name": "AudioEncoder",
	"description": "\n  Creates a new AudioEncoder object.An integer representing the number of encode queue requests.Represents the state of the underlying codec and whether it is configured for encoding.Enqueues a control message to configure the audio encoder for encoding chunks.Enqueues a control message to encode a given AudioData objects.Returns a promise that resolves once all pending messages in the queue have been completed.Resets all states including configuration, control messages in the control message queue, and all pending callbacks.Ends all pending work and releases system resources.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioEncoder"
},
{
	"api_id": "130",
	"name": "AudioListener",
	"description": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.It is important to note that there is only one listener per context and that it isn't an AudioNode.\n  \nNote: The position, forward, and up value are set and retrieved using different syntaxes. Retrieval is done by accessing, for example, AudioListener.positionX, while setting the same property is done with AudioListener.positionX.value. This is why these values are not marked read only, which is how they appear in the specification's IDL.Represents the horizontal position of the listener in a right-hand cartesian coordinate system. The default is 0.Represents the vertical position of the listener in a right-hand cartesian coordinate system. The default is 0.Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate system. The default is 0.Represents the horizontal position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0.Represents the vertical position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0.Represents the longitudinal (back and forth) position of the listener's forward direction in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is -1.Represents the horizontal position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0.Represents the vertical position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 1.Represents the longitudinal (back and forth) position of the top of the listener's head in the same cartesian coordinate system as the position (positionX, positionY, and positionZ) values. The forward and up values are linearly independent of each other. The default is 0.Sets the orientation of the listener.Sets the position of the listener.Note: Although these methods are deprecated they are currently the only way to set the orientation and position in Firefox, Internet Explorer and Safari.A double value representing the amount of pitch shift to use when rendering a doppler effect.A double value representing the speed of sound, in meters per second.In a previous version of the specification, the dopplerFactor and speedOfSound properties and the setPosition() method could be used to control the doppler effect applied to AudioBufferSourceNodes connected downstream — these would be pitched up and down according to the relative speed of the PannerNode and the AudioListener. These features had a number of problems:Because of these issues, these properties and methods have been removed.The setOrientation() and setPosition() methods have been replaced by setting their property value equivalents. For example setPosition(x, y, z) can be achieved by setting positionX.value, positionY.value, and positionZ.value respectively.See BaseAudioContext.createPanner() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener"
},
{
	"api_id": "131",
	"name": "AudioNode",
	"description": "The AudioNode interface is a generic interface for representing an audio processing module.Examples include:Note: An AudioNode can be target of events, therefore it implements the EventTarget interface.\n  \nEach AudioNode has inputs and outputs, and multiple audio nodes are connected to build a processing graph. This graph is contained in an AudioContext, and each audio node can only belong to one audio context.A source node has zero inputs but one or multiple outputs, and can be used to generate sound. On the other hand, a destination node has no outputs; instead, all its inputs are directly played back on the speakers (or whatever audio output device the audio context uses). In addition, there are processing nodes which have inputs and outputs. The exact processing done varies from one AudioNode to another but, in general, a node reads its inputs, does some audio-related processing, and generates new values for its outputs, or lets the audio pass through (for example in the AnalyserNode, where the result of the processing is accessed separately).The more nodes in a graph, the higher the latency will be. For example, if your graph has a latency of 500ms, when the source node plays a sound, it will take half a second until that sound can be heard on your speakers (or even longer because of latency in the underlying audio device). Therefore, if you need to have interactive audio, keep the graph as small as possible, and put user-controlled audio nodes at the end of a graph. For example, a volume control (GainNode) should be the last node so that volume changes take immediate effect.Each input and output has a given amount of channels. For example, mono audio has one channel, while stereo audio has two channels. The Web Audio API will up-mix or down-mix the number of channels as required; check the Web Audio spec for details.For a list of all audio nodes, see the Web Audio API homepage.There are two ways to create an AudioNode: via the constructor and via the factory method.You are free to use either constructors or factory methods, or mix both, however there are advantages to using the constructors:Brief history: The first version of the Web Audio spec only defined the factory methods. After a design review in October 2013, it was decided to add constructors because they have numerous benefits over factory methods. The constructors were added to the spec from August to October 2016. Factory methods continue to be included in the spec and are not deprecated.Returns the associated BaseAudioContext, that is the object representing the processing graph the node is participating in.Returns the number of inputs feeding the node. Source nodes are defined as nodes having a numberOfInputs property with a value of 0.Returns the number of outputs coming out of the node. Destination nodes — like AudioDestinationNode — have a value of 0 for this attribute.Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of AudioNode.channelCountMode.Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.\n  Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.\n  The possible values are "speakers" or "discrete".\n  Also implements methods from the interface EventTarget.Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an AudioParam.Allows us to disconnect the current node from another one it is already connected to.This simple snippet of code shows the creation of some audio nodes, and how the AudioNode properties and methods can be used. You can find examples of such usage on any of the examples linked to on the Web Audio API landing page (for example Violent Theremin).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode"
},
{
	"api_id": "132",
	"name": "AudioParam",
	"description": "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).An AudioParam can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.Each AudioParam has a list of events, initially empty, that define when and how values change. When this list is not empty, changes using the AudioParam.value attributes are ignored. This list of events allows us to schedule changes that have to happen at very precise times, using arbitrary timeline-based automation curves. The time used is the one defined in AudioContext.currentTime.There are two AudioParam kinds: a-rate and k-rate parameters. Each AudioNode defines which of its parameters are a-rate or k-rate in the spec.An a-rate AudioParam takes the current audio parameter value for each sample frame of the audio signal.A k-rate AudioParam uses the same initial audio parameter value for the whole block processed; that is, 128 sample frames. In other words, the same value applies to every frame in the audio as it's processed by the node.Represents the initial value of the attribute as defined by the specific AudioNode creating the AudioParam.Represents the maximum possible value for the parameter's nominal (effective) range.Represents the minimum possible value for the parameter's nominal (effective) range.Represents the parameter's current value as of the current time; initially set to the value of defaultValue.Schedules an instant change to the value of the AudioParam at a precise time, as measured against AudioContext.currentTime. The new value is given by the value parameter.Schedules a gradual linear change in the value of the AudioParam. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.Schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.Schedules the start of a change to the value of the AudioParam. The change starts at the time specified in startTime and exponentially moves towards the value given by the target parameter. The exponential decay rate is defined by the timeConstant parameter, which is a time measured in seconds.Schedules the values of the AudioParam to follow a set of values, defined by an array of floating-point numbers scaled to fit into the given interval, starting at a given start time and spanning a given duration of time.Cancels all scheduled future changes to the AudioParam.Cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods.First, a basic example showing a GainNode having its gain value set. gain is an example of an a-rate AudioParam, as the value can potentially be set differently for each sample frame of the audio.Next, an example showing a DynamicsCompressorNode having some param values manipulated. These are examples of k-rate AudioParam types, as the values are set for the entire audio block at once.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam"
},
{
	"api_id": "133",
	"name": "AudioParamDescriptor",
	"description": "The AudioParamDescriptor dictionary of the Web Audio API specifies properties for AudioParam objects.It is used to create custom AudioParams on an AudioWorkletNode. If the underlying AudioWorkletProcessor has a parameterDescriptors static getter, then the returned array of objects based on this dictionary is used internally by AudioWorkletNode constructor to populate its parameters property accordingly.The string which represents the name of the AudioParam. Under this name the AudioParam will be available in the parameters property of the node, and under this name the AudioWorkletProcessor.process method will acquire the calculated values of this AudioParam.Either "a-rate", or "k-rate" string which represents an automation rate of this AudioParam. Defaults to "a-rate".A float which represents minimum value of the AudioParam. Defaults to -3.4028235e38.A float which represents maximum value of the AudioParam. Defaults to 3.4028235e38.A float which represents initial value of the AudioParam. Defaults to 0.The code fragment below shows a descriptor of this type being returned by a static parameterDescriptors method defined in a custom AudioWorkletProcessor (this is part of the more complete example in AudioWorkletNode.parameters).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParamDescriptor"
},
{
	"api_id": "134",
	"name": "AudioParamMap",
	"description": "The Web Audio API interface AudioParamMap represents a set of multiple audio parameters, each described as a mapping of a string identifying the parameter to the AudioParam object representing its value.The AudioParamMap object is accessed as a Map in which each parameter is identified by a name string which is mapped to an AudioParam containing the value of that parameter. In addition, there are the following properties available:??????",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParamMap"
},
{
	"api_id": "135",
	"name": "AudioProcessingEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The Web Audio API AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by AudioWorklet.Creates a new AudioProcessingEvent object.Also implements the properties inherited from its parent, Event.\n  A double representing the time when the audio will be played,\n  as defined by the time of AudioContext.currentTime.\n  \n  An AudioBuffer that is the buffer containing the input audio data to be processed.\n  The number of channels is defined as a parameter numberOfInputChannels,\n  of the factory method AudioContext.createScriptProcessor().\n  Note that the returned AudioBuffer is only valid in the scope of the event handler.\n  \n  An AudioBuffer that is the buffer where the output audio data should be written.\n  The number of channels is defined as a parameter, numberOfOutputChannels,\n  of the factory method AudioContext.createScriptProcessor().\n  Note that the returned AudioBuffer is only valid in the scope of the event handler.\n  See BaseAudioContext.createScriptProcessor() for example code that uses an AudioProcessingEvent.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent"
},
{
	"api_id": "136",
	"name": "AudioScheduledSourceNode",
	"description": "The AudioScheduledSourceNode interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the start() and stop() methods, as well as the ended event.Note: You can't create an AudioScheduledSourceNode object directly. Instead, use the interface which extends it, such as AudioBufferSourceNode, OscillatorNode, and ConstantSourceNode.Unless stated otherwise, nodes based upon AudioScheduledSourceNode output silence when not playing (that is, before start() is called and after stop() is called). Silence is represented, as always, by a stream of samples with the value zero (0).Inherits properties from its parent interface, AudioNode.Inherits methods from its parent interface, AudioNode, and adds the following methods:Schedules the node to begin playing the constant sound at the specified time. If no time is specified, the node begins playing immediately.Schedules the node to stop playing at the specified time. If no time is specified, the node stops playing at once.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:Fired when the source node has stopped playing, either because it's reached a predetermined stop time, the full duration of the audio has been performed, or because the entire buffer has been played.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode"
},
{
	"api_id": "137",
	"name": "AudioTrack",
	"description": "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>.The most common use for accessing an AudioTrack object is to toggle its enabled property in order to mute and unmute the track.A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to false mutes the track's audio.A string which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling AudioTrackList.getTrackById(). The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.A string specifying the category into which the track falls. For example, the main audio track would have a kind of "main".A string providing a human-readable label for the track. For example, an audio commentary track for a movie might have a label of "Commentary with director John Q. Public and actors John Doe and Jane Eod." This string is empty if no label is provided.A string specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 (RFC 5646) language code, such as "en-US" or "pt-BR".The SourceBuffer that created the track. Returns null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source.To get an AudioTrack for a given media element, use the element's audioTracks property, which returns an AudioTrackList object from which you can get the individual tracks contained in the media:You can then access the media's individual tracks using either array syntax or functions such as forEach().This first example gets the first audio track on the media:The next example scans through all of the media's audio tracks, enabling any that are in the user's preferred language (taken from a variable userLanguage) and disabling any others.The language is in standard (RFC 5646) format. For US English, this would be "en-US", for example.See AudioTrack.label for a simple example that shows how to get a array of track kinds and labels for a specified media element, filtered by kind.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack"
},
{
	"api_id": "138",
	"name": "AudioTrackList",
	"description": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.Retrieve an instance of this object with HTMLMediaElement.audioTracks. The individual tracks can be accessed using array syntax.This interface also inherits properties from its parent interface, EventTarget.The number of tracks in the list.This interface also inherits methods from its parent interface, EventTarget.Returns the AudioTrack found within the AudioTrackList whose id matches the specified string. If no match is found, null is returned.Fired when a new audio track has been added to the media element.Fired when a track has been enabled or disabled.Fired when a new audio track has been removed from the media element.In addition to being able to obtain direct access to the audio tracks present on a media element, AudioTrackList lets you set event handlers on the addtrack and removetrack events, so that you can detect when tracks are added to or removed from the media element's stream. See the addtrack and removetrack events for details and examples.To get a media element's AudioTrackList, use its audioTracks property.In this example, we have an app that displays information about the number of channels available. To keep it up to date, handlers for the addtrack and removetrack events are set up.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList"
},
{
	"api_id": "139",
	"name": "AudioWorklet",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The AudioWorklet interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.The worklet's code is run in the AudioWorkletGlobalScope global execution context, using a separate Web Audio thread which is shared by the worklet and other audio nodes.Access the audio context's instance of AudioWorklet through the BaseAudioContext.audioWorklet property.The AudioWorklet interface does not define any properties of its own, but does inherit properties of Worklet.This interface inherits methods from Worklet. The AudioWorklet interface does not define any methods of its own.AudioWorklet has no events to which it responds.See AudioWorkletNode for complete examples of custom audio node creation.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet"
},
{
	"api_id": "140",
	"name": "AudioWorkletGlobalScope",
	"description": "The AudioWorkletGlobalScope interface of the Web Audio API represents a global execution context for user-supplied code, which defines custom AudioWorkletProcessor-derived classes.Each BaseAudioContext has a single AudioWorklet available under the audioWorklet property, which runs its code in a single AudioWorkletGlobalScope.As the global execution context is shared across the current BaseAudioContext, it's possible to define any other variables and perform any actions allowed in worklets — apart from defining AudioWorkletProcessor-derived classes.Returns an integer that represents the ever-increasing current sample-frame of the audio block being processed. It is incremented by 128 (the size of a render quantum) after the processing of each audio block.Returns a double that represents the ever-increasing context time of the audio block being processed. It is equal to the currentTime property of the BaseAudioContext the worklet belongs to.Returns a float that represents the sample rate of the associated BaseAudioContext.Registers a class derived from the AudioWorkletProcessor interface. The class can then be used by creating an AudioWorkletNode, providing its registered name.In this example we output all global properties into the console in the constructor of a custom AudioWorkletProcessor.First we need to define the processor, and register it. Note that this should be done in a separate file.Next, in our main scripts file we'll load the processor, create an instance of AudioWorkletNode — passing the name of the processor to it — and connect the node to an audio graph. We should see the output of console.log calls in the console:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope"
},
{
	"api_id": "141",
	"name": "AudioWorkletNode",
	"description": "Note: Although the interface is available outside secure contexts, the BaseAudioContext.audioWorklet property is not, thus custom AudioWorkletProcessors cannot be defined outside them.The AudioWorkletNode interface of the Web Audio API represents a base class for a user-defined AudioNode, which can be connected to an audio routing graph along with other nodes. It has an associated AudioWorkletProcessor, which does the actual audio processing in a Web Audio rendering thread.Creates a new instance of an AudioWorkletNode object.Also Inherits properties from its parent, AudioNode.Returns a MessagePort used for bidirectional communication between the node and its associated AudioWorkletProcessor. The other end is available under the port property of the processor.Returns an AudioParamMap — a collection of AudioParam objects. They are instantiated during the creation of the underlying AudioWorkletProcessor. If the AudioWorkletProcessor has a static parameterDescriptors getter, the AudioParamDescriptor array returned from it is used to create AudioParam objects on the AudioWorkletNode. With this mechanism it is possible to make your own AudioParam objects accessible from your AudioWorkletNode. You can then use their values in the associated AudioWorkletProcessor.Fired when an error is thrown in associated AudioWorkletProcessor. Once fired, the processor and consequently the node will output silence throughout its lifetime.Also inherits methods from its parent, AudioNode.The AudioWorkletNode interface does not define any methods of its own.In this example we create a custom AudioWorkletNode that outputs random noise.First, we need to define a custom AudioWorkletProcessor, which will output random noise, and register it. Note that this should be done in a separate file.Next, in our main script file we'll load the processor, create an instance of AudioWorkletNode passing it the name of the processor, and connect the node to an audio graph.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode"
},
{
	"api_id": "142",
	"name": "AudioWorkletProcessor",
	"description": "The AudioWorkletProcessor interface of the Web Audio API represents an audio processing code behind a custom AudioWorkletNode. It lives in the AudioWorkletGlobalScope and runs on the Web Audio rendering thread. In turn, an AudioWorkletNode based on it runs on the main thread.Note: The AudioWorkletProcessor and classes that derive from it cannot be instantiated directly from a user-supplied code. Instead, they are created only internally by the creation of an associated AudioWorkletNodes. The constructor of the deriving class is getting called with an options object, so you can perform a custom initialization procedures — see constructor page for details.Creates a new instance of an AudioWorkletProcessor object.Returns a MessagePort used for bidirectional communication between the processor and the AudioWorkletNode which it belongs to. The other end is available under the port property of the node.The AudioWorkletProcessor interface does not define any methods of its own. However, you must provide a process() method, which is called in order to process the audio stream.The AudioWorkletProcessor interface doesn't respond to any events.To define custom audio processing code you have to derive a class from the AudioWorkletProcessor interface. Although not defined on the interface, the deriving class must have the process method. This method gets called for each block of 128 sample-frames and takes input and output arrays and calculated values of custom AudioParams (if they are defined) as parameters. You can use inputs and audio parameter values to fill the outputs array, which by default holds silence.Optionally, if you want custom AudioParams on your node, you can supply a parameterDescriptors property as a static getter on the processor. The array of AudioParamDescriptor-based objects returned is used internally to create the AudioParams during the instantiation of the AudioWorkletNode.The resulting AudioParams reside in the parameters property of the node and can be automated using standard methods such as linearRampToValueAtTime. Their calculated values will be passed into the process() method of the processor for you to shape the node output accordingly.An example algorithm of creating a custom audio processing mechanism is:In the example below we create a custom AudioWorkletNode that outputs white noise.First, we need to define a custom AudioWorkletProcessor, which will output white noise, and register it. Note that this should be done in a separate file.Next, in our main script file we'll load the processor, create an instance of AudioWorkletNode, passing it the name of the processor, then connect the node to an audio graph.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor"
},
{
	"api_id": "143",
	"name": "AuthenticatorAssertionResponse",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The AuthenticatorAssertionResponse interface of the Web Authentication API is returned by CredentialsContainer.get() when a PublicKeyCredential is passed, and provides proof to a service that it has a key pair and that the authentication request is valid and approved.This interface inherits from AuthenticatorResponse.Note: This interface is restricted to top-level contexts. Use from within an <iframe> element will not have any effect.The client data for the authentication, such as origin and challenge. The clientDataJSON property is inherited from the AuthenticatorResponse.An ArrayBuffer containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence and user verification flags, and any extensions processed by the authenticator.An assertion signature over AuthenticatorAssertionResponse.authenticatorData and AuthenticatorResponse.clientDataJSON. The assertion signature is created with the private key of keypair that was created during the navigator.credentials.create() call and verified using the public key of that same keypair.An ArrayBuffer containing an opaque user identifier.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse"
},
{
	"api_id": "144",
	"name": "AuthenticatorAttestationResponse",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The AuthenticatorAttestationResponse interface of the Web Authentication API is returned by CredentialsContainer.create() when a PublicKeyCredential is passed, and provides a cryptographic root of trust for the new key pair that has been generated. This response should be sent to the relying party's server to complete the creation of the credential.This interface inherits from AuthenticatorResponse.Note: This interface is restricted to top-level contexts. Use from within an <iframe> element will not have any effect.Client data for the authentication, such as origin and challenge. The clientDataJSON property is inherited from the AuthenticatorResponse.An ArrayBuffer containing authenticator data and an attestation statement for a newly-created key pair.Returns an Array of strings describing which transport methods (e.g. usb, nfc) are believed to be supported with the authenticator. The array may be empty if the information is not available.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse"
},
{
	"api_id": "145",
	"name": "AuthenticatorResponse",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The AuthenticatorResponse interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair. The child interfaces include information from the browser such as the challenge origin and either may be returned from PublicKeyCredential.response.Below is a list of interfaces based on the AuthenticatorResponse interface.A JSON string in an ArrayBuffer, representing the client data that was passed to CredentialsContainer.create() or CredentialsContainer.get().None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorResponse"
},
{
	"api_id": "146",
	"name": "BackgroundFetchEvent",
	"description": "The BackgroundFetchEvent interface of the Background Fetch API is the event type for background fetch events dispatched on the service worker global scope.It is the event type passed to onbackgroundfetchabort and onbackgroundfetchclick.Creates a new BackgroundFetchEvent object. This constructor is not typically used, as the browser creates these objects itself and provides them to background fetch event callbacks.Inherits properties from its ancestor, Event.Returns the BackgroundFetchRegistration that the event was initialized to.None.None.In this example, if the user clicks on the user interface displaying the download progress, a new window will open. The current BackgroundFetchRegistration is returned by calling event.registration.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchEvent"
},
{
	"api_id": "147",
	"name": "BackgroundFetchManager",
	"description": "The BackgroundFetchManager interface of the Background Fetch API is a map where the keys are background fetch IDs and the values are BackgroundFetchRegistration objects.None.Returns a Promise that resolves with a BackgroundFetchRegistration object for a supplied array of URLs and Request objects.Returns a Promise that resolves with the BackgroundFetchRegistration associated with the provided id or undefined if the id is not found.Returns the IDs of all registered background fetches.The example below shows how to get an instance of BackgroundFetchManager from a ServiceWorkerRegistration object and calls fetch() to download a video in the background.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchManager"
},
{
	"api_id": "148",
	"name": "BackgroundFetchRecord",
	"description": "The BackgroundFetchRecord interface of the Background Fetch API represents an individual request and response.A BackgroundFetchRecord is created by the BackgroundFetchManager.fetch() method, therefore there is no constructor for this interface.There will be one BackgroundFetchRecord for each resource requested by fetch().Returns a Request.Returns a promise that resolves with a Response.In this example an individual BackgroundFetchRecord is returned using BackgroundFetchManager.fetch(). The BackgroundFetchRecord.request and BackgroundFetchRecord.responseReady are returned and logged to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchRecord"
},
{
	"api_id": "149",
	"name": "BackgroundFetchRegistration",
	"description": "The BackgroundFetchRegistration interface of the Background Fetch API represents an individual background fetch.A BackgroundFetchRegistration instance is returned by the BackgroundFetchManager.fetch() or BackgroundFetchManager.get() methods, and therefore there has no constructor.The following properties are available synchronously, as convenience properties copied from those in the BackgroundFetchRegistration instance.A string containing the background fetch's ID.A number containing the total number of bytes to be uploaded.A number containing the size in bytes successfully sent, initially 0.A number containing the total size in bytes of this download. This is the value set when the background fetch was registered, or 0.A number containing the size in bytes that has been downloaded, initially 0.Returns an empty string initially, on completion either the string "success" or "failure".One of the following strings:The background fetch has not completed, or was successful.The operation was cancelled by the user, or abort() was called.A response had a not-ok status (a status outside the range 200-299).A fetch failed for other reasons, for example CORS, or a network failure.Storage quota was reached during the operation.The provided downloadTotal was exceeded. This value was set when the background fetch was registered.A boolean indicating whether the recordsAvailable flag is set.Aborts the background fetch. Returns a Promise that resolves with true if the fetch was successfully aborted.Returns a single BackgroundFetchRecord object which is the first match for the arguments.Returns a Promise that resolves with an array of BackgroundFetchRecord objects containing requests and responses.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when there is a change to any of the following properties:\n  uploaded,\n  downloaded,\n  result or\n  failureReason.\n  The following code creates a BackGroundFetchRegistration as bgFetch, with an id of "my-fetch".Logging the id to the console returns "my-fetch".The match() method can be used to find a particular BackgroundFetchRecord from those that are part of the registration.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchRegistration"
},
{
	"api_id": "150",
	"name": "BackgroundFetchUpdateUIEvent",
	"description": "The BackgroundFetchUpdateUIEvent interface of the Background Fetch API is an event type for the backgroundfetchsuccess and backgroundfetchfail events, and provides a method for updating the title and icon of the app to inform a user of the success or failure of a background fetch.Creates a new BackgroundFetchUIEvent object. This constructor is not typically used, as the browser creates these objects itself for the backgroundfetchsuccess and backgroundfetchfail events.This interface doesn't implement any specific properties, but inherits properties from Event, and BackgroundFetchEvent.Updates the title and icon in the user interface to show the status of a background fetch. Resolves with a Promise.In this example, the backgroundfetchsuccess event is listened for, indicating that a fetch has completed successfully. The updateUI() method is then called, with a message to let the user know the episode they downloaded is ready.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BackgroundFetchUpdateUIEvent"
},
{
	"api_id": "151",
	"name": "BarcodeDetector",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The BarcodeDetector interface of the Barcode Detection API allows detection of linear and two dimensional barcodes in images.Creates and returns a BarcodeDetector object, with optional barcodeDetectorOptionsReturns a Promise which fulfills with an array of detectedBarcode objects with the following properties:Returns a Promise which fulfills with an Array of supported barcode format types.This example creates a new barcode detector object, with specified supported formats and tests for browser compatibility.The following example calls the getSupportFormat() static method and logs the results to the console.This example uses the detect() method to detect the barcodes within the given image. These are iterated over and the barcode data is logged to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector"
},
{
	"api_id": "152",
	"name": "BarProp",
	"description": "The BarProp interface of the Document Object Model represents the web browser user interface elements that are exposed to scripts in web pages. Each of the following interface elements are represented by a BarProp object.The browser location bar.The browser menu bar.The browser personal bar.The browser scrollbars.The browser status bar.The browser toolbar.The BarProp interface is not accessed directly, but via one of these elements.A Boolean, which is true if the bar represented by the used interface element is visible.The following example prints a BarProp object to the console that represents the location bar.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BarProp"
},
{
	"api_id": "153",
	"name": "BaseAudioContext",
	"description": "The BaseAudioContext interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively. You wouldn't use BaseAudioContext directly — you'd use its features via one of these two inheriting interfaces.A BaseAudioContext can be a target of events, therefore it implements the EventTarget interface.Returns the AudioWorklet object, which can be used to create and manage AudioNodes in which JavaScript code implementing the AudioWorkletProcessor interface are run in the background to process audio data.Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at 0.Returns an AudioDestinationNode representing the final destination of all audio in the context. It can be thought of as the audio-rendering device.Returns the AudioListener object, used for 3D spatialization.Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an AudioContext cannot be changed.Returns the current state of the AudioContext.Fired when the AudioContext's state changes due to the calling of one of the state change methods (AudioContext.suspend, AudioContext.resume, or AudioContext.close).Also implements methods from the interface EventTarget.Creates an AnalyserNode, which can be used to expose audio time and frequency data and for example to create data visualizations.Creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types: high-pass, low-pass, band-pass, etcCreates a new, empty AudioBuffer object, which can then be populated by data and played via an AudioBufferSourceNode.Creates an AudioBufferSourceNode, which can be used to play and manipulate audio data contained within an AudioBuffer object. AudioBuffers are created using AudioContext.createBuffer() or returned by AudioContext.decodeAudioData() when it successfully decodes an audio track.Creates a ConstantSourceNode object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.Creates a ChannelMergerNode, which is used to combine channels from multiple audio streams into a single audio stream.Creates a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately.Creates a ConvolverNode, which can be used to apply convolution effects to your audio graph, for example a reverberation effect.Creates a DelayNode, which is used to delay the incoming audio signal by a certain amount. This node is also useful to create feedback loops in a Web Audio API graph.Creates a DynamicsCompressorNode, which can be used to apply acoustic compression to an audio signal.Creates a GainNode, which can be used to control the overall volume of the audio graph.Creates an IIRFilterNode, which represents a second order filter configurable as several different common filter types.Creates an OscillatorNode, a source representing a periodic waveform. It basically generates a tone.Creates a PannerNode, which is used to spatialize an incoming audio stream in 3D space.Creates a PeriodicWave, used to define a periodic waveform that can be used to determine the output of an OscillatorNode.Creates a ScriptProcessorNode, which can be used for direct audio processing via JavaScript.Creates a StereoPannerNode, which can be used to apply stereo panning to an audio source.Creates a WaveShaperNode, which is used to implement non-linear distortion effects.Asynchronously decodes audio file data contained in an ArrayBuffer. In this case, the ArrayBuffer is usually loaded from an XMLHttpRequest's response attribute after setting the responseType to arraybuffer. This method only works on complete files, not fragments of audio files.Basic audio context declaration:Cross browser variant:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext"
},
{
	"api_id": "154",
	"name": "BatteryManager",
	"description": "The BatteryManager interface of the Battery Status API provides information about the system's battery charge level. The navigator.getBattery() method returns a promise that resolves with a BatteryManager interface.A Boolean value indicating whether the battery is currently being charged.A number representing the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged.A number representing the remaining time in seconds until the battery is completely discharged and the system suspends.A number representing the system's battery charge level scaled to a value between 0.0 and 1.0.Inherits methods from its parent interface: EventTarget.Fired when the battery charging state (the charging property) is updated.Fired when the battery charging time (the chargingTime property) is updated.Fired when the battery discharging time (the dischargingTime property) is updated.Fired when the battery level (the level property) is updated.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager"
},
{
	"api_id": "155",
	"name": "BeforeInstallPromptEvent",
	"description": "The BeforeInstallPromptEvent is the interface of the beforeinstallprompt event fired at the Window object before a user is prompted to "install" a website to a home screen on mobile.This interface inherits from the Event interface.Creates a new BeforeInstallPromptEvent object.Inherits properties from its parent, Event.Returns an array of string items containing the platforms on which the event was dispatched. This is provided for user agents that want to present a choice of versions to the user such as, for example, "web" or "play" which would allow the user to choose between a web version or an Android version.Returns a Promise that resolves to a string containing either "accepted" or "dismissed".Allows a developer to show the install prompt at a time of their own choosing. This method returns a Promise.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent"
},
{
	"api_id": "156",
	"name": "BeforeUnloadEvent",
	"description": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded.When a non-empty string is assigned to the returnValue Event property, a dialog box appears, asking the users for confirmation to leave the page (see example below). When no value is provided, the event is processed silently. Some implementations only show the dialog box if the frame or any embedded frame receives a user gesture or user interaction. See Browser compatibility for more information.WebKit-derived browsers don't follow the spec for the dialog box. An almost-cross-browser working example would be close to the below example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent"
},
{
	"api_id": "157",
	"name": "BiquadFilterNode",
	"description": "The BiquadFilterNode interface represents a simple low-order filter, and is created using the BaseAudioContext/createBiquadFilter method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. A BiquadFilterNode always has exactly one input and one output.Creates a new instance of a BiquadFilterNode object.Inherits properties from its parent, AudioNode.Note: Though the AudioParam objects returned are read-only, the values they represent are not.An a-rate AudioParam, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).An a-rate AudioParam representing detuning of the frequency in cents.An a-rate AudioParam, a double representing a Q factor, or quality factor.An a-rate AudioParam, a double representing the gain used in the current filtering algorithm.A string value defining the kind of filtering algorithm the node is implementing.Inherits methods from its parent, AudioNode.From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies.See AudioContext.createBiquadFilter for example code that shows how to use an AudioContext to create a Biquad filter node.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode"
},
{
	"api_id": "158",
	"name": "Blob",
	"description": "The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.Blobs can represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.To construct a Blob from other non-blob objects and data, use the Blob() constructor. To create a blob that contains a subset of another blob's data, use the slice() method. To obtain a Blob object for a file on the user's file system, see the File documentation.The APIs accepting Blob objects are also listed in the File documentation.Returns a newly created Blob object which contains a concatenation of all of the data in the array passed into the constructor.The size, in bytes, of the data contained in the Blob object.A string indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty.Returns a promise that resolves with an ArrayBuffer containing the entire contents of the Blob as binary data.Returns a new Blob object containing the data in the specified range of bytes of the blob on which it's called.Returns a ReadableStream that can be used to read the contents of the Blob.Returns a promise that resolves with a string containing the entire contents of the Blob interpreted as UTF-8 text.The Blob() constructor can create blobs from other objects. For example, to construct a blob from a JSON string:The following code creates a JavaScript typed array and creates a new Blob containing the typed array's data. It then calls URL.createObjectURL() to convert the blob into a URL.The main piece of this code for example purposes is the typedArrayToURL() function, which creates a Blob from the given typed array and returns an object URL for it. Having converted the data into an object URL, it can be used in a number of ways, including as the value of the <img> element's src attribute (assuming the data contains an image, of course).Click the link in the example to see the browser decode the object URL.One way to read content from a Blob is to use a FileReader. The following code reads the content of a Blob as a typed array:Another way to read content from a Blob is to use a Response. The following code reads the content of a Blob as text:Or by using Blob.prototype.text():By using other methods of FileReader, it is possible to read the contents of a Blob as a string or a data URL.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Blob"
},
{
	"api_id": "159",
	"name": "BlobBuilder",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n  Note: The BlobBuilder interface has been\n  deprecated in favor of the newly introduced Blob constructor.\n  \n  The BlobBuilder interface provides an easy way to\n  construct Blob objects. Just create a BlobBuilder and append\n  chunks of data to it by calling the append() method. When you're done\n  building your blob, call getBlob() to retrieve a Blob\n  containing the data you sent into the blob builder.\n\n  Appends the contents of the specified JavaScript object to the Blob\n  being built. If the value you specify isn't a Blob, ArrayBuffer,\n  or String,\n  the value is coerced to a string before being appended to the blob.\nThe data to append to the Blob being constructed.\n  Specifies how strings containing \n are to be written out. This can be\n  "transparent" (endings unchanged) or "native" (endings\n  changed to match host OS filesystem convention). The default value is\n  "transparent".\n  \n  Returns the Blob object that has been constructed using the data passed\n  through calls to append().\n\n  The MIME type of the data to be returned in the Blob. This will be\n  the value of the Blob object's type property.\n  \n  A Blob object containing all of the data passed to any calls to\n  append() made since the BlobBuilder was created. This also\n  resets the BlobBuilder so that the next call to append() is\n  starting a new, empty blob.\nReturns a File object.The file name.\n  The MIME type of the data to be returned in the File. This will be\n  the value of the File object's type property.\n  A File object.This feature is not part of any specification anymore. It is no more on track to become a standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BlobBuilder"
},
{
	"api_id": "160",
	"name": "BlobEvent",
	"description": "The BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily, associated with media content.Creates a BlobEvent event with the given parameters.Inherits properties from its parent Event.A Blob representing the data associated with the event. The event was fired on the EventTarget because of something happening on that specific Blob.A DOMHighResTimeStamp indicating the difference between the timestamp of the first chunk in data and the timestamp of the first chunk in the first BlobEvent produced by this recorder. Note that the timecode in the first produced BlobEvent does not need to be zero.No specific method; inherits methods from its parent Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent"
},
{
	"api_id": "161",
	"name": "Bluetooth",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The Bluetooth interface of the Web Bluetooth API returns a\n  Promise to a BluetoothDevice object with the specified\n  options.\nInherits properties from its parent EventTarget.\n  Returns a reference to the device, if any, from which the user opened the current\n  page. For example, an Eddystone beacon might advertise a URL, which the user agent\n  allows the user to open. A BluetoothDevice representing the beacon would be available\n  through navigator.bluetooth.referringDevice.\n  \n  Returns a Promise that resolved to a boolean value indicating\n  whether the user-agent has the ability to support Bluetooth. Some user-agents let the\n  user configure an option that affects what is returned by this value. If this option\n  is set, that is the value returned by this method.\n  \n  Returns a Promise that resolved to an array of\n  BluetoothDevices which the origin already obtained permission for via a\n  call to Bluetooth.requestDevice().\n  \n  Returns a Promise to a BluetoothDevice object with the\n  specified options.\n  An event that fires when Bluetooth capabilities have changed in availability.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth"
},
{
	"api_id": "162",
	"name": "BluetoothCharacteristicProperties",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The BluetoothCharacteristicProperties interface of the Web Bluetooth API provides the operations that are valid on the given BluetoothRemoteGATTCharacteristic.This interface is returned by calling BluetoothRemoteGATTCharacteristic.properties.Returns a boolean that is true if signed writing to the characteristic value is permitted.Returns a boolean that is true if the broadcast of the characteristic value is permitted using the Server Characteristic Configuration Descriptor.Returns a boolean that is true if indications of the characteristic value with acknowledgement is permitted.Returns a boolean that is true if notifications of the characteristic value without acknowledgement is permitted.Returns a boolean that is true if the reading of the characteristic value is permitted.Returns a boolean that is true if reliable writes to the characteristic is permitted.Returns a boolean that is true if reliable writes to the characteristic descriptor is permitted.Returns a boolean that is true if the writing to the characteristic with response is permitted.Returns a boolean that is true if the writing to the characteristic without response is permitted.The following example shows how tell if a GATT characteristic supports value change notifications.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties"
},
{
	"api_id": "163",
	"name": "BluetoothDevice",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The BluetoothDevice interface of the Web Bluetooth API represents a Bluetooth device inside a particular script execution\n  environment.\nA string that uniquely identifies a device.A string that provides a human-readable name for the device.A reference to the device's BluetoothRemoteGATTServer.\n  A Promise that resolves to undefined or is rejected with\n  an error if advertisements can't be shown for any reason.\n  Stops watching for advertisements.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice"
},
{
	"api_id": "164",
	"name": "BluetoothRemoteGATTCharacteristic",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The BluetoothRemoteGattCharacteristic interface of the Web Bluetooth API represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral's service.Returns the BluetoothRemoteGATTService this characteristic belongs to.Returns a string containing the UUID of the characteristic, for example '00002a37-0000-1000-8000-00805f9b34fb' for the Heart Rate Measurement characteristic.Returns the properties of this characteristic.The currently cached characteristic value. This value gets updated when the value of the characteristic is read or updated via a notification or indication.Event handler for the characteristicvaluechanged event.Returns a Promise that resolves to the first BluetoothRemoteGATTDescriptor for a given descriptor UUID.Returns a Promise that resolves to an Array of all BluetoothRemoteGATTDescriptor objects for a given descriptor UUID.Returns a Promise that resolves to an ArrayBuffer holding a duplicate of the value property if it is available and supported. Otherwise it throws an error.Sets the value property to the bytes contained in a given ArrayBuffer, calls WriteCharacteristicValue(this=this, value=value, response="optional"), and returns the resulting Promise.Sets the value property to the bytes contained in a given ArrayBuffer, calls WriteCharacteristicValue(this=this, value=value, response="required"), and returns the resulting Promise.Sets the value property to the bytes contained in a given ArrayBuffer, calls WriteCharacteristicValue(this=this, value=value, response="never"), and returns the resulting Promise.Returns a Promise when navigator.bluetooth is added to the active notification context.Returns a Promise when navigator.bluetooth is removed from the active notification context.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic"
},
{
	"api_id": "165",
	"name": "BluetoothRemoteGATTDescriptor",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The BluetoothRemoteGATTDescriptor interface of the Web Bluetooth API provides a GATT Descriptor,\n  which provides further information about a characteristic's value.\n\n  Returns the BluetoothRemoteGATTCharacteristic this descriptor belongs\n  to.\n  \n  Returns the UUID of the characteristic descriptor, for\n  example '00002902-0000-1000-8000-00805f9b34fb' for theClient\n  Characteristic Configuration descriptor.\n  \n  Returns the currently cached descriptor value. This value gets updated when the\n  value of the descriptor is read.\n  \n  Returns a Promise that resolves to\n  an ArrayBuffer holding a duplicate of the value property\n  if it is available and supported. Otherwise it throws an error.\n  \n  Sets the value property to the bytes contained in an ArrayBuffer and\n  returns a Promise.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTDescriptor"
},
{
	"api_id": "166",
	"name": "BluetoothRemoteGATTServer",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The BluetoothRemoteGATTServer interface of the Web Bluetooth API represents a GATT\n  Server on a remote device.\n\n  A boolean value that returns true while this script execution environment is\n  connected to this.device. It can be false while the user agent is\n  physically connected.\n  A reference to the BluetoothDevice running the server.Causes the script execution environment to connect to this.device.Causes the script execution environment to disconnect from this.device.\n  Returns a promise to the primary BluetoothRemoteGATTService offered by the\n  Bluetooth device for a specified BluetoothServiceUUID.\n  \n  Returns a promise to a list of primary BluetoothRemoteGATTService objects\n  offered by the Bluetooth device for a specified BluetoothServiceUUID.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer"
},
{
	"api_id": "167",
	"name": "BluetoothRemoteGATTService",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The BluetoothRemoteGATTService interface of the Web Bluetooth API represents a\n  service provided by a GATT server, including a device, a list of referenced services,\n  and a list of the characteristics of this service.\n\n  Returns information about a Bluetooth device through an instance of\n  BluetoothDevice.\n  \n  Returns a boolean value indicating whether this is a primary or secondary\n  service.\n  Returns a string representing the UUID of this service.\n  Returns a Promise to an instance of\n  BluetoothRemoteGATTCharacteristic for a given universally unique identifier\n  (UUID).\n  \n  Returns a Promise to an Array of\n  BluetoothRemoteGATTCharacteristic instances for an optional universally\n  unique identifier (UUID).\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTService"
},
{
	"api_id": "168",
	"name": "BluetoothUUID",
	"description": "\n  The BluetoothUUID interface of the Web Bluetooth API provides a way to look up Universally Unique Identifier (UUID) values by name in the\n  registry maintained by the Bluetooth SIG.\n\n  A UUID string is a 128-bit UUID, for example 00001818-0000-1000-8000-00805f9b34fb.\n  The Bluetooth registry contains lists of descriptors, services, and characteristics identified by these UUIDs in addition to a 16- or 32- bit alias, and a name.\nThe BluetoothUUID interface provides methods to retrieve these 128-bit UUIDs.None.None.Returns the 128-bit UUID when passed the 16- or 32-bit UUID alias.Returns the 128-bit UUID representing a registered characteristic when passed a name or the 16- or 32-bit UUID alias.Returns a UUID representing a registered descriptor when passed a name or the 16- or 32-bit UUID alias.Returns a UUID representing a registered service when passed a name or the 16- or 32-bit UUID alias.In the following example the UUID representing the service named device_information is returned and printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BluetoothUUID"
},
{
	"api_id": "169",
	"name": "BroadcastChannel",
	"description": "The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.Note: This feature is available in Web WorkersCreates an object linking to the named channel.This interface also inherits properties from its parent, EventTarget.Returns a string, the name of the channel.This interface also inherits methods from its parent, EventTarget.Sends the message, of any type of object, to each BroadcastChannel object listening to the same channel.Closes the channel object, indicating it won't get any new messages, and allowing it to be, eventually, garbage collected.\n  Fired when a message arrives on the channel.\n  Also available via the onmessage property.\n  \n  Fired when a message arrives that can't be deserialized.\n  Also available via the onmessageerror property.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel"
},
{
	"api_id": "170",
	"name": "btoa()",
	"description": "\n  The btoa() method creates a\n  Base64-encoded ASCII string from a binary string (i.e., a\n  string in which each character in the string is treated as a byte\n  of binary data).\n\n  You can use this method to encode data which may otherwise cause communication\n  problems, transmit it, then use the atob() method to decode the data again. For example, you can encode control\n  characters such as ASCII values 0 through 31.\nThe binary string to encode.\n  An ASCII string containing the Base64 representation of\n  stringToEncode.\n\n  The string contained a character that did not fit in a single byte. See "Unicode\n  strings" below for more detail.\n  \n  The btoa() function takes a JavaScript string as a parameter. In\n  JavaScript strings are represented using the UTF-16 character encoding: in this\n  encoding, strings are represented as a sequence of 16-bit (2 byte) units. Every ASCII\n  character fits into the first byte of one of these units, but many other characters\n  don't.\n\n  Base64, by design, expects binary data as its input. In terms of JavaScript strings,\n  this means strings in which each character occupies only one byte. So if you pass a\n  string into btoa() containing characters that occupy more than one byte,\n  you will get an error, because this is not considered binary data:\n\n  If you need to encode Unicode text as ASCII using btoa(), one option is to\n  convert the string such that each 16-bit unit occupies only one byte. For example:\nIf you do this, of course you'll have to reverse the conversion on the decoded string:See also the example utf8_to_b64 and b64_to_utf8 functions in the Solution #1 – escaping the string before encoding it section of the Base64 glossary entry.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/btoa"
},
{
	"api_id": "171",
	"name": "ByteLengthQueuingStrategy",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ByteLengthQueuingStrategy interface of the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.Creates a new ByteLengthQueuingStrategy object instance.None.Returns the given chunk's byteLength property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy"
},
{
	"api_id": "172",
	"name": "Cache",
	"description": "The Cache interface provides a persistent storage mechanism for Request / Response object pairs that are cached in long lived memory. How long a Cache object lives is browser dependent, but a single origin's scripts can typically rely on the presence of a previously populated Cache object. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.An origin can have multiple, named Cache objects. You are responsible for implementing how your script (e.g. in a ServiceWorker) handles Cache updates. Items in a Cache do not get updated unless explicitly requested; they don't expire unless deleted. Use CacheStorage.open() to open a specific named Cache object and then call any of the Cache methods to maintain the Cache.You are also responsible for periodically purging cache entries. Each browser has a hard limit on the amount of cache storage that a given origin can use. Cache quota usage estimates are available via the StorageManager.estimate() method. The browser does its best to manage disk space, but it may delete the Cache storage for an origin. The browser will generally delete all of the data for an origin or none of the data for an origin. Make sure to version caches by name and use the caches only from the version of the script that they can safely operate on. See Deleting old caches for more information.Note: The key matching algorithm depends on the VARY header in the value. So matching a new key requires looking at both key and value for entries in the Cache object.Note: The caching API doesn't honor HTTP caching headers.Note: This feature is available in Web WorkersSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Returns a Promise that resolves to the response associated with the first matching request in the Cache object.Returns a Promise that resolves to an array of all matching responses in the Cache object.Takes a URL, retrieves it and adds the resulting response object to the given cache. This is functionally equivalent to calling fetch(), then using put() to add the results to the cache.Takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache.Takes both a request and its response and adds it to the given cache.Finds the Cache entry whose key is the request, returning a Promise that resolves to true if a matching Cache entry is found and deleted. If no Cache entry is found, the promise resolves to false.Returns a Promise that resolves to an array of Cache keys.This code snippet is from the service worker selective caching sample. (see selective caching live) The code uses CacheStorage.open() to open any Cache objects with a Content-Type header that starts with font/.The code then uses Cache.match() to see if there's already a matching font in the cache, and if so, returns it. If there isn't a matching font, the code fetches the font from the network and uses Cache.put() to cache the fetched resource.The code handles exceptions thrown from the fetch() operation. Note that an HTTP error response (e.g., 404) will not trigger an exception. It will return a normal response object that has the appropriate error code.The code snippet also shows a best practice for versioning caches used by the service worker. Though there's only one cache in this example, the same approach can be used for multiple caches. It maps a shorthand identifier for a cache to a specific, versioned cache name. The code also deletes all caches that aren't named in CURRENT_CACHES.In the code example, caches is a property of the ServiceWorkerGlobalScope. It holds the CacheStorage object, by which it can access the CacheStorage interface.Note: In Chrome, visit chrome://inspect/#service-workers and click on the "inspect" link below the registered service worker to view logging statements for the various actions the service-worker.js script is performing.The Fetch API requires Set-Cookie headers to be stripped before returning a Response object from fetch(). So a Response stored in a Cache won't contain Set-Cookie headers, and therefore won't cause any cookies to be stored.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Cache"
},
{
	"api_id": "173",
	"name": "caches",
	"description": "\n  The global caches read-only property returns the CacheStorage object associated with the current context.\n  This object enables functionality such as storing assets for offline use, and generating custom responses to requests.\nSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.A CacheStorage object.The following example shows how you'd use a cache in a service worker context to store assets offline.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/caches"
},
{
	"api_id": "174",
	"name": "CacheStorage",
	"description": "The CacheStorage interface represents the storage for Cache objects.The interface:Note: Chrome and Safari only expose `CacheStorage` to the windowed context over HTTPS. caches will be undefined unless an SSL certificate is configured.Use CacheStorage.open() to obtain a Cache instance.Use CacheStorage.match() to check if a given Request is a key in any of the Cache objects that the CacheStorage object tracks.You can access CacheStorage through the global caches property.Note: CacheStorage always rejects with a SecurityError on untrusted origins (i.e. those that aren't using HTTPS, although this definition will likely become more complex in the future.) When testing on Firefox, you can get around this by checking the Enable Service Workers over HTTP (when toolbox is open) option in the Firefox Devtools options/gear menu. Furthermore, because CacheStorage requires file-system access, it may be unavailable in private mode in Firefox.Note: CacheStorage.match() is a convenience method. Equivalent functionality to match a cache entry can be implemented by returning an array of cache names from CacheStorage.keys(), opening each cache with CacheStorage.open(), and matching the one you want with Cache.match().Note: This feature is available in Web WorkersSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Checks if a given Request is a key in any of the Cache objects that the CacheStorage object tracks, and returns a Promise that resolves to that match.Returns a Promise that resolves to true if a Cache object matching the cacheName exists.Returns a Promise that resolves to the Cache object matching the cacheName (a new cache is created if it doesn't already exist.)Finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true. If no Cache object is found, it resolves to false.Returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage. Use this method to iterate over a list of all the Cache objects.\n  This code snippet is from the MDN sw-test example (see sw-test running live.)\n  This service worker script waits for an InstallEvent to fire, then runs waitUntil to handle the install process for the app. This consists of calling CacheStorage.open to create a new cache, then using Cache.addAll to add a series of assets to it.\nIn the second code block, we wait for a FetchEvent to fire. We construct a custom response like so:Finally, return whatever the custom response ended up being equal to, using FetchEvent.respondWith.This snippet shows how the API can be used outside of a service worker context, and uses the await operator for much more readable code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage"
},
{
	"api_id": "175",
	"name": "CanvasCaptureMediaStreamTrack",
	"description": "The CanvasCaptureMediaStreamTrack interface represents the video track contained in a MediaStream being generated from a <canvas> following a call to HTMLCanvasElement.captureStream().Part of the Media Capture and Streams API.This interface inherits the properties of its parent, MediaStreamTrack.Returns the HTMLCanvasElement object whose surface is captured in real-time.This interface inherits the methods of its parent, MediaStreamTrack.Manually forces a frame to be captured and sent to the stream. This lets applications that wish to specify the frame capture times directly do so, if they specified a frameRate of 0 when calling captureStream().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasCaptureMediaStreamTrack"
},
{
	"api_id": "176",
	"name": "CanvasGradient",
	"description": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient(), CanvasRenderingContext2D.createConicGradient() or CanvasRenderingContext2D.createRadialGradient().It can be used as a fillStyle or strokeStyle.As an opaque object, there is no exposed property.Adds a new stop, defined by an offset and a color, to the gradient.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient"
},
{
	"api_id": "177",
	"name": "CanvasPattern",
	"description": "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.It can be used as a fillStyle or strokeStyle.As an opaque object, this has no exposed property.There are no inherited method.Applies an SVGMatrix or DOMMatrix representing a linear transform to the pattern.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern"
},
{
	"api_id": "178",
	"name": "CanvasRenderingContext2D",
	"description": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.See the interface's properties and methods in the sidebar and below. The Canvas tutorial has more explanation, examples, and resources, as well.To get a CanvasRenderingContext2D instance, you must first have an HTML <canvas> element to work with:To get the canvas' 2D rendering context, call getContext() on the <canvas> element, supplying '2d' as the argument:With the context in hand, you can draw anything you like. This code draws a house:The resulting drawing looks like this:There are three methods that immediately draw rectangles to the canvas.Sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content.Draws a filled rectangle at (x, y) position whose size is determined by width and height.Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style.The following methods draw text. See also the TextMetrics object for text properties.Draws (fills) a given text at the given (x, y) position.Draws (strokes) a given text at the given (x, y) position.Returns a TextMetrics object.The following methods and properties control how lines are drawn.Width of lines. Default 1.0.Type of endings on the end of lines. Possible values: butt (default), round, square.Defines the type of corners where two lines meet. Possible values: round, bevel, miter (default).Miter limit ratio. Default 10.Returns the current line dash pattern array containing an even number of non-negative numbers.Sets the current line dash pattern.Specifies where to start a dash array on a line.The following properties control how text is laid out.Font setting. Default value 10px sans-serif.Text alignment setting. Possible values: start (default), end, left, right, center.Baseline alignment setting. Possible values: top, hanging, middle, alphabetic (default), ideographic, bottom.Directionality. Possible values: ltr, rtl, inherit (default).Fill styling is used for colors and styles inside shapes and stroke styling is used for the lines around shapes.Color or style to use inside shapes. Default #000 (black).Color or style to use for the lines around shapes. Default #000 (black).Creates a conic gradient around a point given by coordinates represented by the parameters.Creates a linear gradient along the line given by the coordinates represented by the parameters.Creates a radial gradient given by the coordinates of the two circles represented by the parameters.Creates a pattern using the specified image. It repeats the source in the directions specified by the repetition argument. This method returns a CanvasPattern.Specifies the blurring effect. Default: 0.Color of the shadow. Default: fully-transparent black.Horizontal distance the shadow will be offset. Default: 0.Vertical distance the shadow will be offset. Default: 0.The following methods can be used to manipulate paths of objects.Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.Moves the starting point of a new sub-path to the (x, y) coordinates.Connects the last point in the current sub-path to the specified (x, y) coordinates with a straight line.Adds a cubic Bézier curve to the current path.Adds a quadratic Bézier curve to the current path.Adds a circular arc to the current path.Adds an arc to the current path with the given control points and radius, connected to the previous point by a straight line.Adds an elliptical arc to the current path.Creates a path for a rectangle at position (x, y) with a size that is determined by width and height.Fills the current sub-paths with the current fill style.Strokes the current sub-paths with the current stroke style.If a given element is focused, this method draws a focus ring around the current path.Scrolls the current path or a given path into the view.Creates a clipping path from the current sub-paths. Everything drawn after clip() is called appears inside the clipping path only. For an example, see Clipping paths in the Canvas tutorial.Reports whether or not the specified point is contained in the current path.Reports whether or not the specified point is inside the area contained by the stroking of a path.Objects in the CanvasRenderingContext2D rendering context have a current transformation matrix and methods to manipulate it. The transformation matrix is applied when creating the current default path, painting text, shapes and Path2D objects. The methods listed below remain for historical and compatibility reasons as DOMMatrix objects are used in most parts of the API nowadays and will be used in the future instead.Retrieves the current transformation matrix being applied to the context.Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.Adds a scaling transformation to the canvas units by x horizontally and by y vertically.Adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.Multiplies the current transformation matrix with the matrix described by its arguments.Resets the current transform to the identity matrix, and then invokes the transform() method with the same arguments.Resets the current transform by the identity matrix.Alpha value that is applied to shapes and images before they are composited onto the canvas. Default 1.0 (opaque).With globalAlpha applied this sets how shapes and images are drawn onto the existing bitmap.Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.See also the ImageData object.Creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height.Paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted.Image smoothing mode; if disabled, images will not be smoothed if scaled.Allows you to set the quality of image smoothing.The CanvasRenderingContext2D rendering context contains a variety of drawing style states (attributes for line styles, fill styles, shadow styles, text styles). The following methods help you to work with that state:Saves the current drawing style state using a stack so you can revert any change you make to it using restore().Restores the drawing style state to the last element on the 'state stack' saved by save().A read-only back-reference to the HTMLCanvasElement. Might be null if it is not associated with a <canvas> element.Returns an object containing the actual context attributes. Context attributes can be requested with HTMLCanvasElement.getContext().Applies a CSS or SVG filter to the canvas, e.g., to change its brightness or blurriness.Most of these APIs are deprecated and were removed shortly after Chrome 36.Removes all shadow settings like CanvasRenderingContext2D.shadowColor and CanvasRenderingContext2D.shadowBlur.This is redundant with an equivalent overload of drawImage.Use CanvasRenderingContext2D.globalAlpha instead.Use CanvasRenderingContext2D.globalCompositeOperation instead.Use CanvasRenderingContext2D.lineWidth instead.Use CanvasRenderingContext2D.lineJoin instead.Use CanvasRenderingContext2D.lineCap instead.Use CanvasRenderingContext2D.miterLimit instead.Use CanvasRenderingContext2D.strokeStyle instead.Use CanvasRenderingContext2D.fillStyle instead.Use CanvasRenderingContext2D.shadowColor and CanvasRenderingContext2D.shadowBlur instead.Use CanvasRenderingContext2D.getLineDash() and CanvasRenderingContext2D.setLineDash() instead.Use CanvasRenderingContext2D.lineDashOffset instead.Use CanvasRenderingContext2D.imageSmoothingEnabled instead.Inspired by the same WebGLRenderingContext method it returns true if the Canvas context has been lost, or false if not.The backing store size in relation to the canvas element. See High DPI Canvas.Intended for HD backing stores, but removed from canvas specifications.Intended for HD backing stores, but removed from canvas specifications.See CanvasRenderingContext2D.imageSmoothingEnabled.Introduced in Gecko 1.9, deprecated in favor of the CanvasRenderingContext2D.font property.This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0. Use CanvasRenderingContext2D.strokeText() or CanvasRenderingContext2D.fillText() instead.This method was introduced in Gecko 1.9 and is unimplemented starting with Gecko 7.0. Use CanvasRenderingContext2D.measureText() instead.This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0.This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0.Renders a region of a window into the canvas. The contents of the window's viewport are rendered, ignoring viewport clipping and scrolling.This causes a context that is currently using a hardware-accelerated backend to fallback to a software one. All state should be preserved.The fill rule to use. This must be one of evenodd or nonzero (default).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"
},
{
	"api_id": "179",
	"name": "CaretPosition",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CaretPosition interface represents the caret position, an indicator for the text insertion point. You can get a CaretPosition using the Document.caretPositionFromPoint() method.This interface doesn't inherit any properties.Returns a Node containing the found node at the caret's position.Returns a long representing the character offset in the caret position node.Returns the client rectangle for the caret range.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition"
},
{
	"api_id": "180",
	"name": "CDATASection",
	"description": "\n  The CDATASection interface represents a CDATA section\n  that can be used within XML to include extended portions of unescaped text.\n  When inside a CDATA section, the symbols < and & don't need escaping\n  as they normally do.\nIn XML, a CDATA section looks like:For example:\n  The only sequence which is not allowed within a CDATA section is the closing sequence\n  of a CDATA section itself, ]]>.\nNote: CDATA sections should not be used within HTML they are considered as comments and not displayed.This interface has no specific properties and implements those of its parent\nText.This interface has no specific methods and implements those of its parent\nText.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection"
},
{
	"api_id": "181",
	"name": "ChannelMergerNode",
	"description": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n  \nIf ChannelMergerNode has one single output, but as many inputs as there are channels to merge; the number of inputs is defined as a parameter of its constructor and the call to AudioContext.createChannelMerger(). In the case that no value is given, it will default to 6.Using a ChannelMergerNode, it is possible to create outputs with more channels than the rendering hardware is able to process. In that case, when the signal is sent to the AudioContext.listener object, supernumerary channels will be ignored.Creates a new ChannelMergerNode object instance.No specific property; inherits properties from its parent, AudioNode.No specific method; inherits methods from its parent, AudioNode.See BaseAudioContext.createChannelMerger() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode"
},
{
	"api_id": "182",
	"name": "ChannelSplitterNode",
	"description": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.\n  \nIf your ChannelSplitterNode always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to AudioContext.createChannelSplitter(). In the case that no value is given, it will default to 6. If there are fewer channels in the input than there are outputs, supernumerary outputs are silent.Creates a new ChannelSplitterNode object instance.No specific property; inherits properties from its parent, AudioNode.No specific method; inherits methods from its parent, AudioNode.See BaseAudioContext.createChannelSplitter() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode"
},
{
	"api_id": "183",
	"name": "CharacterData",
	"description": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData: it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract.This interface also inherits properties from its parents, Node and EventTarget.A string representing the textual data contained in this object.Returns a number representing the size of the string contained in the object.Returns the first Element that follows this node, and is a sibling.Returns the first Element that precedes this node, and is a sibling.This interface also inherits methods from its parents, Node and EventTarget.\n  Inserts a set of Node objects or strings in the children list of the\n  CharacterData's parent, just after the CharacterData object.\n  Appends the given string to the CharacterData.data string; when this method returns, data contains the concatenated string.\n  Inserts a set of Node objects or strings in the children list of the\n  CharacterData's parent, just before the CharacterData object.\n  Removes the specified amount of characters, starting at the specified offset, from the CharacterData.data string; when this method returns, data contains the shortened string.Inserts the specified characters, at the specified offset, in the CharacterData.data string; when this method returns, data contains the modified string.Removes the object from its parent children list.Replaces the specified amount of characters, starting at the specified offset, with the specified string; when this method returns, data contains the modified string.Replaces the characters in the children list of its parent with a set of Node objects or strings.Returns a string containing the part of CharacterData.data of the specified length and starting at the specified offset.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"
},
{
	"api_id": "184",
	"name": "clearInterval()",
	"description": "\n  The global clearInterval() method cancels a timed, repeating action which\n  was previously established by a call to setInterval().\n  If the parameter provided does not identify a previously established action,\n  this method does nothing.\n\n  The identifier of the repeated action you want to cancel. This ID was returned by\n  the corresponding call to setInterval().\n  \n  It's worth noting that the pool of IDs used by\n  setInterval() and\n  setTimeout() are shared, which\n  means you can technically use clearInterval() and\n  clearTimeout() interchangeably.\n  However, for clarity, you should avoid doing so.\nNone (undefined).See the setInterval() examples.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/clearInterval"
},
{
	"api_id": "185",
	"name": "clearTimeout()",
	"description": "\n  The global clearTimeout() method cancels a timeout previously established\n  by calling setTimeout().\n\n  If the parameter provided does not identify a previously established action,\n  this method does nothing.\n\n  The identifier of the timeout you want to cancel. This ID was returned by the\n  corresponding call to setTimeout().\n  \n  It's worth noting that the pool of IDs used by\n  setTimeout() and\n  setInterval() are shared, which\n  means you can technically use clearTimeout() and\n  clearInterval()\n  interchangeably. However, for clarity, you should avoid doing so.\nNone (undefined).\n  Run the script below in the context of a web page and click on the page once. You'll\n  see a message popping up in a second. If you click the page multiple times in\n  one second, the alert only appears once.\n\n  Passing an invalid ID to clearTimeout() silently does nothing; no\n  exception is thrown.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout"
},
{
	"api_id": "186",
	"name": "Client",
	"description": "The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get().Sends a message to the client.The universally unique identifier of the client as a string.The client's type as a string. It can be "window", "worker", or "sharedworker".The URL of the client as a string.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Client"
},
{
	"api_id": "187",
	"name": "Clients",
	"description": "The Clients interface provides access to Client objects. Access it via self.clients within a service worker.Returns a Promise for a Client matching a given id.Returns a Promise for an array of Client objects. An options argument allows you to control the types of clients returned.Opens a new browser window for a given URL and returns a Promise for the new WindowClient.Allows an active service worker to set itself as the controller for all clients within its scope.The following example shows an existing chat window or creates a new one when the user clicks a notification.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Clients"
},
{
	"api_id": "188",
	"name": "Clipboard",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard. The Clipboard API can be used to implement cut, copy, and paste features within a web application.The system clipboard is exposed through the global Navigator.clipboard property.Calls to the methods of the Clipboard object will not succeed if the user hasn't granted the needed permissions using the Permissions API and the 'clipboard-read' or 'clipboard-write' permission as appropriate.Note: In reality, at this time browser requirements for access to the clipboard vary significantly. Please see the section Clipboard availability for details.All of the Clipboard API methods operate asynchronously; they return a Promise which is resolved once the clipboard access has been completed. The promise is rejected if clipboard access is denied.Clipboard is based on the EventTarget interface, and includes its methods.Requests arbitrary data (such as images) from the clipboard, returning a Promise that resolves with an array of ClipboardItem objects containing the clipboard's contents.Requests text from the system clipboard; returns a Promise which is resolved with a string containing the clipboard's text once it's available.Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned Promise.Writes text to the system clipboard, returning a Promise which is resolved once the text is fully copied into the clipboard.The asynchronous clipboard API is a relatively recent addition, and the process of implementing it in browsers is not yet complete. Due to both potential security concerns and technical complexities, the process of integrating this API is happening gradually in most browsers. See the browser compatibility section below for more information.In browser extensions, you can access the system clipboard using the WebExtension clipboard API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard"
},
{
	"api_id": "189",
	"name": "ClipboardEvent",
	"description": "The ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events.Creates a ClipboardEvent event with the given parameters.Also inherits properties from its parent Event.A DataTransfer object containing the data affected by the user-initiated cut, copy, or paste operation, along with its MIME type.No specific methods; inherits methods from its parent Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent"
},
{
	"api_id": "190",
	"name": "ClipboardItem",
	"description": "The ClipboardItem interface of the Clipboard API represents a single item format, used when reading or writing data via the Clipboard API. That is clipboard.read() and clipboard.write() respectively.The benefit of having the ClipboardItem interface to represent data, is that it enables developers to cope with the varying scope of file types and data easily.Access to the contents of the clipboard is gated behind the Permissions API: The clipboard-write permission is granted automatically to pages when they are in the active tab. The clipboard-read permission must be requested, which you can do by trying to read data from the clipboard.Note: To work with text see the Clipboard.readText() and Clipboard.writeText() methods of the Clipboard interface.Note: You can only pass in one clipboard item at a time.Creates a new ClipboardItem object, with the MIME type as the key and Blob as the valueThis interface provides the following properties.Returns an Array of MIME types available within the ClipboardItem.Returns one of the following: "unspecified", "inline" or "attachment".This interface defines the following methods.Returns a Promise that resolves with a Blob of the requested MIME type, or an error if the MIME type is not found.Here we're writing a new ClipboardItem() to the clipboard by requesting a png image using the Fetch API, and in turn, the responses' blob() method, to create the new ClipboardItem.Here we're returning all items on the clipboard via the clipboard.read() method. Then utilizing the ClipboardItem.types property to set the getType() argument and return the corresponding blob object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem"
},
{
	"api_id": "191",
	"name": "CloseEvent",
	"description": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.Creates a new CloseEvent.This interface also inherits properties from its parent, Event.Returns an unsigned short containing the close code sent by the server.Returns a string indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.Returns a boolean value that Indicates whether or not the connection was cleanly closed.This interface also inherits methods from its parent, Event.Initializes the value of a CloseEvent created. If the event has already being dispatched, this method does nothing. Do not use this method anymore, use the CloseEvent() constructor instead.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent"
},
{
	"api_id": "192",
	"name": "Comment",
	"description": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.Comments are represented in HTML and XML as content between '<!--' and '-->'. In XML, like inside SVG or MathML markup, the character sequence '--' cannot be used within a comment.This interface has no specific property, but inherits those of its parent, CharacterData, and indirectly those of Node.Returns a new Comment object with the parameter as its textual content. If not present, its default value is the empty string, ''.This interface has no specific method, but inherits those of its parent, CharacterData, and indirectly those of Node.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Comment"
},
{
	"api_id": "193",
	"name": "CompositionEvent",
	"description": "The DOM CompositionEvent represents events that occur due to the user indirectly entering text.Creates a new CompositionEvent object instance.This interface also inherits properties of its parent, UIEvent, and its ancestor — Event.Returns the characters generated by the input method that raised the event; its varies depending on the type of event that generated the CompositionEvent object.Returns the locale of current input method (for example, the keyboard layout locale if the composition is associated with IME).This interface also inherits methods of its parent, UIEvent, and its ancestor — Event.Initializes the attributes of a CompositionEvent object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent"
},
{
	"api_id": "194",
	"name": "CompressionStream",
	"description": "The CompressionStream interface of the Compression Streams API is an API for compressing a stream of data.Creates a new CompressionStreamReturns the ReadableStream instance controlled by this object.Returns the WritableStream instance controlled by this object.In this example a stream is compressed using gzip compression.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream"
},
{
	"api_id": "195",
	"name": "console",
	"description": "\n  The console object provides access to the browser's\n  debugging console (e.g. the Web console in Firefox).\n  The specifics of how it works varies from browser to browser, but there is a de facto\n  set of features that are typically provided.\n\n  The console object can be accessed from any global object. Window on\n  browsing scopes and WorkerGlobalScope as specific variants in workers via the\n  property console. It's exposed as Window.console, and can be referenced as\n  console. For example:\n\n  This page documents the Methods available on the console object and\n  gives a few Usage examples.\nNote: This feature is available in Web WorkersLog a message and stack trace to console if the first argument is false.Clear the console.Log the number of times this line has been called with the given label.Resets the value of the counter with the given label.Outputs a message to the console with the log level debug.Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.Outputs an error message. You may use string substitution and additional arguments with this method.An alias for error().Creates a new inline group, indenting all following output by another level. To move back out a level, call groupEnd().Creates a new inline group, indenting all following output by another level. However, unlike group() this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call groupEnd().Exits the current inline group.Informative logging of information. You may use string substitution and additional arguments with this method.For general output of logging information. You may use string substitution and additional arguments with this method.Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).Displays tabular data as a table.Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.Stops the specified timer and logs the elapsed time in milliseconds since it started.Logs the value of the specified timer to the console.Adds a marker to the browser's Timeline or Waterfall tool.Outputs a stack trace.Outputs a warning message. You may use string substitution and additional arguments with this method.The most frequently-used feature of the console is logging of text and other data. There are several categories of output you can generate, using the console.log(), console.info(), console.warn(), console.error(), or console.debug() methods. Each of these results in output styled differently in the log, and you can use the filtering controls provided by your browser to only view the kinds of output that interest you.There are two ways to use each of the output methods; you can pass in a list of objects whose string representations get concatenated into one string, then output to the console, or you can pass in a string containing zero or more substitution strings followed by a list of objects to replace them.The simplest way to use the logging methods is to output a single object:The output looks something like this:You can also output multiple objects by listing them when calling the logging method, like this:The output will look like this:When passing a string to one of the console object's methods that accepts a string (such as log()), you may use these substitution strings:Outputs a JavaScript object. Clicking the object name opens more information about it in the inspector.Outputs an integer. Number formatting is supported, for example console.log("Foo %.2d", 1.1) will output the number as two significant figures with a leading 0: Foo 01.Outputs a string.Outputs a floating-point value. Formatting is supported, for example console.log("Foo %.2f", 1.1) will output the number to 2 decimal places: Foo 1.10.Note: Precision formatting doesn't work in Chrome.Each of these pulls the next argument after the format string off the parameter list. For example:The output looks like this:You can use the %c directive to apply a CSS style to console output:The text before the directive will not be affected, but the text after the directive will be styled using the CSS declarations in the parameter.\n  \nYou may use %c multiple times:The properties usable along with the %c syntax are as follows (at least, in Firefox — they may differ in other browsers):Note: The console message behaves like an inline element by default. To see the effects of padding, margin, etc. you should set it to for example display: inline-block.You can use nested groups to help organize your output by visually combining related material. To create a new nested block, call console.group(). The console.groupCollapsed() method is similar but creates the new block collapsed, requiring the use of a disclosure button to open it for reading.To exit the current group, call console.groupEnd(). For example, given this code:The output looks like this:\n  \nYou can start a timer to calculate the duration of a specific operation. To start one, call the console.time() method, giving it a name as the only parameter. To stop the timer, and to get the elapsed time in milliseconds, just call the console.timeEnd() method, again passing the timer's name as the parameter. Up to 10,000 timers can run simultaneously on a given page.For example, given this code:Will log the time needed by the user to dismiss the alert box, log the time to the console, wait for the user to dismiss the second alert, and then log the ending time to the console:\n  \nNotice that the timer's name is displayed both when the timer is started and when it's stopped.\n  Note: It's important to note that if you're using this to log the timing for network traffic, the timer will report the total time for the transaction, while the time listed in the network panel is just the amount of time required for the header.\n  If you have response body logging enabled, the time listed for the response header and body combined should match what you see in the console output.\n  The console object also supports outputting a stack trace; this will show you the call path taken to reach the point at which you call console.trace(). Given code like this:The output in the console looks something like this:\n  \n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/console"
},
{
	"api_id": "196",
	"name": "ConstantSourceNode",
	"description": "The ConstantSourceNode interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible AudioParam by automating the value of its offset or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.A ConstantSourceNode has no inputs and exactly one monaural (one-channel) output. The output's value is always the same as the value of the offset parameter.Creates and returns a new ConstantSourceNode instance, optionally specifying an object which establishes initial values for the object's properties. As an alternative, you can use the BaseAudioContext.createConstantSource() factory method; see Creating an AudioNode.Inherits properties from its parent interface, AudioScheduledSourceNode, and adds the following properties:An AudioParam which specifies the value that this source continuously outputs. The default value is 1.0.Inherits events from its parent interface, AudioScheduledSourceNode.Note: Some browsers' implementations of these events are part of the AudioScheduledSourceNode interface.Fired whenever the ConstantSourceNode data has stopped playing.Inherits methods from its parent interface, AudioScheduledSourceNode.Note: Some browsers' implementations of these methods are part of the AudioScheduledSourceNode interface.Schedules a sound to playback at an exact time.Schedules a sound to stop playback at an exact time.In the article Controlling multiple parameters with ConstantSourceNode, a ConstantSourceNode is created to allow one slider control to change the gain on two GainNodes. The three nodes are set up like this:This code starts by creating the gain nodes and setting them and the volume control that will adjust their value all to 0.5. Then the ConstantSourceNode is created by calling AudioContext.createConstantSource(), and the gain parameters of each of the two gain nodes are connected to the ConstantSourceNode. After starting the constant source by calling its start() method. Finally, the two gain nodes are connected to the audio destination (typically speakers or headphones).Now, whenever the value of constantNode.offset changes, the gain on both gainNode2 and gainNode3 will change to have that same value.To see this example in action, as well as to read the rest of the code from which these snippets were derived, see Controlling multiple parameters with ConstantSourceNode.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode"
},
{
	"api_id": "197",
	"name": "ContactAddress",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The ContactAddress interface of the Contact Picker API represents a physical address. Instances of this interface are retrieved from the address property of the objects returned by ContactManager.getProperties().It may be useful to refer to the Universal Postal Union website's Addressing S42 standard materials, which provide information about international standards for postal addresses.Inherits properties from its parent, PaymentAddress.Inherits methods from its parent, PaymentAddress.The following example prompts the user to select contacts, then prints the first returned address to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ContactAddress"
},
{
	"api_id": "198",
	"name": "ContactsManager",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The ContactsManager interface of the Contact Picker API allows users to select entries from their contact list and share limited details of the selected entries with a website or application.The ContactsManager is available through the global navigator.contacts property.Returns a Promise which, when resolved, presents the user with a contact picker which allows them to select contact(s) they wish to share.Returns a Promise which resolves with an Array of strings indicating which contact properties are available.The following code checks whether the Contact Picker API is supported.The following asynchronous function uses the getProperties method to check for supported properties.The following example sets an array of properties to be retrieved for each contact, as well as setting an options object to allow for multiple contacts to be selected.An asynchronous function is then defined which uses the select() method to present the user with a contact picker interface and handle the chosen results.handleResults() is a developer defined function.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ContactsManager"
},
{
	"api_id": "199",
	"name": "ContentIndex",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ContentIndex interface of the Content Index API allows developers to register their offline enabled content with the browser.There are no properties of this interface.Registers an item with the content index.Unregisters an item from the currently indexed content.Returns a Promise that resolves with an iterable list of content index entries.Here we get a reference to the ServiceWorkerRegistration, then check for the index property, which gives us access to the content index interface.Here we're declaring an item in the correct format and creating an asynchronous function which uses the add() method to register it with the content index.The below example shows an asynchronous function that retrieves items within the content index and iterates over each entry, building a list for the interface.Below is an asynchronous function, that removes an item from the content index.All the above methods are available within the scope of the service worker. They are accessible from the WorkerGlobalScope.self property:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndex"
},
{
	"api_id": "200",
	"name": "ContentIndexEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ContentIndexEvent interface of the content index defines the object used to represent the contentdelete event.This event is sent to the global scope of a ServiceWorker. It contains the id of the indexed content to be removed.The contentdelete event is only fired when the deletion happens due to interaction with the browser's built-in user interface. It is not fired when the ContentIndex.delete method is called.Creates and returns a new ContentIndexEvent object whose type and other options are configured as specified.In addition to the properties listed below, this interface inherits the properties of its parent interface, ExtendableEvent.A String which identifies the deleted content index via it's id.While ContentIndexEvent offers no methods of its own, it inherits any specified by its parent interface, ExtendableEvent.This example shows the service worker script listening for the contentdelete event and logs the removed content index id.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ContentIndexEvent"
},
{
	"api_id": "201",
	"name": "ConvolverNode",
	"description": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.Note: For more information on the theory behind Linear Convolution, see the Convolution article on Wikipedia.Creates a new ConvolverNode object instance.Inherits properties from its parent, AudioNode.A mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect.A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.No specific method; inherits methods from its parent, AudioNode.The following example shows basic usage of an AudioContext to create a convolver node.Note: You will need to find an impulse response to complete the example below. See this Codepen for an applied example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode"
},
{
	"api_id": "202",
	"name": "CookieChangeEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CookieChangeEvent interface of the 'Cookie Store API' is the event type passed to CookieStore.onchange() when any cookie changes occur. A cookie change consists of a cookie and a type (either "changed" or "deleted").Cookie changes that will cause the CookieChangeEvent to be dispatched are:Note: A cookie that is replaced due to the insertion of another cookie with the same name, domain, and path, is ignored and does not trigger a change event.Creates a new CookieChangeEvent.This interface also inherits properties from Event.Returns an array containing one or more changed cookies.Returns an array containing one or more deleted cookies.In this example when the cookie is set, the event listener logs the event to the console. This is a CookieChangeEvent object with the changed property containing an object representing the cookie that has just been set.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CookieChangeEvent"
},
{
	"api_id": "203",
	"name": "CookieStore",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CookieStore interface of the 'Cookie Store API' provides methods for getting and setting cookies asynchronously from either a page or a service worker.The CookieStore is accessed via attributes in the global scope in a Window or ServiceWorkerGlobalScope context. Therefore there is no constructor.The delete() method deletes a cookie with the given name or options object, it returns a Promise that resolves when the deletion completes.The get() method gets a single cookie with the given name or options object, it returns a Promise that resolves with details of a single cookie.The getAll() method gets all matching cookies, it returns a Promise that resolves with a list of cookies.The set() method sets a cookie with the given name and value or options object, it returns a Promise that resolves when the cookie is set.The change event fires when a change is made to any cookie.In this example we set a cookie and write to the console feedback as to whether the operation succeeded or failed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CookieStore"
},
{
	"api_id": "204",
	"name": "CookieStoreManager",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CookieStoreManager interface of the 'Cookie Store API' allows service workers to subscribe to cookie change events. Call subscribe() on a particular service worker registration to receive change events.A CookieStoreManager has an associated ServiceWorkerRegistration. Each service worker registration has a cookie change subscription list, which is a list of cookie change subscriptions each containing a name and URL. The methods in this interface allow the service worker to add and remove subscriptions from this list, and to get a list of all subscriptions.To get a CookieStoreManager, call ServiceWorkerRegistration.cookies.Returns a promise which resolves to a list of the cookie change subscriptions for this service worker registration.Subscribes to changes to cookies. It returns a promise which resolves when the subscription is successful.Unsubscribes the registered service worker from changes to cookies. It returns a promise which resolves when the operation is successful.In this example the ServiceWorkerRegistration represented by registration is subscribing to change events on the cookie named "cookie1" with a scope of "/path1".If the ServiceWorkerRegistration has subscribed to any cookies then getSubscriptions() will return a list of cookies represented by objects in the same format as used for the original subscription.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CookieStoreManager"
},
{
	"api_id": "205",
	"name": "CountQueuingStrategy",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CountQueuingStrategy interface of the Streams API provides a built-in chunk counting queuing strategy that can be used when constructing streams.Creates a new CountQueuingStrategy object instance.None.Returns 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CountQueuingStrategy"
},
{
	"api_id": "206",
	"name": "CrashReportBody",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CrashReportBody interface of the Reporting API represents the body of a crash report (the return value of its Report.body property).A crash report is generated when a document becomes unusable due to the browser (or one of its processes) crashing. For security reasons, no details of the crash are communicated in the body except for a general crash reason.A string representing the reason for the crash. Current possible reasons are:Crash reports are generally only retrievable via endpoints set up using the Report-To header. It is difficult to retrieve a crash report via a ReportingObserver, as by that point the page would have crashed!Some sample JSON might look like this:Note: Crash reports are always delivered to the endpoint group named default; there is currently no way to override this. If you want to receive other kinds of reports, but not crash reports, make sure to use a different name for the endpoint group that you choose for those reports.This feature is not yet available by default in any released browser. It can be activated in Firefox by setting dom_reporting_enabled to true and in Chrome if you enable this experimental feature.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CrashReportBody"
},
{
	"api_id": "207",
	"name": "createImageBitmap()",
	"description": "\n  The createImageBitmap() method creates a bitmap from a\n  given source, optionally cropped to contain only a portion of that source. The method\n  exists on the global scope in both windows and workers. It accepts a variety of\n  different image sources, and returns a Promise which resolves to an\n  ImageBitmap.\n\n  An image source, which can be an <img>, SVG\n  <image>, <video>, <canvas>,\n  HTMLImageElement, SVGImageElement,\n  HTMLVideoElement,\n  HTMLCanvasElement, Blob, ImageData,\n  ImageBitmap, or OffscreenCanvas object.\n  \n  The x coordinate of the reference point of the rectangle from which the\n  ImageBitmap will be extracted.\n  \n  The y coordinate of the reference point of the rectangle from which the\n  ImageBitmap will be extracted.\n  \n  The width of the rectangle from which the ImageBitmap will be\n  extracted. This value can be negative.\n  \n  The height of the rectangle from which the ImageBitmap will be\n  extracted. This value can be negative.\n  An object that sets options for the image's extraction. The available options are:\n    Specifies whether the image should be presented\n    as is or flipped vertically. Either none (default) or\n    flipY.\n    \n    Specifies whether the bitmap's color channels\n    should be premultiplied by the alpha channel. One of none,\n    premultiply, or default (default).\n    \n    Specifies whether the image should be decoded\n    using color space conversion. Either none or default\n    (default). The value default indicates that implementation-specific\n    behavior is used.\n    A long integer that indicates the output width.A long integer that indicates the output height.\n    Specifies the algorithm to be used for resizing the\n    input to match the output dimensions. One of pixelated,\n    low (default), medium, or high.\n    \n  A Promise which resolves to an ImageBitmap object\n  containing bitmap data from the given rectangle.\n\n  This example loads a sprite sheet, extracts individual sprites, and then renders each\n  sprite to the canvas. A sprite sheet is an image containing multiple smaller images,\n  each of which you want to be able to render separately.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/createImageBitmap"
},
{
	"api_id": "208",
	"name": "Credential",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Credential interface of the Credential Management API provides information about an entity (usually a user) as a prerequisite to a trust decision.Credential objects may be of 3 different types:Returns a string containing the credential's identifier. This might be any one of a GUID, username, or email address.Returns a string containing the credential's type. Valid values are password, federated and public-key. (For PasswordCredential, FederatedCredential and PublicKeyCredential)None.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Credential"
},
{
	"api_id": "209",
	"name": "CredentialsContainer",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The CredentialsContainer interface of the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen. This interface is accessible from Navigator.credentials.None.None.Returns a Promise that resolves with a new Credential instance based on the provided options, or null if no Credential object can be created. In exceptional circumstances, the Promise may reject.Returns a Promise that resolves with the Credential instance that matches the provided parameters.Sets a flag that specifies whether automatic log in is allowed for future visits to the current origin, then returns an empty Promise. For example, you might call this, after a user signs out of a website to ensure that they aren't automatically signed in on the next site visit. Earlier versions of the spec called this method requireUserMediation(). See Browser compatibility for support details.Stores a set of credentials for a user, inside a provided Credential instance and returns that instance in a Promise.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer"
},
{
	"api_id": "210",
	"name": "crossOriginIsolated",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The global crossOriginIsolated read-only property returns a boolean value that\n  indicates whether a SharedArrayBuffer can be sent via a\n  Window.postMessage() call.\n\n  This value is dependent on any Cross-Origin-Opener-Policy and\n  Cross-Origin-Embedder-Policy headers present in the response.\nA boolean value",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/crossOriginIsolated"
},
{
	"api_id": "211",
	"name": "Crypto",
	"description": "\n  The Crypto interface represents basic cryptography features available in the current context.\n  It allows access to a cryptographically strong random number generator and to cryptographic primitives.\nNote: This feature is available in Web WorkersThe Web Crypto API is accessed through the global crypto property, which is a Crypto object.This interface implements properties defined on RandomSource.Returns a SubtleCrypto object providing access to common cryptographic primitives, like hashing, signing, encryption, or decryption.This interface implements methods defined on RandomSource.Fills the passed TypedArray with cryptographically sound random values.Returns a randomly generated, 36 character long v4 UUID.\n  You should avoid using the Web Crypto API on insecure contexts, even though the Crypto interface is present on insecure contexts, as is the crypto property.\n  In addition, the Crypto method getRandomValues() is available on insecure contexts, but the subtle property is not.\nIn general, you probably should just treat Crypto as available only on secure contexts.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Crypto"
},
{
	"api_id": "212",
	"name": "CryptoKey",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The CryptoKey interface of the Web Crypto API represents a cryptographic key obtained from one of the SubtleCrypto methods generateKey(), deriveKey(), importKey(), or unwrapKey().For security reasons, the CryptoKey interface can only be used in a secure context.String which may take one of the following values:A boolean value indicating whether or not the key may be extracted using SubtleCrypto.exportKey() or SubtleCrypto.wrapKey().An object describing the algorithm for which this key can be used and any associated extra parameters.An Array of strings, indicating what can be done with the key. Possible values for array elements are:The examples for SubtleCrypto methods often use CryptoKey objects. For example:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey"
},
{
	"api_id": "213",
	"name": "CryptoKeyPair",
	"description": "The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.A CryptoKeyPair object can be obtained using SubtleCrypto.generateKey(), when the selected algorithm is one of the asymmetric algorithms: RSASSA-PKCS1-v1_5, RSA-PSS, RSA-OAEP, ECDSA, or ECDH.It contains two properties, which are both CryptoKey objects: a privateKey property containing the private key and a publicKey property containing the public key.A CryptoKey object representing the private key. For encryption and decryption algorithms, this key is used to decrypt. For signing and verification algorithms it is used to sign.A CryptoKey object representing the public key. For encryption and decryption algorithms, this key is used to encrypt. For signing and verification algorithms it is used to verify signatures.The examples for SubtleCrypto methods often use CryptoKeyPair objects. For example:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair"
},
{
	"api_id": "214",
	"name": "CSS",
	"description": "The CSS interface holds useful CSS-related methods. No objects with this interface are implemented: it contains only static methods and is therefore a utilitarian interface.The CSS interface is a utility interface and no object of this type can be created: only static properties are defined on it.Provides access to the Worklet responsible for all the classes related to painting.The CSS interface is a utility interface and no object of this type can be created: only static methods are defined on it.No inherited static methods.Registers custom properties, allowing for property type checking, default values, and properties that do or do not inherit their value.Returns a boolean value indicating if the pair property-value, or the condition, given in parameter is supported.Can be used to escape a string mostly for use as part of a CSS selector.Can be used to return a new CSSUnitValue with a value of the parameter number of the units of the name of the factory function method used.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSS"
},
{
	"api_id": "215",
	"name": "CSSAnimation",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSAnimation interface of the Web Animations API represents an Animation object.Inherits methods from its ancestor Animation and adds animationName.Returns the animation name as a string.No specific event handlers; inherits methods from its ancestor Animation.No specific methods; inherits methods from its ancestor Animation.The animation in the following example is defined in CSS with the name slide-in. Calling Element.getAnimations() returns an array of all Animation objects. In our case this returns a CSSAnimation object, representing the animation created in CSS.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSAnimation"
},
{
	"api_id": "216",
	"name": "CSSConditionRule",
	"description": "An object implementing the CSSConditionRule interface represents a single condition CSS at-rule, which consists of a condition and a statement block.Two objects derive from CSSConditionRule: CSSMediaRule and CSSSupportsRule.Inherits properties from its ancestors CSSRule and CSSGroupingRule.Represents the text of the condition of the rule.No specific methods; inherits methods from its ancestors CSSRule and CSSGroupingRule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule"
},
{
	"api_id": "217",
	"name": "CSSCounterStyleRule",
	"description": "The CSSCounterStyleRule interface represents an @counter-style at-rule.This interface also inherits properties from its parent CSSRule.A string object that contains the serialization of the <custom-ident> defined as the name for the associated rule.A string object that contains the serialization of the system descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the symbols descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the additive-symbols descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the negative descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the prefix descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the suffix descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the range descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the pad descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the speak-as descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.A string object that contains the serialization of the fallback descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.This interface doesn't implement any specific method but inherits methods from its parent CSSRule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSCounterStyleRule"
},
{
	"api_id": "218",
	"name": "CSSFontFaceRule",
	"description": "The CSSFontFaceRule interface represents an @font-face at-rule.Inherits properties from its ancestor CSSRule.Returns a CSSStyleDeclaration.Inherits methods from its ancestor CSSRule.This example uses the CSS found as an example on the @font-face page. The first CSSRule returned will be a CSSFontFaceRule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule"
},
{
	"api_id": "219",
	"name": "CSSGroupingRule",
	"description": "The CSSGroupingRule interface of the CSS Object Model represents any CSS at-rule that contains other rules nested within it.This interface also inherits properties from CSSRule.Returns a CSSRuleList of the CSS rules in the media rule.This interface also inherits methods from CSSRule.Deletes a rule from the style sheet.Inserts a new style rule into the current style sheet.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule"
},
{
	"api_id": "220",
	"name": "CSSImageValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSImageValue interface of the CSS Typed Object Model API represents values for properties that take an image, for example background-image, list-style-image, or border-image-source.The CSSImageValue object represents an <image> that involves a URL, such as url() or image(), but not linear-gradient() or element().None.Inherits methods from CSSStyleValue.We create an elementWe add some CSS, including a background image requesting a binary file:We get the element's style map. We then get() the background-image from the stylemap and stringify it:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSImageValue"
},
{
	"api_id": "221",
	"name": "CSSImportRule",
	"description": "The CSSImportRule interface represents an @import at-rule.Inherits properties from its ancestor CSSRule.Returns the URL specified by the @import rule.Returns the value of the media attribute of the associated stylesheet.Returns the associated stylesheet.Inherits methods from its ancestor CSSRule.The following stylesheet includes a single @import rule. Therefore the first item in the list of CSS rules will be a CSSImportRule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule"
},
{
	"api_id": "222",
	"name": "CSSKeyframeRule",
	"description": "The CSSKeyframeRule interface describes an object representing a set of styles for a given keyframe. It corresponds to the contents of a single keyframe of a @keyframes at-rule.Inherits properties from its ancestor CSSRule.Represents the key of the keyframe, like '10%', '75%'. The from keyword maps to '0%' and the to keyword maps to '100%'.Returns a CSSStyleDeclaration of the CSS style associated with the keyframe.No specific methods; inherits methods from its ancestor CSSRule.\n  The CSS includes a keyframes at-rule. This will be the first CSSRule returned by document.styleSheets[0].cssRules.\n  myRules[0] returns a CSSKeyframesRule object, which will contain individual CSSKeyFrame objects for each keyframe.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule"
},
{
	"api_id": "223",
	"name": "CSSKeyframesRule",
	"description": "The CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contents of a whole @keyframes at-rule.Inherits properties from its ancestor CSSRule.Represents the name of the keyframes, used by the animation-name property.Returns a CSSRuleList of the keyframes in the list.Inherits methods from its ancestor CSSRule.Inserts a new keyframe rule into the current CSSKeyframesRule. The parameter is a string containing a keyframe in the same format as an entry of a @keyframes at-rule. If it contains more than one keyframe rule, a DOMException with a SYNTAX_ERR is thrown.Deletes a keyframe rule from the current CSSKeyframesRule. The parameter is the index of the keyframe to be deleted, expressed as a string resolving as a number between 0% and 100%.Returns a keyframe rule corresponding to the given key. The key is a string containing an index of the keyframe to be returned, resolving to a percentage between 0% and 100%. If no such keyframe exists, findRule returns null.\n  The CSS includes a keyframes at-rule. This will be the first CSSRule returned by document.styleSheets[0].cssRules.\n  myRules[0] returns a CSSKeyframesRule object.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule"
},
{
	"api_id": "224",
	"name": "CSSKeywordValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSKeywordValue interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.The interface instance name is a stringifier meaning that when used anywhere a string is expected it will return the value of CSSKeyword.value.Creates a new CSSKeywordValue object.Returns or sets the value of the CSSKeywordValue.Inherits methods from CSSStyleValue.The following example resets the CSS display property to its defaults, setting the inline style attribute to style="display: initial" if viewed in the developer tools inspector.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSKeywordValue"
},
{
	"api_id": "225",
	"name": "CSSMathInvert",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathInvert interface of the CSS_Object_Model#css_typed_object_model represents a CSS calc() used as calc(1 / <value>). It inherits properties and methods from its parent CSSNumericValue.Creates a new CSSMathInvert object.Returns a CSSNumericValue object.None.To do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathInvert"
},
{
	"api_id": "226",
	"name": "CSSMathMax",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathMax interface of the CSS_Object_Model#css_typed_object_model represents the CSS max() function. It inherits properties and methods from its parent CSSNumericValue.Creates a new CSSMathMax object.Returns a CSSNumericArray object which contains one or more CSSNumericValue objects.None.To do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathMax"
},
{
	"api_id": "227",
	"name": "CSSMathMin",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathMin interface of the CSS_Object_Model#css_typed_object_model represents the CSS min() function. It inherits properties and methods from its parent CSSNumericValue.Creates a new CSSMathMin object.Returns a CSSNumericArray object which contains one or more CSSNumericValue objects.None.To do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathMin"
},
{
	"api_id": "228",
	"name": "CSSMathNegate",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathNegate interface of the CSS_Object_Model#css_typed_object_model negates the value passed into it. It inherits properties and methods from its parent CSSNumericValue.Creates a new CSSMathNegate object.Returns a CSSNumericValue object.None.To do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathNegate"
},
{
	"api_id": "229",
	"name": "CSSMathProduct",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathProduct interface of the CSS_Object_Model#css_typed_object_model represents the result obtained by calling add(), sub(), or toSum() on CSSNumericValue. It inherits properties and methods from its parent CSSNumericValue.Creates a new CSSMathProduct object.Returns a CSSNumericArray object which contains one or more CSSNumericValue objects.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathProduct"
},
{
	"api_id": "230",
	"name": "CSSMathSum",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathSum interface of the CSS_Object_Model#css_typed_object_model represents the result obtained by calling add(), sub(), or toSum() on CSSNumericValue.A CSSMathSum is the object type returned when the StylePropertyMapReadOnly.get() method is used on a CSS property whose value is created with a calc() function.Creates a new CSSMathSum object.Returns a CSSNumericArray object which contains one or more CSSNumericValue objects.NoNone.We create an element with a width determined using a calc() function, then console.log() the operator and values, and dig into the values a bit.We assign a widthWe add the JavaScriptThe specification is still evolving. In the future we may write the last three lines as:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathSum"
},
{
	"api_id": "231",
	"name": "CSSMathValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMathValue interface of the CSS_Object_Model#css_typed_object_model a base class for classes representing complex numeric values.Below is a list of interfaces based on the CSSMathValue interface.Indicates the operator that the current subtype represents.NoNone.We create an element with a width determined using a calc() function, then console.log() the operator.We assign a width with a calculationWe add the JavaScriptThe CSSMathValue.operator returns 'sum' because styleMap.get('width').values[1].value ); is -20: adding a negative number.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMathValue"
},
{
	"api_id": "232",
	"name": "CSSMatrixComponent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSMatrixComponent interface of the CSS_Object_Model#css_typed_object_model represents the matrix() and matrix3d() values of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSMatrixComponent object.A matrix.To do.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMatrixComponent"
},
{
	"api_id": "233",
	"name": "CSSMediaRule",
	"description": "The CSSMediaRule interface represents a single CSS @media rule.Inherits properties from its ancestors CSSConditionRule, CSSGroupingRule, and CSSRule.Returns a MediaList representing the intended destination medium for style information.No specific methods; inherits methods from its ancestors CSSConditionRule, CSSGroupingRule, and CSSRule.\n  The CSS includes a media query with one style rule. This will be the first CSSRule returned by document.styleSheets[0].cssRules.\n  myRules[0] therefore returns a CSSMediaRule object.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule"
},
{
	"api_id": "234",
	"name": "CSSNamespaceRule",
	"description": "The CSSNamespaceRule interface describes an object representing a single CSS @namespace at-rule.Inherits methods from its ancestor CSSRule.Returns a string containing the text of the URI of the given namespace.Returns a string with the name of the prefix associated to this namespace. If there is no such prefix, returns an empty string.Inherits methods from its ancestor CSSRule.The stylesheet includes a namespace as the only rule. Therefore the first CSSRule returned will be a CSSNamespaceRule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule"
},
{
	"api_id": "235",
	"name": "CSSNumericArray",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSNumericArray interface of the CSS_Object_Model#css_typed_object_model contains a list of CSSNumericValue objects.Returns how many CSSNumericValue objects are contained within the CSSNumericArray.To do.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericArray"
},
{
	"api_id": "236",
	"name": "CSSNumericValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSNumericValue interface of the CSS Typed Object Model API represents operations that all numeric values can perform.Below is a list of interfaces based on the CSSNumericValue interface.None.Adds a supplied number to the CSSNumericValue.Subtracts a supplied number from the CSSNumericValue.Multiplies the CSSNumericValue by the supplied value.Divides the CSSNumericValue by the supplied value.Returns the minimum value passedReturns the maximum value passedTrue if all the values are the exact same type and value, in the same order. Otherwise, false.Converts value into another one with the specified unit.Converts an existing CSSNumericValue into a CSSMathSum object with values of a specified unit.Returns the type of CSSNumericValue, one of angle, flex, frequency, length, resolution, percent, percentHint, or time.Allows a CSSNumericValue to be constructed directly from a string containing CSS.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSNumericValue"
},
{
	"api_id": "237",
	"name": "CSSPageRule",
	"description": "CSSPageRule represents a single CSS @page rule.Inherits properties from its ancestor CSSRule.Represents the text of the page selector associated with the at-rule.Returns the declaration block associated with the at-rule.Inherits methods from its ancestor CSSRule.The stylesheet includes a single @page rule, therefore the first (and only) rule returned will be a CSSPageRule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule"
},
{
	"api_id": "238",
	"name": "CSSPerspective",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSPerspective interface of the CSS_Object_Model#css_typed_object_model represents the perspective() value of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSPerspective object.Returns or sets the distance from z=0.To do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPerspective"
},
{
	"api_id": "239",
	"name": "CSSPositionValue",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The CSSPositionValue interface of the CSS Typed Object Model API represents values for properties that take a position, for example object-position.Creates a new CSSPositionValue object.Returns the item's position along the web page's horizontal axis.Returns the item's position along the vertical axis.None.The following example positions a container <div> 5 pixels from the top and 10 pixels from the left of the page.We set the object-position property, then check the values returned.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPositionValue"
},
{
	"api_id": "240",
	"name": "CSSPrimitiveValue",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The CSSPrimitiveValue interface derives from the CSSValue interface and represents the current computed value of a CSS property.\n  Note: This interface was part of an attempt to create a typed CSS Object Model. This attempt has been abandoned, and most browsers do\n  not implement it.\n  To achieve your purpose, you can use:This interface represents a single CSS value. It may be used to determine the value of a specific style property currently set in a block or to set a specific style property explicitly within the block. An instance of this interface might be obtained from the getPropertyCSSValue() method of the CSSStyleDeclaration interface. A CSSPrimitiveValue object only occurs in a context of a CSS property.Conversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, and so on) but not between relative values. (For example, a pixel value cannot be converted to a centimeter value.) Percentage values can't be converted since they are relative to the parent value (or another property value). There is one exception for color percentage values: since a color percentage value is relative to the range 0-255, a color percentage value can be converted to a number (see also the RGBColor interface).Inherits properties from its parent, CSSValue.An unsigned short representing the type of the value. Possible values are:This method is used to get the counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface.This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised.A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised.A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.\n  This feature was originally defined in the DOM Style Level 2 specification, but has been dropped from any\n  standardization effort since then.\nIt has been superseded by a modern, but incompatible, CSS Typed Object Model API that is now on the standard track.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue"
},
{
	"api_id": "241",
	"name": "CSSPropertyRule",
	"description": "The CSSPropertyRule interface of the CSS_Properties_and_Values_API represents a single CSS @property rule.Inherits properties from its ancestor CSSRule.Returns the inherit flag of the custom property.Returns the initial value of the custom property.Returns the name of the custom property.Returns the literal syntax of the custom property.No specific methods; inherits methods from its ancestor CSSRule.This stylesheet contains a single @property rule. The first CSSRule returned will be a CSSPropertyRule with the properties and values as defined by the rule in CSS.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPropertyRule"
},
{
	"api_id": "242",
	"name": "CSSPseudoElement",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSPseudoElement interface represents a pseudo-element that may be the target of an event or animated using the Web Animations API. Instances of this interface may be obtained by calling Element.pseudo().Returns the originating/parent Element of the pseudo-element.Returns the pseudo-element selector as a string.CSSPseudoElement extends EventTarget, so it inherits the following methods:Registers an event handler of a specific event type on the pseudo-element.Dispatches an event to this pseudo-element.Removes an event listener from the pseudo-element.Using pseudo-elements, most modern browsers will automatically add quotation marks around text inside a <q> element. (A style rule may be needed to add quotation marks in older browsers.) The example below demonstrates the basic properties of the CSSPseudoElement object representing the opening quotation mark.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement"
},
{
	"api_id": "243",
	"name": "CSSRotate",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSRotate interface of the CSS_Object_Model#css_typed_object_model represents the rotate value of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSRotate object.Returns or sets the x-axis value.Returns or sets the y-axis value.Returns or sets the z-axis value.Returns or sets the angle value.To do.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSRotate"
},
{
	"api_id": "244",
	"name": "CSSRule",
	"description": "The CSSRule interface represents a single CSS rule. There are several types of rules which inherit properties from CSSRule.The CSSRule interface specifies the properties common to all rules, while properties unique to specific rule types are specified in the more specialized interfaces for those rules' respective types.Represents the textual representation of the rule, e.g. "h1,h2 { font-size: 16pt
	}" or "@import 'url'". To access or modify parts of the rule (e.g. the value of "font-size" in the example) use the properties on the specialized interface for the rule's type.Returns the containing rule, otherwise null. E.g. if this rule is a style rule inside an @media block, the parent rule would be that CSSMediaRule.Returns the CSSStyleSheet object for the style sheet that contains this ruleReturns one of the Type constants to determine which type of rule is represented.References to a CSSRule may be obtained by looking at a CSSStyleSheet's cssRules list.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSRule"
},
{
	"api_id": "245",
	"name": "CSSRuleList",
	"description": "A CSSRuleList represents an ordered collection of read-only CSSRule objects.While the CSSRuleList object is read-only, and cannot be directly modified, it is considered a live object, as the content can change over time.To edit the underlying rules returned by CSSRule objects, use CSSStyleSheet.insertRule() and CSSStyleSheet.deleteRule(), which are methods of CSSStyleSheet.The interface has no constructor. An instance of CSSRuleList is returned by CSSStyleSheet.cssRules and CSSKeyframesRule.cssRules.Returns an integer representing the number of CSSRule objects in the collection.Gets a single CSSRule.In the following example there is a stylesheet with three rules. Using CSSStyleSheet.cssRules returns a CSSRuleList, which is printed to the console.The number of rules in the list is printed to the console using CSSRuleList.length. The first CSSRule can be returned by using 0 as the parameter for CSSRuleList.item, in the example this will return the rules set for the body selector.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList"
},
{
	"api_id": "246",
	"name": "CSSScale",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSScale interface of the CSS_Object_Model#css_typed_object_model represents the scale() and scale3d() values of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSScale object.Returns or sets the x-axis value.Returns or sets the y-axis value.Returns or sets the z-axis value.To do.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSScale"
},
{
	"api_id": "247",
	"name": "CSSSkew",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSSkew interface of the CSS_Object_Model#css_typed_object_model is part of the CSSTransformValue interface. It represents the skew() value of the individual transform property in CSS.Creates a new CSSSkew object.Returns or sets the x-axis value.Returns or sets the y-axis value.To Do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSSkew"
},
{
	"api_id": "248",
	"name": "CSSSkewX",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSSkewX interface of the CSS_Object_Model#css_typed_object_model represents the skewX() value of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSSkewX object.Returns or sets the x-axis value.To Do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSSkewX"
},
{
	"api_id": "249",
	"name": "CSSSkewY",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSSkewY interface of the CSS_Object_Model#css_typed_object_model represents the skewY() value of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSSkewY object.Inherits properties from its ancestor CSSTransformValue.Returns or sets the y-axis value.Inherits methods from its ancestor CSSTransformValue.To Do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSSkewY"
},
{
	"api_id": "250",
	"name": "CSSStyleDeclaration",
	"description": "The CSSStyleDeclaration interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.A CSSStyleDeclaration object can be exposed using three different APIs:Textual representation of the declaration block, if and only if it is exposed via HTMLElement.style. Setting this attribute changes the inline style. If you want a text representation of a computed declaration block, you can get it with JSON.stringify().The number of properties. See the item() method below.The containing CSSRule.Special alias for the float CSS property.Dashed and camel-cased attributes for all supported CSS properties.Returns the optional priority, "important".Returns the property value given a property name.Returns a CSS property name by its index, or the empty string if the index is out-of-bounds.Removes a property from the CSS declaration block.Modifies an existing CSS property or creates a new CSS property in the declaration block.Only supported via getComputedStyle in Firefox. Returns the property value as a CSSPrimitiveValue or null for shorthand properties.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration"
},
{
	"api_id": "251",
	"name": "CSSStyleRule",
	"description": "The CSSStyleRule interface represents a single CSS style rule.Inherits properties from its ancestor CSSRule.Returns the textual representation of the selector for this rule, e.g. "h1,h2".Returns the CSSStyleDeclaration object for the rule.Returns a StylePropertyMap object which provides access to the rule's property-value pairs.No specific methods; inherits methods from its ancestor CSSRule.\n  The CSS includes one style rule. This will be the first CSSRule returned by document.styleSheets[0].cssRules.\n  myRules[0] therefore returns a CSSStyleRule object representing the rule defined for h1.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule"
},
{
	"api_id": "252",
	"name": "CSSStyleSheet",
	"description": "The CSSStyleSheet interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet. It inherits properties and methods from its parent, StyleSheet.A stylesheet consists of a collection of CSSRule objects representing each of the rules in the stylesheet. The rules are contained in a CSSRuleList, which can be obtained from the stylesheet's cssRules property.For example, one rule might be a CSSStyleRule object containing a style such as:Another rule might be an at-rule such as @import or @media, and so forth.See the Obtaining a StyleSheet section for the various ways a CSSStyleSheet object can be obtained. A CSSStyleSheet object can also be directly constructed. The constructor, and the CSSStyleSheet.replace(), and CSSStyleSheet.replaceSync() methods are newer additions to the specification, enabling Constructable Stylesheets.Creates a new CSSStyleSheet object.Inherits properties from its parent, StyleSheet.Returns a live CSSRuleList which maintains an up-to-date list of the CSSRule objects that comprise the stylesheet.Note: In some browsers, if a stylesheet is loaded from a different domain, accessing cssRules results in a SecurityError.If this stylesheet is imported into the document using an @import rule, the ownerRule property returns the corresponding CSSImportRule; otherwise, this property's value is null.Inherits methods from its parent, StyleSheet.Deletes the rule at the specified index into the stylesheet's rule list.Inserts a new rule at the specified position in the stylesheet, given the textual representation of the rule.Asynchronously replaces the content of the stylesheet and returns a Promise that resolves with the updated CSSStyleSheet.Synchronously replaces the content of the stylesheet.These properties are legacy properties as introduced by Microsoft; these are maintained for compatibility with existing sites.The rules property is functionally identical to the standard cssRules property; it returns a live CSSRuleList which maintains an up-to-date list of all of the rules in the style sheet.These methods are legacy methods as introduced by Microsoft; these are maintained for compatibility with existing sites.Adds a new rule to the stylesheet given the selector to which the style applies and the style block to apply to the matching elements.This differs from insertRule(), which takes the textual representation of the entire rule as a single string.Functionally identical to deleteRule(); removes the rule at the specified index from the stylesheet's rule list.A stylesheet is associated with at most one Document, which it applies to (unless disabled). A list of CSSStyleSheet objects for a given document can be obtained using the Document.styleSheets property. A specific style sheet can also be accessed from its owner object (Node or CSSImportRule), if any.A CSSStyleSheet object is created and inserted into the document's Document.styleSheets list automatically by the browser, when a stylesheet is loaded for a document.A (possibly incomplete) list of ways a stylesheet can be associated with a document follows:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet"
},
{
	"api_id": "253",
	"name": "CSSStyleValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSStyleValue interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API. An instance of this class may be used anywhere a string is expected.Below is a list of interfaces based on the CSSStyleValue interface.Sets a specific CSS property to the specified values and returns the first value as a CSSStyleValue object.Sets all occurrences of a specific CSS property to the specified value and returns an array of CSSStyleValue objects, each containing one of the supplied values.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleValue"
},
{
	"api_id": "254",
	"name": "CSSSupportsRule",
	"description": "The CSSSupportsRule interface represents a single CSS @supports at-rule.Inherits properties from its ancestors CSSConditionRule, CSSGroupingRule, and CSSRule.Inherits methods from its ancestors CSSConditionRule, CSSGroupingRule, and CSSRule.\n  The CSS includes a CSS feature query using the @supports at-rule, containing one style rule. This will be the first CSSRule returned by document.styleSheets[0].cssRules.\n  myRules[0] therefore returns a CSSSupportsRule object.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule"
},
{
	"api_id": "255",
	"name": "CSSTransformComponent",
	"description": "The CSSTransformComponent interface of the CSS_Object_Model#css_typed_object_model is part of the CSSTransformValue interface.Returns a boolean indicting whether the transform is 2D or 3D.Returns a new DOMMatrix object.A string in the form of a CSS transforms function.This will use the value of is2D to return either a 2D or 3D transform. For example if the component represents CSSRotate and is2D is false then the string returned will be in the form of the CSS transformation rotate3D() function. If true the string returned will be in the form of the 2-dimensional rotate3D() function.To do",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSTransformComponent"
},
{
	"api_id": "256",
	"name": "CSSTransformValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSTransformValue interface of the CSS_Object_Model#css_typed_object_model represents transform-list values as used by the CSS transform property.Below is a list of interfaces based on the CSSTransformValue interface.Creates a new CSSTransformValue object.Returns how many transform components are contained within the CSSTransformValue.Returns a boolean indicating whether the transform is 2D or 3D.Inherits methods from its ancestor CSSStyleValue.Returns a new DOMMatrix object.Returns an array of a given object's own enumerable property [key, value] pairs in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).Executes a provided function once for each element of the CSSTransformValue object.Returns a new array iterator object that contains the keys for each index in the CSSTransformValue object.Returns a new array iterator object that contains the values for each index in the CSSTransformValue object.To Do.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSTransformValue"
},
{
	"api_id": "257",
	"name": "CSSTransition",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSTransition interface of the Web Animations API represents an Animation object used for a CSS Transition.Inherits methods from its ancestor Animation and adds transitionProperty.Returns the transition CSS property name as a string.No specific event handlers; inherits methods from its ancestor Animation.No specific methods; inherits methods from its ancestor Animation.The transition in the following example changes the width of the box on hover. Calling Element.getAnimations() returns an array of all Animation objects. In our case this returns a CSSTransition object, representing the animation created.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSTransition"
},
{
	"api_id": "258",
	"name": "CSSTranslate",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSTranslate interface of the CSS_Object_Model#css_typed_object_model represents the translate() value of the individual transform property in CSS. It inherits properties and methods from its parent CSSTransformValue.Creates a new CSSTranslate object.Returns or sets the x-axis value.Returns or sets the y-axis value.Returns or sets the z-axis value.To do.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSTranslate"
},
{
	"api_id": "259",
	"name": "CSSUnitValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSUnitValue interface of the CSS_Object_Model#css_typed_object_model represents values that contain a single unit type. For example, "42px" would be represented by a CSSNumericValue.Creates a new CSSUnitValue object.Returns a double indicating the number of units.Returns a string indicating the type of unit.None.None.The following shows a method of creating a CSSPositionValue from individual CSSUnitValue constructors.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSUnitValue"
},
{
	"api_id": "260",
	"name": "CSSUnparsedValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSUnparsedValue interface of the CSS_Object_Model#css_typed_object_model represents property values that reference custom properties. It consists of a list of string fragments and variable references.Custom properties are represented by CSSUnparsedValue and var() references are represented using CSSVariableReferenceValue.Creates a new CSSUnparsedValue object.Returns the number of items in the CSSUnparsedValue object.Returns an array of a given object's own enumerable property [key, value] pairs in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).Executes a provided function once for each element of the CSSUnparsedValue object.Returns a new array iterator object that contains the keys for each index in the CSSUnparsedValue object.Returns a new array iterator object that contains the values for each index in the CSSUnparsedValue object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSUnparsedValue"
},
{
	"api_id": "261",
	"name": "CSSValue",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The CSSValue interface represents the current computed value of a CSS property.\n  Note: This interface was part of an attempt to create a typed CSS Object Model. This attempt has been abandoned, and most browsers do\n  not implement it.\n  To achieve your purpose, you can use:A string representing the current value.An unsigned short representing a code defining the type of the value. Possible values are:\n  This feature was originally defined in the DOM Style Level 2 specification, but has been dropped from any\n  standardization effort since then.\nIt has been superseded by a modern, but incompatible, CSS Typed Object Model API that is now on the standard track.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSValue"
},
{
	"api_id": "262",
	"name": "CSSValueList",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The CSSValueList interface derives from the CSSValue interface and provides the abstraction of an ordered collection of CSS values.\n  Note: This interface was part of an attempt to create a typed CSS Object Model. This attempt has been abandoned, and most browsers do\n  not implement it.\n  To achieve your purpose, you can use:Some properties allow an empty list in their syntax. In that case, these properties take the none identifier. So, an empty list means that the property has the value none.The items in the CSSValueList are accessible via an integral index, starting from 0.Inherits properties from its parent, CSSValue.An unsigned long representing the number of CSSValues in the list.This method is used to retrieve a CSSValue by ordinal index. The order in this collection represents the order of the values in the CSS style property. If index is greater than or equal to the number of values in the list, this returns null.\n  This feature was originally defined in the DOM Style Level 2 specification, but has been dropped from any\n  standardization effort since then.\nIt has been superseded by a modern, but incompatible, CSS Typed Object Model API that is now on the standard track.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList"
},
{
	"api_id": "263",
	"name": "CSSVariableReferenceValue",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The CSSVariableReferenceValue interface of the CSS_Object_Model#css_typed_object_model allows you to create a custom name for a built-in CSS value. This object functionality is sometimes called a "CSS variable" and serves the same purpose as the var() function. The custom name must begin with two dashes.Creates a new CSSVariableReferenceValue object.Returns the custom name passed to the constructor.Returns the built-in CSS value for the custom name.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSVariableReferenceValue"
},
{
	"api_id": "264",
	"name": "CustomElementRegistry",
	"description": "The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property.Defines a new custom element.Returns the constructor for the named custom element, or undefined if the custom element is not defined.Upgrades a custom element directly, even before it is connected to its shadow root.Returns an empty Promise that resolves when a custom element becomes defined with the given name. If such a custom element is already defined, the returned promise is immediately fulfilled.The following code is taken from our word-count-web-component example (see it live also). Note how we use the CustomElementRegistry.define() method to define the custom element after creating its class.Note: The CustomElementRegistry is available through the Window.customElements property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry"
},
{
	"api_id": "265",
	"name": "CustomEvent",
	"description": "The CustomEvent interface represents events initialized by an application for any purpose.Note: This feature is available in Web WorkersCreates a new CustomEvent.This interface inherits properties from its parent, Event.Returns any data passed when initializing the event.This interface inherits methods from its parent, Event.Initializes a CustomEvent object. If the event has already being dispatched, this method does nothing.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"
},
{
	"api_id": "266",
	"name": "CustomStateSet",
	"description": "The CustomStateSet interface of the Document_Object_Model stores a list of possible states for a custom element to be in, and allows states to be added and removed from the set.An HTML form element, such as a checkbox has different states, "checked" and "unchecked". Likewise, developers creating custom elements need to assign possible states to these elements. The CustomStateList allows these states to be stored, and accessed from the custom element.A instance of CustomStateList is returned by ElementInternals.states. The CustomStateList object is described as setlike, and therefore the methods behave in a similar manner to those on a Set.Each value stored in a CustomStateList is a <dashed-ident>, in the format --mystate.\n  States are stored as a <dashed-ident> as this format can then be accessed from CSS using the custom state pseudo-class.\n  In the same way that you can use CSS to determine if a checkbox is checked using the :checked pseudo-class,\n  you can use a custom state pseudo-class to select a custom element that is in a certain state.\nReturns the number of values in the CustomStateSet.Adds a value to the set, first checking that the value is a <dashed-ident>.Removes all elements from the CustomStateSet object.Removes one value from the CustomStateSet object.Returns a new iterator with the values for each element in the CustomStateSet in insertion order.Executes a provided function for each value in the CustomStateSet object.Returns a Boolean asserting whether an element is present with the given value.An alias for CustomStateSet.values().Returns a new iterator object that yields the values for each element in the CustomStateSet object in insertion order.The following function adds and removes the state --checked to a CustomStateSet, then prints to the console true or false as the custom checkbox is checked or unchecked.The state of the element can be accessed from CSS using the custom state pseudo-class --checked.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet"
},
{
	"api_id": "267",
	"name": "DataTransfer",
	"description": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.This object is available from the dataTransfer property of all drag events.Creates and returns a new DataTransfer object.Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be none, copy, link or move.Provides all of the types of operations that are possible. Must be one of none, copy, copyLink, copyMove, link, linkMove, move, all or uninitialized.Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.Gives a DataTransferItemList object which is a list of all of the drag data.An array of strings giving the formats that were set in the dragstart event.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Note: All of the properties in this section are Gecko-specific.Gives the drag cursor's state. This is primarily used to control the cursor during tab drags.The Node over which the mouse cursor was located when the button was pressed to initiate the drag operation. This value is null for external drags or if the caller can't access the node.This property applies only to the dragend event, and is true if the user canceled the drag operation by pressing escape. It will be false in all other cases, including if the drag failed for any other reason, for instance due to a drop over an invalid location.Gives the number of items in the drag operation. Removed in Firefox 71.Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.Set the image to be used for dragging if a custom one is desired.Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Note: All of the methods in this section are Gecko-specific.Sets the drag source to the given element.Removes the data associated with the given format for an item at the specified index. The index is in the range from zero to the number of items minus one. Removed in Firefox 71.Retrieves the data associated with the given format for an item at the specified index, or null if it does not exist. The index should be in the range from zero to the number of items minus one. Removed in Firefox 71.A data transfer may store multiple items, each at a given zero-based index. mozSetDataAt() may only be called with an index argument less than mozItemCount in which case an existing item is modified, or equal to mozItemCount in which case a new item is added, and the mozItemCount is incremented by one. Removed in Firefox 71.Holds a list of the format types of the data that is stored for an item at the specified index. If the index is not in the range from 0 to the number of items minus one, an empty string list is returned. Removed in Firefox 71.Every method and property listed in this document has its own reference page and each reference page either directly includes an example of the interface or has a link to an example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer"
},
{
	"api_id": "268",
	"name": "DataTransferItem",
	"description": "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.This interface has no constructor.The kind of drag data item, string or file.The drag data item's type, typically a MIME type.Returns the File object associated with the drag data item (or null if the drag item is not a file).Returns a FileSystemFileHandle if the dragged item is a file, or a FileSystemDirectoryHandle if the dragged item is a directory.Invokes the specified callback with the drag data item string as its argument.Returns an object based on FileSystemEntry representing the selected file's entry in its file system. This will generally be either a FileSystemFileEntry or FileSystemDirectoryEntry object.All of this interface's methods and properties have their own reference page, and each reference page has an example of its usage.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem"
},
{
	"api_id": "269",
	"name": "DataTransferItemList",
	"description": "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.The individual items can be accessed using the array operator [].This interface has no constructor.An unsigned long that is the number of drag items in the list.Adds an item (either a File object or a string) to the drag item list and returns a DataTransferItem object for the new item.Removes the drag item from the list at the given index.Removes all of the drag items from the list.Getter that returns a DataTransferItem at the given index.This example shows how to use drag and drop.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList"
},
{
	"api_id": "270",
	"name": "DecompressionStream",
	"description": "The DecompressionStream interface of the Compression Streams API is an API for decompressing a stream of data.Creates a new DecompressionStreamReturns the ReadableStream instance controlled by this object.Returns the WritableStream instance controlled by this object.In this example a blob is decompressed using gzip compression.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DecompressionStream"
},
{
	"api_id": "271",
	"name": "DedicatedWorkerGlobalScope",
	"description": "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.This interface inherits properties from the WorkerGlobalScope interface, and its parent EventTarget.The name that the Worker was (optionally) given when it was created using the Worker() constructor. This is mainly useful for debugging purposes.Returns an object reference to the DedicatedWorkerGlobalScope object itself.Returns the console associated with the worker.Returns the WorkerLocation associated with the worker. WorkerLocation is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.Returns the WorkerNavigator associated with the worker. WorkerNavigator is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.Returns the Performance object associated with the worker, which is a regular performance object, but with a subset of its properties and methods available.This interface inherits methods from the WorkerGlobalScope interface, and its parent EventTarget.Discards any tasks queued in the WorkerGlobalScope's event loop, effectively closing this particular scope.Sends a message — which can consist of any JavaScript object — to the parent document that first spawned the worker.Writes a message to the console.Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example: importScripts('foo.js', 'bar.js');Decodes a string of data which has been encoded using base-64 encoding.Creates a base-64 encoded ASCII string from a string of binary data.Cancels the repeated execution set using setInterval.Cancels the repeated execution set using setTimeout.Schedules the execution of a function every X milliseconds.Sets a delay for executing a function.Fired when the worker receives a message from its parent.Fired when a worker receives a message that can't be deserialized.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope"
},
{
	"api_id": "272",
	"name": "DelayNode",
	"description": "The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.A DelayNode always has exactly one input and one output, both with the same amount of channels.\n  \nWhen creating a graph that has a cycle, it is mandatory to have at least one DelayNode in the cycle, or the nodes taking part in the cycle will be muted.Creates a new instance of an DelayNode object instance. As an alternative, you can use the BaseAudioContext.createDelay() factory method; see Creating an AudioNode.Inherits properties from its parent, AudioNode.An a-rate AudioParam representing the amount of delay to apply, specified in seconds.No specific methods; inherits methods from its parent, AudioNode.See BaseAudioContext.createDelay() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DelayNode"
},
{
	"api_id": "273",
	"name": "DeprecationReportBody",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The DeprecationReportBody interface of the Reporting API represents the body of a deprecation report.A deprecation report is generated when a deprecated feature (for example a deprecated API method) is used on a document being observed by a ReportingObserver. In addition to the support of this API, receiving useful deprecation warnings relies on browser vendors adding these warnings for deprecated features.An instance of DeprecationReportBody is returned as the value of Report.body when Report.Type is deprecation. The interface has no constructor.This interface also inherits properties from ReportBody.A string representing the feature or API that is deprecated, for example NavigatorGetUserMedia. This can be used to group reports by deprecated feature.A Date object (rendered as a string) representing the date when the feature is expected to be removed from the current browser. If the date is not known, this property will return null.A string containing a human-readable description of the deprecation, including information such as what newer feature has superseded it, if any. This typically matches the message a browser will display in its DevTools console when a deprecated feature is used, if one is available.A string containing the path to the source file where the deprecated feature was used, if known, or null otherwise.A number representing the line in the source file in which the deprecated feature was used, if known, or null otherwise.A number representing the column in the source file in which the deprecated feature was used, if known, or null otherwise.This interface also inherits methods from ReportBody.A serializer which returns a JSON representation of the InterventionReportBody object.In our deprecation_report.html example, we create a simple reporting observer to observe usage of deprecated features on our web page:We then tell it to start observing reports using ReportingObserver.observe(); this tells the observer to start collecting reports in its report queue, and runs the callback function specified inside the constructor:Because of the event handler we set up inside the ReportingObserver() constructor, we can now click the button to display the report details.\n  \nThe report details are displayed via the displayReports() function, which takes the observer callback's reports parameter as its parameter:The reports parameter contains an array of all the reports in the observer's report queue. We loop over each report using a basic for loop, then iterate over each entry of in the report's body (a DeprecationReportBody instance) using a for...in structure, displaying each key/value pair inside a list item.This feature is not yet available by default in any released browser. It can be activated in Firefox by setting dom_reporting_enabled to true and in Chrome if you enable this experimental feature.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DeprecationReportBody"
},
{
	"api_id": "274",
	"name": "DeviceMotionEvent",
	"description": "The DeviceMotionEvent interface provides web developers with information about the speed of changes for the device's position and orientation.Warning: Currently, Firefox and Chrome do not handle the coordinates the same way. Take care about this while using them.Creates a new DeviceMotionEvent.An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in m/s².An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in m/s².An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is expressed in degrees per seconds.A number representing the interval of time, in milliseconds, at which data is obtained from the device.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent"
},
{
	"api_id": "275",
	"name": "DeviceMotionEventAcceleration",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The DeviceMotionEventAcceleration object provides information about the amount of acceleration the device is experiencing along all three axes.The amount of acceleration along the X axis.The amount of acceleration along the Y axis.The amount of acceleration along the Z axis.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventAcceleration"
},
{
	"api_id": "276",
	"name": "DeviceMotionEventRotationRate",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.A DeviceMotionEventRotationRate object provides information about the rate at which the device is rotating around all three axes.The amount of rotation around the Z axis, in degrees per second.The amount of rotation around the X axis, in degrees per second.The amount of rotation around the Y axis, in degrees per second.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEventRotationRate"
},
{
	"api_id": "277",
	"name": "DeviceOrientationEvent",
	"description": "\n  Creates a new DeviceOrientationEvent.A boolean that indicates whether or not the device is providing orientation data absolutely.A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 (inclusive) to 360 (exclusive).A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 (inclusive) to 180 (exclusive). This represents a front to back motion of the device.A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 (inclusive) to 90 (exclusive). This represents a left to right motion of the device.A number represents the difference between the motion of the device around the z axis of the world system and the direction of the north, express in degrees with values ranging from 0 to 360.The accuracy of the compass means that the deviation is positive or negative. It's usually 10.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent"
},
{
	"api_id": "278",
	"name": "DeviceProximityEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Warning: DeviceProximityEvent is not supported by any current major browser, and should not be used.The DeviceProximityEvent interface provides information about the distance of a nearby physical object using the proximity sensor of a device.The maximum sensing distance the sensor is able to report, in centimeters.The minimum sensing distance the sensor is able to report, in centimeters. Usually zero.The current device proximity, in centimeters.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent"
},
{
	"api_id": "279",
	"name": "DirectoryEntrySync",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The DirectoryEntrySync interface represents a directory in a file system. It includes methods for creating, reading, looking up, and recursively removing files in a directory.\n  Warning: This interface is deprecated and is no more on the standard track.\n  Do not use it anymore. Use the File and Directory Entries API instead.\n  If you want to create subdirectories, you have to create each child directory in sequence. If you try to create a directory using a full path that includes parent directories that do not exist yet, you get an error. So create the hierarchy by recursively adding a new path after creating the parent directory.The getFile() method returns a FileEntrySync, which represents a file in the file system. The following creates an empty file called logs.txt in the root directory.The getDirectory() method returns a DirectoryEntrySync, which represents a file in the file system. The following creates a new directory called project_dir in the root directory.Creates a new DirectoryReaderSync to read entries from this directory.Represents a directory in a file system.NoneThis method can raise a DOMException with the following codes:Depending on how you've set the options parameter, the method either creates a file or looks up an existing file.Either an absolute path or a relative path from the directory to the file to be looked up or created. You cannot create a file whose immediate parent does not exist. Create the parent directory first.An object literal describing the behavior of the method. If the file does not exist, it is created.Represents a file in a file system.This method can raise a DOMException with the following codes:Creates or looks up a directory. The method is similar to getFile() with DirectoryEntrySync being passed.Either an absolute path or a relative path from the directory to the file to be looked up or created. You cannot create a file whose immediate parent does not exist. Create the parent directory first.An object literal describing the behavior of the method if the file does not exist.Represents a directory in a file system.This method can raise a DOMException with the following codes:Deletes a directory and all of its contents. You cannot delete the root directory of a file system.If you delete a directory that contains a file that cannot be removed or if an error occurs while the deletion is in progress, some of the contents might not be deleted. Catch these cases with error callbacks and retry the deletion.NoneThis method can raise a DOMException with the following codes:[todo: Explain more ]\n  This feature is not part of any current specification. It is no longer on track to become a standard.\n  Use the [File and Directory Entries API](/en-US/docs/Web/API/File_and_Directory_Entries API) instead.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DirectoryEntrySync"
},
{
	"api_id": "280",
	"name": "DirectoryReaderSync",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The DirectoryReaderSync interface lets you read the entries in a directory.\n  Warning: This interface is deprecated and is no more on the standard track.\n  Do not use it anymore. Use the File and Directory Entries API instead.\n  Before you call the only method in this interface, readEntries(), create the DirectoryEntrySync object. But DirectoryEntrySync (as well as FileEntrySync) is not a data type that you can pass between a calling app and Web Worker thread. It's not a big deal, because you don't really need to have the main app and the worker thread see the same JavaScript object; you just need them to access the same files. You can do that by passing a list of filesystem: URLs—which are just strings—instead of a list of entries. You can also use the filesystem: URL to look up the entry with resolveLocalFileSystemURL()). That gets you back to a DirectoryEntrySync (as well as FileEntrySync) object.In the following code snippet from HTML5Rocks, we create Web Workers and pass data from it to the main app.The following is Worker.js code that gets the contents of the directory.Returns a lost of entries from a specific directory. Call this method until an empty array is returned.NoneThis method can raise a DOMException with the following codes:This feature is not part of any specification anymore. It is no longer on track to become a standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReaderSync"
},
{
	"api_id": "281",
	"name": "Document",
	"description": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.The Document interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g. HTML, XML, SVG, …), a larger API is available: HTML documents, served with the "text/html" content type, also implement the HTMLDocument interface, whereas XML and SVG documents implement the XMLDocument interface.Creates a new Document object.This interface also inherits from the Node and EventTarget interfaces.Returns the Element that currently has focus.\n  Add an array of constructed stylesheets to be used by the document.\n  These stylesheets may also be shared with shadow DOM subtrees of the same document.\n  Returns the <body> or <frameset> node of the current document.Returns the character set being used by the document.Returns the number of child elements of the current document.Returns the child elements of the current document.Indicates whether the document is rendered in quirks or strict mode.Returns the Content-Type from the MIME Header of the current document.Returns the <script> element whose script is currently being processed and isn't a JavaScript module.Returns the Document Type Definition (DTD) of the current document.Returns the Element that is a direct child of the document. For HTML documents, this is normally the HTMLHtmlElement object representing the document's <html> element.Returns the document location as a string.Returns an HTMLCollection of the embedded <embed> elements in the document.Returns the first child element of the current document.Returns the FontFaceSet interface of the current document.Returns an HTMLCollection of the <form> elements in the document.The element that's currently in full screen mode for this document.Returns the <head> element of the current document.Returns a Boolean value indicating if the page is considered hidden or not.Returns an HTMLCollection of the images in the document.Returns the DOM implementation associated with the current document.Returns the last child element of the current document.Returns an HTMLCollection of the hyperlinks in the document.Returns true only if this document is synthetic, such as a standalone image, video, audio file, or the like.Returns the Element currently being presented in picture-in-picture mode in this document.Returns true if the picture-in-picture feature is enabled.Returns an HTMLCollection of the available plugins.Returns the element set as the target for mouse events while the pointer is locked. null if lock is pending, pointer is unlocked, or if the target is in another document.Returns the FeaturePolicy interface which provides a simple API for introspecting the feature policies applied to a specific document.Returns an HTMLCollection of the <script> elements in the document.Returns a reference to the Element that scrolls the document.Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document.Returns timeline as a special instance of DocumentTimeline that is automatically created on page load.Returns a string denoting the visibility state of the document. Possible values are visible, hidden, prerender, and unloaded.The Document interface for HTML documents inherits from the HTMLDocument interface or, since HTML5, is extended for such documents.Returns a semicolon-separated list of the cookies for that document or sets a single cookie.Returns a reference to the window object.Gets/sets the ability to edit the whole document.Gets/sets directionality (rtl/ltr) of the document.Gets/sets the domain of the current document.Returns the date on which the document was last modified.Returns the URI of the current document.Returns loading status of the document.Returns the URI of the page that linked to this page.Sets or gets the title of the current document.Returns the document location as a string.The Document interface is extended with additional event handlers defined in GlobalEventHandlers.An event handler representing the code to be called when the selectionchange event is raised.Returns or sets the color of active links in the document body.Provides access to all elements in the document — it returns an HTMLAllCollection rooted at the document node. This is a legacy, non-standard property and should not be used.Returns a list of all of the anchors in the document.Returns an ordered list of the applets within a document.Gets/sets the background color of the current document.Alias of Document.characterSet. Use this property instead.Gets/sets the foreground color, or text color, of the current document.true when the document is in fullscreen mode.Gets/sets the height of the current document.Alias of Document.characterSet. Use this property instead.Returns the name of the style sheet set that was last enabled. Has the value null until the style sheet is changed by setting the value of selectedStyleSheetSet.Gets/sets the color of hyperlinks in the document.Returns the preferred style sheet set as specified by the page author.Like Document.documentElement, but only for <svg> root elements. Use this property instead.Returns which style sheet set is currently in use.Returns a list of the style sheet sets available on the document.Gets/sets the color of visited hyperlinks.Returns the width of the current document.Returns the encoding as determined by the XML declaration.Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false.Returns the version number as specified in the XML declaration or "1.0" if the declaration is absent.This interface also inherits from the Node and EventTarget interfaces.Adopt node from an external document.Inserts a set of Node objects or string objects after the last child of the document.See Window.captureEvents.Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node.Gets a Range object for the document fragment under the specified coordinates.Creates a new Attr object and returns it.Creates a new attribute node in a given namespace and returns it.Creates a new CDATA node and returns it.Creates a new comment node and returns it.Creates a new document fragment.Creates a new element with the given tag name.Creates a new element with the given tag name and namespace URI.Creates a new entity reference object and returns it.Creates an event object.Creates a NodeIterator object.Creates a new ProcessingInstruction object.Creates a Range object.Creates a text node.Creates a Touch object.Creates a TouchList object.Creates a TreeWalker object.Returns the topmost element at the specified coordinates.Returns an array of all elements at the specified coordinates.Enables the style sheets for the specified style sheet set.Remove the video from the floating picture-in-picture window back to its original container.Release the pointer lock.Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document.Returns a list of DOMQuad objects representing the CSS fragments of the node.Returns an object reference to the identified element.Returns a list of elements with the given class name.Returns a list of elements with the given tag name.Returns a list of elements with the given tag name and namespace.Returns a Selection object representing the range of text selected by the user, or the current position of the caret.Returns a Promise that resolves with a boolean value indicating whether the document has access to its first-party storage.Returns a clone of a node from an external document.Replaces entities, normalizes text nodes, etc.Inserts a set of Node objects or string objects before the first child of the document.Returns the first Element node within the document, in document order, that matches the specified selectors.Returns a list of all the Element nodes within the document that match the specified selectors.Releases the current mouse capture if it's on an element in this document.See Window.releaseEvents().Replaces the existing children of a document with a specified new set of children.Returns a Promise that resolves if the access to first-party storage was granted, and rejects if access was denied.Allows you to change the element being used as the background image for a specified element ID.The Document interface is extended with the XPathEvaluator interface:Compiles an XPathExpression which can then be used for (repeated) evaluations.Creates an XPathNSResolver object.Evaluates an XPath expression.The Document interface for HTML documents inherit from the HTMLDocument interface or, since HTML5, is extended for such documents:In majority of modern browsers, including recent versions of Firefox and Internet Explorer, this method does nothing.Closes a document stream for writing.On an editable document, executes a formatting command.Returns a list of elements with the given name.Returns true if the focus is currently located anywhere inside the specified document.Opens a document stream for writing.Returns true if the formatting command can be executed on the current range.Returns true if the formatting command is in an indeterminate state on the current range.Returns true if the formatting command has been executed on the current range.Returns true if the formatting command is supported on the current range.Returns the current value of the current range for a formatting command.Writes text in a document.Writes a line of text in a document.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired when a static <script> element finishes executing its scriptFired when a static <script> is about to start executing.\n  Fired when the document view or an element has been scrolled.\n  Also available via the onscroll property.\n  Fired when the content of a tab has become visible or has been hidden.\n  Fired when the user rotates a wheel button on a pointing device (typically a mouse).\n  Also available via the onwheel property.\n  \n  Fired when an animation unexpectedly aborts.\n  Also available via the onanimationcancel property.\n  \n  Fired when an animation has completed normally.\n  Also available via the onanimationend property.\n  \n  Fired when an animation iteration has completed.\n  Also available via the onanimationiteration property.\n  \n  Fired when an animation starts.\n  Also available via the onanimationstart property.\n  Fired when the user initiates a copy action through the browser's user interface.Fired when the user initiates a cut action through the browser's user interface.Fired when the user initiates a paste action through the browser's user interface.\n  Fired every few hundred milliseconds as an element or text selection is being dragged by the user.\n  Also available via the ondrag property.\n  \n  Fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n  Also available via the ondragend property.\n  \n  Fired when a dragged element or text selection enters a valid drop target.\n  Also available via the ondragenter property.\n  \n  Fired when a dragged element or text selection leaves a valid drop target.\n  Also available via the ondragleave property.\n  \n  Fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).\n  Also available via the ondragover property.\n  \n  Fired when the user starts dragging an element or text selection.\n  Also available via the ondragstart property.\n  \n  Fired when an element or text selection is dropped on a valid drop target.\n  Also available via the ondrop property.\n  Fired when the Document transitions into or out of fullscreen mode.Fired if an error occurs while attempting to switch into or out of fullscreen mode.\n  Fired when a key is pressed.\n  Also available via the onkeydown property.\n  \n  Fired when a key that produces a character value is pressed down. \n  Deprecated\n\n  Also available via the onkeypress property.\n  \n  Fired when a key is released.\n  Also available via the onkeyup property.\n  Fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.Fired when the readyState attribute of a document has changed.\n  Fired when an element captures a pointer using setPointerCapture().\n  Also available via the ongotpointercapture property.\n  \n  Fired when a captured pointer is released.\n  Also available via the onlostpointercapture property.\n  \n  Fired when a pointer event is canceled.\n  Also available via the onpointercancel property.\n  \n  Fired when a pointer becomes active.\n  Also available via the onpointerdown property.\n  \n  Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants.\n  Also available via the onpointerenter property.\n  \n  Fired when a pointer is moved out of the hit test boundaries of an element.\n  Also available via the onpointerleave property.\n  \n  Fired when the pointer is locked/unlocked.\n  Also available via the onpointerlockchange property.\n  \n  Fired when locking the pointer failed.\n  Also available via the onpointerlockerror property.\n  \n  Fired when a pointer changes coordinates.\n  Also available via the onpointermove property.\n  \n  Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons).\n  Also available via the onpointerout property.\n  \n  Fired when a pointer is moved into an element's hit test boundaries.\n  Also available via the onpointerover property.\n  \n  Fired when a pointer is no longer active.\n  Also available via the onpointerup property.\n  \n  Fired when the current text selection on a document is changed.\n  Also available via the onselectionchange property.\n  \n  Fired when the user begins a new selection.\n  Also available via the onselectstart property.\n  \n  Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).\n  Also available via the ontouchcancel property.\n  \n  Fired when one or more touch points are removed from the touch surface.\n  Also available via the ontouchend property\n  \n  Fired when one or more touch points are moved along the touch surface.\n  Also available via the ontouchmove property\n  \n  Fired when one or more touch points are placed on the touch surface.\n  Also available via the ontouchstart property\n  \n  Fired when a CSS transition is canceled.\n  Also available via the ontransitioncancel property.\n  \n  Fired when a CSS transition has completed.\n  Also available via the ontransitionend property.\n  \n  Fired when a CSS transition is first created.\n  Also available via the ontransitionrun property.\n  \n  Fired when a CSS transition has actually started.\n  Also available via the ontransitionstart property.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Document"
},
{
	"api_id": "282",
	"name": "DocumentFragment",
	"description": "The DocumentFragment interface represents a minimal document object that has no parent.It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document (even on reflow) or incur any performance impact when changes are made.Creates and returns a new DocumentFragment object.This interface has no specific properties, but inherits those of its parent, Node.Returns the amount of child elements the DocumentFragment has.Returns a live HTMLCollection containing all objects of type Element that are children of the DocumentFragment object.Returns the Element that is the first child of the DocumentFragment object, or null if there is none.Returns the Element that is the last child of the DocumentFragment object, or null if there is none.This interface inherits the methods of its parent, Node.Inserts a set of Node objects or string objects after the last child of the document fragment.Inserts a set of Node objects or string objects before the first child of the document fragment.Returns the first Element node within the DocumentFragment, in document order, that matches the specified selectors.Returns a NodeList of all the Element nodes within the DocumentFragment that match the specified selectors.Replaces the existing children of a DocumentFragment with a specified new set of children.Returns the first Element node within the DocumentFragment, in document order, that matches the specified ID. Functionally equivalent to Document.getElementById().A common use for DocumentFragment is to create one, assemble a DOM subtree within it, then append or insert the fragment into the DOM using Node interface methods such as appendChild() or insertBefore(). Doing this moves the fragment's nodes into the DOM, leaving behind an empty DocumentFragment. Because all of the nodes are inserted into the document at once, only one reflow and render is triggered instead of potentially one for each node inserted if they were inserted separately.This interface is also of great use with Web components: <template> elements contain a DocumentFragment in their HTMLTemplateElement.content property.An empty DocumentFragment can be created using the document.createDocumentFragment() method or the constructor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
},
{
	"api_id": "283",
	"name": "DocumentTimeline",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The DocumentTimeline interface of the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).Creates a new DocumentTimeline object associated with the active document of the current browsing context.This interface inherits its property from its parent, AnimationTimeline.Returns the time value in milliseconds for this timeline or null if it is inactive.We could share a single documentTimeline among multiple animations, thus allowing us to manipulate just that group of animations via their shared timeline. This bit of code would start all the cats animating 500 milliseconds into their animations:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline"
},
{
	"api_id": "284",
	"name": "DocumentType",
	"description": "The DocumentType interface represents a Node containing a doctype.Inherits properties from its parent, Node.A string of the internal subset, or null if there is none. Eg "<!ELEMENT foo (bar)>".A string, eg "html" for <!DOCTYPE HTML>.A NamedNodeMap with notations declared in the DTD.A string, eg "- //W3C//DTD HTML 4.01//EN", empty string for HTML5.A string, eg "http://www.w3.org/TR/html4/strict.dtd", empty string for HTML5.Inherits methods from its parent, Node.\n  Inserts a set of Node or string objects in the children list of the\n  DocumentType's parent, just after the DocumentType object.\n  \n  Inserts a set of Node or string objects in the children list of the\n  DocumentType's parent, just before the DocumentType object.\n  Removes the object from its parent children list.Replaces the document type with a set of given nodes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType"
},
{
	"api_id": "285",
	"name": "DOMError",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The DOMError interface describes an error object that contains an error name.Returns a string representing one of the error type names (see below).Returns a string representing a message or description associated with the given error type name.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMError"
},
{
	"api_id": "286",
	"name": "DOMException",
	"description": "The DOMException interface represents an abnormal event (called an exception) that occurs as a result of calling a method or accessing a property of a web API. This is how error conditions are described in web APIs.Each exception has a name, which is a short "PascalCase"-style string identifying the error or abnormal condition.DOMException is a Serializable object, so it can be cloned with structuredClone() or copied between Workers using postMessage().Returns a DOMException object with a specified message and name.Returns one of the legacy error code constants, or 0 if none match.Returns a string representing a message or description associated with the given error name.Returns a string that contains one of the strings associated with an error name.Common error names are listed here. Some APIs define their own sets of names, so this is not necessarily a complete list.Note that the following deprecated historical errors don't have an error name but instead have only a legacy constant code value and a legacy constant name:Note: Because historically the errors were identified by a numeric value that corresponded with a named variable defined to have that value, some of the entries below indicate the legacy code value and constant name that were used in the past.The index is not in the allowed range. For example, this can be thrown by the Range object. (Legacy code value: 1 and legacy constant name: INDEX_SIZE_ERR)The node tree hierarchy is not correct. (Legacy code value: 3 and legacy constant name: HIERARCHY_REQUEST_ERR)The object is in the wrong Document. (Legacy code value: 4 and legacy constant name: WRONG_DOCUMENT_ERR)The string contains invalid characters. (Legacy code value: 5 and legacy constant name: INVALID_CHARACTER_ERR)The object cannot be modified. (Legacy code value: 7 and legacy constant name: NO_MODIFICATION_ALLOWED_ERR)The object cannot be found here. (Legacy code value: 8 and legacy constant name: NOT_FOUND_ERR)The operation is not supported. (Legacy code value: 9 and legacy constant name: NOT_SUPPORTED_ERR)The object is in an invalid state. (Legacy code value: 11 and legacy constant name: INVALID_STATE_ERR)The attribute is in use. (Legacy code value: 10 and legacy constant name: INUSE_ATTRIBUTE_ERR)The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR)The object cannot be modified in this way. (Legacy code value: 13 and legacy constant name: INVALID_MODIFICATION_ERR)The operation is not allowed by Namespaces in XML. (Legacy code value: 14 and legacy constant name: NAMESPACE_ERR)The object does not support the operation or argument. (Legacy code value: 15 and legacy constant name: INVALID_ACCESS_ERR)The type of the object does not match the expected type. (Legacy code value: 17 and legacy constant name: TYPE_MISMATCH_ERR) This value is deprecated; the JavaScript TypeError exception is now raised instead of a DOMException with this value.The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)The given URL does not match another URL. (Legacy code value: 21 and legacy constant name: URL_MISMATCH_ERR)The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)The node is incorrect or has an incorrect ancestor for this operation. (Legacy code value: 24 and legacy constant name: INVALID_NODE_TYPE_ERR)The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)The encoding or decoding operation failed (No legacy code value and constant name).The input/output read operation failed (No legacy code value and constant name).The operation failed for an unknown transient reason (e.g. out of memory) (No legacy code value and constant name).A mutation operation in a transaction failed because a constraint was not satisfied (No legacy code value and constant name).Provided data is inadequate (No legacy code value and constant name).A request was placed against a transaction that is currently not active or is finished (No legacy code value and constant name).The mutating operation was attempted in a "readonly" transaction (No legacy code value and constant name).An attempt was made to open a database using a lower version than the existing version (No legacy code value and constant name).The operation failed for an operation-specific reason (No legacy code value and constant name).The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission (No legacy code value and constant name).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMException"
},
{
	"api_id": "287",
	"name": "DOMHighResTimeStamp",
	"description": "The DOMHighResTimeStamp type is a double and is used to store a time value in milliseconds.This type can be used to describe a discrete point in time or a time interval (the difference in time between two discrete points in time).The time, given in milliseconds, should be accurate to 5 µs (microseconds), with the fractional part of the number indicating fractions of a millisecond. However, if the browser is unable to provide a time value accurate to 5 µs (due, for example, to hardware or software constraints), the browser can represent the value as a time in milliseconds accurate to a millisecond. Also note the section below on reduced time precision controlled by browser preferences to avoid timing attacks and fingerprinting.Further, if the device or operating system the user agent is running on doesn't have a clock accurate to the microsecond level, they may only be accurate to the millisecond.To offer protection against timing attacks and fingerprinting, the precision of time stamps might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision preference is enabled by default and defaults to 20 µs in Firefox 59; in 60 it will be 2ms.In Firefox, you can also enable privacy.resistFingerprinting, the precision will be 100ms or the value of privacy.resistFingerprinting.reduceTimerPrecision.microseconds, whichever is larger.This type has no properties. It is a double-precision floating-point value.The value of a DOMHighResTimeStamp is a double-precision floating-point number which describes the number of milliseconds (accurate to within 5 microseconds if the device supports it) elapsed between two points in time. The starting time can be either a specific time determined by the script for a site or app, or the time origin.The time origin is a standard time which is considered to be the beginning of the current document's lifetime. It's calculated like this:This type has no methods.You can get the current timestamp value—the time that has elapsed since the context was created—by calling the performance method now(). This method is available in both Window and Worker contexts.To determine how much time has elapsed since a particular point in your code, you can do something like this:Upon completion, the value of elapsedTime is the number of milliseconds that have elapsed since you recorded the starting time in line 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp"
},
{
	"api_id": "288",
	"name": "DOMImplementation",
	"description": "The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.This interface has no specific property and doesn't inherit any.No inherited method.Creates and returns an XMLDocument.Creates and returns a DocumentType.Creates and returns an HTML Document.Returns a boolean value indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns true. Old browsers are very inconsistent in their behavior.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation"
},
{
	"api_id": "289",
	"name": "DOMMatrix (WebKitCSSMatrix)",
	"description": "The DOMMatrix interface represents 4×4 matrices, suitable for 2D and 3D operations including rotation and translation. It is a mutable version of the DOMMatrixReadOnly interface.WebKitCSSMatrix is an alias to DOMMatrix.This interface should be available inside web workers, though some implementations don't allow it yet.Creates and returns a new DOMMatrix object.This interface inherits properties from DOMMatrixReadOnly, though some of these properties are altered to be mutable.A Boolean flag whose value is true if the matrix was initialized as a 2D matrix. If false, the matrix is 3D.A Boolean whose value is true if the matrix is the identity matrix. The identity matrix is one in which every value is 0 except those on the main diagonal from top-left to bottom-right corner (in other words, where the offsets in each direction are equal).Double-precision floating-point values representing each component of a 4×4 matrix, where m11 through m14 are the first column, m21 through m24 are the second column, and so forth.Double-precision floating-point values representing the components of a 4×4 matrix which are required in order to perform 2D rotations and translations. These are aliases for specific components of a 4×4 matrix, as shown below.This interface includes the following methods, as well as the methods it inherits from DOMMatrixReadOnly.Modifies the matrix by inverting it. If the matrix can't be inverted, its components are all set to NaN, and is2D returns false.Modifies the matrix by post-multiplying it with the specified DOMMatrix. This is equivalent to the dot product A⋅B, where matrix A is the source matrix and B is the matrix given as an input to the method. Returns itself.Modifies the matrix by pre-multiplying it with the specified DOMMatrix. This is equivalent to the dot product B⋅A, where matrix A is the source matrix and B is the matrix given as an input to the method. Returns itself.Modifies the matrix by applying the specified vector. The default vector is [0, 0, 0]. Returns itself.Modifies the matrix by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both 1, but the scaling factor for X must be specified. The default origin is (0, 0, 0). Returns itself.Modifies the matrix by applying the specified scaling factors, with the center located at the specified origin. Also returns itself. By default, the scaling factor is 1 for all three axes, and the origin is (0, 0, 0). Returns itself.Modifies the matrix by applying the specified scaling factor to all three axes, centered on the given origin. Returns itself.Modifies the matrix by rotating itself around each axis by the specified number of degrees. Returns itself.Modifies the matrix by rotating it by the specified angle around the given vector. Returns itself.Modifies the matrix by rotating it by the angle between the specified vector and (1, 0). Returns itself.Replaces the contents of the matrix with the matrix described by the specified transform or transforms. Returns itself.Modifies the matrix by applying the specified skew transformation along the X-axis. Returns itself.Modifies the matrix by applying the specified skew transformation along the Y-axis. Returns itself.This interface inherits methods from DOMMatrixReadOnly.Creates a new mutable DOMMatrix object given an array of single-precision (32-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown.Creates a new mutable DOMMatrix object given an array of double-precision (64-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown.Creates a new mutable DOMMatrix object given an existing matrix or a DOMMatrixInit dictionary which provides the values for its properties.The matrix defined by the DOMMatrix interface is comprised of four rows of four columns each. While it's beyond the scope of this article to explain the mathematics involved, this 4×4 size is enough to describe any transformation you might apply to either 2D or 3D geometries.Here are The positions of the 16 elements (m_11 through m_44) which comprise the 4×4 abstract matrix:\n  \n  \n  \n    [\n    \n    \n    \n      \n      m\n      11\n      \n    \n    \n      \n      m\n      21\n      \n    \n    \n      \n      m\n      31\n      \n    \n    \n      \n      m\n      41\n      \n    \n    \n    \n    \n      \n      m\n      12\n      \n    \n    \n      \n      m\n      22\n      \n    \n    \n      \n      m\n      32\n      \n    \n    \n      \n      m\n      42\n      \n    \n    \n    \n    \n      \n      m\n      13\n      \n    \n    \n      \n      m\n      23\n      \n    \n    \n      \n      m\n      33\n      \n    \n    \n      \n      m\n      43\n      \n    \n    \n    \n    \n      \n      m\n      14\n      \n    \n    \n      \n      m\n      24\n      \n    \n    \n      \n      m\n      34\n      \n    \n    \n      \n      m\n      44\n      \n    \n    \n    \n    ]\n  \n  \left [ \begin{matrix} m_{11} & m_{21} & m_{31} & m_{41} \ m_{12} & m_{22} & m_{32} & m_{42} \ m_{13} & m_{23} & m_{33} & m_{43} \ m_{14} & m_{24} & m_{34} & m_{44} \end{matrix} \right ]\n  \n  \nThe DOMMatrix interface is designed with the intent that it will be used for all matrices within markup, supplanting the SVGMatrix and CSSMatrix interfaces.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix"
},
{
	"api_id": "290",
	"name": "DOMMatrixReadOnly",
	"description": "The DOMMatrixReadOnly interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations. The DOMMatrix interface — which is based upon DOMMatrixReadOnly—adds mutability, allowing you to alter the matrix after creating it.This interface should be available inside web workers, though some implementations doesn't allow it yet.Creates a new DOMMMatrixReadOnly object.This interface doesn't inherit any properties.A Boolean flag whose value is true if the matrix was initialized as a 2D matrix. If false, the matrix is 3D.A Boolean whose value is true if the matrix is the identity matrix. The identity matrix is one in which every value is 0 except those on the main diagonal from top-left to bottom-right corner (in other words, where the offsets in each direction are equal).Double-precision floating-point values representing each component of a 4×4 matrix, where m11 through m14 are the first column, m21 through m24 are the second column, and so forth.Double-precision floating-point values representing the components of a 4×4 matrix which are required in order to perform 2D rotations and translations. These are aliases for specific components of a 4×4 matrix, as shown below.This interface doesn't inherit any methods. None of the following methods alter the original matrix.Returns a new DOMMatrix created by flipping the source matrix around its X-axis. This is equivalent to multiplying the matrix by DOMMatrix(-1, 0, 0, 1, 0, 0). The original matrix is not modified.Returns a new DOMMatrix created by flipping the source matrix around its Y-axis. This is equivalent to multiplying the matrix by DOMMatrix(1, 0, 0, -1, 0, 0). The original matrix is not modified.Returns a new DOMMatrix created by inverting the source matrix. If the matrix cannot be inverted, the new matrix's components are all set to NaN and its is2D property is set to false. The original matrix is not altered.Returns a new DOMMatrix created by computing the dot product of the source matrix and the specified matrix: A⋅B. If no matrix is specified as the multiplier, the matrix is multiplied by a matrix in which every element is 0 except the bottom-right corner and the element immediately above and to its left: m33 and m34. These have the default value of 1. The original matrix is not modified.Returns a new DOMMatrix created by rotating the source matrix by the given angle around the specified vector. The original matrix is not modified.Returns a new DOMMatrix created by rotating the source matrix around each of its axes by the specified number of degrees. The original matrix is not altered.Returns a new DOMMatrix created by rotating the source matrix by the angle between the specified vector and (1, 0). The original matrix is not modified.Returns a new DOMMatrix created by scaling the source matrix by the amount specified for each axis, centered on the given origin. By default, the X and Z axes are scaled by 1 and the Y axis has no default scaling value. The default origin is (0, 0, 0). The original matrix is not modified.Returns a new DOMMatrix created by scaling the source 3D matrix by the given factor along all its axes, centered on the specified origin point. The default origin is (0, 0, 0). The original matrix is not modified.Returns a new DOMMatrix created by applying the specified scaling on the X, Y, and Z axes, centered at the given origin. By default, the Y and Z axes' scaling factors are both 1, but the scaling factor for X must be specified. The default origin is (0, 0, 0). The original matrix is not changed.Returns a new DOMMatrix created by applying the specified skew transformation to the source matrix along its X-axis. The original matrix is not modified.Returns a new DOMMatrix created by applying the specified skew transformation to the source matrix along its Y-axis. The original matrix is not modified.Returns a new Float32Array containing all 16 elements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) which comprise the matrix. The elements are stored into the array as single-precision floating-point numbers in column-major (colexographical access, or "colex") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)Returns a new Float64Array containing all 16 elements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) which comprise the matrix. The elements are stored into the array as double-precision floating-point numbers in column-major (colexographical access, or "colex") order. (In other words, down the first column from top to bottom, then the second column, and so forth.)Returns a JSON representation of the DOMMatrixReadOnly object.Creates and returns a string object which contains a string representation of the matrix in CSS matrix syntax, using the appropriate CSS matrix notation. See the matrix() CSS function for details on this syntax.For a 2D matrix, the elements a through f are listed, for a total of six values and the form matrix(a, b, c, d, e, f).For a 3D matrix, the returned string contains all 16 elements and takes the form matrix3d(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44). See the CSS matrix3d() function for details on the 3D notation's syntax.Throws an InvalidStateError exception if any of the elements in the matrix are non-finite (even if, in the case of a 2D matrix, the non-finite values are in elements not used by the 2D matrix representation).Transforms the specified point using the matrix, returning a new DOMPoint object containing the transformed point. Neither the matrix nor the original point are altered.Returns a new DOMMatrix containing a matrix calculated by translating the source matrix using the specified vector. By default, the vector is (0, 0, 0). The original matrix is not changed.This interface inherits methods from DOMMatrixReadOnly.Creates a new mutable DOMMatrix object given an array of single-precision (32-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown.Creates a new mutable DOMMatrix object given an array of double-precision (64-bit) floating-point values. If the array has six values, the result is a 2D matrix; if the array has 16 values, the result is a 3D matrix. Otherwise, a TypeError exception is thrown.Creates a new mutable DOMMatrix object given an existing matrix or a DOMMatrixInit dictionary which provides the values for its properties. If no matrix is specified, the matrix is initialized with every element set to 0 except the bottom-right corner and the element immediately above and to its left: m33 and m34. These have the default value of 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly"
},
{
	"api_id": "291",
	"name": "DOMParser",
	"description": "\n  The DOMParser interface provides\n  the ability to parse XML or HTML source code from a\n  string into a DOM Document.\n\n  You can perform the opposite operation—converting a DOM tree into XML or HTML\n  source—using the XMLSerializer interface.\n\n  In the case of an HTML document, you can also replace portions of the DOM with new DOM\n  trees built from HTML by setting the value of the Element.innerHTML and\n  outerHTML properties. These properties can also be\n  read to fetch HTML fragments corresponding to the corresponding DOM subtree.\n\n  Note that XMLHttpRequest can parse XML and HTML directly\n  from a URL-addressable resource, returning a Document in its\n  response property.\n\n  Note: Be aware that block-level elements\n  like <p> will be automatically closed if another\n  block-level element is nested inside and therefore parsed before the closing </p> tag.\n  Creates a new DOMParser object.Parses a string using either the HTML parser or the XML parser, returning an HTMLDocument or XMLDocument.The documentation for DOMParser.parseFromString(), this interface's only method, contains examples for parsing XML, SVG, and HTML strings.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser"
},
{
	"api_id": "292",
	"name": "DOMPoint",
	"description": "A DOMPoint object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. DOMPoint is based on DOMPointReadOnly but allows its properties' values to be changed.In general, a positive x component represents a position to the right of the origin, a positive y component is downward from the origin, and a positive z component extends outward from the screen (in other words, toward the user).Creates and returns a new DOMPoint object given the values of zero or more of its coordinate components and optionally the w perspective value. You can also use an existing DOMPoint or DOMPointReadOnly or an object to create a new point by calling the DOMPoint.fromPoint() static method.DOMPoint inherits methods from its parent, DOMPointReadOnly.Creates a new mutable DOMPoint object given an existing point (or an object containing matching properties) which provides the values for its properties.DOMPoint inherits properties from its parent, DOMPointReadOnly.The x coordinate of the DOMPoint.The y coordinate of the DOMPoint.The z coordinate of the DOMPoint.The perspective value of the DOMPoint.In the WebXR Device API, DOMPointReadOnly values are used to represent positions and orientations. In the following snippet, the pose of the XR device (such as a VR headset or phone with AR capabilities) can be retrieved by calling using XRFrame.getViewerPose() during an XRSession animation frame, then accessing the resulting XRPose's transform property, which contains two DOMPointReadOnly attributes: position as a vector and orientation as a quaternion.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint"
},
{
	"api_id": "293",
	"name": "DOMPointReadOnly",
	"description": "The DOMPointReadOnly interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.Note: This feature is available in Web WorkersThere are two ways to create a new DOMPointReadOnly instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:The other option is to use the static DOMPointReadOnly.fromPoint() method:Creates a new DOMPointReadOnly object given the values of its coordinates and perspective. To create a point using an object, you can instead use DOMPointReadOnly.fromPoint().The point's horizontal coordinate, x.The point's vertical coordinate, y.The point's depth coordinate, z.The point's perspective value, w.A static method that creates a new DOMPointReadOnly object given the coordinates provided in the specified object.Applies a matrix transform specified as an object to the DOMPointReadOnly object.Returns a JSON representation of the DOMPointReadOnly object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly"
},
{
	"api_id": "294",
	"name": "DOMQuad",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.A DOMQuad is a collection of four DOMPoints defining the corners of an arbitrary quadrilateral. Returning DOMQuads lets getBoxQuads() return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy bounds attribute returning a DOMRectReadOnly for those cases where you just want an axis-aligned bounding rectangle.Creates a new DOMQuad object.are DOMPoint objects for each of the DOMQuad object's four corners.Returns a new DOMQuad object based on the passed set of coordinates.Returns a new DOMQuad object based on the passed set of coordinates.Returns a DOMRect object with the coordinates and dimensions of the DOMQuad object.Returns a JSON representation of the DOMQuad object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad"
},
{
	"api_id": "295",
	"name": "DOMRect",
	"description": "A DOMRect describes the size and position of a rectangle.The type of box represented by the DOMRect is specified by the method or property that returned it. For example, VREyeParameters.renderRect from the WebVR API specifies the viewport of a canvas into which visuals for one eye of a head mounted display should be rendered.It inherits from its parent, DOMRectReadOnly.Creates a new DOMRect object.DOMRect inherits properties from its parent, DOMRectReadOnly. The difference is that they are not read-only anymore.The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).The width of the DOMRect.The height of the DOMRect.Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative.)Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative.)Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative.)Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative.)DOMRect inherits methods from its parent, DOMRectReadOnly.Creates a new DOMRect object with a given location and dimensions.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"
},
{
	"api_id": "296",
	"name": "DOMRectReadOnly",
	"description": "The DOMRectReadOnly interface specifies the standard properties used by DOMRect to define a rectangle whose properties are immutable.Defined to create a new DOMRectReadOnly object. Note that this constructor cannot be called by 3rd party JavaScript; doing so returns an "Illegal constructor" TypeError.The x coordinate of the DOMRect's origin.The y coordinate of the DOMRect's origin.The width of the DOMRect.The height of the DOMRect.Returns the top coordinate value of the DOMRect (usually the same as y.)Returns the right coordinate value of the DOMRect (usually the same as x + width).Returns the bottom coordinate value of the DOMRect (usually the same as y + height).Returns the left coordinate value of the DOMRect (usually the same as x).Creates a new DOMRect object with a given location and dimensions.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly"
},
{
	"api_id": "297",
	"name": "DOMStringList",
	"description": "A type returned by some APIs which contains a list of DOMString (strings).Returns the length of the list.Returns a string.Returns a boolean value indicating if the given string is in the list",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList"
},
{
	"api_id": "298",
	"name": "DOMStringMap",
	"description": "The DOMStringMap interface is used for the HTMLElement.dataset/SVGElement.dataset attribute, to represent data for custom attributes added to elements.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap"
},
{
	"api_id": "299",
	"name": "DOMTimeStamp",
	"description": "The DOMTimeStamp type represents an absolute or relative number of milliseconds, depending on the specification in which it appears.\n  Note: DOMTimeStamp has been removed from the WebIDL specification, but is referenced in other specifications.\n  In the High Resolution Time specification, DOMTimeStamp has been redefined as EpochTimeStamp.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"
},
{
	"api_id": "300",
	"name": "DOMTokenList",
	"description": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others.A DOMTokenList is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.An integer representing the number of objects stored in the object.A stringifier property that returns the value of the list as a string.Returns the item in the list by its index, or null if the index is greater than or equal to the list's length.Returns true if the list contains the given token, otherwise false.Adds the specified tokens to the list.Removes the specified tokens from the list.Replaces the token with another one.Returns true if the given token is in the associated attribute's supported tokens.Removes the token from the list if it exists, or adds it to the list if it doesn't. Returns a boolean indicating whether the token is in the list after the operation.Returns an iterator, allowing you to go through all key/value pairs contained in this object.Executes a provided callback function once for each DOMTokenList element.Returns an iterator, allowing you to go through all keys of the key/value pairs contained in this object.Returns an iterator, allowing you to go through all values of the key/value pairs contained in this object.In the following simple example, we retrieve the list of classes set on a <p> element as a DOMTokenList using Element.classList, add a class using DOMTokenList.add(), and then update the Node.textContent of the <p> to equal the DOMTokenList.First, the HTML:Now the JavaScript:The output looks like this:Methods that modify the DOMTokenList (such as DOMTokenList.add()) automatically trim any excess Whitespace and remove duplicate values from the list. For example:The output looks like this:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
},
{
	"api_id": "301",
	"name": "DragEvent",
	"description": "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.This interface inherits properties from MouseEvent and Event.The data that is transferred during a drag and drop interaction.Although this interface has a constructor, it is not possible to create a useful DataTransfer object from script, since DataTransfer objects have a processing and security model that is coordinated by the browser during drag-and-drops.Creates a synthetic and untrusted DragEvent.This event is fired when an element or text selection is being dragged.This event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).This event is fired when a dragged element or text selection enters a valid drop target.This event is fired when a dragged element or text selection leaves a valid drop target.This event is fired continuously when an element or text selection is being dragged and the mouse pointer is over a valid drop target (every 50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow movement) and 1ms (fast movement) approximately. This firing pattern is different than mouseover ).This event is fired when the user starts dragging an element or text selection.This event is fired when an element or text selection is dropped on a valid drop target.A global event handler for the drag event.A global event handler for the dragend event.A global event handler for the dragenter event.A global event handler for the dragleave event.A global event handler for the dragover event.A global event handler for the dragstart event.A global event handler for the drop event.An Example of each property, constructor, event type and global event handlers is included in their respective reference page.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DragEvent"
},
{
	"api_id": "302",
	"name": "DynamicsCompressorNode",
	"description": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode that has exactly one input and one output.Creates a new instance of an DynamicsCompressorNode object.Inherits properties from its parent, AudioNode.A k-rate AudioParam representing the decibel value above which the compression will start taking effect.A k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.A k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.A float representing the amount of gain reduction currently applied by the compressor to the signal.A k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB.A k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB.No specific methods; inherits methods from its parent, AudioNode.See BaseAudioContext.createDynamicsCompressor() example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode"
},
{
	"api_id": "303",
	"name": "EcdhKeyDeriveParams",
	"description": "The EcdhKeyDeriveParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the ECDH algorithm.ECDH enables two people who each have a key pair consisting of a public and a private key to derive a shared secret. They exchange public keys and use the combination of their private key and the other entity's public key to derive a secret key that they — and no one else — share.The parameters for ECDH deriveKey() therefore include the other entity's public key, which is combined with this entity's private key to derive the shared secret.A string. This should be set to ECDH.A CryptoKey object representing the public key of the other entity.See the examples for SubtleCrypto.deriveKey().Browsers that support the "ECDH" algorithm for the SubtleCrypto.deriveKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EcdhKeyDeriveParams"
},
{
	"api_id": "304",
	"name": "EcdsaParams",
	"description": "The EcdsaParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify() when using the ECDSA algorithm.A string. This should be set to ECDSA.A string. An identifier for the digest algorithm to use. This should be one of the following:Warning: SHA-1 is also supported here but the SHA-1 algorithm is considered vulnerable and should no longer be used.See the examples for SubtleCrypto.sign() or SubtleCrypto.verify().Browsers that support the "ECDSA" algorithm for the SubtleCrypto.sign() and SubtleCrypto.verify() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EcdsaParams"
},
{
	"api_id": "305",
	"name": "EcKeyGenParams",
	"description": "The EcKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.A string. This should be set to ECDSA or ECDH, depending on the algorithm you want to use.A string representing the name of the elliptic curve to use. This may be any of the following names for NIST-approved curves:See the examples for SubtleCrypto.generateKey().Browsers that support the "ECDH" or "ECDSA" algorithms for the SubtleCrypto.generateKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EcKeyGenParams"
},
{
	"api_id": "306",
	"name": "EcKeyImportParams",
	"description": "A string. This should be set to ECDSA or ECDH, depending on the algorithm you want to use.A string representing the name of the elliptic curve to use. This may be any of the following names for NIST-approved curves:See the examples for SubtleCrypto.importKey().Browsers that support the "ECDH" or "ECDSA" algorithms for the SubtleCrypto.importKey() or SubtleCrypto.wrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EcKeyImportParams"
},
{
	"api_id": "307",
	"name": "Element",
	"description": "Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.For example, the HTMLElement interface is the base interface for HTML elements, while the SVGElement interface is the basis for all SVG elements. Most functionality is specified further down the class hierarchy.Languages outside the realm of the Web platform, like XUL through the XULElement interface, also implement Element.Element inherits properties from its parent interface, Node, and by extension that interface's parent, EventTarget.Returns a HTMLSlotElement representing the <slot> the node is inserted in.Returns a NamedNodeMap object containing the assigned attributes of the corresponding HTML element.Returns the number of child elements of this element.Returns the child elements of this element.Returns a DOMTokenList containing the list of class attributes.A string representing the class of the element.Returns a number representing the inner height of the element.Returns a number representing the width of the left border of the element.Returns a number representing the width of the top border of the element.Returns a number representing the inner width of the element.Returns the first child element of this element.A string representing the id of the element.A string representing the markup of the element's content.Returns the last child element of this element.A string representing the local part of the qualified name of the element.The namespace URI of the element, or null if it is no namespace.Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the http://www.w3.org/1999/xhtml namespace in both HTML and XML trees.An Element, the element immediately following the given one in the tree, or null if there's no sibling node.A string representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.Returns the shadow root that is hosted by the element, regardless if its open or closed. Only available to WebExtensions.Represents the part identifier(s) of the element (i.e. set using the part attribute), returned as a DOMTokenList.A string representing the namespace prefix of the element, or null if no prefix is specified.An Element, the element immediately preceding the given one in the tree, or null if there is no sibling element.Returns a number representing the scroll view height of an element.A number representing the left scroll offset of the element.Returns a number representing the maximum left scroll offset possible for the element.A number representing number of pixels the top of the element is scrolled vertically.Returns a number representing the maximum top scroll offset possible for the element.Returns a number representing the scroll view width of the element.Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.Returns the name of the shadow DOM slot the element is inserted in.Returns a string with the name of the tag for the given element.The Element interface includes the following properties, defined on the ARIAMixin mixin.A string reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.A string reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.A string reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.A string reflecting the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.A string reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.A string reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.A string reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.A string reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.A string reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.A string reflecting the aria-description attribute, which defines a string value that describes or annotates the current element.A string reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.A string reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.A string reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.A string reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API.A string reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.A string reflecting the aria-label attribute, which defines a string value that labels the current element.A string reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure.A string reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.A string reflecting the aria-modal attribute, which indicates whether an element is modal when displayed.A string reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.A string reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.A string reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.A string reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.A string reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.A string reflecting the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.A string reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.A string reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced.A string reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.A string reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.A string reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.A string reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.A string reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.A string reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.A string reflecting the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.A string reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.A string reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.A string reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget.A string reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget.A string reflecting the aria-valueNow attribute, which defines the current value for a range widget.A string reflecting the aria-valuetext attribute, which defines the human readable text alternative of aria-valuenow for a range widget.Element inherits methods from its parents Node, and its own parent, EventTarget.Registers an event handler to a specific event type on the element.Inserts a set of Node objects or strings in the children list of the Element's parent, just after the Element.Attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.A shortcut method to create and run an animation on an element. Returns the created Animation object instance.Inserts a set of Node objects or strings after the last child of the element.Inserts a set of Node objects or strings in the children list of the Element's parent, just before the Element.Returns the Element which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.Creates a shadow DOM on the element, turning it into a shadow host. Returns a ShadowRoot.Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.Dispatches an event to this node in the DOM and returns a boolean value that indicates whether no handler canceled the event.Returns an array of Animation objects currently active on the element.Retrieves the value of the named attribute from the current node and returns it as a string.Returns an array of attribute names from the current element.Retrieves the node representation of the named attribute from the current node and returns it as an Attr.Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an Attr.Retrieves the value of the attribute with the specified namespace and name from the current node and returns it as a string.Returns the size of an element and its position relative to the viewport.Returns a list of DOMQuad objects representing the CSS fragments of the node.Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.Returns a live HTMLCollection that contains all descendants of the current element that possess the list of classes given in the parameter.Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element.Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element.Returns a boolean value indicating if the element has the specified attribute or not.Returns a boolean value indicating if the element has the specified attribute, in the specified namespace, or not.Returns a boolean value indicating if the element has one or more HTML attributes present.Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.Inserts a given element node at a given position relative to the element it is invoked upon.Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.Inserts a given text node at a given position relative to the element it is invoked upon.Returns a boolean value indicating whether or not the element would be selected by the specified selector string.Inserts a set of Node objects or strings before the first child of the element.Returns the first Node which matches the specified selector string relative to the element.Returns a NodeList of nodes which match the specified selector string relative to the element.Releases (stops) pointer capture that was previously set for a specific pointer event.Removes the element from the children list of its parent.Removes the named attribute from the current node.Removes the node representation of the named attribute from the current node.Removes the attribute with the specified name and namespace, from the current node.Removes an event listener from the element.Replaces the existing children of a Node with a specified new set of children.Replaces the element in the children list of its parent with a set of Node objects or strings.Asynchronously asks the browser to make the element fullscreen.Allows to asynchronously ask for the pointer to be locked on the given element.Scrolls to a particular set of coordinates inside a given element.Scrolls an element by the given amount.Scrolls the page until the element gets into the view.Scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. Use the standard Element.scrollIntoView() instead.Scrolls to a particular set of coordinates inside a given element.Sets the value of a named attribute of the current node.Sets the node representation of the named attribute from the current node.Sets the node representation of the attribute with the specified name and namespace, from the current node.Sets the value of the attribute with the specified name and namespace, from the current node.Sets up mouse event capture, redirecting all mouse events to this element.Parses and sanitizes a string of HTML and inserts into the DOM as a subtree of the element.Designates a specific element as the capture target of future pointer events.Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fires on a <dialog> when the user instructs the browser that they wish to dismiss the current open dialog. For example, the browser might fire this event when the user presses the Esc key or clicks a "Close dialog" button which is part of the browser's UI. Also available via the oncancel property.\n  Fired when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.\n  Also available via the onerror property.\n  \n  Fired when the document view or an element has been scrolled.\n  Also available via the onscroll property.\n  \n  Fired when a Content Security Policy is violated.\n  Also available via the global onsecuritypolicyviolation property, which available on elements and the Document and Window objects.\n  \n  Fired when some text has been selected.\n  Also available via the onselect property.\n  \n  Fired when a contextmenu event was fired on/bubbled to an element that has a contextmenu attribute.\n  Also available via the onshow property.\n  \n  Fired when the user rotates a wheel button on a pointing device (typically a mouse).\n  Also available via the onwheel property.\n  \n  Fired when the user initiates a copy action through the browser's user interface.\n  Also available via the oncopy property.\n  \n  Fired when the user initiates a cut action through the browser's user interface.\n  Also available via the oncut property.\n  \n  Fired when the user initiates a paste action through the browser's user interface.\n  Also available via the onpaste property.\n  Fired when a text composition system such as an input method editor completes or cancels the current composition session.Fired when a text composition system such as an input method editor starts a new composition session.Fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor.\n  Fired when an element has lost focus.\n  Also available via the onblur property.\n  \n  Fired when an element has gained focus.\n  Also available via the onfocus property\n  Fired when an element is about to gain focus.Fired when an element is about to lose focus.Sent to an Element when it transitions into or out of fullscreen mode.Sent to an Element if an error occurs while attempting to switch it into or out of fullscreen mode.\n  Fired when a key is pressed.\n  Also available via the onkeydown property.\n  \n  Fired when a key that produces a character value is pressed down.\n  Also available via the onkeypress property.\n  \n  Fired when a key is released.\n  Also available via the onkeyup property.\n  \n  Fired when a non-primary pointing device button (e.g., any mouse button other than the left button) has been pressed and released on an element.\n  Also available via the onauxclick property.\n  \n  Fired when a pointing device button (e.g., a mouse's primary button) is pressed and released on a single element.\n  Also available via the onclick property.\n  \n  Fired when the user attempts to open a context menu.\n  Also available via the oncontextmenu property.\n  \n  Fired when a pointing device button (e.g., a mouse's primary button) is clicked twice on a single element.\n  Also available via the ondblclick property.\n  Occurs when an element is activated, for instance, through a mouse click or a keypress.\n  Fired when a pointing device button is pressed on an element.\n  Also available via the onmousedown property.\n  \n  Fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.\n  Also available via the onmouseenter property.\n  \n  Fired when the pointer of a pointing device (usually a mouse) is moved out of an element that has the listener attached to it.\n  Also available via the onmouseleave property.\n  \n  Fired when a pointing device (usually a mouse) is moved while over an element.\n  Also available via the onmousemove property.\n  \n  Fired when a pointing device (usually a mouse) is moved off the element to which the listener is attached or off one of its children.\n  Also available via the onmouseout property.\n  \n  Fired when a pointing device is moved onto the element to which the listener is attached or onto one of its children.\n  Also available via the onmouseover property.\n  \n  Fired when a pointing device button is released on an element.\n  Also available via the onmouseup property.\n  Fired each time the amount of pressure changes on the trackpadtouchscreen.Fired after the mousedown event as soon as sufficient pressure has been applied to qualify as a "force click".Fired before the mousedown event.Fired after the webkitmouseforcedown event as soon as the pressure has been reduced sufficiently to end the "force click".\n  Fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created).\n  Also available via the ontouchcancel property.\n  \n  Fired when one or more touch points are removed from the touch surface.\n  Also available via the ontouchend property\n  \n  Fired when one or more touch points are moved along the touch surface.\n  Also available via the ontouchmove property\n  \n  Fired when one or more touch points are placed on the touch surface.\n  Also available via the ontouchstart property\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
},
{
	"api_id": "308",
	"name": "ElementInternals",
	"description": "The ElementInternals interface of the Document_Object_Model gives web developers a way to allow custom elements to fully participate in HTML forms. It provides utilities for working with these elements in the same way you would work with any standard HTML form element, and also exposes the Accessibility Object Model to the element.This interface has no constructor. An ElementInternals object is returned when calling HTMLElement.attachInternals().Returns the ShadowRoot object associated with this element.Returns the HTMLFormElement associated with this element.Returns the CustomStateSet associated with this element.\n  A boolean value which returns true if the element is a submittable element that is a candidate for\n  constraint validation.\n  Returns a ValidityState object which represents the different validity states the element can be in, with respect to constraint validation.A string containing the validation message of this element.Returns a NodeList of all of the label elements associated with this element.The ElementInternals interface includes the following properties, defined on the ARIAMixin mixin.Note: These are included in order that default accessibility semantics can be defined on a custom element. These may be overwritten by author-defined attributes, but ensure that default semantics are retained should the author delete those attributes, or fail to add them at all. For more information see the Accessibility Object Model explainer.A string reflecting the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.A string reflecting the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.A string reflecting the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.A string reflecting the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.A string reflecting the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.A string reflecting the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.A string reflecting the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.A string reflecting the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.A string reflecting the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.A string reflecting the aria-description attribute, which defines a string value that describes or annotates the current ElementInternals.A string reflecting the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.A string reflecting the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.A string reflecting the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an ElementInternals.A string reflecting the aria-hidden attribute, which indicates whether the element is exposed to an accessibility API.A string reflecting the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an ElementInternals.A string reflecting the aria-label attribute, which defines a string value that labels the current ElementInternals.A string reflecting the aria-level attribute, which defines the hierarchical level of an element within a structure.A string reflecting the aria-live attribute, which indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.A string reflecting the aria-modal attribute, which indicates whether an element is modal when displayed.A string reflecting the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.A string reflecting the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.A string reflecting the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.A string reflecting the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.A string reflecting the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.A string reflecting the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.A string reflecting the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.A string reflecting the aria-relevant attribute, which indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. This is used to describe what changes in an aria-live region are relevant and should be announced.A string reflecting the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.A string reflecting the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an Element.A string reflecting the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.A string reflecting the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.A string reflecting the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.A string reflecting the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.A string reflecting the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.A string reflecting the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.A string reflecting the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.A string reflecting the aria-valueMax attribute, which defines the maximum allowed value for a range widget.A string reflecting the aria-valueMin attribute, which defines the minimum allowed value for a range widget.A string reflecting the aria-valueNow attribute, which defines the current value for a range widget.A string reflecting the aria-valuetext attribute, which defines the human readable text alternative of aria-valuenow for a range widget.Sets the element's submission value and state, communicating these to the user agent.Sets the validity of the element.Checks if an element meets any constraint validation rules applied to it.Checks if an element meets any constraint validation rules applied to it, and also sends a validation message to the user agent.The following example demonstrates how to create a custom form-associated element with HTMLElement.attachInternals.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals"
},
{
	"api_id": "309",
	"name": "EncodedAudioChunk",
	"description": "The EncodedAudioChunk interface of the WebCodecs API represents a chunk of encoded audio data.Creates a new EncodedAudioChunk object.Returns a string indicating whether this chunk of data is a key chunk.Returns an integer representing the timestamp of the audio in microseconds.Returns an integer representing the duration of the audio in microseconds.Returns an integer representing the length of the audio in bytes.Copies the encoded audio data.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EncodedAudioChunk"
},
{
	"api_id": "310",
	"name": "EncodedVideoChunk",
	"description": "The EncodedVideoChunk interface of the WebCodecs API represents a chunk of encoded video data.Creates a new EncodedVideoChunk object.Returns a string indicating whether this chunk of data is a key chunk.Returns an integer representing the timestamp of the video in microseconds.Returns an integer representing the duration of the video in microseconds.Returns an integer representing the length of the video in bytes.Copies the encoded video data.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EncodedVideoChunk"
},
{
	"api_id": "311",
	"name": "EpochTimeStamp",
	"description": "The EpochTimeStamp type represents a timestamp value in milliseconds (excluding leap seconds), relative to 01 January, 1970 00:00:00 UTC.This was previously known as DOMTimeStamp.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EpochTimeStamp"
},
{
	"api_id": "312",
	"name": "ErrorEvent",
	"description": "The ErrorEvent interface represents events providing information related to errors in scripts or in files.Also inherits properties from its parent Event.A string containing a human-readable error message describing the problem.A string containing the name of the script file in which the error occurred.An integer containing the line number of the script file on which the error occurred.An integer containing the column number of the script file on which the error occurred.A JavaScript Object that is concerned by the event.Creates an ErrorEvent event with the given parameters.Inherits methods from its parent Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent"
},
{
	"api_id": "313",
	"name": "Event",
	"description": "The Event interface represents an event which takes place in the DOM.An event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the HTMLElement.click() method of an element, or by defining the event, then sending it to a specified target using EventTarget.dispatchEvent().There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events.Many DOM elements can be set up to accept (or "listen" for) these events, and execute code in response to process (or "handle") them. Event-handlers are usually connected (or "attached") to various HTML elements (such as <button>, <div>, <span>, etc.) using EventTarget.addEventListener(), and this generally replaces using the old HTML event handler attributes. Further, when properly added, such handlers can also be disconnected if needed using removeEventListener().Note: One element can have several such handlers, even for the exact same event—particularly if separate, independent code modules attach them, each for its own independent purposes. (For example, a webpage with an advertising-module and statistics-module both monitoring video-watching.)When there are many nested elements, each with its own handler(s), event processing can become very complicated—especially where a parent element receives the very same event as its child elements because "spatially" they overlap so the event technically occurs in both, and the processing order of such events depends on the Event bubbling and capture settings of each handler triggered.Below is a list of interfaces which are based on the main Event interface, with links to their respective documentation in the MDN API reference.Note that all event interfaces have names which end in "Event".Creates an Event object, returning it to the caller.A boolean value indicating whether or not the event bubbles up through the DOM.A boolean value indicating whether the event is cancelable.A boolean indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent. It's possible this has been changed along the way through retargeting.Indicates whether or not the call to event.preventDefault() canceled the event.Indicates which phase of the event flow is being processed. It is one of the following numbers: NONE, CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE.Indicates whether or not the event was initiated by the browser (after a user click, for instance) or by a script (using an event creation method, for example).A reference to the object to which the event was originally dispatched.The time at which the event was created (in milliseconds). By specification, this value is time since epoch—but in reality, browsers' definitions vary. In addition, work is underway to change this to be a DOMHighResTimeStamp instead.The case-insensitive name identifying the type of the event.A historical alias to Event.stopPropagation() that should be used instead. Setting its value to true before returning from an event handler prevents propagation of the event.The explicit original target of the event.The original target of the event, before any retargetings.A historical property still supported in order to ensure existing sites continue to work. Use Event.preventDefault() and Event.defaultPrevented instead.A boolean value indicating whether the given event will bubble across through the shadow root into the standard DOM. Use composed instead.An alias (from old versions of Microsoft Internet Explorer) for Event.target. Use Event.target instead.Returns the event's path (an array of objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.Cancels the event (if it is cancelable).For this particular event, prevent all other listeners from being called. This includes listeners attached to the same element as well as those attached to elements that will be traversed later (during the capture phase, for instance).Stops the propagation of events further along in the DOM.Initializes the value of an Event created. If the event has already been dispatched, this method does nothing. Use the constructor (Event() instead).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Event"
},
{
	"api_id": "314",
	"name": "EventSource",
	"description": "The EventSource interface is web content's interface to server-sent events.An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format. The connection remains open until closed by calling EventSource.close().Once the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic message event is fired.Unlike WebSockets, server-sent events are unidirectional; that is, data messages are delivered in one direction, from the server to the client (such as a user's web browser). That makes them an excellent choice when there's no need to send data from the client to the server in message form. For example, EventSource is a useful approach for handling things like social media status updates, news feeds, or delivering data into a client-side storage mechanism like IndexedDB or web storage.Warning: When not used over HTTP/2, SSE suffers from a limitation to the maximum number of open connections, which can be specially painful when opening various tabs as the limit is per browser and set to a very low number (6). The issue has been marked as "Won't fix" in Chrome and Firefox. This limit is per browser + domain, so that means that you can open 6 SSE connections across all of the tabs to www.example1.com and another 6 SSE connections to www.example2.com. (from Stackoverflow). When using HTTP/2, the maximum number of simultaneous HTTP streams is negotiated between the server and the client (defaults to 100).Creates a new EventSource to handle receiving server-sent events from a specified URL, optionally in credentials mode.This interface also inherits properties from its parent, EventTarget.A number representing the state of the connection. Possible values are CONNECTING (0), OPEN (1), or CLOSED (2).A string representing the URL of the source.A boolean value indicating whether the EventSource object was instantiated with cross-origin (CORS) credentials set (true), or not (false, the default).This interface also inherits methods from its parent, EventTarget.Closes the connection, if any, and sets the readyState attribute to CLOSED. If the connection is already closed, the method does nothing.Fired when a connection to an event source failed to open.Fired when data is received from an event source.Fired when a connection to an event source has opened.Additionally, the event source itself may send messages with an event field, which will create ad-hoc events keyed to that value.In this basic example, an EventSource is created to receive unnamed events from the server; a page with the name sse.php is responsible for generating the events.Each received event causes our EventSource object's onmessage event handler to be run. It, in turn, creates a new <li> element and writes the message's data into it, then appends the new element to the list element already in the document.Note: You can find a full example on GitHub — see Simple SSE demo using PHP.To listen to named events, you'll require a listener for each type of event sent.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource"
},
{
	"api_id": "315",
	"name": "EventTarget",
	"description": "\n  The EventTarget interface is implemented by objects that can receive events and may have listeners for them.\n  In other words, any target of events implements the three methods associated with this interface.\n\n  Element, and its children, as well as Document and Window, are the most common event targets,\n  but other objects can be event targets, too.\n  For example XMLHttpRequest, AudioNode, and AudioContext are also event targets.\nMany event targets (including elements, documents, and windows) also support setting event handlers via onevent properties and attributes.Creates a new EventTarget object instance.Registers an event handler of a specific event type on the EventTarget.Removes an event listener from the EventTarget.Dispatches an event to this EventTarget.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"
},
{
	"api_id": "316",
	"name": "EXT_blend_minmax",
	"description": "The EXT_blend_minmax extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constants in WebGL2 are gl.MIN and gl.MAX.This extension adds two new constants, which can be used in WebGLRenderingContext.blendEquation() and WebGLRenderingContext.blendEquationSeparate():Produces the minimum color components of the source and destination colors.Produces the maximum color components of the source and destination colors.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax"
},
{
	"api_id": "317",
	"name": "EXT_color_buffer_float",
	"description": "The EXT_color_buffer_float extension is part of WebGL and adds the ability to render a variety of floating point formats.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to WebGL 2 contexts only.For WebGL 1, see the EXT_color_buffer_half_float and WEBGL_color_buffer_float extensions.The following sized formats become color-renderable:Color-renderable means:gl must be a WebGL2RenderingContext. This extension does not work in WebGL 1 contexts.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_float"
},
{
	"api_id": "318",
	"name": "EXT_color_buffer_half_float",
	"description": "The EXT_color_buffer_half_float extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts. On WebGL 2, it's an alternative to using the EXT_color_buffer_float extension on platforms that support 16-bit floating point render targets but not 32-bit floating point render targets.The OES_texture_half_float extension implicitly enables this extension.RGBA 16-bit floating-point color-renderable format.RGB 16-bit floating-point color-renderable format.??This extension extends WebGLRenderingContext.renderbufferStorage():",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float"
},
{
	"api_id": "319",
	"name": "EXT_disjoint_timer_query",
	"description": "The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension should be available in WebGL1 contexts only. EXT_disjoint_timer_query_webgl2 is available in WebGL 2 contexts .\n  In WebGL 2, the getQueryObject was renamed to getQueryParameter.\n  In WebGL 2, other queries (such as occlusion queries and primitive queries) are possible using WebGLQuery objects.\n  This extension exposes a new type:Unsigned 64-bit integer number.This extension exposes seven new constants.A GLint indicating the number of bits used to hold the query result for the given target.A WebGLQuery object, which is the currently active query for the given target.A GLuint64EXT containing the query result.A GLboolean indicating whether or not a query result is available.Elapsed time (in nanoseconds).The current time.A GLboolean indicating whether or not the GPU performed any disjoint operation.This extension exposes eight new methods.Creates a new WebGLTimerQueryEXT.Deletes a given WebGLTimerQueryEXT.Returns true if a given object is a valid WebGLTimerQueryEXT.The timer starts when all commands prior to beginQueryEXT have been fully executed.The timer stops when all commands prior to endQueryEXT have been fully executed.Records the current time into the corresponding query object.Returns information about a query target.Return the state of a query object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query"
},
{
	"api_id": "320",
	"name": "EXT_float_blend",
	"description": "The WebGL API's EXT_float_blend extension allows blending and draw buffers with 32-bit floating-point components.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts. However, to use it, you need to enable the use of 32-bit floating-point draw buffers by enabling the extension WEBGL_color_buffer_float (for WebGL1) or EXT_color_buffer_float (for WebGL2). Doing so automatically enables EXT_float_blend as well.With this extension enabled, calling drawArrays() or drawElements() with blending enabled and a draw buffer with 32-bit floating-point components will no longer result in an INVALID_OPERATION error.On devices that support the EXT_float_blend extension, it is automatically, implicitly, enabled when any one or more of EXT_color_buffer_float, OES_texture_float, or WEBGL_color_buffer_float are enabled. This ensures that content written before EXT_float_blend was exposed by WebGL will function as expected.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend"
},
{
	"api_id": "321",
	"name": "EXT_frag_depth",
	"description": "The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. It requires GLSL #version 300 es.Enable the extension:Now the output variable gl_FragDepthEXT is available to set a depth value of a fragment from within the fragment shader:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth"
},
{
	"api_id": "322",
	"name": "EXT_shader_texture_lod",
	"description": "The EXT_shader_texture_lod extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. It requires GLSL #version 300 es.The following new functions can be used in GLSL shader code, if this extension is enabled:Enabling the extensions:Shader code that avoids artifacts when wrapping texture coordinates:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod"
},
{
	"api_id": "323",
	"name": "EXT_sRGB",
	"description": "The EXT_sRGB extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constants in WebGL2 are: gl.SRGB, gl.SRGB8, gl.SRGB8_ALPHA8 and gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING.This extension exposes the following constants, which can be used in the texImage2D(), texSubImage2D(), renderbufferStorage() and getFramebufferAttachmentParameter() methods.Unsized sRGB format that leaves the precision up to the driver.Unsized sRGB format with unsized alpha component.Sized (8-bit) sRGB and alpha formats.Returns the framebuffer color encoding (gl.LINEAR or ext.SRGB_EXT).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB"
},
{
	"api_id": "324",
	"name": "EXT_texture_compression_bptc",
	"description": "The EXT_texture_compression_bptc extension is part of the WebGL API and exposes 4 BPTC compressed texture formats. These compression formats are called BC7 and BC6H in Microsoft's DirectX API.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: Support depends on the system's graphics driver. There is no support on Windows.This extension is available to both, WebGL1 and WebGL2 contexts.The compressed texture formats are exposed by 4 constants and can be used in two functions: compressedTexImage2D() and compressedTexSubImage2D().Compresses 8-bit fixed-point data. Each 4x4 block of texels consists of 128 bits of RGBA or image data. See also BC7 format.Compresses 8-bit fixed-point data. Each 4x4 block of texels consists of 128 bits of SRGB_ALPHA or image data. See also BC7 format.Compresses high dynamic range signed floating point values. Each 4x4 block of texels consists of 128 bits of RGB data. It only contains RGB data, so the returned alpha value is 1.0. See also BC6H format.Compresses high dynamic range unsigned floating point values. Each 4x4 block of texels consists of 128 bits of RGB data. It only contains RGB data, so the returned alpha value is 1.0. See also BC6H format.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_compression_bptc"
},
{
	"api_id": "325",
	"name": "EXT_texture_compression_rgtc",
	"description": "The EXT_texture_compression_rgtc extension is part of the WebGL API and exposes 4 RGTC compressed texture formats. RGTC is a block-based texture compression format suited for unsigned and signed red and red-green textures (Red-Green Texture Compression).WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: Support depends on the system's graphics driver. There is no support on Windows.This extension is available to both, WebGL1 and WebGL2 contexts.The compressed texture formats are exposed by 4 constants and can be used in two functions: compressedTexImage2D() and compressedTexSubImage2D().Each 4x4 block of texels consists of 64 bits of unsigned red image data. See also BC4 unsigned.Each 4x4 block of texels consists of 64 bits of signed red image data. See also BC4 signed.Each 4x4 block of texels consists of 64 bits of compressed unsigned red image data followed by 64 bits of compressed unsigned green image data. See also BC5 unsigned.Each 4x4 block of texels consists of 64 bits of compressed signed red image data followed by 64 bits of compressed signed green image data. See also BC5 signed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_compression_rgtc"
},
{
	"api_id": "326",
	"name": "EXT_texture_filter_anisotropic",
	"description": "The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).AF improves the quality of mipmapped texture access when viewing a textured primitive at an oblique angle. Using just mipmapping, these lookups have a tendency to average to grey.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.This is the pname argument to the gl.getParameter() call, and it returns the maximum available anisotropy.This is the pname argument to the gl.getTexParameter() and gl.texParameterf() / gl.texParameteri() calls and sets the desired maximum anisotropy for a texture.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic"
},
{
	"api_id": "327",
	"name": "EXT_texture_norm16",
	"description": "The EXT_texture_norm16 extension is part of the WebGL API and provides a set of new 16-bit signed normalized and unsigned normalized formats (fixed-point texture, renderbuffer and texture buffer).When this extension is enabled:WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL 2 contexts.Red 16-bit unsigned format. Color-renderable.RG 16-bit unsigned format. Color-renderable.RGB 16-bit unsigned format.RGBA 16-bit unsigned format. Color-renderable.Red 16-bit signed normalized format.RG 16-bit signed normalized format.RGB 16-bit signed normalized format.RGBA 16-bit signed normalized format.The WebGLRenderingContext.texImage2D() method accepts new formats when EXT_texture_norm16 is enabled. Example calls:\n  The WebGLRenderingContext.renderbufferStorage() method accepts ext.R16_EXT,\n  ext.RG16_EXT and ext.RGBA16_EXT as internal formats to create renderbuffers in these formats. Example calls:\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_norm16"
},
{
	"api_id": "328",
	"name": "ExtendableCookieChangeEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ExtendableCookieChangeEvent interface of the'Cookie Store API' is the event type passed to ServiceWorkerRegistration.oncookiechange() when any cookie changes occur. A cookie change event consists of a cookie and a type (either "changed" or "deleted".)Cookie changes that cause the ExtendableCookieChangeEvent to be dispatched are:Note: A cookie that is replaced due to the insertion of another cookie with the same name, domain, and path, is ignored and does not trigger a change event.Creates a new ExtendableCookieChangeEvent.This interface also inherits properties from ExtendableEvent.Returns an array containing the changed cookies.Returns an array containing the deleted cookies.In the below example we use CookieStoreManager.getSubscriptions() to get a list of existing subscriptions. (In service workers, a subscription is required in order to listen for events.) We unsubscribe from existing subscriptions using CookieStoreManager.unsubscribe(), then subscribe to the cookie with a name of 'COOKIE_NAME' using CookieStoreManager.subscribe(). If that cookie is changed, the event listener logs the event to the console. This will be an ExtendableCookieChangeEvent object, with the changed or deleted property containing the modified cookie.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ExtendableCookieChangeEvent"
},
{
	"api_id": "329",
	"name": "ExtendableEvent",
	"description": "The ExtendableEvent interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.If waitUntil() is called outside of the ExtendableEvent handler, the browser should throw an InvalidStateError; note also that multiple calls will stack up, and the resulting promises will be added to the list of extend lifetime promises.Note: The behavior described in the above paragraph was fixed in Firefox 43 (see bug 1180274.)This interface inherits from the Event interface.Note: This interface is only available when the global scope is a ServiceWorkerGlobalScope. It is not available when it is a Window, or the scope of another kind of worker.Creates a new ExtendableEvent object.Doesn't implement any specific properties, but inherits properties from its parent, Event.Inherits methods from its parent, Event.Extends the lifetime of the event. It is intended to be called in the install event handler for the installing worker and on the activate event handler for the active worker.This code snippet is from the service worker prefetch sample (see prefetch example live.) The code calls ExtendableEvent.waitUntil() in oninstall, delaying treating the ServiceWorkerRegistration.installing worker as installed until the passed promise resolves successfully. The promise resolves when all resources have been fetched and cached, or else when any exception occurs.The code snippet also shows a best practice for versioning caches used by the service worker. Though there's only one cache in this example, the same approach can be used for multiple caches. It maps a shorthand identifier for a cache to a specific, versioned cache name.Note: In Chrome, logging statements are visible via the "Inspect" interface for the relevant service worker accessed via chrome://serviceworker-internals.Note: When fetching resources, it's very important to use {mode: 'no-cors'} if there is any chance that the resources are served off of a server that doesn't support CORS. In this example, www.chromium.org doesn't support CORS.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent"
},
{
	"api_id": "330",
	"name": "ExtendableMessageEvent",
	"description": "The ExtendableMessageEvent interface of the Service Worker API represents the event object of a message event fired on a service worker (when a message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.This interface inherits from the ExtendableEvent interface.Creates a new ExtendableMessageEvent object instance.Inherits properties from its parent, ExtendableEvent.Returns the event's data. It can be any data type.Returns the origin of the Client that sent the message.Represents, in server-sent events, the last event ID of the event source. This is an empty string.Returns a reference to the Client object that sent the message.Returns the array containing the MessagePort objects representing the ports of the associated message channel.Inherits methods from its parent, ExtendableEvent.In the below example a page gets a handle to the ServiceWorker object via ServiceWorkerRegistration.active, and then calls its postMessage() function.The service worker can receive the message by listening to the message event:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent"
},
{
	"api_id": "331",
	"name": "EyeDropper",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The EyeDropper interface represents an instance of an eyedropper tool that can be opened and used by the user to select colors from the screen.Returns a new EyeDropper instance.The EyeDropper interface doesn't inherit any methods.Returns a promise that resolves to an object that gives access to the selected color.This example shows how to open an eyedropper tool and wait for the user to either select a pixel from the screen, or press Escape to cancel the eyedropper mode.This example shows that the eyedropper mode can also be aborted before the user has selected a color or pressed Escape.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper"
},
{
	"api_id": "332",
	"name": "FeaturePolicy",
	"description": "The FeaturePolicy interface of the Feature Policy API represents the set of policies applied to the current execution context.Returns a Boolean that indicates whether or not a particular feature is enabled in the specified context.Returns a list of names of all features supported by the User Agent. Feature whose name appears on the list might not be allowed by the Feature Policy of the current execution context and/or might not be accessible because of user's permissions.Returns a list of names of all features supported by the User Agent and allowed by the Feature Policy. Note that features appearing on this list might still be behind a user permission.Returns the Allow list for the specified feature.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FeaturePolicy"
},
{
	"api_id": "333",
	"name": "FederatedCredential",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The FederatedCredential interface of the Credential Management API provides information about credentials from a federated identity provider. A federated identity provider is an entity that a website trusts to correctly authenticate a user, and that provides an API for that purpose. OpenID Connect is an example of a federated identity provider framework.In browsers that support it, an instance of this interface may be passed in the credential member of the init object for global fetch().Creates a new FederatedCredential object.Inherits properties from its ancestor, Credential.Returns a string containing a credential's federated identity provider.Returns a string containing a credential's federated identity protocol.None.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential"
},
{
	"api_id": "334",
	"name": "fetch()",
	"description": "\n  The global fetch() method starts the process of fetching a\n  resource from the network, returning a promise which is fulfilled once the response is\n  available.\n\n  The promise resolves to the Response object\n  representing the response to your request.\n\n  A fetch() promise only rejects when a\n  network error is encountered (which is usually when there's a permissions issue or\n  similar). A fetch() promise does\nnot reject on HTTP errors (404, etc.). Instead, a\n  then() handler must check the Response.ok and/or\n  Response.status properties.\n\n  WindowOrWorkerGlobalScope is implemented by both Window and\n  WorkerGlobalScope, which means that the fetch() method is\n  available in pretty much any context in which you might want to fetch resources.\n\n  The fetch() method is controlled by the connect-src directive\n  of Content Security Policy\n  rather than the directive of the resources it's retrieving.\n\n  Note: The fetch() method's parameters are identical to\n  those of the Request() constructor.\n  This defines the resource that you wish to fetch. This can either be:\n  An object containing any custom settings that you want to apply to the request. The\n  possible options are:\n  \n    The request method, e.g., GET, POST. Note that the\n    Origin header is not set on Fetch requests with a method of\n    HEAD or GET.\n    (This behavior was corrected in Firefox 65 — see bug 1508661).\n    \n    Any headers you want to add to your request, contained within a\n    Headers object or an object literal with String\n    values. Note that some names are forbidden.\n    \n    Any body that you want to add to your request:\n    this can be a Blob, an ArrayBuffer, a TypedArray, a DataView,\n    a FormData, a URLSearchParams, string object or literal,\n    or a ReadableStream object. This latest possibility is still experimental; check the compatibility information to verify you can use it.\n    Note that a request using the GET or HEAD method cannot have a body.\n    \n    The mode you want to use for the request, e.g., cors,\n    no-cors, or same-origin.\n    Controls what browsers do with credentials (cookies, HTTP authentication entries, and TLS client certificates). Must be one of the following strings:Tells browsers to exclude credentials from the request, and ignore any credentials sent back in the response (e.g., any Set-Cookie header).Tells browsers to include credentials with requests to same-origin URLs, and use any credentials sent back in responses from same-origin URLs.Tells browsers to include credentials in both same- and cross-origin requests, and always use any credentials sent back in responses.Note: Credentials may be included in simple and "final" cross-origin requests, but should not be included in CORS preflight requests.A string indicating how the request will interact with the browser's HTTP cache. The possible values, default, no-store, reload, no-cache, force-cache, and only-if-cached, are documented in the article for the cache property of the Request object.How to handle a redirect response:\n    A string specifying the referrer of the request. This can be a\n    same-origin URL, about:client, or an empty string.\n    \n    Specifies the referrer policy to use for the request. May be one of no-referrer,\n    no-referrer-when-downgrade, same-origin,\n    origin, strict-origin,\n    origin-when-cross-origin,\n    strict-origin-when-cross-origin, or unsafe-url.\n    \n    Contains the subresource integrity\n    value of the request (e.g.,\n    sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).\n    \n    The keepalive option can be used to allow the request to outlive\n    the page. Fetch with the keepalive flag is a replacement for the\n    Navigator.sendBeacon() API.\n    \n    An AbortSignal object instance; allows you to communicate with a\n    fetch request and abort it if desired via an AbortController.\n    A Promise that resolves to a Response object.\n  The request was aborted due to a call to the AbortController\n  abort() method.\n  Can occur for the following reasons:\n  In our Fetch Request example (see Fetch Request live) we\n  create a new Request object using the relevant constructor, then fetch it\n  using a fetch() call. Since we are fetching an image, we run\n  Response.blob() on the response to give it the proper MIME type so it will be\n  handled properly, then create an Object URL of it and display it in an\n  <img> element.\n\n  In the Fetch with init then Request example (see Fetch Request init live), we do the same thing except that we pass in an\n  init object when we invoke fetch():\n\n  You could also pass the init object in with the\n  Request constructor to get the same effect:\n\n  You can also use an object literal as headers in\n  init.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/fetch"
},
{
	"api_id": "335",
	"name": "FetchEvent",
	"description": "This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch.Creates a new FetchEvent object. This constructor is not typically used. The browser creates these objects itself and provides them to fetch event callbacks.Inherits properties from its ancestor, Event.The id of the same-origin client that initiated the fetch.A Promise for a Response, or undefined if this fetch is not a navigation, or navigation preload is not enabled.The id of the client that is being replaced during a page navigation.The id of the client that replaces the previous client during a page navigation.The Request the browser intends to make.Inherits methods from its parent, ExtendableEvent.Prevent the browser's default fetch handling, and provide (a promise for) a response yourself.Extends the lifetime of the event. Used to notify the browser of tasks that extend beyond the returning of a response, such as streaming and caching.\n  This fetch event uses the browser default for non-GET requests.\n  For GET requests it tries to return a match in the cache, and falls back to the network. If it finds a match in the cache, it asynchronously updates the cache for next time.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent"
},
{
	"api_id": "336",
	"name": "File",
	"description": "The File interface provides information about files and allows JavaScript in a web page to access their content.File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the <input> element, or from a drag and drop operation's DataTransfer object.A File object is a specific kind of Blob, and can be used in any context that a Blob can. In particular, FileReader, URL.createObjectURL(), createImageBitmap(), and XMLHttpRequest.send() accept both Blobs and Files.See Using files from web applications for more information and examples.Returns a newly constructed File.Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).Returns the last modified Date of the file referenced by the File object.Returns the name of the file referenced by the File object.Returns the path the URL of the File is relative to.File implements Blob, so it also has the following properties available to it:Returns the size of the file in bytes.Returns the MIME type of the file.The File interface doesn't define any methods, but inherits methods from the Blob interface:Returns a new Blob object containing the data in the specified range of bytes of the source Blob.Transforms the File into a ReadableStream that can be used to read the File contents.Transforms the File into a stream and reads it to completion. It returns a promise that resolves with a string (text).Transforms the File into a stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/File"
},
{
	"api_id": "337",
	"name": "FileEntrySync",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The FileEntrySync interface represents a file in a file system. It lets you write content to a file.\n  Warning: This interface is deprecated and is no more on the standard track.\n  Do not use it anymore. Use the File and Directory Entries API instead.\n  To write content to file, create a FileWriter object by calling createWriter().Creates a new FileWriter associated with the file that the FileEntry represents.None.A FileWriterSync object.This method can raise a DOMException with the following codes:Returns a File that represents the current state of the file that this FileEntry represents.None.A File object.This method can raise a DOMException with the following codes:This feature is not part of any specification anymore. It is no longer on track to become a standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileEntrySync"
},
{
	"api_id": "338",
	"name": "FileList",
	"description": "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.All <input> element nodes have a files attribute of type FileList on them which allows access to the items in this list. For example, if the HTML includes the following file input:The following line of code fetches the first file in the node's file list as a File object:A read-only value indicating the number of files in the list.Returns a File object representing the file at the specified index in the file list.In this example, we log the names of all the files selected by the user.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileList"
},
{
	"api_id": "339",
	"name": "FileReader",
	"description": "The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.File objects may be obtained from a FileList object returned as a result of a user selecting files using the <input> element, or from a drag and drop operation's DataTransfer object.FileReader can only access the contents of files that the user has explicitly selected, either using an HTML <input type="file"> element or by drag and drop. It cannot be used to read a file by pathname from the user's file system. To read files on the client's file system by pathname, use the File System Access API. To read server-side files, use standard Ajax solutions, with CORS permission if reading cross-domain.Note: This feature is available in Web WorkersReturns a newly constructed FileReader.See Using files from web applications for details and examples.A DOMException representing the error that occurred while reading the file.A number indicating the state of the FileReader. This is one of the following:The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.Aborts the read operation. Upon return, the readyState will be DONE.Starts reading the contents of the specified Blob, once finished, the result attribute contains an ArrayBuffer representing the file's data.Starts reading the contents of the specified Blob, once finished, the result attribute contains the raw binary data from the file as a string.Starts reading the contents of the specified Blob, once finished, the result attribute contains a data: URL representing the file's data.Starts reading the contents of the specified Blob, once finished, the result attribute contains the contents of the file as a text string. An optional encoding name can be specified.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface. Remove the event listeners with removeEventListener(), once FileReader is no longer used, to avoid memory leaks.Fired when a read has been aborted, for example because the program called FileReader.abort().Fired when the read failed due to an error.Fired when a read has completed successfully.Fired when a read has completed, successfully or not.Fired when a read has started.Fired periodically as data is read.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileReader"
},
{
	"api_id": "340",
	"name": "FileReaderSync",
	"description": "The FileReaderSync interface allows to read File or Blob objects synchronously.Note: This feature is available in Web WorkersWarning: This interface is only available in workers as it enables synchronous I/O that could potentially block.This interface does not have any properties.This method converts a specified Blob or a File into an ArrayBuffer representing the input data as a binary string.This method converts a specified Blob or a File into a string representing the input data as a binary string. This method is deprecated, consider using readAsArrayBuffer() instead.This method converts a specified Blob or a File into a string representing the input data as a text string. The optional encoding parameter indicates the encoding to be used (e.g., iso-8859-1 or UTF-8). If not present, the method will apply a detection algorithm for it.This method converts a specified Blob or a File into a string representing the input data as a data URL.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync"
},
{
	"api_id": "341",
	"name": "FileSystem",
	"description": "The File and Directory Entries API interface FileSystem is used to represent a file system. These objects can be obtained from the filesystem property on any file system entry. Some browsers offer additional APIs to create and manage file systems, such as Chrome's requestFileSystem() method.This interface will not grant you access to the users filesystem. Instead you will have a "virtual drive" within the browser sandbox. If you want to gain access to the users filesystem you need to invoke the user by eg. installing a Chrome extension. The relevant Chrome API can be found here.There are two ways to get access to a FileSystem object:A string representing the file system's name. This name is unique among the entire list of exposed file systems.A FileSystemDirectoryEntry object which represents the file system's root directory. Through this object, you can gain access to all files and directories in the file system.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystem"
},
{
	"api_id": "342",
	"name": "FileSystemDirectoryEntry",
	"description": "The FileSystemDirectoryEntry interface of the File and Directory Entries API represents a directory in a file system. It provides methods which make it possible to access and manipulate the files in a directory, as well as to access the entries within the directory.You can create a new directory by calling getDirectory(). If you want to create subdirectories, create each child directory in sequence. If you try creating a directory using a full path that includes parent directories that do not exist yet, an error is returned. So create the hierarchy by recursively adding a new path after creating the parent directory.In the following code snippet, we create a directory called "Documents."This interface has no properties of its own, but inherits properties from its parent interface, FileSystemEntry.This interface inherits methods from its parent interface, FileSystemEntry.Creates a FileSystemDirectoryReader object which can be used to read the entries in this directory.Returns a FileSystemDirectoryEntry object representing a directory located at a given path, relative to the directory on which the method is called.Returns a FileSystemFileEntry object representing a file located within the directory's hierarchy, given a path relative to the directory on which the method is called.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry"
},
{
	"api_id": "343",
	"name": "FileSystemDirectoryHandle",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The FileSystemDirectoryHandle interface of the File System Access API provides a handle to a file system directory. The interface is accessed via the window.showDirectoryPicker() method.Inherits properties from its parent, FileSystemHandle.Inherits methods from its parent, FileSystemHandle.Returns a new async iterator of a given object's own enumerable property [key, value] pairsReturns a Promise fulfilled with a FileSystemFileHandle for a file with the specified name, within the directory the method is called.Returns a Promise fulfilled with a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called.Returns a new async iterator containing the keys for each item in FileSystemDirectoryHandle.Attempts to asynchronously remove an entry if the directory handle contains a file or directory called the name specified.Returns a Promise fulfilled with an Array of directory names from the parent handle to the specified child entry, with the name of the child entry as the last array item.Returns a new async iterator containing the values for each index in the FileSystemDirectoryHandle object.Returns the entries function by default.The following example returns a directory handle with the specified name, if the directory does not exist it is created.The following asynchronous function uses resolve() to find the path to a chosen file, relative to a specified directory handle.The following example scans recursively through a directory to return FileSystemFileHandle objects for each file in that directory:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle"
},
{
	"api_id": "344",
	"name": "FileSystemDirectoryReader",
	"description": "The FileSystemDirectoryReader interface of the File and Directory Entries API lets you access the FileSystemFileEntry-based objects (generally FileSystemFileEntry or FileSystemDirectoryEntry) representing each entry in a directory.Returns an array containing some number of the directory's entries. Each item in the array is an object based on FileSystemEntry—typically either FileSystemFileEntry or FileSystemDirectoryEntry.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader"
},
{
	"api_id": "345",
	"name": "FileSystemEntry",
	"description": "The FileSystemEntry interface of the File and Directory Entries API represents a single entry in a file system. The entry can be a file or a directory (directories are represented by the FileSystemDirectoryEntry interface). It includes methods for working with files—including copying, moving, removing, and reading files—as well as information about a file it points to—including the file name and its path from the root to the entry.You don't create FileSystemEntry objects directly. Instead, you will receive an object based on this interface through other APIs. This interface serves as a base class for the FileSystemFileEntry and FileSystemDirectoryEntry interfaces, which provide features specific to file system entries representing files and directories, respectively.The FileSystemEntry interface includes methods that you would expect for manipulating files and directories, but it also includes a convenient method for obtaining the URL of the entry: toURL(). It also introduces a new URL scheme: filesystem:.You can use the filesystem: scheme on Google Chrome to see all the files and folders that are stored in the origin of your app. Just use filesystem: scheme for the root directory of the origin of the app. For example, if your app is in http://www.html5rocks.com, open filesystem:http://www.html5rocks.com/temporary/ in a tab. Chrome shows a read-only list of all the files and folders stored the origin of your app.To see an example of how toURL() works, see the method description. The snippet below shows you how you can remove a file by name.This interface provides the following properties.A FileSystem object representing the file system in which the entry is located.A string object which provides the full, absolute path from the file system's root to the entry; it can also be thought of as a path which is relative to the root directory, prepended with a "/" character.A boolean value which is true if the entry represents a directory; otherwise, it's false.A Boolean which is true if the entry represents a file. If it's not a file, this value is false.A string containing the name of the entry (the final part of the path, after the last "/" character).This interface defines the following methods.Copies the file or directory to a new location on the file system.Obtains metadata about the file, such as its modification date and size.Returns a FileSystemDirectoryEntry representing the entry's parent directory.Moves the file or directory to a new location on the file system, or renames the file or directory.Removes the specified file or directory. You can only remove directories which are empty.Creates and returns a URL which identifies the entry. This URL uses the URL scheme "filesystem: ".",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry"
},
{
	"api_id": "346",
	"name": "FileSystemFileEntry",
	"description": "The FileSystemFileEntry interface of the File and Directory Entries API represents a file in a file system. It offers properties describing the file's attributes, as well as the file() method, which creates a File object that can be used to read the file.Inherits the properties of its parent interface, FileSystemEntry, but has no properties unique to this interface.Creates a new File object which can be used to read the file.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry"
},
{
	"api_id": "347",
	"name": "FileSystemFileHandle",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The FileSystemFileHandle interface of the File System Access API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open. The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.Inherits properties from its parent, FileSystemHandle.Inherits methods from its parent, FileSystemHandle.\n  Returns a Promise which resolves to a File object\n  representing the state on disk of the entry represented by the handle.\n  \n  Returns a Promise which resolves to a newly created FileSystemWritableFileStream\n  object that can be used to write to a file.\n  The following asynchronous function presents a file picker and once a file is chosen, uses the getFile() method to retrieve the contents.The following asynchronous function writes the given contents to the file handle, and thus to disk.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle"
},
{
	"api_id": "348",
	"name": "FileSystemHandle",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The FileSystemHandle interface of the File System Access API is an object which represents a file or directory entry. Multiple handles can represent the same entry. For the most part you do not work with FileSystemHandle directly but rather its child interfaces FileSystemFileHandle and FileSystemDirectoryHandle.Below is a list of interfaces based on the FileSystemHandle interface.Represents a handle to a file entry.Provides a handle to a directory entry.Returns the type of entry. This is 'file' if the associated entry is a file or 'directory'.Returns the name of the associated entry.Compares two handles to see if the associated entries (either a file or directory) match.Queries the current permission state of the current handle.Requests read or readwrite permissions for the file handle.The below code allows the user to choose a file from the file picker and then tests to see whether the handle returned is a file or directoryThe following asynchronous function returns true if user has granted read or readwrite permissions to the file handle. Permission is requested if not.The following function compares a single entry with an array of entries, and returns a new array with any matching entries removed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle"
},
{
	"api_id": "349",
	"name": "FileSystemSync",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.In the File and Directory Entries API, a FileSystemSync object represents a file system. It has two properties.\n  Warning: This interface is deprecated and is no more on the standard track.\n  Do not use it anymore. Use the File and Directory Entries API instead.\n  The FileSystemSync object is your gateway to the entire API and you will use it a lot. So once you have a reference, cache the object in a global variable or class property.A string that represents the name of the file system. The name must be unique across the list of exposed file systems.A DirectoryEntry that is the root directory of the file system.This feature is not part of any specification anymore. It is no longer on track to become a standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemSync"
},
{
	"api_id": "350",
	"name": "FileSystemWritableFileStream",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The FileSystemWritableFileStream interface of the File System Access API is a WritableStream object with additional convenience methods, which operates on a single file on disk. The interface is accessed through the FileSystemFileHandle.createWritable() method.Inherits properties from its parent, WritableStream.Inherits methods from its parent, WritableStream.Writes content into the file the method is called on, at the current file cursor offset.Updates the current file cursor offset to the position (in bytes) specified.Resizes the file associated with the stream to be the specified size in bytes.This asynchronous function opens the 'Save File' picker, which returns a FileSystemFileHandle once a file is selected. From which a writable stream is then created using the FileSystemFileHandle.createWritable() method.A user defined Blob is then written to the stream which is subsequently closed.The following show different examples of options that can be passed into the write() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream"
},
{
	"api_id": "351",
	"name": "FocusEvent",
	"description": "The FocusEvent interface represents focus-related events, including focus, blur, focusin, and focusout.Creates a FocusEvent event with the given parameters.This interface also inherits properties from its parent UIEvent, and indirectly from Event.An EventTarget representing a secondary target for this event. In some cases (such as when tabbing in or out a page), this property may be set to null for security reasons.This interface has no specific methods. It inherits methods from its parent UIEvent, and indirectly from Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent"
},
{
	"api_id": "352",
	"name": "FontFace",
	"description": "The FontFace interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.Constructs and returns a new FontFace object, built from an external resource described by a URL or from an ArrayBuffer.A string that retrieves or sets the ascent metric of the font. It is equivalent to the ascent-override descriptor.A string that retrieves or sets the descent metric of the font. It is equivalent to the descent-override descriptor.A string that determines how a font face is displayed based on whether and when it is downloaded and ready to use.A string that retrieves or sets the family of the font. It is equivalent to the font-family descriptor.A string that retrieves or sets infrequently used font features that are not available from a font's variant properties. It is equivalent to the font-feature-settings descriptor.A string that retrieves or sets the line-gap metric of the font. It is equivalent to the line-gap-override descriptor.Returns a Promise that resolves with the current FontFace object when the font specified in the object's constructor is done loading or rejects with a SyntaxError DOMException.Returns an enumerated value indicating the status of the font, one of "unloaded", "loading", "loaded", or "error".A string that retrieves or sets how the font stretches. It is equivalent to the font-stretch descriptor.A string that retrieves or sets the style of the font. It is equivalent to the font-style descriptor.A string that retrieves or sets the range of unicode codepoints encompassing the font. It is equivalent to the unicode-range descriptor.A string that retrieves or sets the variant of the font. It is equivalent to the font-variant descriptor.A string that retrieves or sets the variation settings of the font. It is equivalent to the font-variation-settings descriptor.A string that contains the weight of the font. It is equivalent to the font-weight descriptor.Loads a font based on current object's constructor-passed requirements, including a location or source buffer, and returns a Promise that resolves with the current FontFace object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FontFace"
},
{
	"api_id": "353",
	"name": "FontFaceSet",
	"description": "The FontFaceSet interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status. It is available as Document.fonts.Indicates the font-face's loading status. It will be one of 'loading' or 'loaded'.Promise which resolves once font loading and layout operations have completed.Returns the number of values in the FontFaceSet.Fires when a font-face set has started loading.Fires when a font face set has finished loading.Fires when an error occurred whilst loading a font-face set.Adds a font to the font set.A boolean value that indicates whether a font is loaded, but doesn't initiate a load when it isn't.Removes all manually-added fonts from the font set. CSS-connected fonts are unaffected.Removes a manually-added font from the font set. CSS-connected fonts are unaffected.Returns a new iterator with the values for each element in the FontFaceSet in insertion order.Executes a provided function for each value in the FontFaceSet object.Returns a Boolean asserting whether an element is present with the given value.An alias for CustomStateSet.values().Returns a Promise which resolves to a list of font-faces for a requested font.Returns a new iterator object that yields the values for each element in the FontFaceSet object in insertion order.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet"
},
{
	"api_id": "354",
	"name": "FontFaceSetLoadEvent",
	"description": "The FontFaceSetLoadEvent interface of the CSS Font Loading API is fired whenever a FontFaceSet loads.Creates a new FontFaceSetLoadEvent object.Returns an array of FontFace instances each of which represents a single usable font.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSetLoadEvent"
},
{
	"api_id": "355",
	"name": "FormData",
	"description": "The FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the fetch() or XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".You can also pass it directly to the URLSearchParams constructor if you want to generate query parameters in the way a <form> would do if it were using simple GET submission.An object implementing FormData can directly be used in a for...of structure, instead of entries(): for (const p of myFormData) is equivalent to for (const p of myFormData.entries()).Note: This feature is available in Web Workers.Creates a new FormData object.Appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.Deletes a key/value pair from a FormData object.Returns an iterator iterates through all key/value pairs contained in the FormData.Returns the first value associated with a given key from within a FormData object.Returns an array of all the values associated with a given key from within a FormData.Returns whether a FormData object contains a certain key.Returns an iterator iterates through all keys of the key/value pairs contained in the FormData.Sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.Returns an iterator iterates through all values contained in the FormData.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData"
},
{
	"api_id": "356",
	"name": "FormDataEvent",
	"description": "The FormDataEvent interface represents a formdata event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.This allows a FormData object to be quickly obtained in response to a formdata event firing, rather than needing to put it together yourself when you wish to submit form data via a method like XMLHttpRequest (see Using FormData objects).Creates a new FormDataEvent object instance.Inherits properties from its parent interface, Event.Contains the FormData object representing the data contained in the form when the event was fired.Inherits methods from its parent interface, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent"
},
{
	"api_id": "357",
	"name": "GainNode",
	"description": "The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.The gain is a unitless value, changing with time, that is multiplied to each corresponding sample of all input channels. If modified, the new gain is instantly applied, causing unaesthetic 'clicks' in the resulting audio. To prevent this from happening, never change the value directly but use the exponential interpolation methods on the AudioParam interface.\n  \nCreates and returns a new GainNode object. As an alternative, you can use the BaseAudioContext.createGain() factory method; see Creating an AudioNode.Inherits properties from its parent, AudioNode.An a-rate AudioParam representing the amount of gain to apply. You have to set AudioParam.value or use the methods of AudioParam to change the effect of gain.No specific method; inherits methods from its parent, AudioNode.See BaseAudioContext.createGain() for example code showing how to use an AudioContext to create a GainNode.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GainNode"
},
{
	"api_id": "358",
	"name": "Gamepad",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Gamepad interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.A Gamepad object can be returned in one of two ways: via the gamepad property of the gamepadconnected and gamepaddisconnected events, or by grabbing any position in the array returned by the Navigator.getGamepads() method.An array representing the controls with axes present on the device (e.g. analog thumb sticks).An array of gamepadButton objects representing the buttons present on the device.A boolean indicating whether the gamepad is still connected to the system.Returns the VRDisplay.displayId of an associated VRDisplay (if relevant) — the VRDisplay that the gamepad is controlling the displayed scene of.An enum defining what hand the controller is being held in, or is most likely to be held in.An array containing GamepadHapticActuator objects, each of which represents haptic feedback hardware available on the controller.A GamepadHapticActuator object, which represents haptic feedback hardware available on the controller.A string containing identifying information about the controller.An integer that is auto-incremented to be unique for each device currently connected to the system.A string indicating whether the browser has remapped the controls on the device to a known layout.A GamepadPose object representing the pose information associated with a WebVR controller (e.g. its position and orientation in 3D space).A DOMHighResTimeStamp representing the last time the data for this gamepad was updated.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Gamepad"
},
{
	"api_id": "359",
	"name": "GamepadButton",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The GamepadButton interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.A GamepadButton object is returned by querying any value of the array returned by the buttons property of the Gamepad interface.A boolean value indicating whether the button is currently pressed (true) or unpressed (false).A boolean value indicating whether the button is currently touched (true) or not touched (false).A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.The button values in the following example are stored as an array of GamepadButton objects. This simple example checks to see if the GamepadButton.value of a button is greater than 0, or if the GamepadButton.pressed property indicates the button has been pressed.Using the Gamepad API",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton"
},
{
	"api_id": "360",
	"name": "GamepadEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events gamepadconnected and gamepaddisconnected are fired in response to.Returns a new GamepadEvent object.Returns a Gamepad object, providing access to the associated gamepad data for the event fired.The gamepad property being called on a fired gamepadconnected event.And on a gamepaddisconnected event.Using the Gamepad API",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent"
},
{
	"api_id": "361",
	"name": "GamepadHapticActuator",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The GamepadHapticActuator interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.This interface is accessible through the Gamepad.hapticActuators property.Returns an enum representing the type of the haptic hardware.Makes the hardware pulse at a certain intensity for a specified duration.Makes the hardware play a specific vibration pattern.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator"
},
{
	"api_id": "362",
	"name": "GamepadPose",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The GamepadPose interface of the Gamepad API represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information.)This interface is accessible through the Gamepad.pose property.Returns a boolean indicating whether the gamepad is capable of returning orientation information (true) or not (false).Returns a boolean indicating whether the gamepad is capable of returning position information (true) or not (false).Returns the position of the Gamepad as a 3D vector.Returns the linear velocity of the Gamepad, in meters per second.Returns the linear acceleration of the Gamepad, in meters per second per second.Returns the orientation of the Gamepad, as a quarternion value.Returns the angular velocity of the Gamepad, in radians per second.Returns the angular acceleration of the Gamepad, in meters per second per second.TBD.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose"
},
{
	"api_id": "363",
	"name": "Geolocation",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Geolocation interface represents an object able to obtain the position of the device programmatically. It gives Web content access to the location of the device. This allows a website or app to offer customized results based on the user's location.An object with this interface is obtained using the navigator.geolocation property implemented by the Navigator object.Note: For security reasons, when a web page tries to access location information, the user is notified and asked to grant permission. Be aware that each browser has its own policies and methods for requesting this permission.The Geolocation interface neither implements, nor inherits any property.The Geolocation interface doesn't inherit any method.Determines the device's current location and gives back a GeolocationPosition object with the data.Returns a long value representing the newly established callback function to be invoked whenever the device location changes.Removes the particular handler previously installed using watchPosition().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation"
},
{
	"api_id": "364",
	"name": "GeolocationCoordinates",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.The GeolocationCoordinates interface doesn't inherit any properties.Returns a double representing the position's latitude in decimal degrees.Returns a double representing the position's longitude in decimal degrees.Returns a double representing the position's altitude in meters, relative to sea level. This value can be null if the implementation cannot provide the data.Returns a double representing the accuracy of the latitude and longitude properties, expressed in meters.Returns a double representing the accuracy of the altitude expressed in meters. This value can be null.Returns a double representing the direction towards which the device is facing. This value, specified in degrees, indicates how far off from heading true north the device is. 0 degrees represents true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If speed is 0, heading is NaN. If the device is unable to provide heading information, this value is null.Returns a double representing the velocity of the device in meters per second. This value can be null.The GeolocationCoordinates interface neither implements, nor inherits any method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates"
},
{
	"api_id": "365",
	"name": "GeolocationPosition",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The GeolocationPosition interface represents the position of the concerned device at a given time. The position, represented by a GeolocationCoordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.The GeolocationPosition interface doesn't inherit any properties.Returns a GeolocationCoordinates object defining the current location.Returns a DOMTimeStamp representing the time at which the location was retrieved.The GeolocationPosition interface neither implements, nor inherits any methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPosition"
},
{
	"api_id": "366",
	"name": "GeolocationPositionError",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The GeolocationPositionError interface represents the reason of an error occurring when using the geolocating device.The GeolocationPositionError interface doesn't inherit any property.Returns an unsigned short representing the error code. The following values are possible:Returns a human-readable string describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.The GeolocationPositionError interface neither implements nor inherits any method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError"
},
{
	"api_id": "367",
	"name": "GestureEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The GestureEvent is a proprietary interface specific to WebKit which gives information regarding multi-touch gestures. Events using this interface include gesturestart, gesturechange, and gestureend.GestureEvent derives from UIEvent, which in turn derives from Event.Creates a GestureEvent object.This interface also inherits properties of its parents, UIEvent and Event.Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation. Initial value: 0.0Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the gesture. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: 1.0This interface also inherits methods of its parents, UIEvent and Event.Initializes the value of an GestureEvent. If the event has already being dispatched, this method does nothing.Not part of any specification. Apple has a description at the Safari Developer Library.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GestureEvent"
},
{
	"api_id": "368",
	"name": "GlobalEventHandlers",
	"description": "The GlobalEventHandlers mixin describes the event handlers common to several interfaces like HTMLElement, Document, or Window. Each of these interfaces can, of course, add more event handlers in addition to the ones listed below.Note: GlobalEventHandlers is a mixin and not an interface; you can't actually create an object of type GlobalEventHandlers.This interface doesn't include any properties except for the event handlers listed below.These event handlers are defined on the GlobalEventHandlers mixin, and implemented by HTMLElement, Document, Window, as well as by WorkerGlobalScope for Web Workers.An event handler representing the code to be called when the abort event is raised.An event handler called when an animationcancel event is sent, indicating that a running CSS animation has been canceled.An event handler called when an animationend event is sent, indicating that a CSS animation has stopped playing.An event handler called when an animationiteration event has been sent, indicating that a CSS animation has begun playing a new iteration of the animation sequence.An event handler called when an animationstart event is sent, indicating that a CSS animation has started playing.An event handler called when an auxclick event is sent, indicating that a non-primary button has been pressed on an input device (e.g. a middle mouse button).An event handler representing the code to be called when the error event is raised.An event handler representing the code to be called when the cancel event is raised.An event handler representing the code to be called when the change event is raised.An event handler representing the code to be called when the click event is raised.An event handler representing the code to be called when the close event is raised.An event handler representing the code to be called when the contextmenu event is raised.An event handler representing the code to be called when the dblclick event is raised.An event handler representing the code to be called when the drag event is raised.An event handler representing the code to be called when the dragend event is raised.An event handler representing the code to be called when the dragenter event is raised.An event handler representing the code to be called when the dragleave event is raised.An event handler representing the code to be called when the dragover event is raised.An event handler representing the code to be called when the dragstart event is raised.An event handler representing the code to be called when the drop event is raised.An event handler representing the code to be called when the emptied event is raised.An event handler representing the code to be called when the ended event is raised.An event handler for processing formdata events, fired after the entry list representing the form's data is constructed.An event handler representing the code to be called when the gotpointercapture event type is raised.An event handler representing the code to be called when the input event is raised.An event handler representing the code to be called when the invalid event is raised.An event handler representing the code to be called when the keydown event is raised.An event handler representing the code to be called when the keypress event is raised.An event handler representing the code to be called when the keyup event is raised.An event handler representing the code to be called when the load event is raised.An event handler representing the code to be called when the loadeddata event is raised.An event handler representing the code to be called when the loadedmetadata event is raised.An event handler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)An event handler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)An event handler representing the code to be called when the lostpointercapture event type is raised.An event handler representing the code to be called when the mousedown event is raised.An event handler representing the code to be called when the mouseenter event is raised.An event handler representing the code to be called when the mouseleave event is raised.An event handler representing the code to be called when the mousemove event is raised.An event handler representing the code to be called when the mouseout event is raised.An event handler representing the code to be called when the mouseover event is raised.An event handler representing the code to be called when the mouseup event is raised.An event handler representing the code to be called when the mousewheel event is raised. Deprecated. Use onwheel instead.An event handler representing the code to be called when the wheel event is raised.An event handler representing the code to be called when the pause event is raised.An event handler representing the code to be called when the play event is raised.An event handler representing the code to be called when the playing event is raised.An event handler representing the code to be called when the pointerdown event is raised.An event handler representing the code to be called when the pointermove event is raised.An event handler representing the code to be called when the pointerup event is raised.An event handler representing the code to be called when the pointercancel event is raised.An event handler representing the code to be called when the pointerover event is raised.An event handler representing the code to be called when the pointerout event is raised.An event handler representing the code to be called when the pointerenter event is raised.An event handler representing the code to be called when the pointerleave event is raised.An event handler representing the code to be called when the pointerlockchange event is raised.An event handler representing the code to be called when the pointerlockerror event is raised.An event handler representing the code to be called when the progress event is raised.An event handler representing the code to be called when the ratechange event is raised.An event handler representing the code to be called when the scroll event is raised.An event handler representing the code to be called when the securitypolicyviolation event is raised after a Content Security Policy violation.An event handler representing the code to be called when the seeked event is raised.An event handler representing the code to be called when the seeking event is raised.An event handler representing the code to be called when the select event is raised.An event handler representing the code to be called when the selectstart event is raised, i.e. when the user starts to make a new text selection on a web page.An event handler representing the code to be called when the selectionchange event is raised, i.e. when the text selected on a web page changes.An event handler representing the code to be called when the show event is raised.An event handler representing the code to be called when the slotchange event is raised.An event handler representing the code to be called when the stalled event is raised.An event handler representing the code to be called when the submit event is raised.An event handler representing the code to be called when the suspend event is raised.An event handler representing the code to be called when the timeupdate event is raised.An event handler representing the code to be called when the volumechange event is raised.An event handler called when a transitioncancel event is sent, indicating that a CSS transition has been cancelled.An event handler called when a transitionend event is sent, indicating that a CSS transition has finished playing.An event handler called when a transitionrun event is sent, indicating that a CSS transition is running, though not necessarily started.An event handler called when a transitionstart event is sent, indicating that a CSS transition has started transitioning.An event handler representing the code to be called when the waiting event is raised.This interface defines no methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers"
},
{
	"api_id": "369",
	"name": "GravitySensor",
	"description": "The GravitySensor interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.Creates a new GravitySensor object.Inherits properties from its ancestors, Accelerometer, Sensor, and EventTarget.GravitySensor doesn't have own methods. However, it inherits methods from its parent interfaces, Sensor and EventTarget.GravitySensor doesn't have own events. However, it inherits events from its parent interface, Sensor.Gravity is typically read in the reading event callback. In the example below this occurs sixty times a second.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/GravitySensor"
},
{
	"api_id": "370",
	"name": "Gyroscope",
	"description": "The Gyroscope interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new Gyroscope object.Returns a double, containing the angular velocity of the device along the device's x axis.Returns a double, containing the angular velocity of the device along the device's y axis.Returns a double, containing the angular velocity of the device along the device's z axis.Gyroscope doesn't have own methods. However, it inherits methods from its parent interfaces, Sensor and EventTarget.Gyroscope doesn't have own events. However, it inherits events from its parent interface, Sensor.The gyroscope is typically read in the reading event callback. In the example below this occurs sixty times a second.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope"
},
{
	"api_id": "371",
	"name": "HashChangeEvent",
	"description": "The HashChangeEvent interface represents events that fire when the fragment identifier of the URL has changed.The fragment identifier is the part of the URL that follows (and includes) the # symbol.This interface also inherits the properties of its parent, Event.The new URL to which the window is navigating.The previous URL from which the window was navigated.This interface has no methods of its own, but inherits the methods of its parent, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent"
},
{
	"api_id": "372",
	"name": "Headers",
	"description": "The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers.A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs. You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.For security reasons, some headers can only be controlled by the user agent. These headers include the forbidden header names and forbidden response header names.A Headers object also has an associated guard, which takes a value of immutable, request, request-no-cors, response, or none. This affects whether the set(), delete(), and append() methods will mutate the header. For more information see Guard.You can retrieve a Headers object via the Request.headers and Response.headers properties, and create a new Headers object using the Headers() constructor.An object implementing Headers can directly be used in a for...of structure, instead of entries(): for (var p of myHeaders) is equivalent to for (var p of myHeaders.entries()).Note: you can find more out about the available headers by reading our HTTP headers reference.Creates a new Headers object.Appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.Deletes a header from a Headers object.Returns an iterator allowing to go through all key/value pairs contained in this object.Executes a provided function once for each array element.Returns a String sequence of all the values of a header within a Headers object with a given name.Returns a boolean stating whether a Headers object contains a certain header.Returns an iterator allowing you to go through all keys of the key/value pairs contained in this object.Sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.Returns an iterator allowing you to go through all values of the key/value pairs contained in this object.Note: To be clear, the difference between Headers.set() and Headers.append() is that if the specified header does already exist and does accept multiple values, Headers.set() will overwrite the existing value with the new one, whereas Headers.append() will append the new value onto the end of the set of values. See their dedicated pages for example code.Note: All of the Headers methods will throw a TypeError if you try to pass in a reference to a name that isn't a valid HTTP Header name. The mutation operations will throw a TypeError if the header has an immutable Guard. In any other failure case they fail silently.Note: When Header values are iterated over, they are automatically sorted in lexicographical order, and values from duplicate header names are combined.In the following snippet, we create a new header using the Headers() constructor, add a new header to it using append(), then return that header value using get():The same can be achieved by passing an array of arrays or an object literal to the constructor:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Headers"
},
{
	"api_id": "373",
	"name": "HID",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HID interface provides methods for connecting to HID devices, listing attached HID devices and event handlers for connected HID devices.This interface also inherits properties of its parent, EventTarget.Fired when an HID device is connected.Fired when an HID device is disconnected.This interface also inherits methods of its parent, EventTarget.Returns a Promise that resolves with an array of connected HIDDevice objects.Returns a Promise that resolves with an array of connected HIDDevice objects. Calling this function will trigger the user agent's permission flow in order to gain permission to access one selected device from the returned list of devices.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HID"
},
{
	"api_id": "374",
	"name": "HIDConnectionEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HIDConnectionEvent interface of the WebHID API represents HID connection events, and is the event type passed to HID.onconnect and HID.ondisconnect when an input report is received.Returns a new HIDConnectionEvent object. Typically this constructor is not used as events are created when an input report is received.This interface also inherits properties from Event.Returns the HIDDevice instance representing the device associated with the connection event.The following example registers event listeners for connect and disconnect events, then prints the HIDDevice.productName to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HIDConnectionEvent"
},
{
	"api_id": "375",
	"name": "HIDDevice",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HIDDevice interface of the WebHID API represents a HID Device. It provides properties for accessing information about the device, methods for opening and closing the connection, and the sending and receiving of reports.This interface also inherits properties from EventTarget.Returns a boolean, true if the device has an open connection.Returns the vendorId of the HID device.Returns the productID of the HID device.Returns a string containing the product name of the HID device.Returns an array of report formats for the HID device.Fires when a report is sent from the device.This interface also inherits methods from EventTarget.Opens a connection to this HID device, and returns a Promise which resolves once the connection has been successful.Closes the connection to this HID device, and returns a Promise which resolves once the connection has been closed.Sends an output report to this HID Device, and returns a Promise which resolves once the report has been sent.Sends a feature report to this HID device, and returns a Promise which resolves once the report has been sent.Receives a feature report from this HID device in the form of a Promise which resolves with a DataView. This allows typed access to the contents of this message.The following example demonstrates listening for an inputreport event that will allow the application to detect which button is pressed on a Joy-Con Right device.In the following example sendFeatureReport is used to make a device blink.You can see more examples, and live demos in the article Connecting to uncommon HID devices.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HIDDevice"
},
{
	"api_id": "376",
	"name": "HIDInputReportEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HIDInputReportEvent interface of the WebHID API is passed to HIDDevice.inputreport_event when an input report is received from any associated HID device.This interface also inherits properties from Event.A DataView containing the data from the input report, excluding the reportId if the HID interface uses report IDs.The HIDDevice instance that represents the HID interface that sent the input report.The one-byte identification prefix for this report, or 0 if the HID interface does not use report IDs.This interface inherits methods from its parent, Event.The following example demonstrates listening for an inputReport that will allow the application to detect which button is pressed on a Joy-Con Right device. You can see more examples, and live demos in the article Connecting to uncommon HID devices.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HIDInputReportEvent"
},
{
	"api_id": "377",
	"name": "History",
	"description": "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.The History interface doesn't inherit any property.Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either auto or manual.Returns an any value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a popstate event.The History interface doesn't inherit any methods.This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to history.go(-1).Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception.This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to history.go(1).Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling go() without parameters or a value of 0 reloads the current page. Internet Explorer lets you specify a string, instead of an integer, to go to a specific URL in the history list.Pushes the given data onto the session history stack with the specified title (and, if provided, URL). The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized. Note that all browsers but Safari currently ignore the title parameter. For more information, see Working with the History API.Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized. Note that all browsers but Safari currently ignore the title parameter. For more information, see Working with the History API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/History"
},
{
	"api_id": "378",
	"name": "HkdfParams",
	"description": "A string. This should be set to HKDF.A string representing the digest algorithm to use. This may be one of:An ArrayBuffer, a TypedArray, or a DataView. The HKDF specification states that adding salt "adds significantly to the strength of HKDF". Ideally, the salt is a random or pseudo-random value with the same length as the output of the digest function. Unlike the input key material passed into deriveKey(), salt does not need to be kept secret.An ArrayBuffer, a TypedArray, or a DataView representing application-specific contextual information. This is used to bind the derived key to an application or context, and enables you to derive different keys for different contexts while using the same input key material. It's important that this should be independent of the input key material itself. This property is required but may be an empty buffer.See the examples for SubtleCrypto.deriveKey().Browsers that support the "HKDF" algorithm for the SubtleCrypto.deriveKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams"
},
{
	"api_id": "379",
	"name": "HmacImportParams",
	"description": "The HmacImportParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when generating a key for the HMAC algorithm.A string. This should be set to HMAC.A string representing the name of the digest function to use. The can take a value of SHA-256, SHA-384, or SHA-512.Warning: Although you can technically pass SHA-1 here, this is strongly discouraged as it is considered vulnerable.A Number representing the length in bits of the key. If this is omitted the length of the key is equal to the length of the digest generated by the digest function you have chosen. Unless you have a good reason to use a different length, omit this property and use the default.See the examples for SubtleCrypto.importKey().Browsers that support the "HMAC" algorithm for the SubtleCrypto.importKey(), SubtleCrypto.unwrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HmacImportParams"
},
{
	"api_id": "380",
	"name": "HmacKeyGenParams",
	"description": "The HmacKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating a key for the HMAC algorithm.A string. This should be set to HMAC.A string representing the name of the digest function to use. You can pass any of SHA-1, SHA-256, SHA-384, or SHA-512 here.A Number — the length in bits of the key. If this is omitted, the length of the key is equal to the block size of the hash function you have chosen. Unless you have a good reason to use a different length, omit this property and use the default.See the examples for SubtleCrypto.generateKey().Browsers that support the "HMAC" algorithm for the SubtleCrypto.generateKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HmacKeyGenParams"
},
{
	"api_id": "381",
	"name": "HMDVRDevice",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HMDVRDevice interface of the WebVR API represents a head mounted display, providing access to information about each eye, and allowing us to modify the current field of view.Returns current parameters for the eye specified as its argument ("left" or "right") — such as field of view information — stored in a VREyeParameters object.Sets the field of view for both eyes.This interface doesn't define any properties of its own, but it does inherit the properties of its parent interface, VRDisplay.Returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. All devices that are part of the same physical piece of hardware will have the same hardwareUnitId.Returns the ID for this specific VRDevice. The ID shouldn't change across browser restarts, allowing configuration data to be saved based on it.A human-readable name to identify the VRDevice.The following example, taken from the WebVR spec, finds the first available HMDVRDevice and its associated PositionSensorVRDevice, if it has one.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice"
},
{
	"api_id": "382",
	"name": "HTMLAnchorElement",
	"description": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to <a> element; not to be confused with <link>, which is represented by HTMLLinkElement)Inherits properties from its parent, HTMLElement.A string representing a single character that switches input focus to the hyperlink.A string indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.A string representing the fragment identifier, including the leading hash mark ('#'), if any, in the referenced URL.A string representing the hostname and port (if it's not the default port) in the referenced URL.A string representing the hostname in the referenced URL.A string that is the result of parsing the href HTML attribute relative to the document, containing a valid URL of a linked resource.A string that reflects the hreflang HTML attribute, indicating the language of the linked resource.Returns a string containing the origin of the URL, that is its scheme, its domain and its port.A string containing the password specified before the domain name.A string containing an initial '/' followed by the path of the URL, not including the query string or fragment.A string representing the port component, if any, of the referenced URL.A string representing the protocol component, including trailing colon (':'), of the referenced URL.A string that reflects the referrerpolicy HTML attribute indicating which referrer to use.A string that reflects the rel HTML attribute, specifying the relationship of the target object to the linked object.Returns a DOMTokenList that reflects the rel HTML attribute, as a list of tokens.A string representing the search element, including leading question mark ('?'), if any, of the referenced URL.A long containing the position of the element in the tabbing navigation order for the current document.A string that reflects the target HTML attribute, indicating where to display the linked resource.A string being a synonym for the Node.textContent property.A string that reflects the type HTML attribute, indicating the MIME type of the linked resource.A string containing the username specified before the domain name.A string representing the character encoding of the linked resource.A string representing a comma-separated list of coordinates.A string representing the anchor name.A string representing that the rev HTML attribute, specifying the relationship of the link object to the target object.Note: Currently the W3C HTML 5.2 spec states that rev is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.A string representing the shape of the active area.Inherits methods from its parent, HTMLElement.Removes the keyboard focus from the current element.Gives the keyboard focus to the current element.Returns a string containing the whole URL. It is a synonym for HTMLAnchorElement.href, though it can't be used to modify the value.The blur() and focus() methods are inherited from HTMLElement from HTML5 on, but were defined on HTMLAnchorElement in DOM Level 2 HTML and earlier specifications.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement"
},
{
	"api_id": "383",
	"name": "HTMLAreaElement",
	"description": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.Inherits properties from its parent, HTMLElement.A string containing a single character that switches input focus to the control.A string that reflects the alt HTML attribute, containing alternative text for the element.A string that reflects the coords HTML attribute, containing coordinates to define the hot-spot region.A string indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.A string containing the fragment identifier (including the leading hash mark (#)), if any, in the referenced URL.A string containing the hostname and port (if it's not the default port) in the referenced URL.A string containing the hostname in the referenced URL.A string containing that reflects the href HTML attribute, containing a valid URL of a linked resource.A boolean flag indicating if the area is inactive (true) or active (false).Returns a string containing the origin of the URL, that is its scheme, its domain and its port.A string containing the password specified before the domain name.A string containing the path name component, if any, of the referenced URL.A string containing the port component, if any, of the referenced URL.A string containing the protocol component (including trailing colon ':'), of the referenced URL.A string that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the linked resource.A string that reflects the rel HTML attribute, indicating relationships of the current document to the linked resource.Returns a DOMTokenList that reflects the rel HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.A string containing the search element (including leading question mark '?'), if any, of the referenced URL.A string that reflects the shape HTML attribute, indicating the shape of the hot-spot, limited to known values.A long containing the element's position in the tabbing order.A string that reflects the target HTML attribute, indicating the browsing context in which to open the linked resource.A string containing the username specified before the domain name.Inherits methods from its parent, HTMLElement.Returns a string containing the whole URL. It is a synonym for HTMLAreaElement.href.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement"
},
{
	"api_id": "384",
	"name": "HTMLAudioElement",
	"description": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them.This element is based on, and inherits properties and methods from, the HTMLMediaElement interface.Creates and returns a new HTMLAudioElement object, optionally starting the process of loading an audio file into it if the file URL is given.No specific properties; inherits properties from its parent, HTMLMediaElement, and from HTMLElement.Inherits methods from its parent, HTMLMediaElement, and from HTMLElement. It offers no methods of its own.The following methods are non-standard and should not be used.Returns the number of samples form the beginning of the stream that have been written so far into the audio stream created by calling mozWriteAudio().Sets up the audio stream to allow writing, given the number of audio channels (1 or 2) and the sample rate in kHz.Writes a batch of audio frames to the stream at the current offset, returning the number of bytes actually written to the stream.You can create a HTMLAudioElement entirely with JavaScript using the Audio() constructor:then you can invoke the play() method on the elementNote: A common gotcha is trying to play an audio element immediately on page load. Modern browser's default autoplay policy will block that from happening. Refer to Firefox and chrome for best practices and work arounds.Some of the more commonly used properties of the audio element include src, currentTime, duration, paused, muted, and volume. This snippet copies the audio file's duration to a variable:Inherits methods from its parent, HTMLMediaElement, and from its ancestor HTMLElement. Listen to events using addEventListener() or by assigning an event listener to the oneventname property of this interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement"
},
{
	"api_id": "385",
	"name": "HTMLBaseElement",
	"description": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.Inherits properties from its parent, HTMLElement.A string that reflects the href HTML attribute, containing a base URL for relative URLs in the document.A string that reflects the target HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement"
},
{
	"api_id": "386",
	"name": "HTMLBaseFontElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLBaseFontElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <basefont> elements.The <basefont> element has been deprecated in HTML4 and removed in HTML5. This latest specification requires that this element implements HTMLUnknownElement rather than HTMLBaseFontElement.Note: Use CSS Fonts features instead.Inherits properties from its parent, HTMLElement.A string representing the text color using either a named color or a color specified in the hexadecimal #RRGGBB format.A string representing a list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.A string representing the font size as either a numeric or relative value. Numeric values range from 1 to 7 with 1 being the smallest and 3 the default. Relative value starts with a '+' or a '-'.No specific method; inherits methods from its parent, HTMLElement.This feature was present in the HTML specification up through HTML 3.2, but was deprecated in HTML 4, and then removed — and so is not in the current HTML specification. No modern browsers support it and this feature is no longer on track to become a standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseFontElement"
},
{
	"api_id": "387",
	"name": "HTMLBodyElement",
	"description": "The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.Inherits properties from its parent, HTMLElement.A string that represents the color of active hyperlinks.A string that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.A string that represents the background color for the document.A string that represents the color of unvisited links.A string that represents the foreground color of text.A string that represents the color of visited links.No specific methods; inherits methods from its parent, HTMLElement.The HTMLElement events are inherited.The following Window onXYZ event handler properties are also available as aliases targeting the window object. However, it is advised to listen to them on the window object directly rather than on HTMLBodyElement.Note: Using addEventListener() on HTMLBodyElement will not work for the onXYZ event handlers listed below. Listen to the events on the window object instead.Fired after the associated document has started printing or the print preview has been closed.Fired when the associated document is about to be printed or previewed for printing.Fired when the window, the document and its resources are about to be unloaded.Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.Fired when the browser detects that a gamepad has been disconnected.Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).Fired when the user's preferred language changes.Fired when the window receives a message, for example from a call to Window.postMessage() from another browsing context.Fired when the window receives a message that can't be deserialized.Fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.Fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.Fired when the browser hides the current page in the process of presenting a different page from the session's history.Fired when the browser displays the window's document due to navigation.Fired when the active history entry changes while the user navigates the session history.Fired whenever a JavaScript Promise is rejected and the rejection has been handled.Fired when a storage area (localStorage) has been modified in the context of another document.Fired whenever a Promise is rejected but the rejection was not handled.Fired when the document is being unloaded.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement"
},
{
	"api_id": "388",
	"name": "HTMLBRElement",
	"description": "The HTMLBRElement interface represents an HTML line break element (<br>). It inherits from HTMLElement.Inherits properties from its parent, HTMLElement.A string indicating the flow of text around floating objects.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement"
},
{
	"api_id": "389",
	"name": "HTMLButtonElement",
	"description": "The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.Inherits properties from its parent, HTMLElement.A string indicating the single-character keyboard key to give access to the button.A boolean value indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.A boolean value indicating whether or not the control is disabled, meaning that it does not accept any clicks.\n  An HTMLFormElement reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is a reference to that form's associated HTMLFormElement.\n  If the button is not a descendant of a form element, then the attribute can be a reference to any HTMLFormElement element in the same document it is related to, or the null value if none matches.\n  A string reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the action attribute of the <form> element that owns this element.A string reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element.A string reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element.A boolean value indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the novalidate attribute of the <form> element that owns this element.A string reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element.A NodeList that represents a list of <label> elements that are labels for this button.A HTMLMenuElement representing the menu element to be displayed if the button is clicked and is of type="menu".A string representing the name of the object when submitted with a form. If specified, it must not be the empty string.A long that represents this element's position in the tabbing order.A string indicating the behavior of the button. This is an enumerated attribute with the following possible values:A boolean value indicating whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation, including: its type property is reset or button; it has a <datalist> ancestor; or the disabled property is set to true.A string representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.A ValidityState representing the validity states that this button is in.A string representing the current form control value of the button.Inherits methods from its parent, HTMLElement",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement"
},
{
	"api_id": "390",
	"name": "HTMLCanvasElement",
	"description": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.Inherits properties from its parent, HTMLElement.The height HTML attribute of the <canvas> element is a positive integer reflecting the number of logical pixels (or RGBA values) going down one column of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used. If no [separate] CSS height is assigned to the <canvas>, then this value will also be used as the height of the canvas in the length-unit CSS Pixel.The width HTML attribute of the <canvas> element is a positive integer reflecting the number of logical pixels (or RGBA values) going across one row of the canvas. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used. If no [separate] CSS width is assigned to the <canvas>, then this value will also be used as the width of the canvas in the length-unit CSS Pixel.A boolean value reflecting the moz-opaque HTML attribute of the <canvas> element. It lets the canvas know whether or not translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported in Mozilla-based browsers; use the standardized canvas.getContext('2d', { alpha: false }) instead.A function that is Initially null. Web content can set this to a JavaScript function that will be called when the canvas is to be redrawn while the page is being printed. When called, the callback is passed a "printState" object that implements the MozCanvasPrintState interface. The callback can get the context to draw to from the printState object and must then call done() on it when finished. The purpose of mozPrintCallback is to obtain a higher resolution rendering of the canvas at the resolution of the printer being used. See this blog post.Inherits methods from its parent, HTMLElement.Returns a CanvasCaptureMediaStreamTrack that is a real-time video capture of the surface of the canvas.Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with "2d" returns a CanvasRenderingContext2D object, whereas calling it with "webgl" (or "experimental-webgl") returns a WebGLRenderingContext object. This context is only available on browsers that implement WebGL.Returns a data-URL containing a representation of the image in the format specified by the type parameter (defaults to png). The returned image is in a resolution of 96dpi.Creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.Transfers control to an OffscreenCanvas object, either on the main thread or on a worker.Listen to these events using addEventListener().Fired if the user agent is unable to create a WebGLRenderingContext or WebGL2RenderingContext context.Fired if the user agent detects that the drawing buffer associated with a WebGLRenderingContext or WebGL2RenderingContext object has been lost.Fired if the user agent restores the drawing buffer for a WebGLRenderingContext or WebGL2RenderingContext object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement"
},
{
	"api_id": "391",
	"name": "HTMLCollection",
	"description": "The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.Note: This interface is called HTMLCollection for historical reasons (before the modern DOM, collections implementing this interface could only have HTML elements as their items).An HTMLCollection in the HTML DOM is live; it is automatically updated when the underlying document is changed. For this reason it is a good idea to make a copy (eg. using Array.from) to iterate over if adding, moving, or removing nodes.Returns the number of items in the collection.Returns the specific node at the given zero-based index into the list. Returns null if the index is out of range.An alternative to accessing collection[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.Returns the specific node whose ID or, as a fallback, name matches the string specified by name. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the name attribute. Returns null if no node exists by the given name.An alternative to accessing collection[name] (which instead returns undefined when name does not exist). This is mostly useful for non-JavaScript DOM implementations.HTMLCollection also exposes its members directly as properties by both name and index. HTML IDs may contain : and . as valid characters, which would necessitate using bracket notation for property access. Currently HTMLCollections does not recognize purely numeric IDs, which would cause conflict with the array-style access, though HTML5 does permit these.For example, assuming there is one <form> element in the document and its id is myForm:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"
},
{
	"api_id": "392",
	"name": "HTMLContentElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLContentElement interface represents a <content> HTML Element, which is used in Shadow DOM.This interface inherits the properties of HTMLElement.A string that reflects the select HTML attribute. The value is a comma-separated list of CSS selectors that select the content to insert in place of the <content> element.This interface inherits the methods of HTMLElement.Returns a static NodeList of the distributed nodes associated with this <content> element.This feature is no longer defined by any standards.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement"
},
{
	"api_id": "393",
	"name": "HTMLDataElement",
	"description": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.Inherits properties from its parent, HTMLElement.A string reflecting the value HTML attribute, containing a machine-readable form of the element's value.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement"
},
{
	"api_id": "394",
	"name": "HTMLDataListElement",
	"description": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.Inherits properties from its parent, HTMLElementA HTMLCollection representing a collection of the contained option elements.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement"
},
{
	"api_id": "395",
	"name": "HTMLDetailsElement",
	"description": "The HTMLDetailsElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <details> elements.Inherits properties from its parent, HTMLElement.A boolean value reflecting the open HTML attribute, indicating whether or not the element's contents (not counting the <summary>) is to be shown to the user.No specific method; inherits methods from its parent, HTMLElement.Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired when the open/closed state of a <details> element is toggled.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement"
},
{
	"api_id": "396",
	"name": "HTMLDialogElement",
	"description": "The HTMLDialogElement interface provides methods to manipulate <dialog> elements. It inherits properties and methods from the HTMLElement interface.Inherits properties from its parent, HTMLElement.A boolean value reflecting the open HTML attribute, indicating whether the dialog is available for interaction.A string that sets or returns the return value for the dialog.Inherits methods from its parent, HTMLElement.Closes the dialog. An optional string may be passed as an argument, updating the returnValue of the dialog.Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.Displays the dialog as a modal, over the top of any other dialogs that might be present. Interaction outside the dialog is blocked.\n  Fired when the user instructs the browser that they wish to dismiss the current open dialog.\n  Also available via the oncancel property.\n  \n  Fired when the dialog is closed.\n  Also available via the onclose property.\n  The following example shows a simple button that, when clicked, opens a <dialog> containing a form via the HTMLDialogElement.showModal() function. From there you can click the Cancel button to close the dialog (via the HTMLDialogElement.close() function), or submit the form via the submit button.Note: You can find this example on GitHub as htmldialogelement-basic (see it live also).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement"
},
{
	"api_id": "397",
	"name": "HTMLDivElement",
	"description": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.Inherits properties from its parent, HTMLElement.A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", "justify", and "center".No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement"
},
{
	"api_id": "398",
	"name": "HTMLDListElement",
	"description": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.Inherits properties from its parent, HTMLElement.A boolean value indicating that spacing between list items should be reduced.No specific methods; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement"
},
{
	"api_id": "399",
	"name": "HTMLDocument",
	"description": "For historical reasons, Window objects have a window.HTMLDocument property whose value is the Document interface. So you can think of HTMLDocument as an alias for Document, and you can find documentation for HTMLDocument members under the documentation for the Document interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument"
},
{
	"api_id": "400",
	"name": "HTMLElement",
	"description": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.Inherits properties from its parent, Element, and implements those from GlobalEventHandlers.A string representing the access key assigned to the element.Returns a string containing the element's assigned access key.A StylePropertyMap representing the declarations of the element's style attribute.A string, where a value of true means the element is editable and a value of false means it isn't.Returns a boolean value indicating whether or not the content of the element can be edited.A HTMLMenuElement representing the contextual menu associated with the element. It may be null.Returns a DOMStringMap with which script can read and write the element's custom data attributes (data-*) .A string, reflecting the dir global attribute, representing the directionality of the element. Possible values are "ltr", "rtl", and "auto".A boolean value indicating if the element can be dragged.A string defining what action label (or icon) to present for the enter key on virtual keyboards.A boolean value indicating if the element is hidden or not.A boolean value indicating whether the user agent must act as though the given node is absent for the purposes of user interaction events, in-page text searches ("find in page"), and text selection.\n  Represents the rendered text content of a node and its descendants.\n  As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.\n  As a setter, it replaces the content inside the selected element, converting any line breaks into <br> elements.\n  A string representing the language of an element's attributes, text, and element contents.A boolean value indicating whether an import script can be executed in user agents that support module scripts.Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.Returns a double containing the height of an element, relative to the layout.Returns a double, the distance from this element's left border to its offsetParent's left border.An Element that is the element from which all offset calculations are currently computed.Returns a double, the distance from this element's top border to its offsetParent's top border.Returns a double containing the width of an element, relative to the layout.\n  Represents the rendered text content of a node and its descendants.\n  As a getter, it is the same as HTMLElement.innerText (it represents the rendered text content of an element and its descendants).\n  As a setter, it replaces the selected node and its contents with the given value, converting any line breaks into <br> elements.\n  Returns a HTMLPropertiesCollection…A boolean value that controls spell-checking. It is present on all HTML elements, though it doesn't have an effect on all of them.A CSSStyleDeclaration representing the declarations of the element's style attribute.A long representing the position of the element in the tabbing order.A string containing the text that appears in a popup box when mouse is over the element.A boolean value representing the translation.Most event handler properties, of the form onXYZ, are defined on the GlobalEventHandlers interface and implemented by HTMLElement. In addition, the following handlers are specific to HTMLElement.Returns the event handling code for the touchstart event.Returns the event handling code for the touchend event.Returns the event handling code for the touchmove event.Returns the event handling code for the touchcancel event.Inherits methods from its parent, Element, and implements those from GlobalEventHandlers.Returns an ElementInternals object, and enables a custom element to participate in HTML forms.Removes keyboard focus from the currently focused element.Sends a mouse click event to the element.Makes the element the current keyboard focus.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired when the user initiates a copy action through the browser's user interface.Fired when the user initiates a cut action through the browser's user interface.Fired when the user initiates a paste action through the browser's user interface.\n  Fired when an element does not satisfy its constraints during constraint validation.\n  Also available via the oninvalid property.\n  \n  Fired when an animation unexpectedly aborts.\n  Also available via the onanimationcancel property.\n  \n  Fired when an animation has completed normally.\n  Also available via the onanimationend property.\n  \n  Fired when an animation iteration has completed.\n  Also available via the onanimationiteration property.\n  \n  Fired when an animation starts.\n  Also available via the onanimationstart property.\n  Fired when the value of an <input>, <select>, or <textarea> element is about to be modified.\n  Fired when the value of an <input>, <select>, or <textarea> element has been changed.\n  Also available via the oninput property.\n  Fired when the value of an <input>, <select>, or <textarea> element has been changed and committed by the user. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.\n  Fired when an element captures a pointer using setPointerCapture().\n  Also available via the ongotpointercapture property.\n  \n  Fired when a captured pointer is released.\n  Also available via the onlostpointercapture property.\n  \n  Fired when a pointer event is canceled.\n  Also available via the onpointercancel property.\n  \n  Fired when a pointer becomes active.\n  Also available via the onpointerdown property.\n  \n  Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants.\n  Also available via the onpointerenter property.\n  \n  Fired when a pointer is moved out of the hit test boundaries of an element.\n  Also available via the onpointerleave property.\n  \n  Fired when a pointer changes coordinates.\n  Also available via the onpointermove property.\n  \n  Fired when a pointer is moved out of the hit test boundaries of an element (among other reasons).\n  Also available via the onpointerout property.\n  \n  Fired when a pointer is moved into an element's hit test boundaries.\n  Also available via the onpointerover property.\n  \n  Fired when a pointer is no longer active.\n  Also available via the onpointerup property.\n  \n  Fired when a CSS transition is canceled.\n  Also available via the ontransitioncancel property.\n  \n  Fired when a CSS transition has completed.\n  Also available via the ontransitionend property.\n  \n  Fired when a CSS transition is first created.\n  Also available via the ontransitionrun property.\n  \n  Fired when a CSS transition has actually started.\n  Also available via the ontransitionstart property.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
},
{
	"api_id": "401",
	"name": "HTMLEmbedElement",
	"description": "The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.Note: This topic describes the HTMLEmbedElement interface as defined in the standard. It does not address earlier, non-standardized version of the interface.Inherits properties from its parent, HTMLElement.A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", "center", and "justify".A string reflecting the height HTML attribute, containing the displayed height of the resource.A string representing the name of the embedded object.A string that reflects the src HTML attribute, containing the address of the resource.A string that reflects the type HTML attribute, containing the type of the resource.A string that reflects the width HTML attribute, containing the displayed width of the resource.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement"
},
{
	"api_id": "402",
	"name": "HTMLFieldSetElement",
	"description": "The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.Inherits properties from its parent, HTMLElement.A boolean value reflecting the disabled HTML attribute, indicating whether the user can interact with the control.The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.\n  An HTMLFormControlsCollection or HTMLCollection referencing the containing form element, if this element is in a form.\n  If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the null value if none matches.\n  A string reflecting the name HTML attribute, containing the name of the field set. This can be used when accessing the field set in JavaScript. It is not part of the data which is sent to the server.The string "fieldset".A string representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.A ValidityState representing the validity states that this element is in.A boolean value false, because <fieldset> objects are never candidates for constraint validation.Inherits methods from its parent, HTMLElement.Always returns true because <fieldset> objects are never candidates for constraint validation.Always returns true because <fieldset> objects are never candidates for constraint validation.Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement"
},
{
	"api_id": "403",
	"name": "HTMLFontElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Implements the document object model (DOM) representation of the font element. The HTML Font Element <font> defines the font size, font face and color of text.Inherits properties from its parent, HTMLElement.A string that reflects the color HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.A string that reflects the face HTML attribute, containing a comma-separated list of one or more font names.A string that reflects the size HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the size attribute of the <basefont> element, for example -2 or +1.No specific method; inherits methods from its parent, HTMLElement.The <font> tag is not supported in HTML5 since it is now obsolete.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement"
},
{
	"api_id": "404",
	"name": "HTMLFormControlsCollection",
	"description": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements.It represents the lists returned by the HTMLFormElement interface's elements property and the HTMLFieldSetElement interface's elements property.This interface replaces one method from HTMLCollection, on which it is based.This interface inherits the properties of its parent, HTMLCollection.This interface inherits the methods of its parent, HTMLCollection.Returns the RadioNodeList or the Element in the collection whose name or id matches the specified name, or null if no nodes match. Note that this version of namedItem() hide the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection["value"] is equivalent to collection.namedItem("value").",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection"
},
{
	"api_id": "405",
	"name": "HTMLFormElement",
	"description": "The HTMLFormElement interface represents a <form> element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.This interface also inherits properties from its parent, HTMLElement.A HTMLFormControlsCollection holding all form controls belonging to this form element.A long reflecting the number of controls in the form.A string reflecting the value of the form's name HTML attribute, containing the name of the form.A string reflecting the value of the form's method HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.A string reflecting the value of the form's target HTML attribute, indicating where to display the results received from submitting the form.A string reflecting the value of the form's action HTML attribute, containing the URI of a program that processes the information submitted by the form.A string reflecting the value of the form's enctype HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.A string reflecting the value of the form's accept-charset HTML attribute, representing the character encoding that the server accepts.A string reflecting the value of the form's autocomplete HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.A boolean value reflecting the value of the form's novalidate HTML attribute, indicating whether the form should not be validated.Named inputs are added to their owner form instance as properties, and can overwrite native properties if they share the same name (e.g. a form with an input named action will have its action property return that input instead of the form's action HTML attribute).This interface also inherits methods from its parent, HTMLElement.Returns true if the element's child controls are subject to constraint validation and satisfy those constraints; returns false if some controls do not satisfy their constraints. Fires an event named invalid at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to false.Returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.Requests that the form be submitted using the specified submit button and its corresponding configuration.Resets the form to its initial state.Submits the form to the server.Triggers a native browser interface to assist the user in completing the fields which have an autofill field name value that is not off or on. The form will receive an event once the user has finished with the interface, the event will either be autocomplete when the fields have been filled or autocompleteerror when there was a problem.Listen to these events using addEventListener(), or by assigning an event listener to the oneventname property of this interface.\n  The formdata event fires after the entry list representing the form's data is constructed.\n  Also available via the onformdata property.\n  \n  The reset event fires when a form is reset.\n  Also available via the onreset property.\n  \n  The submit event fires when a form is submitted.\n  Also available via the onsubmit property.\n  To obtain an HTMLFormElement object, you can use a CSS selector with querySelector(), or you can get a list of all of the forms in the document using its forms property.Document.forms returns an array of HTMLFormElement objects listing each of the forms on the page. You can then use any of the following syntaxes to get an individual form:Returns the form at the specified index into the array of forms.Returns the form whose ID is id.Returns the form whose name attribute's value is name.You can access the list of the form's data-containing elements by examining the form's elements property. This returns an HTMLFormControlsCollection listing all of the form's user data entry elements, both those which are descendants of the <form> and those which are made members of the form using their form attributes.You can also get the form's element by using its name attribute as a key of the form, but using elements is a better approach—it contains only the form's elements, and it cannot be mixed with other attributes of the form.Some names will interfere with JavaScript access to the form's properties and elements.For example:To avoid such problems with element names:If you are not using JavaScript, this will not cause a problem.The elements included by HTMLFormElement.elements and HTMLFormElement.length are the following:No other elements are included in the list returned by elements, which makes it an excellent way to get at the elements most important when processing forms.Creating a new form element, modifying its attributes, then submitting it:Extract information from a <form> element and set some of its attributes:Submit a <form> into a new window:If you want to know how to serialize and submit a form using the XMLHttpRequest API, please read this paragraph.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement"
},
{
	"api_id": "406",
	"name": "HTMLFrameSetElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements.Inherits properties from its parent, HTMLElement.A string structured as a comma-separated list specifying the width of each column inside a frameset.A string structured as a comma-separated list specifying the height of each column inside a frameset.No specific method; inherits methods from its parent, HTMLElement.The HTMLElement events are inherited.The following Window onXYZ event handler properties are also available as aliases targeting the window object. However, it is advised to listen to them on the window object directly rather than on HTMLFrameSetElement.Note: Using addEventListener() on HTMLFrameSetElement will not work for the onXYZ event handlers listed below. Listen to the events on the window object instead.Fired after the associated document has started printing or the print preview has been closed.Fired when the associated document is about to be printed or previewed for printing.Fired when the window, the document and its resources are about to be unloaded.Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.Fired when the browser detects that a gamepad has been disconnected.Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).Fired when the user's preferred language changes.Fired when the window receives a message, for example from a call to Window.postMessage() from another browsing context.Fired when the window receives a message that can't be deserialized.Fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.Fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.Fired when the browser hides the current page in the process of presenting a different page from the session's history.Fired when the browser displays the window's document due to navigation.Fired when the active history entry changes while the user navigates the session history.Fired whenever a JavaScript Promise is rejected and the rejection has been handled.Fired when a storage area (localStorage) has been modified in the context of another document.Fired whenever a Promise is rejected but the rejection was not handled.Fired when the document is being unloaded.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement"
},
{
	"api_id": "407",
	"name": "HTMLHeadElement",
	"description": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.Inherits properties from its parent, HTMLElement.A string representing the URIs of one or more metadata profiles (white space separated).No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement"
},
{
	"api_id": "408",
	"name": "HTMLHeadingElement",
	"description": "The HTMLHeadingElement interface represents the different heading elements, <h1> through <h6>. It inherits methods and properties from the HTMLElement interface.Inherits properties from its parent, HTMLElement.A string representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. The possible values are "left", "right", "justify", and "center".No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement"
},
{
	"api_id": "409",
	"name": "HTMLHRElement",
	"description": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.Inherits properties from its parent, HTMLElement.A string, an enumerated attribute indicating alignment of the rule with respect to the surrounding context.A string representing the name of the color of the rule.A boolean value that sets the rule to have no shading.A string representing the height of the rule.A string representing the width of the rule on the page.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement"
},
{
	"api_id": "410",
	"name": "HTMLHtmlElement",
	"description": "The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.You can retrieve the HTMLHtmlElement object for a given document by reading the value of the document.documentElement property.Inherits properties from its parent, HTMLElement.A string representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Omit it.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement"
},
{
	"api_id": "411",
	"name": "HTMLIFrameElement",
	"description": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.Inherits properties from its parent, HTMLElement.A string that specifies the alignment of the frame with respect to the surrounding context.A list of origins the frame is allowed to display content from. This attribute also accepts the values self and src which represent the origin in the iframe's src attribute. The default value is src.A boolean value indicating whether the inline frame is willing to be placed into full screen mode. See Using fullscreen mode for details.A boolean value indicating whether the Payment Request API may be invoked inside a cross-origin iframe.Returns a Document, the active document in the inline frame's nested browsing context.Returns a WindowProxy, the window proxy for the nested browsing context.Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.An optional string representing a hint given to the browser on how it should prioritize fetching of the iframe document relative to other iframe documents. If this value is provided, it must be one of the possible permitted values: high to fetch at a high priority, low to fetch at a low priority, or auto to indicate no preference (which is the default).A string that indicates whether to create borders between frames.A string that reflects the height HTML attribute, indicating the height of the frame.A string that contains the URI of a long description of the frame.A string being the height of the frame margin.A string being the width of the frame margin.A string that reflects the name HTML attribute, containing a name by which to refer to the frame.Returns the FeaturePolicy interface which provides a simple API for introspecting the feature policies applied to a specific document.A string that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the linked resource.A DOMTokenList that reflects the sandbox HTML attribute, indicating extra restrictions on the behavior of the nested content.A string that indicates whether the browser should provide scrollbars for the frame.A string that reflects the src HTML attribute, containing the address of the content to be embedded. Note that programmatically removing an <iframe>'s src attribute (e.g. via Element.removeAttribute()) causes about:blank to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.A string that represents the content to display in the frame.A string that reflects the width HTML attribute, indicating the width of the frame.Inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement"
},
{
	"api_id": "412",
	"name": "HTMLImageElement",
	"description": "The HTMLImageElement interface represents an HTML <img> element, providing the properties and methods used to manipulate image elements.The Image() constructor creates and returns a new HTMLImageElement object representing an HTML <img> element which is not attached to any DOM tree. It accepts optional width and height parameters. When called without parameters, new Image() is equivalent to calling document.createElement('img').Inherits properties from its parent, HTMLElement.A string that reflects the alt HTML attribute, thus indicating the alternate fallback content to be displayed if the image has not been loaded.Returns a boolean value that is true if the browser has finished fetching the image, whether successful or not. That means this value is also true if the image has no src value indicating an image to load.A string specifying the CORS setting for this image element. See CORS settings attributes for further details. This may be null if CORS is not used.Returns a string representing the URL from which the currently displayed image was loaded. This may change as the image is adjusted due to changing conditions, as directed by any media queries which are in place.An optional string representing a hint given to the browser on how it should decode the image. If this value is provided, it must be one of the possible permitted values: sync to decode the image synchronously, async to decode it asynchronously, or auto to indicate no preference (which is the default). Read the decoding page for details on the implications of this property's values.An optional string representing a hint given to the browser on how it should prioritize fetching of the image relative to other images. If this value is provided, it must be one of the possible permitted values: high to fetch at a high priority, low to fetch at a low priority, or auto to indicate no preference (which is the default).An integer value that reflects the height HTML attribute, indicating the rendered height of the image in CSS pixels.A boolean value that reflects the ismap HTML attribute, indicating that the image is part of a server-side image map. This is different from a client-side image map, specified using an <img> element and a corresponding <map> which contains <area> elements indicating the clickable areas in the image. The image must be contained within an <a> element; see the ismap page for details.A string providing a hint to the browser used to optimize loading the document by determining whether to load the image immediately (eager) or on an as-needed basis (lazy).Returns an integer value representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows 0. This is the height the image would be if it were rendered at its natural full size.An integer value representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show 0. This is the width the image would be if it were rendered at its natural full size.A string that reflects the referrerpolicy HTML attribute, which tells the user agent how to decide which referrer to use in order to fetch the image. Read this article for details on the possible values of this string.A string reflecting the sizes HTML attribute. This string specifies a list of comma-separated conditional sizes for the image; that is, for a given viewport size, a particular image size is to be used. Read the documentation on the sizes page for details on the format of this string.A string that reflects the src HTML attribute, which contains the full URL of the image including base URI. You can load a different image into the element by changing the URL in the src attribute.A string reflecting the srcset HTML attribute. This specifies a list of candidate images, separated by commas (',', U+002C COMMA). Each candidate image is a URL followed by a space, followed by a specially-formatted string indicating the size of the image. The size may be specified either the width or a size multiple. Read the srcset page for specifics on the format of the size substring.A string reflecting the usemap HTML attribute, containing the page-local URL of the <map> element describing the image map to use. The page-local URL is a pound (hash) symbol (#) followed by the ID of the <map> element, such as #my-map-element. The <map> in turn contains <area> elements indicating the clickable areas in the image.An integer value that reflects the width HTML attribute, indicating the rendered width of the image in CSS pixels.An integer indicating the horizontal offset of the left border edge of the image's CSS layout box relative to the origin of the <html> element's containing block.The integer vertical offset of the top border edge of the image's CSS layout box relative to the origin of the <html> element's containing block.A string indicating the alignment of the image with respect to the surrounding context. The possible values are "left", "right", "justify", and "center". This is obsolete; you should instead use CSS (such as text-align, which works with images despite its name) to specify the alignment.A string which defines the width of the border surrounding the image. This is deprecated; use the CSS border property instead.An integer value which specifies the amount of space (in pixels) to leave empty on the left and right sides of the image.A string specifying the URL at which a long description of the image's contents may be found. This is used to turn the image into a hyperlink automatically. Modern HTML should instead place an <img> inside an <a> element defining the hyperlink.A string representing the name of the element.An integer value specifying the amount of empty space, in pixels, to leave above and below the image.Inherits properties from its parent, HTMLElement.Returns a Promise that resolves when the image is decoded and it's safe to append the image to the DOM. This prevents rendering of the next frame from having to pause to decode the image, as would happen if an undecoded image were added to the DOM.If an error occurs while trying to load or render the image, and an onerror event handler has been configured to handle the error event, that event handler will get called. This can happen in a number of situations, including:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement"
},
{
	"api_id": "413",
	"name": "HTMLInputElement",
	"description": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.Some properties only apply to input element types that support the corresponding attributes.string: Represents the alignment of the element. Use CSS instead.string: Defines the capitalization behavior for user input. Valid values are none, off, characters, words or sentences.string: Returns / Sets the default value as originally specified in the HTML that created this object.string: Returns / Sets the directionality of the element.Provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents.NodeList array: Returns a list of <label> elements that are labels for this element.HTMLElement: Returns the element pointed by the list attribute. The property may be null if no HTML element found in the same tree.boolean: Returns / Sets the element's multiple attribute, indicating whether more than one value is possible (e.g., multiple files).string: Returns / Sets the element's name attribute, containing a name that identifies the element when submitting the form.string: Returns / Sets the element's step attribute, which works with min and max to limit the increments at which a numeric or date-time value can be set. It can be the string any or a positive floating point number. If this is not set to any, the control accepts only values at multiples of the step value greater than the minimum.string: Returns / Sets the element's type attribute, indicating the type of control to display. See type attribute of <input> for possible values.string: Represents a client-side image map.string: Returns / Sets the current value of the control. If the user enters a value different from the value expected, this may return an empty string.Date: Returns / Sets the value of the element, interpreted as a date, or null if conversion is not possible.double: Returns the value of the element, interpreted as one of the following, in order: A time value, a number or NaN if conversion is impossibleHTMLFormElement: Returns a reference to the parent <form> element.string: Returns / Sets the element's formaction attribute, containing the URI of a program that processes information submitted by the element. This overrides the action attribute of the parent form.string: Returns / Sets the element's formenctype attribute, containing the type of content that is used to submit the form to the server. This overrides the enctype attribute of the parent form.string: Returns / Sets the element's formmethod attribute, containing the HTTP method that the browser uses to submit the form. This overrides the method attribute of the parent form.boolean: Returns / Sets the element's formnovalidate attribute, indicating that the form is not to be validated when it is submitted. This overrides the novalidate attribute of the parent form.string: Returns / Sets the element's formtarget attribute, containing a name or keyword indicating where to display the response that is received after submitting the form. This overrides the target attribute of the parent form.boolean: Returns / Sets the element's autofocus attribute, which specifies that a form control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form element in a document can have the autofocus attribute.boolean: Returns / Sets the element's disabled attribute, indicating that the control is not available for interaction. The input values will not be submitted with the form. See also readonly.boolean: Returns / Sets the element's required attribute, indicating that the user must fill in a value before submitting a form.string: Returns a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willvalidate is false), or it satisfies its constraints. This value can be set by the setCustomValidity() method.ValidityState: Returns the element's current validity state.boolean: Returns whether the element is a candidate for constraint validation. It is false if any conditions bar it from constraint validation, including: its type is one of hidden, reset or button, it has a <datalist> ancestor or its disabled property is true.boolean: Returns / Sets the current state of the element.boolean: Returns / Sets the default state of a radio button or checkbox as originally specified in HTML that created this object.boolean: Returns whether the checkbox or radio button is in indeterminate state. For checkboxes, the effect is that the appearance of the checkbox is obscured/greyed in some way as to indicate its state is indeterminate (not checked but not unchecked). Does not affect the value of the checked attribute, and clicking the checkbox will set the value to false.string: Returns / Sets the element's alt attribute, containing alternative text to use.string: Returns / Sets the element's height attribute, which defines the height of the image displayed for the button.string: Returns / Sets the element's src attribute, which specifies a URI for the location of an image to display on the graphical submit button.string: Returns / Sets the element's width attribute, which defines the width of the image displayed for the button.string: Returns / Sets the element's accept attribute, containing comma-separated list of file types that can be selected.boolean: Part of the non-standard Directory Upload API. Indicates whether or not to allow directories and files both to be selected in the file list. Implemented only in Firefox and is hidden behind a preference.FileList: Returns / Sets a list of File objects representing the files selected for upload.boolean: Returns the webkitdirectory attribute. If true, the file system picker interface only accepts directories instead of files.FileSystemEntry array: Describes the currently selected files or directories.string: Returns / Sets the element's autocomplete attribute, indicating whether the value of the control can be automatically completed by the browser.string: Returns / Sets the element's max attribute, containing the maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.unsigned long: Returns / Sets the element's maxlength attribute, containing the maximum number of characters (in Unicode code points) that the value can have.string: Returns / Sets the element's min attribute, containing the minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.unsigned long: Returns / Sets the element's minlength attribute, containing the minimum number of characters (in Unicode code points) that the value can have.string: Returns / Sets the element's pattern attribute, containing a regular expression that the control's value is checked against. Use the title attribute to describe the pattern to help the user. This attribute only applies when the value of the type attribute is text, search, tel, url or email.string: Returns / Sets the element's placeholder attribute, containing a hint to the user of what can be entered in the control. The placeholder text must not contain carriage returns or line-feeds. This attribute only applies when the value of the type attribute is text, search, tel, url or email.boolean: Returns / Sets the element's readonly attribute, indicating that the user cannot modify the value of the control. This is ignored if the type is hidden, range, color, checkbox, radio, file, or a button type.unsigned long: Returns / Sets the end index of the selected text. When there's no selection, this returns the offset of the character immediately following the current text input cursor position.unsigned long: Returns / Sets the beginning index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the <input> element.string: Returns / Sets the direction in which selection occurred. Possible values are: forward (the selection was performed in the start-to-end direction of the current locale), backward (the opposite direction) or none (the direction is unknown).unsigned long: Returns / Sets the element's size attribute, containing visual size of the control. This value is in pixels unless the value of type is text or password, in which case, it is an integer number of characters. Applies only when type is set to text, search, tel, url, email, or password.Removes focus from the input element; keystrokes will subsequently go nowhere.Simulates a click on the input element.Focuses on the input element; keystrokes will subsequently go to this element.Selects all the text in the input element, and focuses it so the user can subsequently replace all of its content.Selects a range of text in the input element (but does not focus it).Replaces a range of text in the input element with new text.Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.Shows a browser picker for date, time, color, and files.Returns a boolean value that is false if the element is a candidate for constraint validation, and it does not satisfy its constraints. In this case, it also fires an invalid event at the element. It returns true if the element is not a candidate for constraint validation, or if it satisfies its constraints.Runs the checkValidity() method, and if it returns false (for an invalid input or no pattern attribute provided), then it reports to the user that the input is invalid in the same manner as if you submitted a form.Decrements the value by (step * n), where n defaults to 1 if not specified. Throws an InvalidStateError exception:Increments the value by (step * n), where n defaults to 1 if not specified. Throws an InvalidStateError exception:Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:\n  Fires when the value of an <input>, <select>, or <textarea> element has been changed. Note that this is actually fired on the HTMLElement interface and also applies to contenteditable elements, but we've listed it here because it is most commonly used with form input elements.\n  Also available via the oninput event handler property.\n  \n  Fired when an element does not satisfy its constraints during constraint validation.\n  Also available via the oninvalid event handler property.\n  \n  Fired when a search is initiated on an <input> of type="search".\n  Also available via the onsearch event handler property.\n  Fires when the text selection in a <input> element has been changed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement"
},
{
	"api_id": "414",
	"name": "HTMLKeygenElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Note: This page describes the Keygen Element interface as specified, not as currently implemented by Gecko. See bug 101019 for details and status.The <keygen> elements expose the HTMLKeygenElement interface, which provides special properties and methods (beyond the regular element object interface they also have available to them by inheritance) for manipulating the layout and presentation of keygen elements.A boolean value that reflects the autofocus HTML attribute, indicating that the form control should have input focus when the page loads.A string that reflects the challenge HTML attribute, containing a challenge string that is packaged with the submitted key.A HTMLFormElement that indicates the control's form owner, reflecting the form HTML attribute if it is defined.A string that reflects the keytype HTML attribute, containing the type of key used.A NodeList that represents a list of label elements associated with this keygen element.A string that reflects the name HTML attribute, containing the name for the control that is submitted with form data.A string that must be the value keygen.A string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.A ValidityState object representing the validity states that this element is in.A boolean value that is always false because keygen objects are never candidates for constraint validation.Always returns the boolean value true because HTMLKeygenElement objects are never candidates for constraint validation.Takes a string as parameter and sets it as the custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLKeygenElement"
},
{
	"api_id": "415",
	"name": "HTMLLabelElement",
	"description": "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.Inherits properties from its parent, HTMLElement.A HTMLElement representing the control with which the label is associated.A HTMLFormElement object representing the form with which the labeled control is associated, or null if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for HTMLLabelElement.control.form.A string containing the ID of the labeled control. This reflects the for attribute.Note: To programmatically set the for attribute, use htmlFor.No specific methods; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement"
},
{
	"api_id": "416",
	"name": "HTMLLegendElement",
	"description": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.Inherits properties from its parent, HTMLElement.A HTMLFormElement representing the form that this legend belongs to. If the legend has a fieldset element as its parent, then this attribute returns the same value as the form attribute on the parent fieldset element. Otherwise, it returns null.A string representing a single-character access key to give access to the element.A string representing the alignment relative to the form setNo specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement"
},
{
	"api_id": "417",
	"name": "HTMLLIElement",
	"description": "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.Inherits properties from its parent, HTMLElement.A string representing the type of the bullets, "disc", "square" or "circle". As the standard way of defining the list type is via the CSS list-style-type property, use the CSSOM methods to set it via a script.A long indicating the ordinal position of the list element inside a given <ol>. It reflects the value attribute of the HTML <li> element, and can be smaller than 0. If the <li> element is not a child of an <ol> element, the property has no meaning.No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement"
},
{
	"api_id": "418",
	"name": "HTMLLinkElement",
	"description": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa (corresponds to <link> element; not to be confused with <a>, which is represented by HTMLAnchorElement). This object inherits all of the properties and methods of the HTMLElement interface.Inherits properties from its parent, HTMLElement.A string representing the type of content being loaded by the HTML link.A string that corresponds to the CORS setting for this link element. See CORS settings attributes for details.A boolean value which represents whether the link is disabled; currently only used with style sheet links.An optional string representing a hint given to the browser on how it should prioritize fetching of a preload relative to other resources of the same type. If this value is provided, it must be one of the possible permitted values: high to fetch at a higher priority, low to fetch at a lower priority, or auto to indicate no preference (which is the default).A string representing the URI for the target resource.A string representing the language code for the linked resource.A string representing a list of one or more media formats to which the resource applies.A string that reflects the referrerpolicy HTML attribute indicating which referrer to use.A string representing the forward relationship of the linked resource from the document to the resource.A DOMTokenList that reflects the rel HTML attribute, as a list of tokens.A DOMTokenList that reflects the sizes HTML attribute, as a list of tokens.Returns the StyleSheet object associated with the given element, or null if there is none.A string representing the MIME type of the linked resource.A string representing the character encoding for the target resource.A string representing the reverse relationship of the linked resource from the resource to the document.Note: Currently the W3C HTML 5.2 spec states that rev is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.A string representing the name of the target frame to which the resource applies.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement"
},
{
	"api_id": "419",
	"name": "HTMLMapElement",
	"description": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.Inherits properties from its parent, HTMLElement.A string representing the <map> element for referencing it other context. If the id attribute is set, this must have the same value; and it cannot be null or empty.A live HTMLCollection representing the <area> elements associated to this <map>.No specific method; inherits methods from its parent, HTMLElement .",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement"
},
{
	"api_id": "420",
	"name": "HTMLMarqueeElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLMarqueeElement interface provides methods to manipulate <marquee> elements.It inherits properties and methods from the HTMLElement interface.Inherits properties from its parent, HTMLElement.Sets how the text is scrolled within the marquee. Possible values are scroll, slide and alternate. If no value is specified, the default value is scroll.Sets the background color through color name or hexadecimal value.Sets the direction of the scrolling within the marquee. Possible values are left, right, up and down. If no value is specified, the default value is left.Sets the height in pixels or percentage value.Sets the horizontal margin.Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously.Sets the amount of scrolling at each interval in pixels. The default value is 6.Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead, unless trueSpeed is true.By default, scrollDelay values lower than 60 are ignored. If trueSpeed is true, then those values are not ignored.Sets the vertical margin.Sets the width in pixels or percentage value.Fires when the marquee has reached the end of its scroll position. It can only fire when the behavior attribute is set to alternate.Fires when the marquee has finished the amount of scrolling that is set by the loop attribute. It can only fire when the loop attribute is set to some number that is greater than 0.Fires when the marquee starts scrolling.Inherits methods from its parent, HTMLElement.Starts scrolling of the marquee.Stops scrolling of the marquee.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMarqueeElement"
},
{
	"api_id": "421",
	"name": "HTMLMediaElement",
	"description": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.The HTMLVideoElement and HTMLAudioElement elements both inherit this interface.This interface also inherits properties from its ancestors HTMLElement, Element, Node, and EventTarget.An AudioTrackList that lists the AudioTrack objects contained in the element.A boolean value that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.Note: Automatically playing audio when the user doesn't expect or desire it is a poor user experience and should be avoided in most cases, though there are exceptions. See the Autoplay guide for media and Web Audio APIs for more information. Keep in mind that browsers may ignore autoplay requests, so you should ensure that your code isn't dependent on autoplay working.Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.A boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed.Returns a DOMTokenList that helps the user agent select what controls to show on the media element whenever the user agent shows its own set of controls. The DOMTokenList takes one or more of three possible values: nodownload, nofullscreen, and noremoteplayback.A string indicating the CORS setting for this media element.Returns a string with the absolute URL of the chosen media resource.A double-precision floating-point value indicating the current playback time in seconds; if the media has not started to play and has not been seeked, this value is the media's initial playback time. Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.A boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default.A double indicating the default playback rate for the media.A boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.A read-only double-precision floating-point value indicating the total duration of the media in seconds. If no media data is available, the returned value is NaN. If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity.Returns a boolean that indicates whether the media element has finished playing.Returns a MediaError object for the most recent error, or null if there has not been an error.A boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end.Returns a MediaKeys object or null. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.A boolean that determines whether audio is muted. true if the audio is muted and false otherwise.Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network.Returns a boolean that indicates whether the media element is paused.A double that indicates the rate at which the media is being played back.Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any.A string that reflects the preload HTML attribute, indicating what data should be preloaded, if any. Possible values are: none, metadata, auto.A boolean value that determines if the pitch of the sound will be preserved. If set to false, the pitch will adjust to the speed of the audio.Returns a unsigned short (enumeration) indicating the readiness state of the media.Returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any.Returns a boolean that indicates whether the media is in the process of seeking to a new position.Returns a string that is the unique ID of the audio device delivering output, or an empty string if it is using the user agent default. This ID should be one of the MediaDeviceInfo.deviceid values returned from MediaDevices.enumerateDevices(), id-multimedia, or id-communications.A string that reflects the src HTML attribute, which contains the URL of a media resource to use.A MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned.Returns a TextTrackList object containing the list of TextTrack objects contained in the element.Returns a VideoTrackList object containing the list of VideoTrack objects contained in the element.A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).Sets the event handler called when the media is encrypted.Sets the event handler called when playback is blocked while waiting for an encryption key.These properties are obsolete and should not be used, even if a browser still supports them.A MediaController object that represents the media controller assigned to the element, or null if none is assigned.A string that reflects the mediagroup HTML attribute, which indicates the name of the group of elements it belongs to. A group of media elements shares a common MediaController.Returns a boolean. Related to audio stream capture.A double that provides access to the fragment end time if the media element has a fragment URI for currentSrc, otherwise it is equal to the media duration.This interface also inherits methods from its ancestors HTMLElement, Element, Node, and EventTarget.Adds a new TextTrack object (such as a track for subtitles) to a media element. This is a programmatic interface only and does not affect the DOM.Returns MediaStream, captures a stream of the media content.Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string probably if the media should be playable, maybe if there's not enough information to determine whether the media will play or not, or an empty string if the media cannot be played.Quickly seeks to the given time with low precision.Resets the media to the beginning and selects the best available source from the sources provided using the src attribute or the <source> element.Pauses the media playback.Begins playback of the media.Seeks to the next frame in the media. This non-standard, experimental method makes it possible to manually drive reading and rendering of media at a custom speed, or to move through the media frame-by-frame to perform filtering or other operations.Returns Promise. Sets the MediaKeys keys to use when decrypting media during playback.Sets the ID of the audio device to use for output and returns a Promise. This only works when the application is authorized to use the specified device.These methods are obsolete and should not be used, even if a browser still supports them.[enter description][enter description]Returns Object, which contains properties that represent metadata from the playing media resource as {key: value} pairs. A separate copy of the data is returned each time the method is called. This method must be called after the loadedmetadata event fires.Inherits methods from its parent, HTMLElement , defined in the GlobalEventHandlers mixin. Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired when the resource was not fully loaded, but not as the result of an error.Fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.Fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.Fired when the duration property has been updated.Fired when the media has become empty; for example, when the media has already been loaded (or partially loaded), and the HTMLMediaElement.load() method is called to reload it.Fired when playback stops when end of the media (<audio> or <video>) is reached or because no further data is available.Fired when the resource could not be loaded due to an error.Fired when the first frame of the media has finished loading.Fired when the metadata has been loaded.Fired when the browser has started to load a resource.Fired when a request to pause play is handled and the activity has entered its paused state, most commonly occurring when the media's HTMLMediaElement.pause() method is called.Fired when the paused property is changed from true to false, as a result of the HTMLMediaElement.play() method, or the autoplay attribute.Fired when playback is ready to start after having been paused or delayed due to lack of data.Fired periodically as the browser loads a resource.Fired when the playback rate has changed.Fired when one or both of the videoWidth and videoHeight properties have just been updated.Fired when a seek operation completes.Fired when a seek operation begins.Fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.Fired when the media data loading has been suspended.Fired when the time indicated by the currentTime property has been updated.Fired when the volume has changed.Fired when playback has stopped because of a temporary lack of data.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement"
},
{
	"api_id": "422",
	"name": "HTMLMenuElement",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HTMLMenuElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating <menu> elements.Returns a newly constructed HTMLMenuElement.Inherits properties from its parent, HTMLElement, and its ancestors.A Boolean value determining if the menu displays in a compact way.\n  Returns context if the menu is a context menu.\n  This use of the <menu> element has never been implemented widely\n  and is now deprecated.\n  \n  A string associating the menu with a name,\n  displayed when the menu is used as a context menu.\n  This use of the <menu> element has never been implemented widely\n  and is now deprecated.\n  Inherits methods from its parent, HTMLElement, and its ancestors.HTMLMenuElement doesn't implement specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement"
},
{
	"api_id": "423",
	"name": "HTMLMenuItemElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLMenuItemElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating <menuitem> elements.This feature is not part of any current specification. It is no longer on track to become a standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuItemElement"
},
{
	"api_id": "424",
	"name": "HTMLMetaElement",
	"description": "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.Inherits properties from its parent, HTMLElement.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement"
},
{
	"api_id": "425",
	"name": "HTMLMeterElement",
	"description": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.Also inherits properties from its parent, HTMLElement.A double representing the value of the high boundary, reflecting the high attribute.A double representing the value of the low boundary, reflecting the lowattribute.A double representing the maximum value, reflecting the max attribute.A double representing the minimum value, reflecting the min attribute.A double representing the optimum, reflecting the optimum attribute.A double representing the current value, reflecting the value attribute.A NodeList of <label> elements that are associated with the element.This interface does not implement any specific methods but inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement"
},
{
	"api_id": "426",
	"name": "HTMLModElement",
	"description": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.Inherits properties from its parent, HTMLElement.A string reflecting the cite HTML attribute, containing a URI of a resource explaining the change.A string reflecting the datetime HTML attribute, containing a date-and-time string representing a timestamp for the change.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement"
},
{
	"api_id": "427",
	"name": "HTMLObjectElement",
	"description": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.Inherits properties from its parent, HTMLElement.A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", "justify", and "center".A string that reflects the archive HTML attribute, containing a list of archives for resources for this object.A string that reflects the border HTML attribute, specifying the width of a border around the object.A string representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.A string that reflects the codebase HTML attribute, specifying the base path to use to resolve relative URIs.A string that reflects the codetype HTML attribute, specifying the content type of the data.Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null.Returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null.Returns a string that reflects the data HTML attribute, specifying the address of a resource's data.A boolean value that reflects the declare HTML attribute, indicating that this is a declaration, not an instantiation, of the object.Returns a HTMLFormElement representing the object element's form owner, or null if there isn't one.Returns a string that reflects the height HTML attribute, specifying the displayed height of the resource in CSS pixels.A long representing the horizontal space in pixels around the control.Returns a string that reflects the name HTML attribute, specifying the name of the browsing context.A string that reflects the standby HTML attribute, specifying a message to display while the object loads.A string that reflects the type HTML attribute, specifying the MIME type of the resource.A string that reflects the usemap HTML attribute, specifying a <map> element to use.Returns a string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.Returns a ValidityState with the validity states that this element is in.A long representing the horizontal space in pixels around the control.A string that reflects the width HTML attribute, specifying the displayed width of the resource in CSS pixels.Returns a boolean value that indicates whether the element is a candidate for constraint validation. Always false for HTMLObjectElement objects.Inherits methods from its parent, HTMLElement.Returns a boolean value that always is true, because object objects are never candidates for constraint validation.Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement"
},
{
	"api_id": "428",
	"name": "HTMLOListElement",
	"description": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.Inherits properties from its parent, HTMLElement.A boolean value reflecting the reversed and defining if the numbering is descending, that is its value is true, or ascending (false).A long value reflecting the start and defining the value of the first number of the first element of the list.A string value reflecting the type and defining the kind of marker to be used to display. It can have the following values:A boolean value indicating that spacing between list items should be reduced. This property reflects the compact attribute only, it doesn't consider the line-height CSS property used for that behavior in modern pages.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement"
},
{
	"api_id": "429",
	"name": "HTMLOptGroupElement",
	"description": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.Inherits properties from its parent, HTMLElement.A boolean value representing whether or not the whole list of children <option> is disabled (true) or not (false).A string representing the label for the group.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement"
},
{
	"api_id": "430",
	"name": "HTMLOptionElement",
	"description": "The HTMLOptionElement interface represents <option> elements and inherits all properties and methods of the HTMLElement interface.Returns a newly created HTMLOptionElement object. It has four parameters: the text to display, text, the value associated, value, the value of defaultSelected, and the value of selected. The last three parameters are optional.Inherits properties from its parent, HTMLElement.Has a value of either true or false that shows the initial value of the selected HTML attribute, indicating whether the option is selected by default or not.Has a value of either true or false representing the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected. An option can also be disabled if it is a child of an <optgroup> element that is disabled.A HTMLFormElement representing the same value as the form of the corresponding <select> element, if the option is a descendant of a <select> element, or null if none is found.A long representing the position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.A string that reflects the value of the label HTML attribute, which provides a label for the option. If this attribute isn't specifically set, reading it returns the element's text content.Has a value of either true or false that indicates whether the option is currently selected.A string that contains the text content of the element.A string that reflects the value of the value HTML attribute, if it exists; otherwise reflects value of the Node.textContent property.Doesn't implement any specific method, but inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement"
},
{
	"api_id": "431",
	"name": "HTMLOptionsCollection",
	"description": "unsigned long. As optionally allowed by the spec, this property isn't read-only. You can either remove options from the end by lowering the value, or add blank options at the end by raising the value. Mozilla allows this, while other implementations could potentially throw a DOMException.This interface inherits the methods of its parent, HTMLCollection.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection"
},
{
	"api_id": "432",
	"name": "HTMLOutputElement",
	"description": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.This interface also inherits properties from its parent, HTMLElement.A string representing the default value of the element, initially the empty string.An HTMLFormElement indicating the form associated with the control, reflecting the form HTML attribute if it is defined.A DOMTokenList reflecting the for HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated value.A NodeList of <label> elements associated with the element.A string reflecting the name HTML attribute, containing the name for the control that is submitted with form data.The string "output".A string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.A ValidityState representing the validity states that this element is in.A string representing the value of the contents of the elements. Behaves like the Node.textContent property.A boolean value indicating whether the element is a candidate for constraint validation.This interface also inherits methods from its parent, HTMLElement.Checks the validity of the element and returns a boolean value holding the check result.This method reports the problems with the constraints on the element, if any, to the user. If there are problems, fires an invalid event at the element, and returns false; if there are no problems, it returns true.When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.This element behaves in one of two modes: default mode and value mode.Initially, the element is in default mode, and so the contents of the element represent both the value of the element and its default value.If the element is in default mode when the descendants of the element are changed in any way, the defaultValue property is set to the value of the textContent property.Resetting the form puts the element into default mode, and sets the textContent property to the value of the defaultValue property.The element goes into value mode when the contents of the value property are set. The value property otherwise behaves like the textContent property. When the element is in value mode, the default value is accessible only through the defaultValue property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement"
},
{
	"api_id": "433",
	"name": "HTMLParagraphElement",
	"description": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.Inherits properties from its parent, HTMLElement.A string representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", "justify", and "center".No specific methods, inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement"
},
{
	"api_id": "434",
	"name": "HTMLParamElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.Inherits properties from its parent, HTMLElement.A string representing the name of the parameter. It reflects the name attribute.A string representing the value associated to the parameter. It reflects the value attribute.A string containing the type of the parameter when valueType has the "ref" value. It reflects the type attribute.A string containing the type of the value. It reflects the valuetype attribute and has one of the values: "data", "ref", or "object".No specific methods, inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement"
},
{
	"api_id": "435",
	"name": "HTMLPictureElement",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The HTMLPictureElement interface represents a <picture> HTML element. It doesn't implement specific properties or methods.No specific property, but inherits properties from its parent, HTMLElement.No specific method, but inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement"
},
{
	"api_id": "436",
	"name": "HTMLPreElement",
	"description": "The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).Inherits properties from its parent, HTMLElement.A long value reflecting the obsolete width attribute, containing a fixed-size length for the <pre> element.No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement"
},
{
	"api_id": "437",
	"name": "HTMLProgressElement",
	"description": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.Inherits properties from its parent, HTMLElement.A double value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is 1.0.Returns a double value returning the result of dividing the current value (value) by the maximum value (max); if the progress bar is an indeterminate progress bar, it returns -1.A double value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns 0.Returns NodeList containing the list of <label> elements that are labels for this element.No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement"
},
{
	"api_id": "438",
	"name": "HTMLQuoteElement",
	"description": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.Inherits properties from its parent, HTMLElement.A string reflecting the cite HTML attribute, containing a URL for the source of the quotation.No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement"
},
{
	"api_id": "439",
	"name": "HTMLScriptElement",
	"description": "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).JavaScript files should be served with the application/javascript MIME type, but browsers are lenient and block them only if the script is served with an image type (image/*), video type (video/*), audio type (audio/*), or text/csv. If the script is blocked, its element receives an error event; otherwise, it receives a load event.Inherits properties from its parent, HTMLElement.A string representing the MIME type of the script. It reflects the type attribute.A string representing the URL of an external script. It reflects the src attribute.A string; an obsolete way of registering event handlers on elements in an HTML document.A string representing the character encoding of an external script. It reflects the charset attribute.The async and defer attributes are boolean attributes that control how the script should be executed. The defer and async attributes must not be specified if the src attribute is absent.There are three possible execution modes:The defer attribute may be specified with the async attribute, so legacy browsers that only support defer (and not async) fall back to the defer behavior instead of the default blocking behavior.Note: The exact processing details for these attributes are complex, involving many different aspects of HTML, and therefore are scattered throughout the specification. These algorithms describe the core ideas, but they rely on the parsing rules for <script> start and end tags in HTML, in foreign content, and in XML; the rules for the document.write() method; the handling of scripting; and so on.A string reflecting the CORS setting for the script element. For scripts from other origins, this controls if error information will be exposed.A string that joins and returns the contents of all Text nodes inside the <script> element (ignoring other nodes like comments) in tree order. On setting, it acts the same way as the textContent IDL attribute.Note: When inserted using the document.write() method, <script> elements execute (typically synchronously), but when inserted using innerHTML or outerHTML, they do not execute at all.An optional string representing a hint given to the browser on how it should prioritize fetching of an external script relative to other external scripts. If this value is provided, it must be one of the possible permitted values: high to fetch at a high priority, low to fetch at a low priority, or auto to indicate no preference (which is the default).A boolean value that if true, stops the script's execution in browsers that support ES2015 modules — used to run fallback scripts in older browsers that do not support JavaScript modules.A string that reflects the referrerpolicy HTML attribute indicating which referrer to use when fetching the script, and fetches done by that script.\n  Returns true if the browser supports scripts of the specified type and false otherwise.\n  This method provides a simple and unified method for script-related feature detection.\n  No specific methods; inherits methods from its parent, HTMLElement.\n  Let's create a function that imports new scripts within a document creating a <script> node immediately before the <script> that hosts the following code (through document.currentScript).\n  These scripts will be asynchronously executed.\n  For more details, see the defer and async properties.\nThis next function, instead of prepending the new scripts immediately before the document.currentScript element, appends them as children of the <head> tag.Sample usage:HTMLScriptElement.supports() provides a unified mechanism for checking whether a browser supports particular types of scripts.The example below shows how to check for module support, using the existence of the noModule attribute as a fallback.Classic scripts are assumed to be supported on all browsers.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement"
},
{
	"api_id": "440",
	"name": "HTMLSelectElement",
	"description": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.This interface inherits the properties of HTMLElement, and of Element and Node.A boolean value reflecting the autofocus HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.A boolean value reflecting the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.An HTMLFormElement referencing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null.A NodeList of <label> elements associated with the element.An unsigned long The number of <option> elements in this select element.A boolean value reflecting the multiple HTML attribute, which indicates whether multiple items can be selected.A string reflecting the name HTML attribute, containing the name of this control used by servers and DOM search functions.An HTMLOptionsCollection representing the set of <option> (HTMLOptionElement) elements contained by this element.A boolean value reflecting the required HTML attribute, which indicates whether the user is required to select a value before submitting the form.A long reflecting the index of the first selected <option> element. The value -1 indicates no element is selected.An HTMLCollection representing the set of <option> elements that are selected.A long reflecting the size HTML attribute, which contains the number of visible items in the control. The default is 1, unless multiple is true, in which case it is 4.A string representing the form control's type. When multiple is true, it returns "select-multiple"; otherwise, it returns "select-one".A string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.A ValidityState reflecting the validity state that this control is in.A string reflecting the value of the form control. Returns the value property of the first selected option element if there is one, otherwise the empty string.A boolean value that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.This interface inherits the methods of HTMLElement, and of Element and Node.Adds an element to the collection of option elements for this select element.Removes input focus from this element. This method is now implemented on HTMLElement.Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element (and returns false).Gives input focus to this element. This method is now implemented on HTMLElement.Gets an item from the options collection for this <select> element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.Gets the item in the options collection with the specified name. The name string can match either the id or the name attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.Removes the element at the specified index from the options collection for this select element.This method reports the problems with the constraints on the element, if any, to the user. If there are problems, it fires a cancelable invalid event at the element, and returns false; if there are no problems, it returns true.Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:Fires when the user selects an option.Fires when the value of an <input>, <select>, or <textarea> element has been changed.A better way to track changes to the user's selection is to watch for the change event to occur on the <select>. This will tell you when the value changes, and you can then update anything you need to. See the example provided in the documentation for the change event for details.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement"
},
{
	"api_id": "441",
	"name": "HTMLShadowElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The HTMLShadowElement interface represents a <shadow> HTML Element, which is used in Shadow DOM.This interface inherits the properties of HTMLElement.This interface inherits the methods of HTMLElement.Returns a static NodeList of the distributed nodes associated with this <shadow> element.This feature is no longer defined by any specifications.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement"
},
{
	"api_id": "442",
	"name": "HTMLSlotElement",
	"description": "The HTMLSlotElement interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML <slot> element.A string used to get and set the slot's name.Sets the manually assigned nodes for this slot to the given nodes.Returns a sequence of the nodes assigned to this slot. If the flatten option is set to true, it returns a sequence of both the nodes assigned to this slot, and the nodes assigned to any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content.Returns a sequence of the elements assigned to this slot (and no other nodes). If the flatten option is set to true, it returns a sequence of both the elements assigned to this slot, and the elements assigned to any other slots that are descendants of this slot. If no assigned elements are found, it returns the slot's fallback content.Fired on an HTMLSlotElement instance (<slot> element) when the node(s) contained in that slot change.The following snippet is taken from our slotchange example (see it live also).Here we grab references to all the slots, then add a slotchange event listener to the 2nd slot in the template — which is the one that keeps having its contents changed in the example.Every time the element inserted in the slot changes, we log a report to the console saying which slot has changed, and what the new node inside the slot is.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement"
},
{
	"api_id": "443",
	"name": "HTMLSourceElement",
	"description": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.Inherits properties from its parent, HTMLElement.A string reflecting the media HTML attribute, containing the intended type of the media resource.A string representing image sizes between breakpointsA string reflecting the src HTML attribute, containing the URL for the media resource. The HTMLSourceElement.src property has a meaning only when the associated <source> element is nested in a media element that is a <video> or an <audio> element. It has no meaning and is ignored when it is nested in a <picture> element.Note: If the src property is updated (along with any siblings), the parent HTMLMediaElement's load method should be called when done, since <source> elements are not re-scanned automatically.A string reflecting the srcset HTML attribute, containing a list of candidate images, separated by a comma (',', U+002C COMMA). A candidate image is a URL followed by a 'w' with the width of the images, or an 'x' followed by the pixel density.A string reflecting the type HTML attribute, containing the type of the media resource.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement"
},
{
	"api_id": "444",
	"name": "HTMLSpanElement",
	"description": "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.This interface has no properties, but inherits properties from: HTMLElement.This interface has no methods, but inherits methods from: HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement"
},
{
	"api_id": "445",
	"name": "HTMLStyleElement",
	"description": "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement.This interface doesn't allow to manipulate the CSS it contains (in most case). To manipulate CSS, see Using dynamic styling information for an overview of the objects used to manipulate specified CSS properties using the DOM.Inherits properties from its parent, HTMLElement.A string reflecting the HTML attribute representing the intended destination medium for style information.A string reflecting the HTML attribute representing the type of style being applied by this statement.A boolean value reflecting the HTML attribute representing whether or not the stylesheet is disabled (true) or not (false).Returns the CSSStyleSheet object associated with the given element, or null if there is noneA boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true).No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement"
},
{
	"api_id": "446",
	"name": "HTMLTableCaptionElement",
	"description": "The HTMLTableCaptionElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.Inherits properties from its parent, HTMLElement.A string which represents an enumerated attribute indicating alignment of the caption with respect to the table.No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement"
},
{
	"api_id": "447",
	"name": "HTMLTableCellElement",
	"description": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.Inherits properties from its parent, HTMLElement.A string which can be used on <th> elements (not on <td>), specifying an alternative label for the header cell. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of abbr is an abbreviation or acronym, but can be any text that's appropriate contextually.A long integer representing the cell's position in the cells collection of the <tr> the cell is contained within. If the cell doesn't belong to a <tr>, it returns -1.An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the colspan attribute.A DOMTokenList describing a list of id of <th> elements that represents headers associated with the cell. It reflects the headers attribute.An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the rowspan attribute.A string indicating the scope of a <th> cell. Header cells can be configured, using the scope property, the apply to a specified row or column, or to the not-yet-scoped cells within the current row group (that is, the same ancestor <thead>, <tbody>, or <tfoot> element). If no value is specified for scope, the header is not associated directly with cells in this way. Permitted values for scope are:The header cell applies to the following cells in the same column (or columns, if colspan is used as well), until either the end of the column or another <th> in the column establishes a new scope.The header cell applies to all cells in the current column group that do not already have a scope applied to them. This value is only allowed if the cell is in a column group.The header cell applies to the following cells in the same row (or rows, if rowspan is used as well), until either the end of the row or another <th> in the same row establishes a new scope.The header cell applies to all cells in the current row group that do not already have a scope applied to them. This value is only allowed if the cell is in a row group.The header cell has no predefined scope; the user agent will establish the scope based on contextual clues.No specific method; inherits methods from its parent, HTMLElement.Warning: These properties have been deprecated and should no longer be used. They are documented primarily to help understand older code bases.A string containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", and "center".A string containing a name grouping cells in virtual. It reflects the obsolete axis attribute.A string containing the background color of the cells. It reflects the obsolete bgcolor attribute.A string containing one single character. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported.A string containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableCellElement.ch. This property was optional and was not very well supported.A string containing a length of pixel of the hinted height of the cell. It reflects the obsolete height attribute.A boolean value reflecting the nowrap attribute and indicating if cell content can be broken in several lines.A string representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: "top", "middle", "bottom", or "baseline". Use the CSS vertical-align property instead.A string specifying the number of pixels wide the cell should be drawn, if possible. This property reflects the also obsolete width attribute. Use the CSS width property instead.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement"
},
{
	"api_id": "448",
	"name": "HTMLTableColElement",
	"description": "The HTMLTableColElement interface provides properties for manipulating single or grouped table column elements.Inherits properties from its parent, HTMLElement.A string that indicates the horizontal alignment of the cell data in the column.A string representing the alignment character for cell data.A string representing the offset for the alignment character.An unsigned long that reflects the span HTML attribute, indicating the number of columns to apply this object's attributes to. Must be a positive integer.A string that indicates the vertical alignment of the cell data in the column.A string representing the default column width.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement"
},
{
	"api_id": "449",
	"name": "HTMLTableElement",
	"description": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.Inherits properties from its parent, HTMLElement.A HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <caption>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first <caption> that is a child of this element is removed from the tree, if any.A HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <thead>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element, and the first <thead> that is a child of this element is removed from the tree, if any.A HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <tfoot>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, a <colgroup>, nor a <thead>, or as the last child if there is no such element, and the first <tfoot> that is a child of this element is removed from the tree, if any.Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child of one of its <thead>, <tbody> and <tfoot> children. The rows members of a <thead> appear first, in tree order, and those members of a <tbody> last, also in tree order. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes.Returns a live HTMLCollection containing all the <tbody> of the element. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes.Warning: The following properties are obsolete. You should avoid using them.A string containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", and "center".A string containing the background color of the cells. It reflects the obsolete bgcolor attribute.A string containing the width in pixels of the border of the table. It reflects the obsolete border attribute.A string containing the width in pixels of the horizontal and vertical space between cell content and cell borders. It reflects the obsolete cellpadding attribute.A string containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete cellspacing attribute.A string containing the type of the external borders of the table. It reflects the obsolete frame attribute and can take one of the following values: "void", "above", "below", "hsides", "vsides", "lhs", "rhs", "box", or "border".A string containing the type of the internal borders of the table. It reflects the obsolete rules attribute and can take one of the following values: "none", "groups", "rows", "cols", or "all".A string containing a description of the purpose or the structure of the table. It reflects the obsolete summary attribute.A string containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete width attribute.Inherits methods from its parent, HTMLElement.Returns an HTMLTableSectionElement representing the first <thead> that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element.Removes the first <thead> that is a child of the element.Returns an HTMLTableSectionElement representing the first <tfoot> that is a child of the element. If none is found, a new one is created and inserted in the tree as the last child.Removes the first <tfoot> that is a child of the element.Returns a HTMLTableSectionElement representing a new <tbody> that is a child of the element. It is inserted in the tree after the last element that is a <tbody>, or as the last child if there is no such element.Returns an HTMLElement representing the first <caption> that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the <table> element.Removes the first <caption> that is a child of the element.Returns an HTMLTableRowElement representing a new row of the table. It inserts it in the rows collection immediately before the <tr> element at the given index position. If necessary a <tbody> is created. If the index is -1, the new row is appended to the collection. If the index is smaller than -1 or greater than the number of rows in the collection, a DOMException with the value IndexSizeError is raised.Removes the row corresponding to the index given in parameter. If the index value is -1 the last row is removed; if it is smaller than -1 or greater than the amount of rows in the collection, a DOMException with the value IndexSizeError is raised.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement"
},
{
	"api_id": "450",
	"name": "HTMLTableRowElement",
	"description": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.Inherits properties from its parent, HTMLElement.Returns a live HTMLCollection containing the cells in the row. The HTMLCollection is live and is automatically updated when cells are added or removed.Returns a long value which gives the logical position of the row within the entire table. If the row is not part of a table, returns -1.Returns a long value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1.Inherits methods from its parent, HTMLElement.Removes the cell corresponding to index. If index is -1, the last cell of the row is removed. If index is less than -1 or greater than the amount of cells in the collection, a DOMException with the value IndexSizeError is raised.Returns an HTMLTableCellElement representing a new cell of the row. The cell is inserted in the collection of cells immediately before the given index position in the row. If index is -1, the new cell is appended to the collection. If index is less than -1 or greater than the number of cells in the collection, a DOMException with the value IndexSizeError is raised.Warning: These properties have been deprecated and should no longer be used. They are documented primarily to help understand older code bases.A string containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", and "center".A string containing the background color of the cells. It reflects the obsolete bgcolor attribute.A string containing one single character. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported.A string containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.A string representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: "top", "middle", "bottom", or "baseline".",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement"
},
{
	"api_id": "451",
	"name": "HTMLTableSectionElement",
	"description": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.Inherits properties from its parent, HTMLElement.A string containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are "left", "right", and "center".Returns a live HTMLCollection containing the rows in the section. The HTMLCollection is live and is automatically updated when rows are added or removed.A string containing one single character. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported.A string containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.A string representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: "top", "middle", "bottom", or "baseline".Inherits methods from its parent, HTMLElement.Removes the row, corresponding to the index given in parameter, in the section. If the index value is -1 the last row is removed; if it smaller than -1 or greater than the amount of rows in the collection, a DOMException with the value IndexSizeError is raised.Returns an HTMLTableRowElement representing a new row of the section. It inserts it in the rows collection immediately before the <tr> element at the given index position. If the index is -1, the new row is appended to the collection. If the index is smaller than -1 or greater than the number of rows in the collection, a DOMException with the value IndexSizeError is raised.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement"
},
{
	"api_id": "452",
	"name": "HTMLTemplateElement",
	"description": "The HTMLTemplateElement interface enables access to the contents of an HTML <template> element.This interface inherits the properties of HTMLElement.A read-only DocumentFragment which contains the DOM subtree representing the <template> element's template contents.This interface inherits the methods of HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement"
},
{
	"api_id": "453",
	"name": "HTMLTextAreaElement",
	"description": "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of <textarea> elements.\n    boolean: Returns whether the element is a\n    candidate for constraint validation. false if any\n    conditions bar it from constraint validation, including its\n    readOnly or disabled property is\n    true.\n    The two properties tabIndex and accessKey are inherited from HTMLElement from HTML5 on, but were defined on HTMLTextAreaElement in DOM Level 2 HTML and earlier specifications.\n    This method reports the problems with the constraints on the element,\n    if any, to the user. If there are problems, it fires a cancelable\n    invalid event at the element, and returns\n    false; if there are no problems, it returns\n    true.\n    The two methods blur() and focus() are inherited from HTMLElement from HTML5 on, but were defined on HTMLTextAreaElement in DOM Level 2 HTML and earlier specifications.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:Fires when the value of an <input>, <select>, or <textarea> element has been changed.Fires when the text selection in a <textarea> element has been changed.Make a textarea autogrow while typing:Insert some HTML tags in a textarea.CSS to decorate the internal span to behave like a link:HTML:Create a textarea with a maximum number of characters per line and a maximum number of lines:First, create a function that takes the text field and a key event as input and determines if any of the limits have been reached. If the limit has not been reached, it will return the key.In the HTML we just need to hook our function to the `onkeypress` event and specify that our textarea does not accept pasting:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement"
},
{
	"api_id": "454",
	"name": "HTMLTimeElement",
	"description": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.Inherits properties from its parent, HTMLElement.A string that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement"
},
{
	"api_id": "455",
	"name": "HTMLTitleElement",
	"description": "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.Inherits properties from its parent, HTMLElement.A string representing the text of the document's title, and only the text part. For example, consider this:As you can see, the tag span and its content were skipped.No specific method; inherits methods from its parent, HTMLElement.Do not confuse: document.title with document.getElementsByTagName('title')[0]The former is just a setter/getter method to set or get the inner text value of the document title, while the latter is the HTMLTitleElement object. So you cannot write: document.title.text = "Hello world!";Instead, you can simply write: document.title = "Hello world!"; which is an equivalent to document.getElementsByTagName('title')[0].text = "Hello world!";",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement"
},
{
	"api_id": "456",
	"name": "HTMLTrackElement",
	"description": "The HTMLTrackElement interface represents an HTML <track> element within the DOM. This element can be used as a child of either <audio> or <video> to specify a text track containing information such as closed captions or subtitles.Inherits properties from its parent, HTMLElement.A string that reflects the kind HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, or metadata.A string that reflects the src HTML attribute, indicating the address of the text track data.A string that reflects the srclang HTML attribute, indicating the language of the text track data.A string that reflects the label HTML attribute, indicating a user-readable title for the track.A boolean value reflecting the default attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.Returns an unsigned short that show the readiness state of the track:Returns TextTrack is the track element's text track data.No specific method; inherits methods from its parent, HTMLElement.The following events may be fired on a <track> element, in addition to any that may be fired at its parent, HTMLElement.\n  Sent when the underlying TextTrack has changed the currently-presented cues. This event is always sent to the TextTrack but is also sent to the HTMLTrackElement if one is associated with the track.\n  You may also use the oncuechange event handler to establish a handler for this event.\n  The WebVTT or TTML data describing the actual cues for the text track isn't loaded if the track's mode is initially in the disabled state. If you need to be able to perform any processing on the track after the <track> is set up, you should instead ensure that the track's mode is either hidden (if you don't want it to start out being presented to the user) or showing (to initially display the track). You can then change the mode as desired later.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement"
},
{
	"api_id": "457",
	"name": "HTMLUListElement",
	"description": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.Inherits properties from its parent, HTMLElement.A string value reflecting the type and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.A boolean value indicating that spacing between list items should be reduced. This property reflects the compact attribute only, it doesn't consider the line-height CSS property used for that behavior in modern pages.No specific method; inherits methods from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement"
},
{
	"api_id": "458",
	"name": "HTMLUnknownElement",
	"description": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.No specific property; inherits properties from its parent, HTMLElement.No specific method; inherits properties from its parent, HTMLElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement"
},
{
	"api_id": "459",
	"name": "HTMLVideoElement",
	"description": "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.The list of supported media formats varies from one browser to the other. You should either provide your video in a single format that all the relevant browsers supports, or provide multiple video sources in enough different formats that all the browsers you need to support are covered.Inherits properties from its ancestor interfaces, HTMLMediaElement, and HTMLElement.A string that reflects the height HTML attribute, which specifies the height of the display area, in CSS pixels.A string that reflects the poster HTML attribute, which specifies an image to show while no video data is available.Returns an unsigned integer value indicating the intrinsic height of the resource in CSS pixels, or 0 if no media is available yet.Returns an unsigned integer value indicating the intrinsic width of the resource in CSS pixels, or 0 if no media is available yet.A string that reflects the width HTML attribute, which specifies the width of the display area, in CSS pixels.The autoPictureInPicture attribute will automatically enter and leave the picture-in-picture mode for a video element when the user switches tab and/or applicationsThe disablePictureInPicture property will hint the user agent to not suggest the picture-in-picture to users or to request it automaticallyReturns an unsigned long with the count of video frames that have been parsed from the media resource.Returns an unsigned long with the count of parsed video frames that have been decoded into images.Returns an unsigned long with the count of decoded frames that have been presented to the rendering pipeline for painting.Returns an unsigned long with the count of presented frames which were painted on the screen.Returns an double with the time which the last painted video frame was late by, in seconds.Returns a boolean indicating if there is some audio associated with the video.Steps the video by one frame forward or one frame backward.Gets or sets whether a video element is flipped horizontally in the display.Inserts the specified video effect into the media pipeline.Indicates whether the video can be rendered more efficiently.Determines whether the system considers the loaded video source to be stereo 3-D or not. Value set to true indicates source is stereo 3D.Controls whether the video frame is trimmed to fit the video display.Inherits methods from its parent, HTMLMediaElement, and from its ancestor HTMLElement.Returns a VideoPlaybackQuality object that contains the current playback metrics. This information includes things like the number of dropped or corrupted frames, as well as the total number of frames.Requests that the user agent make video enters picture-in-picture modeInherits events from its parent, HTMLMediaElement, and from its ancestor HTMLElement. Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Sent to a HTMLVideoElement when it enters Picture-in-Picture mode.Sent to a HTMLVideoElement when it leaves Picture-in-Picture mode.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement"
},
{
	"api_id": "460",
	"name": "IDBCursor",
	"description": "Note: Not to be confused with IDBCursorWithValue which is just an IDBCursor interface with an additional value property.The IDBCursor interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.The cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.You can have an unlimited number of cursors at the same time. You always get the same IDBCursor object representing a given cursor. Operations are performed on the underlying index or object store.Note: This feature is available in Web WorkersNote: IDBCursorWithValue is an IDBCursor interface with an additional value property.Returns the IDBObjectStore or IDBIndex that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.Returns the direction of traversal of the cursor. See Constants for possible values.Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type.Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type.Returns the IDBRequest that was used to obtain the cursor.Sets the number of times a cursor should move its position forward.Advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter.Sets the cursor to the given index key and primary key given as arguments.Returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.Returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Warning: These constants are no longer available — they were removed in Gecko 25. You should use the string constants directly instead. (bug 891944)In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using cursor.value.foo. For a complete working example, see our IDBCursor example (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor"
},
{
	"api_id": "461",
	"name": "IDBCursorWithValue",
	"description": "The IDBCursorWithValue interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.The cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.You can have an unlimited number of cursors at the same time. You always get the same IDBCursorWithValue object representing a given cursor. Operations are performed on the underlying index or object store.Note: This feature is available in Web WorkersInherits methods from its parent interface, IDBCursor.Inherits properties from its parent interface, IDBCursor.Returns the value of the current cursor.In this example we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using cursor.value.foo. For a complete working example, see our IDBCursor example (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue"
},
{
	"api_id": "462",
	"name": "IDBDatabase",
	"description": "The IDBDatabase interface of the IndexedDB API provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.Note: This feature is available in Web WorkersNote: Everything you do in IndexedDB always happens in the context of a transaction, representing interactions with data in the database. All objects in IndexedDB — including object stores, indexes, and cursors — are tied to a particular transaction. Thus, you cannot execute commands, access data, or open anything outside of a transaction.A string that contains the name of the connected database.A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.A DOMStringList that contains a list of the names of the object stores currently in the connected database.Inherits from: EventTargetReturns immediately and closes the connection to a database in a separate thread.Creates a file handle, allowing files to be stored inside an IndexedDB database.Creates and returns a new object store or index.Destroys the object store with the given name in the connected database, along with any indexes that reference it.Immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store. Runs in a separate thread.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.An event fired when the database connection is unexpectedly closed.An event fired when a database structure change was requested.The following events are available to IDBDatabase via event bubbling from IDBTransaction:An event fired when a transaction is aborted.An event fired when a request returns an error and the event bubbles up to the connection object.In the following code snippet, we open a database asynchronously (IDBFactory), handle success and error cases, and create a new object store in the case that an upgrade is needed (IDBdatabase). For a complete working example, see our To-do Notifications app (view example live.)This next line opens up a transaction on the Database, then opens an object store that we can then manipulate the data inside of.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase"
},
{
	"api_id": "463",
	"name": "IDBFactory",
	"description": "The IDBFactory interface of the IndexedDB API lets applications asynchronously access the indexed databases. The object that implements the interface is window.indexedDB. You open — that is, create and access — and delete a database with this object, and not directly with IDBFactory.Note: This feature is available in Web WorkersThe current method to request opening a connection to a database.A method to request the deletion of a database.A method that compares two keys and returns a result indicating which one is greater in value.A method that returns a list of all available databases, including their names and versions.In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory"
},
{
	"api_id": "464",
	"name": "IDBFileHandle",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n  Note: The three non-standard interfaces IDBMutableFile, IDBFileHandle, and IDBFileRequest are disabled by default.\n  Consider using the File and Directory Entries API instead.\n  The IDBFileHandle interface provides tools to deal with a given file with all the necessary locks.The IDBMutableFile object from which the lock was opened.The mode for accessing the file; can be readonly or readwrite.A flag indicating if the file can be accessed (true) or not (false).The position of the reading/writing pointer within the file.Allows to retrieve the file metadata (size and date of the last modification).Allows to retrieve a part of the content of the file as an ArrayBuffer.Allows to retrieve a part of the content of the file as a string.Allows to write some data in the file starting at the location offset.Allows to write some data at the end of the file..Allows to truncate the file's content.Allows to guarantee that any buffered data has been transferred to disk.Makes the IDBFileHandle inactive and cancels all ongoing operations.Fired when a read or write operation is successful.Fired when the abort() method is called.Fired when something goes wrong.This feature is not part of any current specification. It is no longer on track to become a standard.\n  This interface is not supported by any current browser.\n  From Firefox 102 it is behind the preference dom.fileHandle.enabled.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFileHandle"
},
{
	"api_id": "465",
	"name": "IDBFileRequest",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n  Note: The three non-standard interfaces IDBMutableFile, IDBFileHandle, and IDBFileRequest are disabled by default.\n  Consider using the File and Directory Entries API instead.\n  The IDBFileRequest interface provides some extra properties necessary for the IDBFileHandle objects.IDBFileRequest also inherits properties from the EventTarget interface\nas well as the then() method from the defunct DOMRequest interface described below.The IDBMutableFile object from which the request was started.Returns a DOMRequest and takes two callback functions, one for its success and one for its failure cases, as parameters.Fired periodically while the operation is in progress.This feature is not part of any current specification. It is no longer on track to become a standard.\n  This interface is not supported by any current browser.\n  From Firefox 102 it is behind the preference dom.fileHandle.enabled.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBFileRequest"
},
{
	"api_id": "466",
	"name": "IDBIndex",
	"description": "IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.You can retrieve records in an object store through the primary key or by using an index. An index lets you look up records in an object store using properties of the values in the object stores records other than the primary keyThe index is a persistent key-value storage where the value part of its records is the key part of a record in the referenced object store. The records in an index are automatically populated whenever records in the referenced object store are inserted, updated, or deleted. Each record in an index can point to only one record in its referenced object store, but several indexes can reference the same object store. When the object store changes, all indexes that refers to the object store are automatically updated.You can grab a set of keys within a range. To learn more, see IDBKeyRange.Note: This feature is available in Web WorkersReturns a boolean value indicating whether the index had a locale value of auto specified upon its creation (see createIndex()'s optionalParameters.)Returns the locale of the index (for example en-US, or pl) if it had a locale value specified upon its creation (see createIndex()'s optionalParameters.)The name of this index.The name of the object store referenced by this index.The key path of this index. If null, this index is not auto-populated.Affects how the index behaves when the result of evaluating the index's key path yields an array. If true, there is one record in the index for each item in an array of keys. If false, then there is one record for each key that is an array.If true, this index does not allow duplicate values for a key.Inherits from: EventTargetReturns an IDBRequest object, and in a separate thread, returns the number of records within a key range.Returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is an IDBKeyRange.Returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is an IDBKeyRange.Returns an IDBRequest object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if key is an IDBKeyRange.Returns an IDBRequest object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if key is an IDBKeyRange.Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range.Returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor — this works the same as opening a cursor directly on an ObjectStore using IDBObjectStore.openCursor except that the returned records are sorted based on the index, not the primary key.Finally, we iterate through each record, and insert the data into an HTML table. For a complete working example, see our IndexedDB-examples demo repo (View the example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex"
},
{
	"api_id": "467",
	"name": "IDBKeyRange",
	"description": "The IDBKeyRange interface of the IndexedDB API represents a continuous interval over some data type that is used for keys. Records can be retrieved from IDBObjectStore and IDBIndex objects using keys or a range of keys. You can limit the range using lower and upper bounds. For example, you can iterate over all values of a key in the value range A–Z.A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:A key is in a key range if the following conditions are true:Note: This feature is available in Web WorkersLower bound of the key range.Upper bound of the key range.Returns false if the lower-bound value is included in the key range.Returns false if the upper-bound value is included in the key range.Creates a new key range with upper and lower bounds.Creates a new key range containing a single value.Creates a new key range with only a lower bound.Creates a new upper-bound key range.Returns a boolean indicating whether a specified key is inside the key range.\n  The following example illustrates how you'd use a key range. Here we declare a keyRangeValue as a range between values of "A" and "F". We open a transaction (using IDBTransaction) and an object store, and open a cursor with IDBObjectStore.openCursor, declaring keyRangeValue as its optional key range value. This means that the cursor will only retrieve records with keys inside that range. This range includes the values "A" and "F", as we haven't declared that they should be open bounds.\n  If we used IDBKeyRange.bound("A", "F", true, true);, then the range would not include "A" and "F", only the values between them.\nNote: For a more complete example allowing you to experiment with key range, have a look at our IDBKeyRange-example repo (view the example live too.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange"
},
{
	"api_id": "468",
	"name": "IDBLocaleAwareKeyRange",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The IDBLocaleAwareKeyRange interface of the IndexedDB API is a Firefox-specific version of IDBKeyRange — it functions in exactly the same fashion, and has the same properties and methods, but it is intended for use with IDBIndex objects when the original index had a locale value specified upon its creation (see createIndex()'s optionalParameters) — that is, it has locale aware sorting enabled.This interface inherits all the methods of its parent interface, IDBKeyRange.This interface inherits all the properties of its parent interface, IDBKeyRange.Bear in mind however that IDBLocaleAwareKeyRange has its own implementation of IDBKeyRange.bound. This is because when you use bound(), it checks if lower bound < upper bound, and throws an exception if that's not the case. With locale-aware indexes, the meaning of < depends on the locale, so for example in Lithuanian Y is sorted between I and K. The only difference between IDBKeyRange and IDBLocaleAwareKeyRange is that the latter doesn't do the aforementioned check.Developers should always use IDBLocaleAwareKeyRange when dealing with locale-aware indexes.Not currently part of any specification.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBLocaleAwareKeyRange"
},
{
	"api_id": "469",
	"name": "IDBMutableFile",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n  Note: The three non-standard interfaces IDBMutableFile, IDBFileHandle, and IDBFileRequest are disabled by default.\n  Consider using the File and Directory Entries API instead.\n  The IDBMutableFile interface provides access in read or write mode to a file, dealing with all the necessary locks.As IDBMutableFile objects are bound to a fake file system built using IndexedDB, such an object is created using the IDBDatabase.createMutableFile() method.The name of the handled file.The MIME type of the handled file.Returns a IDBFileHandle object to read or write the associated file safely.Fired when the handled file is aborted.Fired when something goes wrong.This feature is not part of any current specification. It is no longer on track to become a standard.\n  This interface is not supported by any current browser.\n  From Firefox 102 it is behind the preference dom.fileHandle.enabled.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile"
},
{
	"api_id": "470",
	"name": "IDBObjectStore",
	"description": "The IDBObjectStore interface of the IndexedDB API represents an object store in a database. Records within an object store are sorted according to their keys. This sorting enables fast insertion, look-up, and ordered retrieval.Note: This feature is available in Web WorkersA list of the names of indexes on objects in this object store.The key path of this object store. If this attribute is null, the application must provide a key for each modification operation.The name of this object store.The IDBTransaction object to which this object store belongs.The value of the auto increment flag for this object store.Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store.Creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.Returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store.Creates a new index during a version upgrade, returning a new IDBIndex object in the connected database.returns an IDBRequest object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.Destroys the specified index in the connected database, used during a version upgrade.Returns an IDBRequest object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.Returns an IDBRequest object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.Returns an IDBRequest object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.Returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store by primary key with a cursor.Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursor. Used for iterating through an object store with a key.Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is readwrite.This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore"
},
{
	"api_id": "471",
	"name": "IDBOpenDBRequest",
	"description": "The IDBOpenDBRequest interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using IDBFactory.open and IDBFactory.deleteDatabase), using specific event handler attributes.Note: This feature is available in Web WorkersAlso inherits methods from its parents IDBRequest and EventTarget.No methods, but inherits methods from its parents IDBRequest and EventTarget.Events defined on parent interfaces, IDBRequest and EventTarget, can also be dispatched on IDBOpenDBRequest objects.Listen to these generic and specific events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Events specific to this interface are:Fired when an open connection to a database is blocking a versionchange transaction on the same database. Also available via the onblocked property.Fired when an attempt was made to open a database with a version number higher than its current version. Also available via the onupgradeneeded property.In the following example you can see the onupgradeneeded handler being used to update the database structure if a database with a higher version number is loaded. For a full working example, see our To-do Notifications app (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest"
},
{
	"api_id": "472",
	"name": "IDBRequest",
	"description": "The IDBRequest interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes. Each reading and writing operation on a database is done using a request.The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.All asynchronous operations immediately return an IDBRequest instance. Each request has a readyState that is set to the 'pending' state; this changes to 'done' when the request is completed or fails. When the state is set to done, every request returns a result and an error, and an event is fired on the request. When the state is still pending, any attempt to access the result or error raises an InvalidStateError exception.In plain words, all asynchronous methods return a request object. If the request has been completed successfully, the result is made available through the result property and an event indicating success is fired at the request (success). If an error occurs while performing the operation, the exception is made available through the result property and an error event is fired (error).The interface IDBOpenDBRequest is derived from IDBRequest.Note: This feature is available in Web WorkersAlso inherits properties from EventTarget.Returns a DOMException in the event of an unsuccessful request, indicating what went wrong.Returns the result of the request. If the request failed and the result is not available, an InvalidStateError exception is thrown.The source of the request, such as an IDBIndex or an IDBObjectStore. If no source exists (such as when calling IDBFactory.open), it returns null.The state of the request. Every request starts in the pending state. The state changes to done when the request completes successfully or when an error occurs.The transaction for the request. This property can be null for certain requests, for example those returned from IDBFactory.open unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).No methods, but inherits methods from EventTarget.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired when an error caused a request to fail.Fired when an IDBRequest succeeds.In the following code snippet, we open a database asynchronously and make a request; onerror and onsuccess functions are included to handle the success and error cases. For a full working example, see our To-do Notifications app (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest"
},
{
	"api_id": "473",
	"name": "IDBTransaction",
	"description": "The IDBTransaction interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You use IDBDatabase to start transactions, IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and you access an IDBObjectStore to make a request. You can also use an IDBTransaction object to abort transactions.Note: This feature is available in Web WorkersTransactions are started when the transaction is created, not when the first request is placed; for example consider this:After the code is executed the object store should contain the value "2", since trans2 should run after trans1.Transactions can fail for a fixed number of reasons, all of which (except the user agent crash) will trigger an abort callback:Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a readwrite transaction, a complete event was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the complete event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The complete event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare, most consumers should not need to concern themselves further.If you must ensure durability for some reason (e.g. you're storing critical data that cannot be recomputed later) you can force a transaction to flush to disk before delivering the complete event by creating a transaction using the experimental (non-standard) readwriteflush mode (see IDBDatabase.transaction.The database connection with which this transaction is associated.Returns the durability hint the transaction was created with.Returns a DOMException indicating the type of error that occurred when there is an unsuccessful transaction. This property is null if the transaction is not finished, is finished and successfully committed, or was aborted with theIDBTransaction.abort() function.The mode for isolating access to data in the object stores that are in the scope of the transaction. The default value is readonly.Returns a DOMStringList of the names of IDBObjectStore objects associated with the transaction.Inherits from: EventTargetRolls back all the changes to objects in the database associated with this transaction. If this transaction has been aborted or completed, this method fires an error event.Returns an IDBObjectStore object representing an object store that is part of the scope of this transaction.For an active transaction, commits the transaction. Note that this doesn't normally have to be called — a transaction will automatically commit when all outstanding requests have been satisfied and no new requests have been made. commit() can be used to start the commit process without waiting for events from outstanding requests to be dispatched.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  An event fired when the IndexedDB transaction is aborted.\n  Also available via the onabort property; this event bubbles to IDBDatabase.\n  \n  An event fired when the transaction successfully completes.\n  Also available via the oncomplete property.\n  \n  An event fired when a request returns an error and the event bubbles up to the connection object (IDBDatabase).\n  Also available via the onerror property.\n  Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Warning: These constants are no longer available — they were removed in Gecko 25. You should use the string constants directly instead. (bug 888598)Transactions can have one of three modes:Allows data to be read but not changed.Even if these constants are now deprecated, you can still use them to provide backward compatibility if required (in Chrome the change was made in version 21). You should code defensively in case the object is not available anymore:In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our To-do Notifications app (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction"
},
{
	"api_id": "474",
	"name": "IDBVersionChangeEvent",
	"description": "The IDBVersionChangeEvent interface of the IndexedDB API indicates that the version of the database has changed, as the result of an onupgradeneeded event handler function.Note: This feature is available in Web WorkersCreates and returns a new IDBVersionChangeEvent object which is used to represent when a version of the database has changed.Also inherits properties from its parent, Event interface.Returns the old version of the database.Returns the new version of the database.No specific method, but inherits properties from its parent, Event interface.In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. Upon a version change (after an upgradeneeded event), the success event will implement the IDBVersionChangeEvent interface. For a full working example, see our To-do Notifications app (view example live.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent"
},
{
	"api_id": "475",
	"name": "IdleDeadline",
	"description": "The IdleDeadline interface is used as the data type of the input parameter to idle callbacks established by calling Window.requestIdleCallback(). It offers a method, timeRemaining(), which lets you determine how much longer the user agent estimates it will remain idle and a property, didTimeout, which lets you determine if your callback is executing because its timeout duration expired.To learn more about how request callbacks work, see Collaborative Scheduling of Background Tasks.A Boolean whose value is true if the callback is being executed because the timeout specified when the idle callback was installed has expired.Returns a DOMHighResTimeStamp, which is a floating-point value providing an estimate of the number of milliseconds remaining in the current idle period. If the idle period is over, the value is 0. Your callback can call this repeatedly to see if there's enough time left to do more work before returning.See our complete example in the article Cooperative Scheduling of Background Tasks API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline"
},
{
	"api_id": "476",
	"name": "IdleDetector",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The IdleDetector interface of the Idle\nDetection API provides methods and events for detecting user activity on a device or screen.This interface requires a secure context.\n  device within the threshold provided to start() or "idle" if they have not.\n  This attribute returns null before start() is called.\n\n  Returns a string indicating whether the screen is locked, one of\n  "locked" or "unlocked". This attribute returns null before start()\n  is called.\n  Called when the value of userState or screenState has changed.\n  Returns a Promise that resolves when the user has chosen\n  whether to grant the origin access to their idle state. Resolves with\n  "granted" on acceptance and "denied" on refusal.\n  \n  Returns a Promise that resolves when the detector starts listening for\n  changes in the user's idle state. userState and screenState are given\n  initial values. This method takes an optional options object with the threshold in\n  milliseconds where inactivity should be reported and signal for an\n  AbortSignal to abort the idle detector.\n  \n  The following example shows creating a detector and logging changes to the\n  user's idle state. A button is used to get the necessary user activation before\n  requesting permission.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDetector"
},
{
	"api_id": "477",
	"name": "IIRFilterNode",
	"description": "The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.Typically, it's best to use the BiquadFilterNode interface to implement higher-order filters. There are several reasons why:However, if you need to create an odd-ordered IIR filter, you'll need to use IIRFilterNode. You may also find this interface useful if you don't need automation, or for other reasons.Note: Once the node has been created, you can't change its coefficients.IIRFilterNodes have a tail-time reference; they continue to output non-silent audio with zero input. As an IIR filter, the non-zero input continues forever, but this can be limited after some finite time in practice, when the output has approached zero closely enough. The actual time that takes depends on the filter coefficients provided.Creates a new instance of an IIRFilterNode object.This interface has no properties of its own; however, it inherits properties from its parent, AudioNode.Inherits methods from its parent, AudioNode. It also has the following additional methods:Uses the filter's current parameter settings to calculate the response for frequencies specified in the provided array of frequencies.You can find a simple IIR filter demo live on Codepen. Also see the source code on GitHub. It includes some different coefficient values for different lowpass frequencies — you can change the value of the filterNumber constant to a value between 0 and 3 to check out the different available effects.Also see our Using IIR filters guide for a full explanation.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode"
},
{
	"api_id": "478",
	"name": "ImageBitmap",
	"description": "The ImageBitmap interface represents a bitmap image which can be drawn to a <canvas> without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.ImageBitmap is a transferable object.An unsigned long representing the height, in CSS pixels, of the ImageData.An unsigned long representing the width, in CSS pixels, of the ImageData.Disposes of all graphical resources associated with an ImageBitmap.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap"
},
{
	"api_id": "479",
	"name": "ImageBitmapRenderingContext",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ImageBitmapRenderingContext interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext()) is "bitmaprenderer".This interface is available in both the window and the worker context.Displays the given ImageBitmap in the canvas associated with this rendering context. Ownership of the ImageBitmap is transferred to the canvas. This was previously named transferImageBitmap(), but was renamed in a spec change. The old name is being kept as an alias to avoid code breakage.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext"
},
{
	"api_id": "480",
	"name": "ImageCapture",
	"description": "The ImageCapture interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid MediaStreamTrack.Creates a new ImageCapture object which can be used to capture still frames (photos) from a given MediaStreamTrack which represents a video stream.Returns a reference to the MediaStreamTrack passed to the constructor.The ImageCapture interface is based on EventTarget, so it includes the methods defined by that interface as well as the ones listed below.Takes a single exposure using the video capture device sourcing a MediaStreamTrack and returns a Promise that resolves with a Blob containing the data.Returns a Promise that resolves with a PhotoCapabilities object containing the ranges of available configuration options.Returns a Promise that resolves with a PhotoSettings object containing the current photo configuration settings.Takes a snapshot of the live video in a MediaStreamTrack, returning an ImageBitmap, if successful.The following code is taken from Chrome's Grab Frame - Take Photo Sample. Since ImageCapture requires some place to capture an image from, the example below starts with a device's media device (in other words a camera).This example shows, roughly, a MediaStreamTrack extracted from a device's MediaStream. The track is then used to create an ImageCapture object so that takePhoto() and grabFrame() can be called. Finally, it shows how to apply the results of these calls to a canvas object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture"
},
{
	"api_id": "481",
	"name": "ImageData",
	"description": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element.It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().Note: This feature is available in Web WorkersCreates an ImageData object from a given Uint8ClampedArray and the size of the image it contains. If no array is given, it creates an image of a transparent black rectangle. Note that this is the most common way to create such an object in workers as createImageData() is not available there.A Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (inclusive).An unsigned long representing the actual height, in pixels, of the ImageData.An unsigned long representing the actual width, in pixels, of the ImageData.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData"
},
{
	"api_id": "482",
	"name": "ImageDecoder",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The ImageDecoder interface of the WebCodecs API provides a way to unpack and decode encoded image data.Creates a new ImageDecoder object.Returns a boolean value indicating whether encoded data is completely buffered.Returns a Promise that resolves once complete is true.Returns an ImageTrackList object listing the available tracks and providing a method for selecting a track to decode.Returns a string reflecting the MIME type configured during construction.Ends all pending work and releases system resources.Enqueues a control message to decode the frame of an image.Aborts all pending decode() operations.Indicates if the provided MIME type is supported for unpacking and decoding.Given a <canvas> element:the following code decodes and renders an animated image to that canvas:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageDecoder"
},
{
	"api_id": "483",
	"name": "ImageTrack",
	"description": "The ImageTrack interface of the WebCodecs API represents an individual image track.Returns a boolean indicating whether the track is animated and therefore has multiple frames.Returns an integer indicating the number of frames in the track.Returns an integer indicating the number of times that the animation repeats.Returns a boolean indicating whether the track is selected for decoding.An event handler fired at the ImageTrack when the frameCount is altered.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageTrack"
},
{
	"api_id": "484",
	"name": "ImageTrackList",
	"description": "The ImageTrackList interface of the WebCodecs API represents a list of image tracks.Returns a promise that resolves once the ImageTrackList has been populated with tracks.Returns an integer indicating the length of the ImageTrackList.Returns an integer indicating the index of the selectedTrack.Returns the selected ImageTrack.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageTrackList"
},
{
	"api_id": "485",
	"name": "indexedDB",
	"description": "\n  The global indexedDB read-only property provides a mechanism for applications to\n  asynchronously access the capabilities of indexed databases.\nAn IDBFactory object.\n  The following code creates a request for a database to be opened asynchronously, after\n  which the database is opened when the request's onsuccess handler is fired:\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/indexedDB"
},
{
	"api_id": "486",
	"name": "InputDeviceCapabilities",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The InputDeviceCapabilities interface of the Input Device Capabilities API provides information about the physical device or a group of related devices responsible for generating input events. Events caused by the same physical input device get the same instance of this object, but the converse isn't true. For example, two mice with the same capabilities in a system may appear as a single InputDeviceCapabilities instance.In some instances, InputDeviceCapabilities represents the capabilities of logical devices rather than physical devices. This allows, for example, touchscreen keyboards and physical keyboards to be represented the same way when they produce the same input.Creates an InputDeviceCapabilities object.A Boolean that indicates whether the device dispatches touch events.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities"
},
{
	"api_id": "487",
	"name": "InputDeviceInfo",
	"description": "The InputDeviceInfo interface of the Media Streams API gives access to the capabilities of the input device that it represents.InputDeviceInfo objects are returned by MediaDevices.enumerateDevices() if the returned device is an audio or video input device.Returns a MediaTrackCapabilities object describing the primary audio or video track of a device's MediaStream.The following example gets all media devices with MediaDevices.enumerateDevices(). If any of the devices are input devices then console.log(device) will print an InputDeviceInfo object to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceInfo"
},
{
	"api_id": "488",
	"name": "InputEvent",
	"description": "The InputEvent interface represents an event notifying the user of editable content changes.Creates an InputEvent object.This interface inherits properties from its parents, UIEvent and Event.Returns a string with the inserted characters. This may be an empty string if the change doesn't insert text (such as when deleting characters, for example).Returns a DataTransfer object containing information about richtext or plaintext data being added to or removed from editable content.Returns the type of change for editable content such as, for example, inserting, deleting, or formatting text. See the property page for a complete list of input types.Returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.This interface inherits methods from its parents, UIEvent and Event.Returns an array of static ranges that will be affected by a change to the DOM if the input event is not canceled.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent"
},
{
	"api_id": "489",
	"name": "InstallEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The parameter passed into the oninstall handler, the InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. As a child of ExtendableEvent, it ensures that functional events such as FetchEvent are not dispatched during installation.This interface inherits from the ExtendableEvent interface.Creates a new InstallEvent object.Inherits properties from its ancestor, Event.Returns the ServiceWorker that is currently controlling the page.Inherits methods from its parent, ExtendableEvent.This code snippet is from the service worker prefetch sample (see prefetch running live.) The code calls ExtendableEvent.waitUntil() in ServiceWorkerGlobalScope.oninstall and delays treating the ServiceWorkerRegistration.installing worker as installed until the passed promise resolves successfully. The promise resolves when all resources have been fetched and cached, or when any exception occurs.The code snippet also shows a best practice for versioning caches used by the service worker. Although this example has only one cache, you can use this approach for multiple caches. The code maps a shorthand identifier for a cache to a specific, versioned cache name.Note: Logging statements are visible in Google Chrome via the "Inspect" interface for the relevant service worker accessed via chrome://serviceworker-internals.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent"
},
{
	"api_id": "490",
	"name": "IntersectionObserver",
	"description": "The IntersectionObserver interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root.When an IntersectionObserver is created, it's configured to watch for given ratios of visibility within the root. The configuration cannot be changed once the IntersectionObserver is created, so a given observer object is only useful for watching for specific changes in degree of visibility; however, you can watch multiple target elements with the same observer.Creates a new IntersectionObserver object which will execute a specified callback function when it detects that a target element's visibility has crossed one or more thresholds.The Element or Document whose bounds are used as the bounding box when testing for intersection. If no root value was passed to the constructor or its value is null, the top-level document's viewport is used.An offset rectangle applied to the root's bounding box when calculating intersections, effectively shrinking or growing the root for calculation purposes. The value returned by this property may not be the same as the one specified when calling the constructor as it may be changed to match internal requirements. Each offset can be expressed in pixels (px) or as a percentage (%). The default is "0px 0px 0px 0px".A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. Notifications for a target are generated when any of the thresholds are crossed for that target. If no value was passed to the constructor, 0 is used.Stops the IntersectionObserver object from observing any target.Tells the IntersectionObserver a target element to observe.Returns an array of IntersectionObserverEntry objects for all observed targets.Tells the IntersectionObserver to stop observing a particular target element.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"
},
{
	"api_id": "491",
	"name": "IntersectionObserverEntry",
	"description": "The IntersectionObserverEntry interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.Instances of IntersectionObserverEntry are delivered to an IntersectionObserver callback in its entries parameter; otherwise, these objects can only be obtained by calling IntersectionObserver.takeRecords().Returns the bounds rectangle of the target element as a DOMRectReadOnly. The bounds are computed as described in the documentation for Element.getBoundingClientRect().Returns the ratio of the intersectionRect to the boundingClientRect.Returns a DOMRectReadOnly representing the target's visible area.A Boolean value which is true if the target element intersects with the intersection observer's root. If this is true, then, the IntersectionObserverEntry describes a transition into a state of intersection; if it's false, then you know the transition is from intersecting to not-intersecting.Returns a DOMRectReadOnly for the intersection observer's root.The Element whose intersection with the root changed.A DOMHighResTimeStamp indicating the time at which the intersection was recorded, relative to the IntersectionObserver's time origin.This interface has no methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"
},
{
	"api_id": "492",
	"name": "InterventionReportBody",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The InterventionReportBody interface of the Reporting API represents the body of an intervention report.An intervention report is generated when usage of a feature in a web document has been blocked by the browser for reasons such as security, performance, or user annoyance. So for example, a script was been stopped because it was significantly slowing down the browser, or the browser's autoplay policy blocked audio from playing without a user gesture to trigger it.A deprecation report is generated when a deprecated feature (for example a deprecated API method) is used on a document being observed by a ReportingObserver. In addition to the support of this API, receiving useful intervention warnings relies on browser vendors adding these warnings for the relevant features.An instance of InterventionReportBody is returned as the value of Report.body when Report.Type is intervention. The interface has no constructor.This interface also inherits properties from ReportBody.A string representing the intervention that generated the report. This can be used to group reports.A string containing a human-readable description of the intervention, including information such how the intervention could be avoided. This typically matches the message a browser will display in its DevTools console when an intervention is imposed, if one is available.A string containing the path to the source file where the intervention occurred, if known, or null otherwise.A string representing the line in the source file in which the intervention occurred, if known, or null otherwise.A string representing the column in the source file in which the intervention occurred, if known, or null otherwise.This interface also inherits methods from ReportBody.A serializer which returns a JSON representation of the InterventionReportBody object.In this example we create a new ReportingObserver to observe intervention reports, then print details of each property of the first report to the console.This feature is not yet available by default in any released browser. It can be activated in Firefox by setting dom_reporting_enabled to true and in Chrome if you enable this experimental feature.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/InterventionReportBody"
},
{
	"api_id": "493",
	"name": "isSecureContext",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The global isSecureContext read-only property returns a boolean indicating whether\n  the current context is secure\n  (true) or not (false).\nBoolean true or false.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext"
},
{
	"api_id": "494",
	"name": "Keyboard",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Keyboard interface of the Keyboard API provides functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.A list of valid code values is found in the UI Events KeyboardEvent code Values spec.None.Returns a Promise that resolves with an instance of KeyboardLayoutMap which is a map-like object with functions for retrieving the strings associated with specific physical keys.Returns a Promise after enabling the capture of keypresses for any or all of the keys on the physical keyboard.Unlocks all keys captured by the lock() method and returns synchronously.The following example demonstrates how to get the location- or layout-specific string associated with the key that corresponds to the 'W' key on an English QWERTY keyboard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Keyboard"
},
{
	"api_id": "495",
	"name": "KeyboardEvent",
	"description": "KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (keydown, keypress, or keyup) identifies what kind of keyboard activity occurred.Note: KeyboardEvent events just indicate what interaction the user had with a key on the keyboard at a low level, providing no contextual meaning to that interaction. When you need to handle text input, use the input event instead. Keyboard events may not be fired if the user is using an alternate means of entering text, such as a handwriting system on a tablet or graphics tablet.Creates a new KeyboardEvent object.The KeyboardEvent interface defines the following constants.The following constants identify which part of the keyboard the key event originates from. They are accessed as KeyboardEvent.DOM_KEY_LOCATION_STANDARD and so forth.\n    The key described by the event is not identified as being located in a\n    particular area of the keyboard; it is not located on the numeric\n    keypad (unless it's the NumLock key), and for keys that are duplicated\n    on the left and right sides of the keyboard, the key is, for whatever\n    reason, not to be associated with that location.\n    \n    Examples include alphanumeric keys on the standard PC 101 US keyboard,\n    the NumLock key, and the space bar.\n    \n    The key is one which may exist in multiple locations on the keyboard\n    and, in this instance, is on the left side of the keyboard.\n    \n    Examples include the left Control key, the left Command key on a\n    Macintosh keyboard, or the left Shift key.\n    \n    The key is one which may exist in multiple positions on the keyboard\n    and, in this case, is located on the right side of the keyboard.\n    \n    Examples include the right Shift key and the right Alt key (Option on\n    a Mac keyboard).\n    \n    The key is located on the numeric keypad, or is a virtual key\n    associated with the numeric keypad if there's more than one place the\n    key could originate from. The NumLock key does not fall into this\n    group and is always encoded with the location\n    DOM_KEY_LOCATION_STANDARD.\n    \n    Examples include the digits on the numeric keypad, the keypad's Enter\n    key, and the decimal point on the keypad.\n    This interface also inherits properties of its parents, UIEvent and Event.Returns a boolean value that is true if the Alt (Option or ⌥ on macOS) key was active when the key event was generated.Returns a string with the code value of the physical key represented by the event.Warning: This ignores the user's keyboard layout, so that if the user presses the key at the "Y" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return "KeyY", even if the user has a QWERTZ keyboard (which would mean the user expects a "Z" and all the other properties would indicate a "Z") or a Dvorak keyboard layout (where the user would expect an "F"). If you want to display the correct keystrokes to the user, you can use Keyboard.getLayoutMap().Returns a boolean value that is true if the Ctrl key was active when the key event was generated.Returns a boolean value that is true if the event is fired between after compositionstart and before compositionend.Returns a string representing the key value of the key represented by the event.Returns a string representing a locale string indicating the locale the keyboard is configured for. This may be the empty string if the browser or device doesn't know the keyboard's locale.Note: This does not describe the locale of the data being entered. A user may be using one keyboard layout while typing text in a different language.Returns a Number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations.Returns a boolean value that is true if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.Returns a boolean value that is true if the key is being held down such that it is automatically repeating.Returns a boolean value that is true if the Shift key was active when the key event was generated.This interface also inherits methods of its parents, UIEvent and Event.Returns a boolean value indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created.Initializes a KeyboardEvent object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the KeyboardEvent() constructor.Initializes a KeyboardEvent object. This is now deprecated. You should instead use the KeyboardEvent() constructor.Returns a string representing the character value of the key. If the key corresponds to a printable character, this value is a non-empty Unicode string containing that character. If the key doesn't have a printable representation, this is an empty string.Note: If the key is used as a macro that inserts multiple characters, this attribute's value is the entire string, not just the first character.Returns a Number representing the Unicode reference number of the key; this attribute is used only by the keypress event. For keys whose char attribute contains multiple characters, this is the Unicode value of the first character in that attribute. In Firefox 26 this returns codes for printable characters.Warning: This attribute is deprecated; you should use KeyboardEvent.key instead, if available.Returns a Number representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.Warning: This attribute is deprecated; you should use KeyboardEvent.key instead, if available.This property is non-standard and has been deprecated in favor of KeyboardEvent.key. It was part of an old version of DOM Level 3 Events.This is a non-standard deprecated alias for KeyboardEvent.location. It was part of an old version of DOM Level 3 Events.Returns a Number representing a system and implementation dependent numeric code identifying the unmodified value of the pressed key; this is usually the same as keyCode.Warning: This attribute is deprecated; you should use KeyboardEvent.key instead, if available.The following events are based on the KeyboardEvent type. They can be delivered to any object which implements GlobalEventHandlers, including Element, Document, and Window. In the list below, each event links to the documentation for the Document handler for the event, which applies generally to all of the recipients.A key has been pressed.A key has been released.A key that normally produces a character value has been pressed. This event was highly device-dependent and is obsolete. You should not use it.There are three types of keyboard events: keydown, keypress, and keyup. For most keys, Gecko dispatches a sequence of key events like this:Some keys toggle the state of an indicator light; these include keys such as Caps Lock, Num Lock, and Scroll Lock. On Windows and Linux, these keys dispatch only the keydown and keyup events.Note: On Linux, Firefox 12 and earlier also dispatched the keypress event for these keys.However, a limitation of the macOS event model causes Caps Lock to dispatch only the keydown event. Num Lock was supported on some older laptop models (2007 models and older), but since then, macOS hasn't supported Num Lock even on external keyboards. On older MacBooks with a Num Lock key, that key doesn't generate any key events. Gecko does support the Scroll Lock key if an external keyboard which has an F14 key is connected. In certain older versions of Firefox, this key generated a keypress event; this inconsistent behavior was bug 602812.When a key is pressed and held down, it begins to auto-repeat. This results in a sequence of events similar to the following being dispatched:This is what the DOM Level 3 specification says should happen. There are some caveats, however, as described below.In some GTK-based environments, auto-repeat dispatches a native key-up event automatically during auto-repeat, and there's no way for Gecko to know the difference between a repeated series of keypresses and an auto-repeat. On those platforms, then, an auto-repeat key will generate the following sequence of events:In these environments, unfortunately, there's no way for web content to tell the difference between auto-repeating keys and keys that are just being pressed repeatedly.Before Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), keyboard handling was less consistent across platforms.Auto-repeat behavior is the same as in Gecko 4.0 and later.After the initial keydown event, only keypress events are sent until the keyup event occurs; the inter-spaced keydown events are not sent.The event behavior depends on the specific platform. It will either behave like Windows or Mac depending on what the native event model does.\n  Note: Manually firing an event does not generate the default action associated with that event.\n  For example, manually firing a key event does not cause that letter to appear in a focused text input.\n  In the case of UI events, this is important for security reasons, as it prevents scripts from simulating user actions that interact with the browser itself.\n  The KeyboardEvent interface specification went through numerous draft versions, first under DOM Events Level 2 where it was dropped as no consensus arose, then under DOM Events Level 3. This led to the implementation of non-standard initialization methods, the early DOM Events Level 2 version, KeyboardEvent.initKeyEvent() by Gecko browsers and the early DOM Events Level 3 version, KeyboardEvent.initKeyboardEvent() by others. Both have been superseded by the modern usage of a constructor: KeyboardEvent().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent"
},
{
	"api_id": "496",
	"name": "KeyboardLayoutMap",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The KeyboardLayoutMap interface of the Keyboard API is a map-like object with functions for retrieving the string associated with specific physical keys.A list of valid keys is found in the UI Events KeyboardEvent code Values specification.Returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).Returns a new array iterator object that contains the keys for each index in the array.Returns the number of elements in the KeyboardLayoutMap object.Returns a new array iterator object that contains the values for each index in the KeyboardLayoutMap object.Executes a provided function once for each element of KeyboardLayoutMap.Returns the element with the given key from the KeyboardLayoutMap object.Returns a boolean indicating whether the KeyboardLayoutMap object has an element with the specified key.The following example demonstrates how to get the location- or layout-specific string associated with the key that corresponds to the 'W' key on an English QWERTY keyboard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardLayoutMap"
},
{
	"api_id": "497",
	"name": "KeyframeEffect",
	"description": "The KeyframeEffect interface of the Web Animations API lets us create sets of animatable properties and values, called keyframes. These can then be played using the Animation() constructor.Returns a new KeyframeEffect object instance, and also allows you to clone an existing keyframe effect object instance.Gets and sets the element, or originating element of the pseudo-element, being animated by this object. This may be null for animations that do not target a specific element or pseudo-element.Gets and sets the selector of the pseudo-element being animated by this object. This may be null for animations that do not target a pseudo-element.Gets and sets the iteration composite operation for resolving the property value changes of this keyframe effect.Gets and sets the composite operation property for resolving the property value changes between this and other keyframe effects.This interface inherits some of its methods from its parent, AnimationEffect.Returns the calculated, current timing values for this keyframe effect.Returns the computed keyframes that make up this effect along with their computed keyframe offsets.Returns the object associated with the animation containing all the animation's timing values.Replaces the set of keyframes that make up this effect.Updates the specified timing properties.In the Follow the White Rabbit example, the KeyframeEffect constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect"
},
{
	"api_id": "498",
	"name": "KHR_parallel_shader_compile",
	"description": "The KHR_parallel_shader_compile extension is part of the WebGL API and enables a non-blocking poll operation, so that compile/link status availability (COMPLETION_STATUS_KHR) can be queried without potentially incurring stalls. In other words you can check the status of your shaders compiling without blocking the runtime.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.A GLenum.Enable the extension:In general, best practice with or without the extension is:With the extension, apps would be able to poll whether programs have linked without janking, but these are likely to take the same total wall time to link:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/KHR_parallel_shader_compile"
},
{
	"api_id": "499",
	"name": "LargestContentfulPaint",
	"description": "The LargestContentfulPaint interface of the Largest Contentful Paint API provides details about the largest image or text paint before user input on a web page. The timing of this paint is a good heuristic for when the main page content is available during load.This interface also inherits properties from PerformanceEntry.The element that is the current largest contentful paint.The time the element was rendered to the screen. May not be available if the element is a cross-origin image loaded without the Timing-Allow-Origin header.The time the element was loaded.The intrinsic size of the element returned as the area (width * height).The id of the element. This property returns an empty string when there is no id.If the element is an image, the request url of the image.This interface also inherits methods from PerformanceEntry.Returns the above properties as JSON.The following example shows how to create a PerformanceObserver that listens for largest-contentful-paint entries and logs the LCP value to the console.This example also demonstrates how to include buffered entries (those that ocurred before observer() was called), which is done by setting the buffered option to true.Note that in this example data is only sent to the server when the user leaves the tab.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint"
},
{
	"api_id": "500",
	"name": "LayoutShift",
	"description": "The LayoutShift interface of the Layout Instability API provides insights into the stability of web pages based on movements of the elements on the page.Returns the impact fraction (fraction of the viewport that was shifted) times the distance fraction (distance moved as a fraction of viewport).Returns true if there was a user input in the past 500 milliseconds.Returns the time of the most recent user input.Returns an array of LayoutShiftAttribution objects with information on the elements that were shifted.Converts the properties to JSON.The following example shows how to capture layout shifts and log them to the console.Note that in this example data is only sent to the server when the user leaves the tab.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift"
},
{
	"api_id": "501",
	"name": "LayoutShiftAttribution",
	"description": "The LayoutShiftAttribution interface of the Layout Instability API provides debugging information about elements which have shifted.Instances of LayoutShiftAttribution are returned in an array by calling LayoutShift.sources.Returns the element that has shifted (null if it has been removed).Returns a DOMRectReadOnly object representing the position of the element before the shift.Returns a DOMRectReadOnly object representing the position of the element after the shift.Returns a JSON representation of the LayoutShiftAttribution object.The following example finds the element that is causing the largest layout shift, and prints that node to the console. For more detail on this see Debug Web Vitals in the field.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/LayoutShiftAttribution"
},
{
	"api_id": "502",
	"name": "LinearAccelerationSensor",
	"description": "The LinearAccelerationSensor interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new LinearAccelerationSensor object.Inherits properties from its ancestors, Accelerometer, Sensor, and EventTarget.LinearAccelerationSensor doesn't have own methods. However, it inherits methods from its parent interfaces, Sensor and EventTarget.LinearAccelerationSensor doesn't have own events. However, it inherits events from its parent interface, Sensor.Linear acceleration is typically read in the reading event callback. In the example below this occurs sixty times a second.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/LinearAccelerationSensor"
},
{
	"api_id": "503",
	"name": "Location",
	"description": "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.A static DOMStringList containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given Location object.A stringifier that returns a string containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.A string containing the protocol scheme of the URL, including the final ':'.A string containing the host, that is the hostname, a ':', and the port of the URL.A string containing the domain of the URL.A string containing the port number of the URL.A string containing an initial '/' followed by the path of the URL, not including the query string or fragment.A string containing a '?' followed by the parameters or "querystring" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.A string containing a '#' followed by the fragment identifier of the URL.Returns a string containing the canonical form of the origin of the specific location.Loads the resource at the URL provided in parameter.Reloads the current URL, like the Refresh button.Replaces the current resource with the one at the provided URL (redirects to the provided URL). The difference from the assign() method and setting the href property is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.Returns a string containing the whole URL. It is a synonym for Location.href, though it can't be used to modify the value.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Location"
},
{
	"api_id": "504",
	"name": "Lock",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The Lock interface of the Web Locks API provides the name and mode of a lock.\n  This may be a newly requested lock that is received in the callback to LockManager.request(), or a record of an active or queued lock returned by LockManager.query().\n\n  Returns the access mode passed to LockManager.request() when the lock was requested.\n  The mode is either "exclusive" (the default) or "shared".\n  Returns the name passed to LockManager.request() when the lock was requested.\n  The following examples show how the mode and name properties are passed in the call to LockManager.request().\n  LockManager is the object returned by navigator.locks.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Lock"
},
{
	"api_id": "505",
	"name": "LockManager",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The LockManager interface of the Web Locks API provides methods for requesting a new Lock object and querying for an existing Lock object. To get an instance of LockManager, call navigator.locks.Requests a Lock object with parameters specifying its name and characteristics.Returns a Promise that resolves with an object that contains information about held and pending locks.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/LockManager"
},
{
	"api_id": "506",
	"name": "Magnetometer",
	"description": "The Magnetometer interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.If a feature policy blocks use of a feature, it's because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new Magnetometer object.Returns a double containing the magnetic field around the device's x axis.Returns a double containing the magnetic field around the device's y axis.Returns a double containing the magnetic field around the device's z axis.Magnetometer doesn't have own methods. However, it inherits methods from its parent interfaces, Sensor and EventTarget.Magnetometer doesn't have own events. However, it inherits events from its parent interface, Sensor.The magnetometer is typically read in the reading event callback. In the example below this occurs sixty times a second.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Magnetometer"
},
{
	"api_id": "507",
	"name": "MathMLElement",
	"description": "The MathMLElement interface represents any MathML element.Also inherits properties from: DocumentAndElementEventHandlers, Element, GlobalEventHandlersA StylePropertyMap representing the declarations of the element's style attribute.A CSSStyleDeclaration representing the declarations of the element's style attribute.This interface has no methods, but inherits methods from: DocumentAndElementEventHandlers, Element, GlobalEventHandlers",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MathMLElement"
},
{
	"api_id": "508",
	"name": "MediaCapabilities",
	"description": "The MediaCapabilities interface of the Media Capabilities API provides information about the decoding abilities of the device, system and browser. The API can be used to query the browser about the decoding abilities of the device based on codecs, profile, resolution, and bitrates. The information can be used to serve optimal media streams to the user and determine if playback should be smooth and power efficient.The information is accessed through the mediaCapabilities property of the Navigator interface.When passed a valid media configuration, it returns a promise with information as to whether the media type is supported, and whether encoding such media would be smooth and power efficient.When passed a valid media configuration, it returns a promise with information as to whether the media type is supported, and whether decoding such media would be smooth and power efficient.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities"
},
{
	"api_id": "509",
	"name": "MediaDeviceInfo",
	"description": "The MediaDeviceInfo interface contains information that describes a single media input or output device.The list of devices obtained by calling navigator.mediaDevices.enumerateDevices() is an array of MediaDeviceInfo objects, one per media device.Returns a string that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).Returns a string that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.Returns an enumerated value that is either "videoinput", "audioinput" or "audiooutput".Returns a string describing this device (for example "External USB Webcam").Note: For security reasons, the label field is always blank unless an active media stream exists or the user has granted persistent permission for media device access. The set of device labels could otherwise be used as part of a fingerprinting mechanism to identify a user.None.Here's an example that uses enumerateDevices() to get a list of devices.This might produce:or if one or more media streams are active, or if persistent permissions have been granted:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo"
},
{
	"api_id": "510",
	"name": "MediaDevices",
	"description": "The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.Inherits properties from its parent interface, EventTarget.Inherits methods from its parent interface, EventTarget.Obtains an array of information about the media input and output devices available on the system.Returns an object conforming to MediaTrackSupportedConstraints indicating which constrainable properties are supported on the MediaStreamTrack interface. See Capabilities and constraints in Media Capture and Streams API (Media Stream) to learn more about constraints and how to use them.Prompts the user to select a display or portion of a display (such as a window) to capture as a MediaStream for sharing or recording purposes. Returns a promise that resolves to a MediaStream.With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.Prompts the user to select a specific audio output device.Fired when a media input or output device is attached to or removed from the user's computer.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices"
},
{
	"api_id": "511",
	"name": "MediaElementAudioSourceNode",
	"description": "The MediaElementAudioSourceNode interface represents an audio source consisting of an HTML5 <audio> or <video> element. It is an AudioNode that acts as an audio source.A MediaElementAudioSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource() method. The number of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.Creates a new MediaElementAudioSourceNode object instance.Inherits properties from its parent, AudioNode.The HTMLMediaElement used when constructing this MediaStreamAudioSourceNode.Inherits methods from its parent, AudioNode.See AudioContext.createMediaElementSource() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode"
},
{
	"api_id": "512",
	"name": "MediaError",
	"description": "The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.A MediaError object describes the error in general terms using a numeric code categorizing the kind of error, and a message, which provides specific diagnostics about what went wrong.This interface doesn't inherit any properties.A number which represents the general type of error that occurred.A human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one user agent to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string ("").This interface doesn't implement or inherit any methods, and has none of its own.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError"
},
{
	"api_id": "513",
	"name": "MediaImage",
	"description": "The Media Session API's MediaImage dictionary describes the images associated with a media resource's MediaMetadata.Its contents can be displayed by the user agent in appropriate contexts like in a player interface to show the current playing video or audio track.The URL from which the user agent fetches the image's data.Specifies the resource in multiple sizes so the user agent doesn't have to scale a single image.The MIME type hint for the user agent that allows it to ignore images of types that it doesn't support. However, the user agent may still use MIME type sniffing after downloading the image to determine its type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaImage"
},
{
	"api_id": "514",
	"name": "MediaKeyMessageEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaKeyMessageEvent interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.Creates a new instance of MediaKeyMessageEvent.Inherits properties from its parent, Event.Returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system.Indicates the type of message. May be one of license-request, license-renewal, license-release, or individualization-request.Inherits methods from its parent, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent"
},
{
	"api_id": "515",
	"name": "MediaKeys",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaKeys interface of EncryptedMediaExtensions API represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.None.Returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM).Returns a Promise to a server certificate to be used to encrypt messages to the license server.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys"
},
{
	"api_id": "516",
	"name": "MediaKeySession",
	"description": "The MediaKeySession interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).Returns a Promise signaling when a MediaKeySession closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data.The time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.Contains a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses.Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.Fires when there has been a change in the keys in a session or their statuses.Fires when the content decryption module has generated a message for the session.Returns a Promise after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.Returns a Promise after generating a media request based on initialization data.Returns a Promise that resolves to a boolean value after loading data for a specified session object.Returns a Promise after removing any session data associated with the current object.Returns a Promise after loading messages and licenses to the CDM.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession"
},
{
	"api_id": "517",
	"name": "MediaKeyStatusMap",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaKeyStatusMap interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.Returns the number of key/value pairs in the status map.Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order.Calls callback once for each key-value pair in the status map, in insertion order. If argument is present it will be passed to the callback.Returns the value associated with the given key, or undefined if there is none.Returns a boolean asserting whether a value has been associated with the given key.Returns a new Iterator object containing keys for each element in the status map, in insertion order.Returns a new Iterator object containing values for each element in the status map, in insertion order.Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap"
},
{
	"api_id": "518",
	"name": "MediaKeySystemAccess",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaKeySystemAccess interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess() method.Returns a string identifying the key system being used.Returns a Promise that resolves to a new MediaKeys object.Returns an object with the supported combination of configuration options.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess"
},
{
	"api_id": "519",
	"name": "MediaList",
	"description": "The MediaList interface represents the media queries of a stylesheet, e.g. those set using a <link> element's media attribute.Note: MediaList is a live list; updating the list using properties or methods listed below will immediately update the behavior of the document.A stringifier that returns a string representing the MediaList as text, and also allows you to set a new MediaList.Returns the number of media queries in the MediaList.Adds a media query to the MediaList.Removes a media query from the MediaList.A getter that returns a string representing a media query as text, given the media query's index value inside the MediaList.The following would log to the console a textual representation of the MediaList of the first stylesheet applied to the current document.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaList"
},
{
	"api_id": "520",
	"name": "MediaMetadata",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaMetadata interface of the Media Session API allows a web page to provide rich media metadata for display in a platform UI.Creates a new MediaMetaData object.Returns or sets the title of the media to be played.Returns or sets the name of the artist, group, creator, etc. of the media to be played.Returns or sets the name of the album or collection containing the media to be played.Returns or sets an array of images associated with playing media.The following example checks for browser compatibility and sets the current metadata for the media session.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata"
},
{
	"api_id": "521",
	"name": "MediaQueryList",
	"description": "A MediaQueryList object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.You can create a MediaQueryList by calling matchMedia() on the window object. The resulting object handles sending notifications to listeners when the media query state changes (i.e. when the media query test starts or stops evaluating to true).This is very useful for adaptive design, since this makes it possible to observe a document to detect when its media queries change, instead of polling the values periodically, and allows you to programmatically make changes to a document based on media query status.The MediaQueryList interface inherits properties from its parent interface, EventTarget.A boolean value that returns true if the document currently matches the media query list, or false if not.A string representing a serialized media query.The MediaQueryList interface inherits methods from its parent interface, EventTarget.Adds to the MediaQueryList a callback which is invoked whenever the media query status—whether or not the document matches the media queries in the list—changes. This method exists primarily for backward compatibility; if possible, you should instead use addEventListener() to watch for the change event.Removes the specified listener callback from the callbacks to be invoked when the MediaQueryList changes media query status, which happens any time the document switches between matching and not matching the media queries listed in the MediaQueryList. This method has been kept for backward compatibility; if possible, you should generally use removeEventListener() to remove change notification callbacks (which should have previously been added using addEventListener()).The following events are delivered to MediaQueryList objects:Sent to the MediaQueryList when the result of running the media query against the document changes. For example, if the media query is (min-width: 400px), the change event is fired any time the width of the document's viewport changes such that its width moves across the 400px boundary in either direction.This simple example creates a MediaQueryList and then sets up a listener to detect when the media query status changes, running a custom function when it does to change the appearance of the page.Note: You can find this example on GitHub (see the source code, and also see it running live).You can find other examples on the individual property and method pages.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList"
},
{
	"api_id": "522",
	"name": "MediaQueryListEvent",
	"description": "The MediaQueryListEvent object stores information on the changes that have happened to a MediaQueryList object — instances are available as the event object on a function referenced by a change event.Creates a new MediaQueryListEvent instance.The MediaQueryListEvent interface inherits properties from its parent interface, Event.A boolean value that is true if the document currently matches the media query list, or false if not.A string representing a serialized media query.The MediaQueryListEvent interface inherits methods from its parent interface, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent"
},
{
	"api_id": "523",
	"name": "MediaRecorder",
	"description": "The MediaRecorder interface of the MediaStream Recording API provides functionality to easily record media. It is created using the MediaRecorder() constructor.Creates a new MediaRecorder object, given a MediaStream to record. Options are available to do things like set the container's MIME type (such as "video/webm" or "video/mp4") and the bit rates of the audio and video tracks or a single overall bit rate.Returns the MIME type that was selected as the recording container for the MediaRecorder object when it was created.Returns the current state of the MediaRecorder object (inactive, recording, or paused.)Returns the stream that was passed into the constructor when the MediaRecorder was created.Returns the video encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).Returns the audio encoding bit rate in use. This may differ from the bit rate specified in the constructor (if it was provided).Pauses the recording of media.Requests a Blob containing the saved data received thus far (or since the last time requestData() was called. After calling this method, recording continues, but in a new Blob.Resumes recording of media after having been paused.Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs.A static method which returns a true or false value indicating if the given MIME media type is supported by the current user agent.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fires periodically each time timeslice milliseconds of media have been recorded (or when the entire media has been recorded, if timeslice wasn't specified). The event, of type BlobEvent, contains the recorded media in its data property.Fired when there are fatal errors that stop recording. The received event is based on the MediaRecorderErrorEvent interface, whose error property contains a DOMException that describes the actual error that occurred.Fired when media recording is paused.Fired when media recording resumes after being paused.Fired when media recording starts.Fired when media recording ends, either when the MediaStream ends, or after the MediaRecorder.stop() method is called.Fired when media recording has a non-fatal error, or after the MediaRecorder.onwarning() method is called.Note: This code sample is inspired by the Web Dictaphone demo. Some lines have been omitted for brevity; refer to the source for the complete code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder"
},
{
	"api_id": "524",
	"name": "MediaRecorderErrorEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The MediaRecorderErrorEvent interface represents errors returned by the MediaStream Recording API. It is an Event object that encapsulates a reference to a DOMException describing the error that occurred.Inherits properties from its parent interface, Event.A DOMException containing information about the error that occurred. Read only.Creates and returns a new MediaRecorderErrorEvent event object with the given parameters.Inherits methods from its parent interface, Event.This feature is no longer part of any specification, and longer on track to become standard.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent"
},
{
	"api_id": "525",
	"name": "MediaSession",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaSession interface of the Media Session API allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.For example, a smartphone might have a standard panel in its lock screen that provides controls for media playback and information display. A browser on the device can use MediaSession to make browser playback controllable from that standard/global user interface.Returns an instance of MediaMetadata, which contains rich media metadata for display in a platform UI.Indicates whether the current media session is playing. Valid values are none, paused, or playing.Sets an action handler for a media session action, such as play or pause.Sets the current playback position and speed of the media currently being presented.The following example creates a new media session and assigns action handlers to it:The following example sets up two functions for playing and pausing, then uses them as callbacks with the relevant action handlers.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSession"
},
{
	"api_id": "526",
	"name": "MediaSource",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MediaSource interface of the Media Source Extensions API represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.Constructs and returns a new MediaSource object with no associated source buffers.Returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource.Returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within MediaSource.sourceBuffers — the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks.Returns an enum representing the state of the current MediaSource, whether it is not currently attached to a media element (closed), attached and ready to receive SourceBuffer objects (open), or attached but the stream has been ended via MediaSource.endOfStream() (ended.)Gets and sets the duration of the current media being presented.Inherits methods from its parent interface, EventTarget.Creates a new SourceBuffer of the given MIME type and adds it to the MediaSource.sourceBuffers list.Clears a seekable range previously set with a call to setLiveSeekableRange().Signals the end of the stream.Removes the given SourceBuffer from the MediaSource.sourceBuffers list.Sets the range that the user can seek to in the media element.Fired when the MediaSource instance is not attached to a media element anymore.Fired when the MediaSource instance is still attached to a media element, but endOfStream() has been called.Fired when the MediaSource instance has been opened by a media element and is ready for data to be appended to the SourceBuffer objects in sourceBuffers.Returns a boolean value indicating if the given MIME type is supported by the current user agent — this is, if it can successfully create SourceBuffer objects for that MIME type.The following simple example loads a video with XMLHttpRequest, playing it as soon as it can. This example was written by Nick Desaulniers and can be viewed live here (you can also download the source for further investigation.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaSource"
},
{
	"api_id": "527",
	"name": "MediaStream",
	"description": "The MediaStream interface represents a stream of media content. A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.You can obtain a MediaStream object either by using the constructor or by calling functions such as MediaDevices.getUserMedia(), MediaDevices.getDisplayMedia(), or HTMLCanvasElement.captureStream().Some user agents subclass this interface to provide more precise information or functionality, like in CanvasCaptureMediaStreamTrack.Creates and returns a new MediaStream object. You can create an empty stream, a stream which is based upon an existing stream, or a stream that contains a specified list of tracks (specified as an array of MediaStreamTrack objects).This interface inherits properties from its parent, EventTarget.A Boolean value that returns true if the MediaStream is active, or false otherwise.A string containing a 36-character universally unique identifier (UUID) for the object.This interface inherits methods from its parent, EventTarget.Stores a copy of the MediaStreamTrack given as argument. If the track has already been added to the MediaStream object, nothing happens.Returns a clone of the MediaStream object. The clone will, however, have a unique value for id.Returns a list of the MediaStreamTrack objects stored in the MediaStream object that have their kind attribute set to audio. The order is not defined, and may not only vary from one browser to another, but also from one call to another.Returns the track whose ID corresponds to the one given in parameters, trackid. If no parameter is given, or if no track with that ID does exist, it returns null. If several tracks have the same ID, it returns the first one.Returns a list of all MediaStreamTrack objects stored in the MediaStream object, regardless of the value of the kind attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.Returns a list of the MediaStreamTrack objects stored in the MediaStream object that have their kind attribute set to "video". The order is not defined, and may not only vary from one browser to another, but also from one call to another.Removes the MediaStreamTrack given as argument. If the track is not part of the MediaStream object, nothing happens.Fired when a new MediaStreamTrack object is added.Fired when a MediaStreamTrack object has been removed.Fired when the MediaStream is activated.Fired when the MediaStream is inactivated.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStream"
},
{
	"api_id": "528",
	"name": "MediaStreamAudioDestinationNode",
	"description": "The MediaStreamAudioDestinationNode interface represents an audio destination consisting of a WebRTC MediaStream with a single AudioMediaStreamTrack, which can be used in a similar way to a MediaStream obtained from navigator.mediaDevices.getUserMedia().It is an AudioNode that acts as an audio destination, created using the AudioContext.createMediaStreamDestination() method.Creates a new MediaStreamAudioDestinationNode object instance.Inherits properties from its parent, AudioNode.A MediaStream containing a single MediaStreamTrack whose kind is audio and with the same number of channels as the node. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder.Inherits methods from its parent, AudioNode.See AudioContext.createMediaStreamDestination() for example code that creates a MediaStreamAudioDestinationNode and uses it as a source for audio to be recorded.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode"
},
{
	"api_id": "529",
	"name": "MediaStreamAudioSourceNode",
	"description": "The MediaStreamAudioSourceNode interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.This media could be from a microphone (through getUserMedia()) or from a remote peer on a WebRTC call (using the RTCPeerConnection's audio tracks).A MediaStreamAudioSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaStreamSource() method.The MediaStreamAudioSourceNode takes the audio from the first MediaStreamTrack whose kind attribute's value is audio. See Track ordering for more information about the order of tracks.The number of channels output by the node matches the number of tracks found in the selected audio track.Creates a new MediaStreamAudioSourceNode object instance with the specified options.In addition to the following properties, MediaStreamAudioSourceNode inherits the properties of its parent, AudioNode.The MediaStream used when constructing this MediaStreamAudioSourceNode.Inherits methods from its parent, AudioNode.Thrown if the stream specified by the mediaStream parameter does not contain any audio tracks.For the purposes of the MediaStreamTrackAudioSourceNode interface, the order of the audio tracks on the stream is determined by taking the tracks whose kind is audio, then sorting the tracks by their id property's values, in Unicode code point order (essentially, in alphabetical or lexicographical order, for IDs which are simple alphanumeric strings).The first track, then, is the track whose id comes first when the tracks' IDs are all sorted by Unicode code point.However, it's important to note that the rule establishing this ordering was added long after this interface was first introduced into the Web Audio API. As such, you can't easily rely on the order matching between any two browsers or browser versions.The MediaStreamTrackAudioSourceNode interface is similar to MediaStreamAudioSourceNode, but avoids this problem by letting you specify which track you want to use.See AudioContext.createMediaStreamSource() for example code that uses this object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode"
},
{
	"api_id": "530",
	"name": "MediaStreamEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The MediaStreamEvent interface represents events that occurs in relation to a MediaStream. Two events of this type can be thrown: addstream and removestream.A MediaStreamEvent being an Event, this event also implements these properties.Contains the MediaStream containing the stream associated with the event.Returns a new MediaStreamEvent. It takes two parameters, the first being a string representing the type of the event; the second a dictionary containing the MediaStream it refers to.A MediaStreamEvent being an Event, this event also implements these properties. There is no specific MediaStreamEvent method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent"
},
{
	"api_id": "531",
	"name": "MediaStreamTrack",
	"description": "The MediaStreamTrack interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.In addition to the properties listed below, MediaStreamTrack has constrainable properties which can be set using applyConstraints() and accessed using getConstraints() and getSettings(). See Capabilities, constraints, and settings to learn how to correctly work with constrainable properties. Not doing so correctly will result in your code being unreliable.A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers.A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.Note: You can implement standard "mute" functionality by setting enabled to false. The muted property refers to a condition in which there's no media because of a technical issue.Returns a string containing a unique identifier (GUID) for the track; it is generated by the browser.Returns a string set to "audio" if the track is an audio track and to "video", if it is a video track. It doesn't change if the track is disassociated from its source.Returns a string containing a user agent-assigned label that identifies the track source, as in "internal microphone". The string may be left empty and is empty as long as no source has been connected. When the track is disassociated from its source, the label is not changed.Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.Note: You can implement standard "mute" functionality by setting enabled to false, and unmute the media by setting it back to true again.Returns an enumerated value giving the status of the track. This will be one of the following values:Returns a Boolean with a value of true if the track is sourced by a RTCPeerConnection, false otherwise.Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the MediaStreamTrack.Returns a duplicate of the MediaStreamTrack.Returns the a list of constrainable properties available for the MediaStreamTrack.Returns a MediaTrackConstraints object containing the currently set constraints for the track; the returned value matches the constraints last set using applyConstraints().Returns a MediaTrackSettings object containing the current values of each of the MediaStreamTrack's constrainable properties.Stops playing the source associated to the track, both the source and the track are disassociated. The track state is set to ended.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:Sent when playback of the track ends (when the value readyState changes to ended).Sent to the MediaStreamTrack when the value of the muted property is changed to true, indicating that the track is unable to provide data temporarily (such as when the network is experiencing a service malfunction).Sent when the constraints specified for the track cause the track to be incompatible and therefore to not be used.Sent to the track when data becomes available again, ending the muted state.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack"
},
{
	"api_id": "532",
	"name": "MediaStreamTrackAudioSourceNode",
	"description": "The MediaStreamTrackAudioSourceNode interface is a type of AudioNode which represents a source of audio data taken from a specific MediaStreamTrack obtained through the WebRTC or Media Capture and Streams APIs.The audio itself might be input from a microphone or other audio sampling device, or might be received through a RTCPeerConnection, among other possible options.A MediaStreamTrackAudioSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaStreamTrackSource() method. This interface is similar to MediaStreamAudioSourceNode, except it lets you specifically state the track to use, rather than assuming the first audio track on a stream.Creates a new MediaStreamTrackAudioSourceNode object instance with the specified options.The MediaStreamTrackAudioSourceNode interface has no properties of its own; however, it inherits the properties of its parent, AudioNode.Inherits methods from its parent, AudioNode.See AudioContext.createMediaStreamSource() for example code that uses this object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode"
},
{
	"api_id": "533",
	"name": "MediaStreamTrackEvent",
	"description": "The MediaStreamTrackEvent interface represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.The events based on this interface are addtrack and removetrack.Also inherits properties from its parent interface, Event.A MediaStreamTrack object representing the track which was added to the stream.Constructs a new MediaStreamTrackEvent with the specified configuration.Also inherits methods from its parent Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent"
},
{
	"api_id": "534",
	"name": "MediaStreamTrackGenerator",
	"description": "\n  The MediaStreamTrackGenerator interface of the Insertable Streams for MediaStreamTrack API creates a WritableStream that acts as a MediaStreamTrack source.\n  The object consumes a stream of media frames as input, which can be audio or video frames.\nCreates a new MediaStreamTrackGenerator object which accepts either VideoFrame or AudioData objects.This interface also inherits properties from MediaStreamTrack.A WritableStream.This interface doesn't implement any specific methods, but inherits methods from MediaStreamTrack.The following example is from the article Insertable streams for MediaStreamTrack, and demonstrates a barcode scanner application, which process barcodes and highlights them before writing the transformed frames to the writable stream of MediaStreamTrackGenerator.writable.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackGenerator"
},
{
	"api_id": "535",
	"name": "MediaStreamTrackProcessor",
	"description": "The MediaStreamTrackProcessor interface of the Insertable Streams for MediaStreamTrack API consumes a MediaStreamTrack object's source and generates a stream of media frames.Creates a new MediaStreamTrackProcessor object.Returns a ReadableStream.The following example is from the article Insertable streams for MediaStreamTrack, and demonstrates a barcode scanner application, which transforms the stream accessed via MediaStreamTrackProcessor.readable by highlighting the barcode.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackProcessor"
},
{
	"api_id": "536",
	"name": "MediaTrackConstraints",
	"description": "The MediaTrackConstraints dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into applyConstraints() to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling getConstraints().The following types are used to specify a constraint for a property. They allow you to specify one or more exact values from which one must be the parameter's value, or a set of ideal values which should be used if possible. You can also specify a single value (or an array of values) which the user agent will do its best to match once all more stringent constraints have been applied.To learn more about how constraints work, see Capabilities, constraints, and settings.The ConstrainBoolean constraint type is used to specify a constraint for a property whose value is a Boolean value. Its value may either be set to a Boolean (true or false) or an object containing the following properties:A Boolean which must be the value of the property. If the property can't be set to this value, matching will fail.A Boolean specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.The ConstrainDouble constraint type is used to specify a constraint for a property whose value is a double-precision floating-point number. Its value may either be set to a number or an object containing the following properties:A decimal number specifying the largest permissible value of the property it describes. If the value cannot remain equal to or less than this value, matching will fail.A decimal number specifying the smallest permissible value of the property it describes. If the value cannot remain equal to or greater than this value, matching will fail.A decimal number specifying a specific, required, value the property must have to be considered acceptable.A decimal number specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.The ConstrainDOMString constraint type is used to specify a constraint for a property whose value is a string. Its value may either be set to a string, an array of strings, or an object containing the following properties:A string or an array of strings, one of which must be the value of the property. If the property can't be set to one of the listed values, matching will fail.A string or an array of strings, specifying ideal values for the property. If possible, one of the listed values will be used, but if it's not possible, the user agent will use the closest possible match.The ConstrainULong constraint type is used to specify a constraint for a property whose value is an integer. Its value may either be set to a number or an object containing the following properties:An integer specifying the largest permissible value of the property it describes. If the value cannot remain equal to or less than this value, matching will fail.An integer specifying the smallest permissible value of the property it describes. If the value cannot remain equal to or greater than this value, matching will fail.An integer specifying a specific, required, value the property must have to be considered acceptable.An integer specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.Some combination—but not necessarily all—of the following properties will exist on the object. This may be because a given browser doesn't support the property, or because it doesn't apply. For example, because RTP doesn't provide some of these values during negotiation of a WebRTC connection, a track associated with a RTCPeerConnection will not include certain values, such as facingMode or groupId.A ConstrainDOMString object specifying a device ID or an array of device IDs which are acceptable and/or required.A ConstrainDOMString object specifying a group ID or an array of group IDs which are acceptable and/or required.A ConstrainBoolean object which specifies whether automatic gain control is preferred and/or required.A ConstrainULong specifying the channel count or range of channel counts which are acceptable and/or required.A ConstrainBoolean object specifying whether or not echo cancellation is preferred and/or required.A ConstrainDouble specifying the latency or range of latencies which are acceptable and/or required.A ConstrainBoolean which specifies whether noise suppression is preferred and/or required.A ConstrainULong specifying the sample rate or range of sample rates which are acceptable and/or required.A ConstrainULong specifying the sample size or range of sample sizes which are acceptable and/or required.A ConstrainDouble specifying the volume or range of volumes which are acceptable and/or required.A String specifying one of "none", "manual", "single-shot", or "continuous".A String specifying one of "none", "manual", "single-shot", or "continuous".A String specifying one of "none", "manual", "single-shot", or "continuous".The pixel coordinates on the sensor of one or more points of interest. This is either an object in the form { x:value, y:value } or an array of such objects, where value is a double-precision integer.A ConstrainDouble (a double-precision integer) specifying f-stop adjustment by up to ±3.A ConstrainDouble (a double-precision integer) specifying a desired color temperature in degrees kelvin.A ConstrainDouble (a double-precision integer) specifying a desired iso setting.A ConstrainDouble (a double-precision integer) specifying a desired brightness setting.A ConstrainDouble (a double-precision integer) specifying the degree of difference between light and dark.A ConstrainDouble (a double-precision integer) specifying the degree of color intensity.A ConstrainDouble (a double-precision integer) specifying the intensity of edges.A ConstrainDouble (a double-precision integer) specifying distance to a focused object.A ConstrainDouble (a double-precision integer) specifying the desired focal length.A boolean value defining whether the fill light is continuously connected, meaning it stays on as long as the track is active.A ConstrainDouble specifying the video aspect ratio or range of aspect ratios which are acceptable and/or required.A ConstrainDOMString object specifying a facing or an array of facings which are acceptable and/or required.A ConstrainDouble specifying the frame rate or range of frame rates which are acceptable and/or required.A ConstrainULong specifying the video height or range of heights which are acceptable and/or required.A ConstrainULong specifying the video width or range of widths which are acceptable and/or required.A ConstrainDOMString object specifying a mode or an array of modes the UA can use to derive the resolution of a video track. Allowed values are none and crop-and-scale. none means that the user agent uses the resolution provided by the camera, its driver or the OS. crop-and-scale means that the user agent can use cropping and downscaling on the camera output in order to satisfy other constraints that affect the resolution.These constraints apply to the video property of the object passed into getDisplayMedia() to obtain a stream for screen sharing.A ConstrainDOMString which specifies the types of display surface that may be selected by the user. This may be a single one of the following strings, or a list of them to allow multiple source surfaces:The stream contains all of the windows of the application chosen by the user rendered into the one video track.The stream contains the contents of a single browser tab selected by the user.The stream's video track contains the entire contents of one or more of the user's screens.The stream contains a single window selected by the user for sharing.A ConstrainBoolean value which may contain a single Boolean value or a set of them, indicating whether or not to allow the user to choose source surfaces which do not directly correspond to display areas. These may include backing buffers for windows to allow capture of window contents that are hidden by other windows in front of them, or buffers containing larger documents that need to be scrolled through to see the entire contents in their windows.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints"
},
{
	"api_id": "537",
	"name": "MediaTrackSettings",
	"description": "The MediaTrackSettings dictionary is used to return the current values configured for each of a MediaStreamTrack's settings. These values will adhere as closely as possible to any constraints previously described using a MediaTrackConstraints object and set using applyConstraints(), and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.To learn more about how constraints and settings work, see Capabilities, constraints, and settings.Some or all of the following will be included in the object, either because it's not supported by the browser or because it's not available due to context. For example, because RTP doesn't provide some of these values during negotiation of a WebRTC connection, a track associated with a RTCPeerConnection will not include certain values, such as facingMode or groupId.A string indicating the current value of the deviceId property. The device ID is a origin-unique string identifying the source of the track; this is usually a GUID. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling MediaDevices.getUserMedia().A string indicating the current value of the groupId property. The group ID is a browsing session-unique string identifying the source group of the track. Two devices (as identified by the deviceId) are considered part of the same group if they are from the same physical device. For instance, the audio input and output devices for the speaker and microphone built into a phone would share the same group ID, since they're part of the same physical device. The microphone on a headset would have a different ID, though. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling MediaDevices.getUserMedia().A Boolean which indicates the current value of the autoGainControl property, which is true if automatic gain control is enabled and is false otherwise.A long integer value indicating the current value of the channelCount property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth.A Boolean indicating the current value of the echoCancellation property, specifying true if echo cancellation is enabled, otherwise false.A double-precision floating point value indicating the current value of the latency property, specifying the audio latency, in seconds. Latency is the amount of time which elapses between the start of processing the audio and the data being available to the next stop in the audio utilization process. This value is a target value; actual latency may vary to some extent for various reasons.A Boolean which indicates the current value of the noiseSuppression property, which is true if noise suppression is enabled and is false otherwise.A long integer value indicating the current value of the sampleRate property, specifying the sample rate in samples per second of the audio data. Standard CD-quality audio, for example, has a sample rate of 41,000 samples per second.A long integer value indicating the current value of the sampleSize property, specifying the linear size, in bits, of each audio sample. CD-quality audio, for example, is 16-bit, so this value would be 16 in that case.A double-precision floating point value indicating the current value of the volume property, specifying the volume level of the track. This value will be between 0.0 (silent) to 1.0 (maximum supported volume).A double-precision floating point value indicating the current value of the aspectRatio property, specified precisely to 10 decimal places. This is the width of the image in pixels divided by its height in pixels. Common values include 1.3333333333 (for the classic television 4:3 "standard" aspect ratio, also used on tablets such as Apple's iPad), 1.7777777778 (for the 16:9 high-definition widescreen aspect ratio), and 1.6 (for the 16:10 aspect ratio common among widescreen computers and tablets).A string indicating the current value of the facingMode property, specifying the direction the camera is facing. The value will be one of:A camera facing the user (commonly known as a "selfie cam"), used for self-portraiture and video calling.A camera facing away from the user (when the user is looking at the screen). This is typically the highest quality camera on the device, used for general photography.A camera facing toward the environment to the user's left.A camera facing toward the environment to the user's right.A double-precision floating point value indicating the current value of the frameRate property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on.A long integer value indicating the current value of the height property, specifying the height of the track's video data in pixels.A long integer value indicating the current value of the width property, specifying the width of the track's video data in pixels.A string indicating the current value of the resizeMode property, specifying the mode used by the user agent to derive the resolution of the track. The value will be one of:The track has the resolution offered by the camera, its driver or the OS.The track's resolution might be the result of the user agent using cropping or downscaling from a higher camera resolution.Tracks containing video shared from a user's screen (regardless of whether the screen data comes from the entire screen or a portion of a screen, like a window or tab) are generally treated like video tracks, with the exception that they also support the following added settings:A string which indicates whether or not the mouse cursor is being included in the generated stream and under what conditions. Possible values are:The mouse is always visible in the video content of the {domxref("MediaStream"), unless the mouse has moved outside the area of the content.The mouse cursor is always included in the video if it's moving, and for a short time after it stops moving.The mouse cursor is never included in the shared video.A string which specifies the type of source the track contains; one of:The stream contains all of the windows of the application chosen by the user rendered into the one video track.The stream contains the contents of a single browser tab selected by the user.The stream's video track contains the entire contents of one or more of the user's screens.The stream contains a single window selected by the user for sharing.A Boolean value which, if true, indicates that the video contained in the stream's video track contains a background rendering context, rather than a user-visible one. This is false if the video being captured is coming from a foreground (user-visible) source.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings"
},
{
	"api_id": "538",
	"name": "MediaTrackSupportedConstraints",
	"description": "The MediaTrackSupportedConstraints dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the MediaStreamTrack object. An object conforming to MediaTrackSupportedConstraints is returned by MediaDevices.getSupportedConstraints().Because of the way interface definitions in WebIDL work, if a constraint is requested but not supported, no error will occur. Instead, the specified constraints will be applied, with any unrecognized constraints stripped from the request. That can lead to confusing and hard to debug errors, so be sure to use getSupportedConstraints() to retrieve this information before attempting to establish constraints if you need to know the difference between silently ignoring a constraint and a constraint being accepted.An actual constraint set is described using an object based on the MediaTrackConstraints dictionary.To learn more about how constraints work, see Capabilities, constraints, and settings.Some combination—but not necessarily all—of the following properties will exist on the object.A Boolean whose value is true if the autoGainControl constraint is supported in the current environment.A Boolean value whose value is true if the width constraint is supported in the current environment.A Boolean value whose value is true if the height constraint is supported in the current environment.A Boolean value whose value is true if the aspectRatio constraint is supported in the current environment.A Boolean value whose value is true if the frameRate constraint is supported in the current environment.A Boolean value whose value is true if the facingMode constraint is supported in the current environment.A Boolean value whose value is true if the resizeMode constraint is supported in the current environment.A Boolean value whose value is true if the volume constraint is supported in the current environment.A Boolean value whose value is true if the sampleRate constraint is supported in the current environment.A Boolean value whose value is true if the sampleSize constraint is supported in the current environment.A Boolean value whose value is true if the echoCancellation constraint is supported in the current environment.A Boolean value whose value is true if the latency constraint is supported in the current environment.A Boolean whose value is true if the noiseSuppression constraint is supported in the current environment.A Boolean value whose value is true if the channelCount constraint is supported in the current environment.A Boolean value whose value is true if the deviceId constraint is supported in the current environment.A Boolean value whose value is true if the groupId constraint is supported in the current environment.For tracks containing video sources from the user's screen contents, the following additional properties are may be included in addition to those available for video tracks.A Boolean value which is true if the displaySurface constraint is supported in the current environment.A Boolean value which is true if the logicalSurface constraint is supported in the current environment.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints"
},
{
	"api_id": "539",
	"name": "MerchantValidationEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MerchantValidationEvent interface of the Payment Request API enables a merchant to verify themselves as allowed to use a particular payment handler.To learn more about merchant validation, see Merchant validation in Payment processing concepts.Creates a new MerchantValidationEvent object describing a merchantvalidation event that will be sent to the payment handler to request that it validate the merchant.A string providing a unique payment method identifier for the payment handler that's requiring validation. This may be either one of the standard payment method identifier strings or a URL that both identifies and handles requests for the payment handler, such as https://apple.com/apple-pay.A string specifying a URL from which the site or app can fetch payment handler specific validation information. Once this data is retrieved, the data (or a promise resolving to the validation data) should be passed into complete() to validate that the payment request is coming from an authorized merchant.Pass the data retrieved from the URL specified by validationURL into complete() to complete the validation process for the PaymentRequest.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MerchantValidationEvent"
},
{
	"api_id": "540",
	"name": "MessageChannel",
	"description": "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.Note: This feature is available in Web WorkersReturns port1 of the channel.Returns port2 of the channel.Returns a new MessageChannel object with two new MessagePort objects.In the following example, you can see a new channel being created using the MessageChannel.MessageChannel constructor.When the IFrame has loaded, we register an onmessage handler for MessageChannel.port1 and transfer MessageChannel.port2 to the IFrame using the window.postMessage method along with a message.When a message is received back from the IFrame, the onMessage function outputs the message to a paragraph.For a full working example, see our channel messaging basic demo on GitHub (run it live too).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel"
},
{
	"api_id": "541",
	"name": "MessageEvent",
	"description": "The MessageEvent interface represents a message received by a target object.This is used to represent messages in:The action triggered by this event is defined in a function set as the event handler for the relevant message event (e.g. using an onmessage handler as listed above).Note: This feature is available in Web WorkersCreates a new MessageEvent.This interface also inherits properties from its parent, Event.The data sent by the message emitter.A string representing the origin of the message emitter.A string representing a unique ID for the event.A MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.An array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).This interface also inherits methods from its parent, Event.Initializes a message event. Do not use this anymore — use the MessageEvent() constructor instead.In our Basic shared worker example (run shared worker), we have two HTML pages, each of which uses some JavaScript to perform a simple calculation. The different scripts are using the same worker file to perform the calculation — they can both access it, even if their pages are running inside different windows.The following code snippet shows creation of a SharedWorker object using the SharedWorker() constructor. Both scripts contain this:Both scripts then access the worker through a MessagePort object created using the SharedWorker.port property. If the onmessage event is attached using addEventListener, the port is manually started using its start() method:When the port is started, both scripts post messages to the worker and handle messages sent from it using port.postMessage() and port.onmessage, respectively:Inside the worker we use the onconnect handler to connect to the same port discussed above. The ports associated with that worker are accessible in the connect event's ports property — we then use MessagePort start() method to start the port, and the onmessage handler to deal with messages sent from the main threads.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent"
},
{
	"api_id": "542",
	"name": "MessagePort",
	"description": "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.MessagePort is a transferable object.Note: This feature is available in Web WorkersInherits methods from its parent, EventTargetSends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.Starts the sending of messages queued on the port (only needed when using EventTarget.addEventListener; it is implied when using onmessage.)Disconnects the port, so it is no longer active.Fired when a MessagePort object receives a message.Fired when a MessagePort object receives a message that can't be deserialized.In the following example, you can see a new channel being created using the MessageChannel() constructor.When the IFrame has loaded, we register an onmessage handler for MessageChannel.port1 and transfer MessageChannel.port2 to the IFrame using the window.postMessage method along with a message.When a message is received back from the IFrame, the onMessage function outputs the message to a paragraph.For a full working example, see our channel messaging basic demo on GitHub (run it live too).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort"
},
{
	"api_id": "543",
	"name": "Metadata",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The Metadata interface contains information about a file system entry. This metadata includes the file's size and modification date and time.Note: This interface isn't available through the global scope; instead, you obtain a Metadata object describing a FileSystemEntry using the method FileSystemEntry.getMetadata().A Date object indicating the date and time the entry was modified.A 64-bit unsigned integer indicating the size of the entry in bytes.This feature has been removed from all specification and is not in the process of being standardized.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Metadata"
},
{
	"api_id": "544",
	"name": "MIDIAccess",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MIDIAccess interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.Returns an instance of MIDIInputMap which provides access to any available MIDI input ports.Returns an instance of MIDIOutputMap which provides access to any available MIDI output ports.A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.Called whenever a new MIDI port is added or an existing port changes state.The Navigator.requestMIDIAccess() method returns a promise that resolves with a MIDIAccess object. Information about the input and output ports is returned.When a port changes state, information about that port is printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess"
},
{
	"api_id": "545",
	"name": "MIDIConnectionEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MIDIConnectionEvent interface of the Web MIDI API is the event passed to the statechange event of the MIDIAccess interface and the statechange event of the MIDIPort interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.Creates a new MIDIConnectionEvent object.Returns a reference to a MIDIPort instance for a port that has been connected or disconnected."The Navigator.requestMIDIAccess() method returns a promise that resolves with a MIDIAccess object. When a port changes state, a MIDIConnectionEvent is passed to statechange event. Information about the port can then be printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIConnectionEvent"
},
{
	"api_id": "546",
	"name": "MIDIInput",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MIDIInput interface of the Web MIDI API receives messages from a MIDI input port.This interface doesn't implement any specific properties, but inherits properties from MIDIPort.This interface doesn't implement any specific methods, but inherits methods from MIDIPort.Fired when the current port receives a MIDI message.In the following example the name of each MIDIInput is printed to the console. Then, midimessage events are listened for on all input ports. When a message is received the MIDIMessageEvent.data property is printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput"
},
{
	"api_id": "547",
	"name": "MIDIInputMap",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MIDIInputMap read-only interface of the Web MIDI API provides a Map-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain clear(), delete(), or set() functions.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap"
},
{
	"api_id": "548",
	"name": "MIDIMessageEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MIDIMessageEvent interface of the Web MIDI API represents the event passed to the midimessage event of the MIDIInput interface. A midimessage event is fired every time a MIDI message is sent from a device represented by a MIDIInput, for example when a MIDI keyboard key is pressed, a knob is tweaked, or a slider is moved.Creates a new MIDIMessageEvent object instance.This interface also inherits properties from Event.A Uint8Array containing the data bytes of a single MIDI message. See the MIDI specification for more information on its form.This interface doesn't implement any specific methods, but inherits methods from Event.The following example prints all MIDI messages to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIMessageEvent"
},
{
	"api_id": "549",
	"name": "MIDIOutput",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MIDIOutput interface of the Web MIDI API provides methods to add messages to the queue of an output device, and to clear the queue of messages.This interface doesn't implement any specific properties, but inherits properties from MIDIPort.This interface also inherits methods from MIDIPort.Queues a message to be sent to the MIDI port.Clears any pending send data from the queue.The following example sends a middle C immediately on MIDI channel 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput"
},
{
	"api_id": "550",
	"name": "MIDIOutputMap",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The MIDIOutputMap read-only interface of the Web MIDI API provides a Map-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain clear(), delete(), or set() functions.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap"
},
{
	"api_id": "551",
	"name": "MIDIPort",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The MIDIPort interface of the Web MIDI API represents a MIDI input or output port.A MIDIPort instance is created when a new MIDI device is connected. Therefore it has no constructor.Returns a string containing the unique ID of the port.Returns a string containing the manufacturer of the port.Returns a string containing the system name of the port.Returns a string containing the type of the port, one of:The MIDIPort is an input port.The MIDIPort is an output port.Returns a string containing the version of the port.Returns a string containing the state of the port, one of:The device that this MIDIPort represents is disconnected from the system.The device that this MIDIPort represents is currently connected.Returns a string containing the connection state of the port, one of:The device that this MIDIPort represents has been opened and is available.The device that this MIDIPort represents has not been opened, or has been closed.The device that this MIDIPort represents has been opened but has subsequently disconnected .This interface also inherits methods from EventTarget.Makes the MIDI device connected to this MIDIPort explicitly available, and returns a Promise which resolves once access to the port has been successful.Makes the MIDI device connected to this MIDIPort unavailable, changing the state from "open" to "closed". This returns a Promise which resolves once the port has been closed.Called when an existing port changes its state or connection.The following example lists input and output ports, and displays information about them using properties of MIDIPort.The following example takes the list of input ports and adds them to a select list, in order that a user can choose the device they want to use.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIPort"
},
{
	"api_id": "552",
	"name": "MimeType",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The MimeType interface provides contains information about a MIME type associated with a particular plugin. Navigator.mimeTypes returns an array of this object.Returns the MIME type of the associated plugin.Returns a description of the associated plugin or an empty string if there is none.A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list but support more file extensions than can be anticipated. It might therefore return an empty string.Returns an instance of Plugin containing information about the plugin itself.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MimeType"
},
{
	"api_id": "553",
	"name": "MimeTypeArray",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The MimeTypeArray interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by Navigator.mimeTypes.The number of items in the array.Returns the MimeType object with the specified index.Returns the MimeType object with the specified name.The following example tests whether a plugin is available for the application/pdf mime type and if so, which plugin that is.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray"
},
{
	"api_id": "554",
	"name": "MouseEvent",
	"description": "\n  The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse).\n  Common events using this interface include click, dblclick, mouseup, mousedown.\n\n  MouseEvent derives from UIEvent, which in turn derives from Event.\n  Though the MouseEvent.initMouseEvent() method is kept for backward compatibility, creating of a MouseEvent object should be done using the MouseEvent() constructor.\nSeveral more specific events are based on MouseEvent, including WheelEvent, DragEvent, and PointerEvent.Creates a MouseEvent object.This interface also inherits properties of its parents, UIEvent and Event.Returns true if the alt key was down when the mouse event was fired.The button number that was pressed (if applicable) when the mouse event was fired.The buttons being pressed (if any) when the mouse event was fired.The X coordinate of the mouse pointer in local (DOM content) coordinates.The Y coordinate of the mouse pointer in local (DOM content) coordinates.Returns true if the control key was down when the mouse event was fired.Returns the horizontal coordinate of the event relative to the current layer.Returns the vertical coordinate of the event relative to the current layer.Returns true if the meta key was down when the mouse event was fired.The X coordinate of the mouse pointer relative to the position of the last mousemove event.The Y coordinate of the mouse pointer relative to the position of the last mousemove event.The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.The X coordinate of the mouse pointer relative to the whole document.The Y coordinate of the mouse pointer relative to the whole document.The secondary target for the event, if there is one.The X coordinate of the mouse pointer in global (screen) coordinates.The Y coordinate of the mouse pointer in global (screen) coordinates.Returns true if the shift key was down when the mouse event was fired.\n  The amount of pressure applied to a touch or tablet device when generating the event; this value ranges between 0.0 (minimum pressure) and 1.0 (maximum pressure).\n  Instead of using this deprecated (and non-standard) property, you should use PointerEvent and look at its pressure property.\n  \n  The type of device that generated the event (one of the MOZ_SOURCE_* constants).\n  This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event).\n  The amount of pressure applied when clickingAlias for MouseEvent.clientX.Alias for MouseEvent.clientYMinimum force necessary for a normal clickMinimum force necessary for a force clickThis interface also inherits methods of its parents, UIEvent and Event.Returns the current state of the specified modifier key. See KeyboardEvent.getModifierState() for details.Initializes the value of a MouseEvent created. If the event has already being dispatched, this method does nothing.\n  This example demonstrates simulating a click (programmatically generating a click event) on a checkbox using DOM methods.\n  Event state (canceled or not) is then determined with the return value of method EventTarget.dispatchEvent().\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent"
},
{
	"api_id": "555",
	"name": "MouseScrollEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The MouseScrollEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.Warning: Do not use this interface for wheel events.Like MouseWheelEvent, this interface is non-standard and deprecated. It was used in Gecko-based browsers only. Instead use the standard WheelEvent.See nsIDOMMouseScrollEvent::initMouseScrollEvent().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent"
},
{
	"api_id": "556",
	"name": "MSGestureEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The MSGestureEvent is a proprietary interface specific to Internet Explorer and Microsoft Edge which represents events that occur due to touch gestures. Events using this interface include MSGestureStart, MSGestureEnd, MSGestureTap, MSGestureHold, MSGestureChange, and MSInertiaStart.MSGestureEvent derives from UIEvent, which in turn derives from Event. Though the MSGestureEvent.initGestureEvent() method is kept for backward compatibility, the creation of an MSGestureEvent object should be done using the MSGestureEvent() constructor.Creates an MSGestureEvent object.This interface also inherits properties of its parents, UIEvent and Event.The diameter of the gesture area. For example, the distance between fingers.Returns the MSGesture object for this gesture event.Amount of rotation (in radians) since the previous MSGestureEvent of the current gesture. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation.The difference in scale (for zoom gestures) from the previous MSGestureEvent of the current gesture.Distance traversed along the X-axis since the previous MSGestureEvent of the current gestureDistance traversed along the Y-axis since the previous MSGestureEvent of the current gestureAngular velocity. Expressed in radians.The velocity of the expansion of the gesture area.Velocity along the direction of the X-axis.Velocity along the direction of the Y-axis.This interface also inherits methods of its parents, UIEvent and Event.Initializes the value of an MSGestureEvent. If the event has already being dispatched, this method does nothing. This method is deprecated as of Microsoft Edge.Not part of any specification. Microsoft has a description on MSDN.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MSGestureEvent"
},
{
	"api_id": "557",
	"name": "MSGraphicsTrust",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n  The msGraphicsTrust() interface represents an object\n  that provides properties for info on protected video playback.\nThis proprietary method is specific to Internet Explorer and Microsoft Edge.A read-only property which is true when protected media is forced to play in a lower resolution.A string with the driver status when playing protected content.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MSGraphicsTrust"
},
{
	"api_id": "558",
	"name": "MSManipulationEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.MSManipulationEvent provides contextual information when contact is made to the screen and an element is manipulated.This proprietary method is specific to Internet Explorer.MSManipulationStateChanged: Event fires when the state of an element being manipulated has changed.MSManipulationEvent.initMSManipulationEvent(): Used to create a manipulation event that can be called from JavaScript.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MSManipulationEvent"
},
{
	"api_id": "559",
	"name": "MSSiteModeEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.MSSiteModeEvent provides event properties that are specific to pinned site events.This proprietary method is specific to Internet Explorer and Microsoft Edge.Inheritance HierarchyEventMSSiteModeEventAlthough this event inherits from the Event object, it cannot be created by using createEvent.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MSSiteModeEvent"
},
{
	"api_id": "560",
	"name": "msWriteProfilerMark",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The msWriteProfilerMark method writes a profiling event.This proprietary method is specific to Internet Explorer and Microsoft Edge.A string containing the event name. This parameter is not optional but may be null.Type: HRESULT. If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.msWriteProfilerMark enables you to inject DOM based performance markers in addition to existing Javascript API to learn exactly when parts of the page are being rendered, building a waterfall view for every one of our impressions showing latency per object, which can be useful for more accurately debugging real users perf issues.Internet Explorer 10. This method is also available in the Web Worker global scope.For Windows XP, this method sends an event to an event tracing session with TraceEvent; for systems after Windows XP, this method writes an event with EventWrite.The event includes a pointer to a window object, current markup, and the event name passed as bstrProfilerMarkName.The bstrProfilerMarkName property has a 32-character limit when called from script.This method is useful to profile real website performance by using the operating system metrics as a baseline.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/msWriteProfilerMark"
},
{
	"api_id": "561",
	"name": "MutationEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Note: Mutation Events (W3C DOM Level 3 Events) have been deprecated in favor of Mutation Observers (W3C DOM4).The MutationEvent interface provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.The mutation events have been marked as deprecated in the DOM Events specification, as the API's design is flawed (see details in the "DOM Mutation Events Replacement: The Story So Far / Existing Points of Consensus" post to public-webapps).Mutation Observers have replaced mutation events in DOM4. They have been supported in most popular browsers for some years.In addition, mutation events should be avoided because they have performance issues and poor cross-browser support (as described in the following sections).Adding DOM mutation listeners to a document profoundly degrades the performance of further DOM modifications to that document (making them 1.5 - 7 times slower!). Moreover, removing the listeners does not reverse the damage.The performance effect is limited to the documents that have the mutation event listeners.These events are not implemented consistently across different browsers, for example:Dottoro documents browser support for mutation events.The following is a list of all mutation events, as defined in DOM Level 3 Events specification:You can register a listener for mutation events using EventTarget.addEventListener() as follows:The event object is passed to the listener in a MutationEvent (see its definition in the specification) for most events, and MutationNameEvent for DOMAttributeNameChanged and DOMElementNameChanged.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent"
},
{
	"api_id": "562",
	"name": "MutationObserver",
	"description": "The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.Creates and returns a new MutationObserver which will invoke a specified callback function when DOM changes occur.Stops the MutationObserver instance from receiving further notifications until and unless observe() is called again.Configures the MutationObserver to begin receiving notifications through its callback function when DOM changes matching the given options occur.Removes all pending notifications from the MutationObserver's notification queue and returns them in a new Array of MutationRecord objects.https://codepen.io/milofultz/pen/LYjPXPwThe following example was adapted from this blog post.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"
},
{
	"api_id": "563",
	"name": "MutationRecord",
	"description": "A MutationRecord represents an individual DOM mutation. It is the object that is inside the array passed to MutationObserver's callback.\n    The return value depends on the\n    MutationRecord.type.For\n    attributes, it is the value of the changed attribute\n    before the change.For characterData, it is the data\n    of the changed node before the change.For\n    childList, it is null.\n    \n    Note: For this to work as expected, attributeOldValue\n    or characterDataOldValue must be set to\n    true in the corresponding parameter of the MutationObserver\n    observe\n    method\n    ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord"
},
{
	"api_id": "564",
	"name": "NamedNodeMap",
	"description": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.A NamedNodeMap object is live and will thus be auto-updated if changes are made to its contents internally or elsewhere.Note: Although called NamedNodeMap, this interface doesn't deal with Node objects but with Attr objects, which are a specialized class of Node objects.This interface doesn't inherit any property.Returns the amount of objects in the map.This interface doesn't inherit any method.Returns an Attr, corresponding to the given name.Replaces, or adds, the Attr identified in the map by the given name.Removes the Attr identified by the given map.Returns the Attr at the given index, or null if the index is higher or equal to the number of nodes.Returns an Attr identified by a namespace and related local name.Replaces, or adds, the Attr identified in the map by the given namespace and related local name.Removes the Attr identified by the given namespace and related local name.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap"
},
{
	"api_id": "565",
	"name": "NavigationPreloadManager",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The NavigationPreloadManager interface of the Service Worker API provides methods for managing the preloading of resources in parallel with service worker bootup.\n  If supported, an object of this type is returned by ServiceWorkerRegistration.navigationPreload.\n  The result of a preload fetch request is waited on using the promise returned by FetchEvent.preloadResponse.\nEnables navigation preloading, returning a Promise that resolves with undefined.Disables navigation preloading, returning a Promise that resolves with undefined.Sets the value of the Service-Worker-Navigation-Preload HTTP header sent in preloading requests and returns an empty Promise.Returns a Promise that resolves to an object with properties that indicate whether preloading is enabled, and what value will be sent in the Service-Worker-Navigation-Preload HTTP header in preloading requests.\n  Service workers handle fetch() events on behalf of a site, for pages within a given scope.\n  When a user navigates to a page that uses a service worker, the browser boots up the worker (if it isn't already running), then sends it a fetch event and waits for the result.\n  On receiving an event, the worker returns the resource from a cache if it is present, or otherwise fetches the resource from the remote server (storing a copy for returning in future requests).\n\n  A service worker cannot process events from the browser until it has booted.\n  This is unavoidable, but usually doesn't have much impact.\n  Service workers are often already started (they remain active for some time after processing other requests).\n  Even if a service worker does have to boot, much of the time it may be returning values from a cache, which is very fast.\n  However, in those cases where a worker has to boot before it can start fetching a remote resource, then the delay can be significant.\n\n  The NavigationPreloadManager provides a mechanism to allow fetching of the resources to run in parallel with service worker boot, so that by the time the worker is able to handle the fetch request from the browser, the resource may already have been fully or partially downloaded.\n  This makes the case where the worker has to start up "no worse" than when the worker is already started, and in some cases better.\n\n  The preload manager sends the Service-Worker-Navigation-Preload HTTP header with preload requests, allowing responses to be customized for preload requests.\n  This might be used, for example, to reduce the data sent to just part of the original page, or to customize the response based on the user's log-in state.\nThe examples here are from Speed up Service Worker with Navigation Preloads (developer.chrome.com).Below we enable navigation preloading in the service worker's activate event handler, after first using ServiceWorkerRegistration.navigationPreload to determine if the feature is supported (this returns either the NavigationPreloadManager for the service worker or undefined if the feature is not supported).The following code shows a service worker fetch event handler that uses a preloaded response (FetchEvent.preloadResponse).\n  The fetch event handler calls FetchEvent.respondWith() to pass a promise back to the controlled page.\n  This promise will resolve with the requested resource, which may be from the cache, a preloaded fetch request, or a new network request.\n\n  If there is a matching URL request in the Cache object, then the code returns a resolved promise for fetching the response from the cache.\n  If no match is found in the cache, the code returns the resolved preloaded response (FetchEvent.preloadResponse).\n  If there is no matching cache entry or preloaded response, the code starts a new fetch operation from the network and returns the (unresolved) promise for that fetch operation.\n\n  The browser sends the HTTP header Service-Worker-Navigation-Preload with preload requests, with a default directive value of true.\n  This allows servers to differentiate between normal and preload fetch requests, and to send different responses in each case if required.\nNote: If the response from preload and normal fetch operations can be different, then the server must set Vary: Service-Worker-Navigation-Preload to ensure that the different responses are cached.\n  The header value can be changed to any other string value using NavigationPreloadManager.setHeaderValue() in order to provide additional context for the prefetch operation.\n  For example, you might set the value to the ID of your most recently cached resource, so that the server won't return any resources unless they are actually needed.\n  Similarly, you could configure the returned information based on authentication status instead of using cookies.\nThe code below shows how to set the value of the header directive to some variable newValue.Speed up Service Worker with Navigation Preloads > Custom responses for preloads provides a more complete example of a site where the response for an article web page is constructed from a cached header and footer, so that only the article content is returned for a prefetch.\n  You can use NavigationPreloadManager.getState() to check whether navigation preloading is enabled and to determine what directive value is sent with the\n  Service-Worker-Navigation-Preload HTTP header for preload requests.\nThe code below shows how to get the promise that resolves to a state object and log the result.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NavigationPreloadManager"
},
{
	"api_id": "566",
	"name": "Navigator",
	"description": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.A Navigator object can be retrieved using the read-only window.navigator property.Doesn't inherit any properties.Provides a NetworkInformation object containing information about the network connection of a device.Returns false if setting a cookie will be ignored and true otherwise.Returns the CredentialsContainer interface which exposes methods to request credentials and notify the user agent when interesting events occur such as successful sign in or sign out.Returns the amount of device memory in gigabytes. This value is an approximation given by rounding to the nearest power of 2 and dividing that number by 1024.Returns a Geolocation object allowing accessing the location of the device.\n  Returns an HID object providing methods\n  for connecting to HID devices, listing attached HID devices, and event\n  handlers for connected HID devices.\n  Returns the number of logical processor cores available.Returns a Keyboard object which provides access to functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.Returns a string representing the preferred language of the user, usually the language of the browser UI. The null value is returned when this is unknown.Returns an array of strings representing the languages known to the user, by order of preference.Returns a LockManager object that provides methods for requesting a new Lock object and querying for an existing Lock object.Returns the maximum number of simultaneous touch contact points are supported by the current device.Returns a MediaCapabilities object that can expose information about the decoding and encoding capabilities for a given format and output capabilities.Returns a reference to a MediaDevices object which can then be used to get information about available media devices (MediaDevices.enumerateDevices()), find out what constrainable properties are supported for media on the user's computer and user agent (MediaDevices.getSupportedConstraints()), and to request access to media using MediaDevices.getUserMedia().Returns MediaSession object which can be used to provide metadata that can be used by the browser to present information about the currently-playing media to the user, such as in a global media controls UI.Returns a boolean value indicating whether the browser is working online.Returns true if the browser can display PDF files inline when navigating to them, and false otherwise.Returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API.Returns a reference to the Presentation API.Returns a Serial object, which represents the entry point into the Web Serial API to enable the control of serial ports.Returns a ServiceWorkerContainer object, which provides access to registration, removal, upgrade, and communication with the ServiceWorker objects for the associated document.Returns the singleton StorageManager object used for managing persistence permissions and estimating available storage on a site-by-site/app-by-app basis.Returns the user agent string for the current browser.Returns a NavigatorUAData object, which gives access to information about the browser and operating system of the user.Indicates whether the user agent is controlled by automation.Returns the WindowControlsOverlay interface which exposes information about the geometry of the title bar in desktop Progressive Web Apps, and an event to know whenever it changes.Returns XRSystem object, which represents the entry point into the WebXR API.Returns the build identifier of the browser. In modern browsers this property now returns a fixed timestamp as a privacy measure, e.g. 20181001000000 in Firefox 64 onwards.Returns a ContactsManager interface which allows users to select entries from their contact list and share limited details of the selected entries with a website or application.Returns an empty string. In Netscape 4.7x, returns "US & CA domestic policy" or "Export policy".Returns a boolean indicating whether the browser is running in standalone mode. Available on Apple's iOS Safari only.Returns a WakeLock interface you can use to request screen wake locks and prevent screen from dimming, turning off, or showing a screen saver.Always returns 'Mozilla', in any browser.Always returns 'Netscape', in any browser.Returns the version of the browser as a string. Do not rely on this property to return the correct value.Returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true).Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.Returns an MimeTypeArray listing the MIME types supported by the browser.Returns a string that represents the current operating system.Returns a string representing the platform of the browser. Do not rely on this function to return a significant value.Returns a PluginArray listing the plugins installed in the browser.Always returns 'Gecko', in any browser.Returns either the string '20030107', or '"20100101'.Returns either the empty string, 'Apple Computer Inc.', or 'Google Inc.'.Always returns the empty string.Doesn't inherit any method.Returns true if a call to Navigator.share() would succeed.Clears a badge on the current app's icon and returns a Promise that resolves with undefined.Returns a promise that resolves with a BatteryManager object that returns information about the battery charging status.Allows web sites to register themselves as a possible handler for a given protocol.Returns a Promise for a MediaKeySystemAccess object.Returns a Promise representing a request for access to MIDI devices on the user's system.Used to asynchronously transfer a small amount of data using HTTP from the User Agent to a web server.Sets a badge on the icon associated with this app and returns a Promise that resolves with undefined.Invokes the native sharing mechanism of the current platform.Causes vibration on devices with support for it. Does nothing if vibration support isn't available.Returns a promise that resolves to an array of VRDisplay objects representing any available VR devices connected to the computer.After having prompted the user for permission, returns the audio or video stream associated to a camera or microphone on the local computer.Returns false. JavaScript taint/untaint functions removed in JavaScript 1.2.Always returns false.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator"
},
{
	"api_id": "567",
	"name": "NavigatorUAData",
	"description": "The NavigatorUAData interface of the User-Agent Client Hints API returns information about the browser and operating system of a user.An instance of this object is returned by calling Navigator.userAgentData. Therefore, this interface has no constructor.Note: The terms high entropy and low entropy refer to the amount of information these values reveal about the browser. The values returned as properties are deemed low entropy, and unlikely to identify a user. The values returned by NavigatorUAData.getHighEntropyValues() could potentially reveal more information. These values are therefore retrieved via a Promise, allowing time for the browser to request user permission, or make other checks.Returns an array of brand information containing the browser name and version.Returns true if the user-agent is running on a mobile device.Returns the platform brand the user-agent is running on.Returns a Promise that resolves with a dictionary object containing the high entropy values the user-agent returns.A serializer that returns a JSON representation of the low entropy properties of the NavigatorUAData object.The following example prints the value of NavigatorUAData.brands to the console.In the following value a number of hints are requested using the NavigatorUAData.getHighEntropyValues() method. When the promise resolves, this information is printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData"
},
{
	"api_id": "568",
	"name": "NDEFMessage",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The NDEFMessage interface of the Web NFC API represents the content of an NDEF message that has been read from or could be written to an NFC tag. An instance is acquired by calling the NDEFMessage() constructor or from the NDEFReadingEvent.message property, which is passed to the reading event.Creates a new NDEFMessage object, initialized with the given NDEF records.Returns the list of NDEF records contained in the message.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFMessage"
},
{
	"api_id": "569",
	"name": "NDEFReader",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The NDEFReader interface of the Web NFC API is used to read from and write data to compatible NFC devices, e.g. NFC tags supporting NDEF, when these devices are within the reader's magnetic induction field.Returns a new NDEFReader object.The NDEFReader interface inherits the methods of EventTarget, its parent interface.Activates a reading device and returns a Promise that either resolves when an NFC tag is read or rejects if a hardware or permission error is encountered. This method triggers a permission prompt if the "nfc" permission has not been previously granted.Attempts to write an NDEF message to a tag and returns a Promise that either resolves when a message has been written to the tag or rejects if a hardware or permission error is encountered. This method triggers a permission prompt if the "nfc" permission has not been previously granted.Inherits properties from its parent, EventTarget.Fires when a new reading is available from compatible NFC devices.Fires when a tag is in proximity of a reading device, but cannot be read.The example below shows how to coordinate between a common reading handler and one used specifically for a single write. In order to write, a tag needs to be found and read. This gives you the ability to check whether it is actually a tag that you want to write to. That's why it's recommended that you call write() from a reading event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReader"
},
{
	"api_id": "570",
	"name": "NDEFReadingEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The NDEFReadingEvent interface of the Web NFC API represents events dispatched on new NFC readings obtained by NDEFReader.Creates a new NDEFReadingEvent.Inherits properties from its parent, Event.Returns an NDEFMessage object containing the received message.Returns the serial number of the device, which is used for anti-collision and identification, or an empty string if no serial number is available.Inherits methods from its parent, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFReadingEvent"
},
{
	"api_id": "571",
	"name": "NDEFRecord",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The NDEFRecord interface of the Web NFC API provides data that can be read from, or written to, compatible NFC devices, e.g. NFC tags supporting NDEF.Returns a new NDEFRecord.Returns the record type of the record. Records must have either a standardized well-known type name such as "empty", "text", "url", "smart-poster", "absolute-url", "mime", or "unknown" or else an external type name, which consists of a domain name and custom type name separated by a colon (": ").Returns the MIME type of the record. This value will be null if recordType is not equal to "mime".Returns the record identifier, which is an absolute or relative URL used to identify the record.Note: The uniqueness of the identifier is enforced only by the generator of the record.Returns a DataView containing the raw bytes of the record's payload.Returns the encoding of a textual payload, or null otherwise.Returns the language of a textual payload, or null if one was not supplied.Converts NDEFRecord.data to a sequence of records. This allows parsing the payloads of record types which may contain nested records, such as smart poster and external type records.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NDEFRecord"
},
{
	"api_id": "572",
	"name": "NetworkInformation",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.\n  The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface.\nNote: This feature is available in Web WorkersThis interface also inherits properties of its parent, EventTarget.Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'. This value is determined using a combination of recently observed round-trip time and downlink values.Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.Returns true if the user has set a reduced data usage option on the user agent.Returns the type of connection a device is using to communicate with the network. It will be one of the following values:This interface also inherits methods of its parent, EventTarget.The event that's fired when connection information changes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation"
},
{
	"api_id": "573",
	"name": "Node",
	"description": "\n  The DOM Node interface is an abstract base\n  class upon which many other DOM API objects are based, thus letting those object types\n  to be used similarly and often interchangeably. As an abstract class, there is\n  no such thing as a plain Node object. All objects that implement\n  Node functionality are based on one of its subclasses. Most notable are\n  Document, Element, and DocumentFragment.\n\n  In addition, every kind of DOM node is represented by an interface based on\n  Node. These include Attr, CharacterData\n  (which Text, Comment, CDATASection and\n  ProcessingInstruction are all based on), and DocumentType.\n\n  In some cases, a particular feature of the base Node interface may not\n  apply to one of its child interfaces; in that case, the inheriting node may\n  return null or throw an exception, depending on circumstances. For example,\n  attempting to add children to a node type that cannot have children will throw an\n  exception.\nIn addition to the properties below, Node inherits properties from its\nparent, EventTarget.\n  Returns a string representing the base URL of the document\n  containing the Node.\n  \n  Returns a live NodeList containing all the children of this node\n  (including elements, text and comments). NodeList being live means that\n  if the children of the Node change, the NodeList object is\n  automatically updated.\n  \n  Returns a Node representing the first direct child node of the node,\n  or null if the node has no child.\n  \n  A boolean indicating whether or not the Node is connected (directly or indirectly)\n  to the context object, e.g. the Document object in the case of the\n  normal DOM, or the ShadowRoot in the case of a shadow DOM.\n  \n  Returns a Node representing the last direct child node of the node,\n  or null if the node has no child.\n  \n  Returns a Node representing the next node in the tree, or\n  null if there isn't such node.\n  \n  Returns a string containing the name of the Node. The\n  structure of the name will differ with the node type. E.g. An\n  HTMLElement will contain the name of the corresponding tag, like\n  'audio' for an HTMLAudioElement, a Text\n  node will have the '#text' string, or a Document node will\n  have the '#document' string.\n  \n  Returns an unsigned short representing the type of the node. Possible\n  values are:\n  Returns / Sets the value of the current node.\n  Returns the Document that this node belongs to. If the node is itself\n  a document, returns null.\n  \n  Returns a Node that is the parent of this node. If there is no such\n  node, like if this node is the top of the tree or if doesn't participate in a tree,\n  this property returns null.\n  \n  Returns an Element that is the parent of this node. If the node has\n  no parent, or if that parent is not an Element, this property returns\n  null.\n  \n  Returns a Node representing the previous node in the tree, or\n  null if there isn't such node.\n  Returns / Sets the textual content of an element and all its descendants.In addition to the methods below, Node inherits methods from its\nparent, EventTarget.\n  Adds the specified childNode argument as the last child to\n  the current node.\n  If the argument referenced an existing node on the DOM tree, the node will be detached\n  from its current position and attached at the new position.\n  \n  Clone a Node, and optionally, all of its contents. By default, it\n  clones the content of the node.\n  \n  Compares the position of the current node against another node in any other\n  document.\n  \n  Returns true or false value indicating whether or not a node is a\n  descendant of the calling node.\n  \n  Returns the context object's root which optionally includes the shadow root if it is\n  available.\n  \n  Returns a boolean value indicating whether or not the element has any child\n  nodes.\n  \n  Inserts a Node before the reference node as a child of a specified\n  parent node.\n  \n  Accepts a namespace URI as an argument and returns a boolean value with a\n  value of true if the namespace is the default namespace on the given node\n  or false if not.\n  \n  Returns a boolean value which indicates whether or not two nodes are of the\n  same type and all their defining data points match.\n  \n  Returns a boolean value indicating whether or not the two nodes are\n  the same (that is, they reference the same object).\n  \n  Returns a string containing the prefix for a given namespace URI,\n  if present, and null if not. When multiple prefixes are possible, the\n  result is implementation-dependent.\n  \n  Accepts a prefix and returns the namespace URI associated with it on the given node\n  if found (and null if not). Supplying null for the prefix\n  will return the default namespace.\n  Clean up all the text nodes under this element (merge adjacent, remove empty).\n  Removes a child node from the current element, which must be a child of the current\n  node.\n  \n  Replaces one child Node of the current one with the second one given\n  in parameter.\n  \n  Returns true or false containing the result of a test whether the DOM\n  implementation implements a specific feature and this feature is supported by the\n  specific node.\n  This function remove each first child of an element, until there are none left.Using this function is a single call. Here we empty the body of the document:An alternative could be to set the textContent to the empty string: document.body.textContent = "".\n  The following function recursively calls a callback function for each node contained by\n  a root node (including the root itself):\n\n  The function recursively calls a function for each descendant node of\n  rootNode (including the root itself).\n\n  If callback is omitted, the function returns an\n  Array instead, which contains rootNode and all\n  nodes contained within.\n\n  If callback is provided, and it returns\n  false when called, the current recursion level is aborted, and the function\n  resumes execution at the last parent's level. This can be used to abort loops once a\n  node has been found (such as searching for a text node which contains a certain string).\nThe function has two parameters:The Node object whose descendants will be recursed through.\n  An optional callback function that\n  receives a Node as its only argument. If omitted, eachNode\n  returns an Array of every node contained within\n  rootNode (including the root itself).\n  \n  The following demonstrates a real-world use of the eachNode() function:\n  searching for text on a web-page.\nWe use a wrapper function named grep to do the searching:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Node"
},
{
	"api_id": "574",
	"name": "NodeIterator",
	"description": "\n  The NodeIterator interface\n  represents an iterator over the members of a list of the nodes in a subtree of the\n  DOM. The nodes will be returned in document order.\n\n  A NodeIterator can be created using the\n  Document.createNodeIterator() method, as follows:\nThis interface doesn't inherit any property.\n  Returns a Node representing the root node as specified when the\n  NodeIterator was created.\n  \n  Returns an unsigned long being a bitmask made of constants\n  describing the types of Node that must to be presented.\n  Non-matching nodes are skipped, but their children may be included, if\n  relevant.\n  The possible values are:Returns a NodeFilter used to select the relevant nodes.Returns the Node to which the iterator is anchored.\n  Returns a boolean flag that indicates whether the\n  NodeIterator is anchored before, the flag being true,\n  or after, the flag being false, the anchor node.\n  This interface doesn't inherit any method.\n  This operation is a no-op. It doesn't do anything. Previously it was telling the\n  engine that the NodeIterator was no more used, but this is now\n  useless.\n  \n  Returns the previous Node in the document, or null if\n  there are none.\n  \n  Returns the next Node in the document, or null if\n  there are none.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator"
},
{
	"api_id": "575",
	"name": "NodeList",
	"description": "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().Note: Although NodeList is not an Array, it is possible to iterate over it with forEach(). It can also be converted to a real Array using Array.from().However, some older browsers have not implemented NodeList.forEach() nor Array.from(). This can be circumvented by using Array.prototype.forEach() — see this document's Example.Although they are both considered NodeLists, there are 2 varieties of NodeList: live and static.In some cases, the NodeList is live, which means that changes in the DOM automatically update the collection.For example, Node.childNodes is live:In other cases, the NodeList is static, where any changes in the DOM do not affect the content of the collection. The ubiquitous document.querySelectorAll() method returns a static NodeList.It's good to keep this distinction in mind when you choose how to iterate over the items in the NodeList, and whether you should cache the list's length.The number of nodes in the NodeList.Returns an item in the list by its index, or null if the index is out-of-bounds.An alternative to accessing nodeList[i] (which instead returns undefined when i is out-of-bounds). This is mostly useful for non-JavaScript DOM implementations.Returns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)Executes a provided function once per NodeList element, passing the element as an argument to the function.Returns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)Returns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection.It's possible to loop over the items in a NodeList using a for loop:Don't use for...in to enumerate the items in NodeLists, since they will also enumerate its length and item properties and cause errors if your script assumes it only has to deal with element objects. Also, for..in is not guaranteed to visit the properties in any particular order.for...of loops will loop over NodeList objects correctly:Recent browsers also support iterator methods (forEach()) as well as entries(), values(), and keys().There is also an Internet Explorer-compatible way to use Array.prototype.forEach for iteration:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList"
},
{
	"api_id": "576",
	"name": "Notification",
	"description": "Note: This feature is available in Web WorkersSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.These notifications' appearance and specific functionality vary across platforms but generally they provide a way to asynchronously provide information to the user.Creates a new instance of the Notification object.These properties are available only on the Notification object itself.A string representing the current permission to display notifications. Possible values are:The maximum number of actions supported by the device and the User Agent.These properties are available only on instances of the Notification object.The actions array of the notification as specified in the constructor's options parameter.The URL of the image used to represent the notification when there is not enough space to display the notification itself.The body string of the notification as specified in the constructor's options parameter.Returns a structured clone of the notification's data.The text direction of the notification as specified in the constructor's options parameter.The language code of the notification as specified in the constructor's options parameter.The ID of the notification (if any) as specified in the constructor's options parameter.The URL of the image used as an icon of the notification as specified in the constructor's options parameter.The URL of an image to be displayed as part of the notification, as specified in the constructor's options parameter.Specifies whether the user should be notified after a new notification replaces an old one.A boolean value indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.Specifies whether the notification should be silent — i.e., no sounds or vibrations should be issued, regardless of the device settings.Specifies the time at which a notification is created or applicable (past, present, or future).The title of the notification as specified in the first parameter of the constructor.Specifies a vibration pattern for devices with vibration hardware to emit.These methods are available only on the Notification object itself.Requests permission from the user to display notifications.These properties are available only on an instance of the Notification object or through its prototype. The Notification object also inherits from the EventTarget interface.Programmatically closes a notification instance.Fires when the user clicks the notification.Fires when the user closes the notification.Fires when the notification encounters an error.Fires when the notification is displayed.Assume this basic HTML:It's possible to send a notification as follows — here we present a fairly verbose and complete set of code you could use if you wanted to first check whether notifications are supported, then check if permission has been granted for the current origin to send notifications, then request permission if required, before then sending a notification.We no longer show a live sample on this page, as Chrome and Firefox no longer allow notification permissions to be requested from cross-origin <iframe>s, with other browsers to follow. To see a example in action, check out our To-do list example (also see the app running live.)Note: In the above example we spawn notifications in response to a user gesture (clicking a button). This is not only best practice — you should not be spamming users with notifications they didn't agree to — but going forward browsers will explicitly disallow notifications not triggered in response to a user gesture. Firefox is already doing this from version 72, for example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Notification"
},
{
	"api_id": "577",
	"name": "NotificationEvent",
	"description": "The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.This interface inherits from the ExtendableEvent interface.Creates a new NotificationEvent object.Inherits properties from its ancestor, Event.Returns a Notification object representing the notification that was clicked to fire the event.Returns the string ID of the notification button the user clicked. This value returns an empty string if the user clicked the notification somewhere other than an action button, or the notification does not have a button.Inherits methods from its parent, ExtendableEvent.Extends the lifetime of the event. Tells the browser that work is ongoing.Note: This interface is specified in the Notifications API, but accessed through ServiceWorkerGlobalScope.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent"
},
{
	"api_id": "578",
	"name": "NotifyAudioAvailableEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The non-standard, obsolete, NotifyAudioAvailableEvent interface defines the event sent to audio elements when the audio buffer is full.A Float32Array containing the raw 32-bit floating-point audio data obtained from decoding the audio (e.g., the raw data being sent to the audio hardware vs. encoded audio). The data is a series of audio samples, each sample containing one 32-bit value per audio channel. All audio frames are normalized to contain 1024 samples by default, but could be any length between 512 and 16384 samples if the user has set a different length using the mozFrameBufferLength attribute.A floating-point value indicating the time in seconds at which the first sample in the frameBuffer occurs, relative to the start of the audio track.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/NotifyAudioAvailableEvent"
},
{
	"api_id": "579",
	"name": "OES_element_index_uint",
	"description": "The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default.This extension extends WebGLRenderingContext.drawElements():",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint"
},
{
	"api_id": "580",
	"name": "OES_fbo_render_mipmap",
	"description": "The OES_fbo_render_mipmap extension is part of the WebGL API and makes it possible to attach any level of a texture to a framebuffer object.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.\n  Note: This extension is only available to WebGL 1.\n  In WebGL2, the functionality of this extension is available in the WebGL 2 context by default.\n  See the sample code in the Khronos specification.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_fbo_render_mipmap"
},
{
	"api_id": "581",
	"name": "OES_standard_derivatives",
	"description": "The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. In WebGL 2, the constant is available as gl.FRAGMENT_SHADER_DERIVATIVE_HINT and it requires GLSL #version 300 es.This extension exposes one new constant, which can be used in the hint() and getParameter() methods.A WebGL_API.Types indicating the accuracy of the derivative calculation for the GLSL built-in functions: dFdx, dFdy, and fwidth.The following new functions can be used in GLSL shader code, if this extension is enabled:Enabling the extensions:Shader code that avoids artifacts when wrapping texture coordinates:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives"
},
{
	"api_id": "582",
	"name": "OES_texture_float",
	"description": "The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default.This extension extends WebGLRenderingContext.texImage2D() and WebGLRenderingContext.texSubImage2D():Linear filtering on floating-point textures is not allowed with this extension. If you set the magnification or minification filter in the WebGLRenderingContext.texParameter() method to one of gl.LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, or gl.LINEAR_MIPMAP_LINEAR, and use floating-point textures, the texture will be marked as incomplete.To use linear filtering on floating-point textures, enable the OES_texture_float_linear extension in addition to this extension.This extension implicitly enables the WEBGL_color_buffer_float extension (if supported), which allows rendering to 32-bit floating-point color buffers.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float"
},
{
	"api_id": "583",
	"name": "OES_texture_float_linear",
	"description": "The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.The OES_texture_float extension alone does not allow linear filtering with floating-point textures. This extension enables this ability.With the help of this extension, you can now set the magnification or minification filter in the WebGLRenderingContext.texParameter() method to one of gl.LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, or gl.LINEAR_MIPMAP_LINEAR, and use floating-point textures.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear"
},
{
	"api_id": "584",
	"name": "OES_texture_half_float",
	"description": "The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constant in WebGL2 is gl.HALF_FLOAT.Half floating-point type (16-bit).This extension extends WebGLRenderingContext.texImage2D() and WebGLRenderingContext.texSubImage2D():Linear filtering on half floating-point textures is not allowed with this extension. If you set the magnification or minification filter in the WebGLRenderingContext.texParameter() method to one of gl.LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, or gl.LINEAR_MIPMAP_LINEAR, and use half floating-point textures, the texture will be marked as incomplete.To use linear filtering on half floating-point textures, enable the OES_texture_half_float_linear extension in addition to this extension.This extension implicitly enables the EXT_color_buffer_half_float extension (if supported), which allows rendering to 16-bit floating point formats.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float"
},
{
	"api_id": "585",
	"name": "OES_texture_half_float_linear",
	"description": "The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.The OES_texture_half_float extension alone does not allow linear filtering with half floating-point textures. This extension enables this ability.With the help of this extension, you can now set the magnification or minification filter in the WebGLRenderingContext.texParameter() method to one of gl.LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, or gl.LINEAR_MIPMAP_LINEAR, and use half floating-point textures.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear"
},
{
	"api_id": "586",
	"name": "OES_vertex_array_object",
	"description": "The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default and the constants and methods are available without the "OES" suffix.This extension exposes one new constant, which can be used in the gl.getParameter() method:Returns a WebGLVertexArrayObject object when used in the gl.getParameter() method as the pname parameter.This extension exposes four new methods.Creates a new WebGLVertexArrayObject.Deletes a given WebGLVertexArrayObject.Returns true if a given object is a WebGLVertexArrayObject.Binds a given WebGLVertexArrayObject to the buffer.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object"
},
{
	"api_id": "587",
	"name": "OfflineAudioCompletionEvent",
	"description": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event uses this interface.Note: This interface is marked as deprecated; it is still supported for legacy reasons, but it will soon be superseded when the promise version of OfflineAudioContext.startRendering is supported in browsers, which will no longer need it.Creates a new OfflineAudioCompletionEvent object instance.Also inherits properties from its parent, Event.An AudioBuffer containing the result of processing an OfflineAudioContext.Inherits methods from its parent, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent"
},
{
	"api_id": "588",
	"name": "OfflineAudioContext",
	"description": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.Creates a new OfflineAudioContext instance.Also inherits properties from its parent interface, BaseAudioContext.An integer representing the size of the buffer in sample-frames.Also inherits methods from its parent interface, BaseAudioContext.Schedules a suspension of the time progression in the audio context at the specified time and returns a promise.Starts rendering the audio, taking into account the current connections and the current scheduled changes. This page covers both the event-based version and the promise-based version.Resumes the progression of time in an audio context that has previously been suspended.Note: The resume() method is still available — it is now defined on the BaseAudioContext interface (see AudioContext.resume) and thus can be accessed by both the AudioContext and OfflineAudioContext interfaces.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:Fired when the rendering of an offline audio context is complete.In this simple example, we declare both an AudioContext and an OfflineAudioContext object. We use the AudioContext to load an audio track via XHR (BaseAudioContext.decodeAudioData), then the OfflineAudioContext to render the audio into an AudioBufferSourceNode and play the track through. After the offline audio graph is set up, you need to render it to an AudioBuffer using OfflineAudioContext.startRendering.When the startRendering() promise resolves, rendering has completed and the output AudioBuffer is returned out of the promise.At this point we create another audio context, create an AudioBufferSourceNode inside it, and set its buffer to be equal to the promise AudioBuffer. This is then played as part of a simple standard audio graph.Note: For a working example, see our offline-audio-context-promise GitHub repo (see the source code too.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext"
},
{
	"api_id": "589",
	"name": "OffscreenCanvas",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.OffscreenCanvas is a transferable object.Note: This feature is available in Web WorkersOffscreenCanvas constructor. Creates a new OffscreenCanvas object.The height of the offscreen canvas.The width of the offscreen canvas.Returns a rendering context for the offscreen canvas.Creates a Blob object representing the image contained in the canvas.Creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas.One way to use the OffscreenCanvas API, is to use a rendering context that has been obtained from an OffscreenCanvas object to generate new frames. Once a new frame has finished rendering in this context, the transferToImageBitmap() method can be called to save the most recent rendered image. This method returns an ImageBitmap object, which can be used in a variety of Web APIs and also in a second canvas without creating a transfer copy.To display the ImageBitmap, you can use a ImageBitmapRenderingContext context, which can be created by calling canvas.getContext("bitmaprenderer") on a (visible) canvas element. This context only provides functionality to replace the canvas's contents with the given ImageBitmap. A call to ImageBitmapRenderingContext.transferFromImageBitmap() with the previously rendered and saved ImageBitmap from the OffscreenCanvas, will display the ImageBitmap on the canvas and transfer its ownership to the canvas. A single OffscreenCanvas may transfer frames into an arbitrary number of other ImageBitmapRenderingContext objects.Given these two <canvas> elementsthe following code will provide the rendering using an OffscreenCanvas as described above.Another way to use the OffscreenCanvas API, is to call transferControlToOffscreen() on a <canvas> element, either on a worker or the main thread, which will return an OffscreenCanvas object from an HTMLCanvasElement object from the main thread. Calling getContext() will then obtain a rendering context from that OffscreenCanvas.main.js (main thread code):offscreencanvas.js (worker code):You can also use requestAnimationFrame in workers",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas"
},
{
	"api_id": "590",
	"name": "OrientationSensor",
	"description": "The OrientationSensor interface of the Sensor APIs is the base class for orientation sensors. This interface cannot be used directly. Instead it provides properties and methods accessed by interfaces that inherit from it.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Below is a list of interfaces based on the OrientationSensor interface.Returns a four element Array whose elements contain the components of the unit quaternion representing the device's orientation.Populates the given object with the rotation matrix based on the latest sensor reading. The rotation matrix is shown below.The following example, which is loosely based on Intel's Orientation Phone demo, instantiates an AbsoluteOrientationSensor with a frequency of 60 times a second. On each reading it uses OrientationSensor.quaternion to rotate a visual model of a phone.Using orientation sensors requires requesting permissions for multiple device sensors. Because the Permissions interface uses promises, a good way to request permissions is to use Promise.all.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OrientationSensor"
},
{
	"api_id": "591",
	"name": "origin",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The global origin read-only property returns the origin of the global\n  scope, serialized as a string.\nA string.\n  Executed from inside a worker script, the following snippet will log the worker's\n  global scope's origin to the console each time it receives a message\n\n  If the origin is not a scheme/host/port tuple (say you are trying to run it locally,\n  i.e. via file:// URL), origin will return the string\n  "null".\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/origin"
},
{
	"api_id": "592",
	"name": "OscillatorNode",
	"description": "The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.Creates a new instance of an OscillatorNode object, optionally providing an object specifying default values for the node's properties. As an alternative, you can use the BaseAudioContext.createOscillator() factory method; see Creating an AudioNode.Inherits properties from its parent, AudioScheduledSourceNode, and adds the following properties:An a-rate AudioParam representing the frequency of oscillation in hertz (though the AudioParam returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note).An a-rate AudioParam representing detuning of oscillation in cents (though the AudioParam returned is read-only, the value it represents is not). The default value is 0.A string which specifies the shape of waveform to play; this can be one of a number of standard values, or custom to use a PeriodicWave to describe a custom waveform. Different waves will produce different tones. Standard values are "sine", "square", "sawtooth", "triangle" and "custom". The default is "sine".Sets the event handler for the ended event, which fires when the tone has stopped playing.Inherits methods from its parent, AudioScheduledSourceNode, and adds the following:Sets a PeriodicWave which describes a periodic waveform to be used instead of one of the standard waveforms; calling this sets the type to custom.Specifies the exact time to start playing the tone.Specifies the time to stop playing the tone.The following example shows basic usage of an AudioContext to create an oscillator node and to start playing a tone on it. For an applied example, check out our Violent Theremin demo (see app.js for relevant code).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode"
},
{
	"api_id": "593",
	"name": "OTPCredential",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The OTPCredential interface of the WebOTP API contains the attributes that are returned when a new one-time password is retrieved.This interface also inherits properties from Credential.The one-time password.None.None.The below code triggers the browser's permission flow when an SMS message arrives. If permission is granted then the promise resolves with an OTPCredential object. See this code as part of a simple demo.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OTPCredential"
},
{
	"api_id": "594",
	"name": "OverconstrainedError",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The OverconstrainedError interface of the Media Capture and Streams API indicates that the set of desired capabilities for the current MediaStreamTrack cannot currently be met. When this event is thrown on a MediaStreamTrack, it is muted until either the current constraints can be established or until satisfiable constraints are applied.Creates a new OverconstrainedError object.Returns the constraint that was supplied in the constructor, meaning the constraint that was not satisfied.Returns the text supplied in the constructor.Will always return OverconstrainedError.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OverconstrainedError"
},
{
	"api_id": "595",
	"name": "OVR_multiview2",
	"description": "The OVR_multiview2 extension is part of the WebGL API and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.For more information, see also:WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: Support depends on the system's graphics driver (Windows+ANGLE and Android are supported; Windows+GL, Mac, Linux are not supported).This extension is only available to WebGL 2 contexts as it needs GLSL 3.00 and texture arrays.Currently, there is no way to use multiview to render to a multisampled backbuffer, so you should create contexts with antialias: false. However, the Oculus browser (6+) also supports multisampling using the OCULUS_multiview extension. See also this WebGL issue.This extension exposes 4 constants that can be used in getParameter() or getFramebufferAttachmentParameter().Number of views of the framebuffer object attachment.Base view index of the framebuffer object attachment.The maximum number of views. Most VR headsets have two views, but there are prototypes of headset with ultra-wide FOV using 4 views which is currently the maximum number of views supported by multiview.If baseViewIndex is not the same for all framebuffer attachment points where the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is not NONE, the framebuffer is considered incomplete. Calling checkFramebufferStatus for a framebuffer in this state returns FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR.Simultaneously renders to multiple elements of a 2D texture array.This example is taken from the specification.Shader codeAlso, see this three.js demo for a live multiview example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/OVR_multiview2"
},
{
	"api_id": "596",
	"name": "PageTransitionEvent",
	"description": "The PageTransitionEvent event object is available inside handler functions for the pageshow and pagehide events, fired when a document is being loaded or unloaded.This interface also inherits properties from its parent, Event.Indicates if the document is loading from a cache.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent"
},
{
	"api_id": "597",
	"name": "PaintWorklet",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PaintWorklet interface of the CSS Painting API programmatically generates an image where a CSS property expects a file. Access this interface through CSS.paintWorklet.To avoid leaking visited links, this feature is currently disabled in Chrome-based browsers for <a> elements with an href attribute, and for children of such elements. For details, see the following:Returns the current device's ratio of physical pixels to logical pixels.None.This interface inherits methods from Worklet.Registers a class programmatically generate an image where a CSS property expects a file.The addModule() method, inherited from the Worklet interface loads the module in the given JavaScript file and adds it to the current PaintWorklet.The following three examples go together to show creating, loading, and using a PaintWorklet.The following shows an example worklet module. This should be in a separate js file. Note that registerPaint() is called without a reference to PaintWorklet.The following example demonstrates loading the above worklet from its js file and does so by feature detection.This example shows how to use a PaintWorklet in a stylesheet, including the simplest way to provide a fallback if PaintWorklet isn't supported.You can also use the @supports at-rule.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet"
},
{
	"api_id": "598",
	"name": "PannerNode",
	"description": "The PannerNode interface defines an audio-processing object that represents the location, direction, and behavior of an audio source signal in a simulated physical space. This AudioNode uses right-hand Cartesian coordinates to describe the source's position as a vector and its orientation as a 3D directional cone.A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!\n  \nCreates a new PannerNode object instance.Inherits properties from its parent, AudioNode.Note: The orientation and position value are set and retrieved using different syntaxes, since they're stored as AudioParam values. Retrieval is done by accessing, for example, PannerNode.positionX. While setting the same property is done with PannerNode.positionX.value. This is why these values are not marked read only, which is how they appear in the WebIDL.A double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain property.A double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute. Its default value is 0, meaning that no sound can be heard.An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener. Possible values are "linear", "inverse" and "exponential". The default value is "inverse".A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.Represents the horizontal position of the audio source's vector in a right-hand Cartesian coordinate system. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 1.Represents the vertical position of the audio source's vector in a right-hand Cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0.Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand Cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0.An enumerated value determining which spatialization algorithm to use to position the audio in 3D space.Represents the horizontal position of the audio in a right-hand Cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0.Represents the vertical position of the audio in a right-hand Cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0.Represents the longitudinal (back and forth) position of the audio in a right-hand Cartesian coordinate system. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0.A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on rolloffFactor and distanceModel.A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.Inherits methods from its parent, AudioNode.Defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the BaseAudioContext.listener attribute.)Defines the direction the audio source is playing in.Defines the velocity vector of the audio source — how fast it is moving and in what direction. In a previous version of the specification, the PannerNode had a velocity vector that could pitch up or down AudioBufferSourceNode objects connected downstream. This feature was not clearly specified and had a number of issues, so it was removed from the specification.See BaseAudioContext.createPanner() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode"
},
{
	"api_id": "599",
	"name": "PasswordCredential",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The interface of the Credential Management API provides information about a username/password pair. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch().Note: This interface is restricted to top-level contexts and cannot be used from an <iframe>.Creates a new PasswordCredential object.Inherits properties from its ancestor, Credential.A string containing a URL pointing to an image for an icon. This image is intended for display in a credential chooser. The URL must be accessible without authentication.A human-readable string that provides public name for display in a credential chooser.A string containing the password of the credential.None.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential"
},
{
	"api_id": "600",
	"name": "Path2D",
	"description": "The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.Path2D constructor. Creates a new Path2D object.Adds a path to the current path.Causes the point of the pen to move back to the start of the current sub-path. It tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.Moves the starting point of a new sub-path to the (x, y) coordinates.Connects the last point in the subpath to the (x, y) coordinates with a straight line.Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve.Adds a quadratic Bézier curve to the current path.Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by counterclockwise (defaulting to clockwise).Adds a circular arc to the path with the given control points and radius, connected to the previous point by a straight line.Adds an elliptical arc to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by counterclockwise (defaulting to clockwise).Creates a path for a rectangle at position (x, y) with a size that is determined by width and height.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Path2D"
},
{
	"api_id": "601",
	"name": "PaymentAddress",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The PaymentAddress interface of the Payment Request API is used to store shipping or payment address information.It may be useful to refer to the Universal Postal Union web site's Addressing S42 standard materials, which provide information about international standards for postal addresses.An array of strings providing each line of the address not included among the other properties. The exact size and content varies by country or location and can include, for example, a street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box number.A string specifying the country in which the address is located, using the ISO-3166-1 alpha-2 standard. The string is always given in its canonical upper-case form. Some examples of valid country values: "US", "GB", "CN", or "JP".A string which contains the city or town portion of the address.A string giving the dependent locality or sublocality within a city, for example, a neighborhood, borough, district, or UK dependent locality.A string specifying the name of the organization, firm, company, or institution at the payment address.A string specifying the telephone number of the recipient or contact person.A string specifying a code used by a jurisdiction for mail routing, for example, the ZIP code in the United States or the PIN code in India.A string giving the name of the recipient, purchaser, or contact person at the payment address.A string containing the top level administrative subdivision of the country, for example a state, province, oblast, or prefecture.A string providing a postal sorting code such as is used in France.Note: Properties for which values were not specified contain empty strings.The following properties are obsolete and should no longer be used, but may still be present in some browser versions.A string indicating the language code of the address. This identifies the language in which the address is given, and is intended to aid in localization of the display of the address.A standard serializer that returns a JSON representation of the PaymentAddress object's properties.In the following example, the PaymentRequest() constructor is used to create a new payment request, which takes three objects as parameters — one containing details of the payment methods that can be used for the payment, one containing details of the actual order (such as items bought and shipping options), and an optional object containing further options.The first of these three (supportedInstruments in the example below) contains a data property that has to conform to the structure defined by the payment method.Once the payment flow has been triggered using PaymentRequest.show() and the promise resolves successfully, the PaymentResponse object available from the fulfilled promise (instrumentResponse above) will have a PaymentResponse.details property containing response details. This has to conform to the structure defined by the payment method provider.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress"
},
{
	"api_id": "602",
	"name": "PaymentMethodChangeEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PaymentMethodChangeEvent interface of the Payment Request API describes the paymentmethodchange event which is fired by some payment handlers when the user switches payment instruments (e.g., a user selects a "store" card to make a purchase while using Apple Pay).Creates and returns a new PaymentMethodChangeEvent object, optionally initialized with values taken from a given PaymentMethodChangeEventInit dictionary.In addition to the properties below, this interface includes properties inherited from PaymentRequestUpdateEvent.An object containing payment method-specific data useful when handling a payment method change. If no such information is available, this value is null.A string containing the payment method identifier, a string which uniquely identifies a particular payment method. This identifier is usually a URL used during the payment process, but may be a standardized non-URL string as well, such as basic-card. The default value is the empty string, "".This interface includes methods inherited from PaymentRequestUpdateEvent.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentMethodChangeEvent"
},
{
	"api_id": "603",
	"name": "PaymentRequest",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Payment Request API's PaymentRequest interface is the primary access point into the API, and lets web content and apps accept payments from the end user on behalf of the operator of the site or the publisher of the app.Creates a new PaymentRequest object.An unique identifier for a particular PaymentRequest, which can be set via details.id. When none is set, it defaults to a UUID.If requested via payment options, returns the shipping address chosen by the user for the purposes of calculating shipping. This property is only populated if the constructor is called with the requestShipping flag set to true. Additionally, in some browsers, the parts of the address will be redacted for privacy until the user indicates they are ready to complete the transaction (i.e., they hit "Pay").Returns the identifier of the selected shipping option. This property is only populated if the constructor is called with the requestShipping flag set to true.Returns the type of shipping used to fulfill the transaction. This will be one of shipping, delivery, pickup, or null if a value was not provided in the constructor.Indicates whether the PaymentRequest object can make a payment before calling show().Causes the user agent to begin the user interaction for the payment request.Causes the user agent to end the payment request and to remove any user interface that might be shown.With some payment handlers (e.g., Apple Pay), this event handler is called to handle the merchantvalidation event, which is dispatched when the user agent requires that the merchant validate that the merchant or vendor requesting payment is legitimate.With some payment handlers (e.g., Apple Pay), dispatched whenever the user changes payment instrument, like switching from a credit card to a debit card.Dispatched whenever the user changes their shipping address.Dispatched whenever the user changes a shipping option.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest"
},
{
	"api_id": "604",
	"name": "PaymentRequestEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PaymentRequestEvent interface of the Payment Request API is the object passed to a payment handler when a PaymentRequest is made.Creates a new PaymentRequestEvent object.Returns a PaymentInstrument object reflecting the payment instrument selected by the user or an empty string if the user has not registered or chosen a payment instrument.Returns an array of PaymentMethodData objects containing payment method identifiers for the payment methods that the web site accepts and any associated payment method specific data.Returns an array of objects containing changes to payment details.Returns the ID of the PaymentRequest object.Returns the origin where the PaymentRequest object was initialized.Returns the top-level origin where the PaymentRequest object was initialized.Returns the total amount being requested for payment.Opens the specified URL in a new window, if and only if the given URL is on the same origin as the calling page. It returns a Promise that resolves with a reference to a WindowClient.Prevents the default event handling and allows you to provide a Promise for a PaymentResponse object yourself.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequestEvent"
},
{
	"api_id": "605",
	"name": "PaymentRequestUpdateEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PaymentRequestUpdateEvent interface is used for events sent to a PaymentRequest instance when changes are made to shipping-related information for a pending PaymentRequest. Those events are:Dispatched whenever the user changes their shipping address.Dispatched whenever the user changes a shipping option.Creates a new PaymentRequestUpdateEvent object.Provides only the properties inherited from its parent interface, Event.In addition to methods inherited from the parent interface, Event, PaymentRequestUpdateEvent offers the following methods:If the event handler determines that information included in the payment request needs to be changed, or that new information needs to be added, it calls updateWith() with the information that needs to be replaced or added.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequestUpdateEvent"
},
{
	"api_id": "606",
	"name": "PaymentResponse",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PaymentResponse interface of the Payment Request API is returned after a user selects a payment method and approves a payment request.Returns a JSON-serializable object that provides a payment method specific message used by the merchant to process the transaction and determine successful fund transfer. The contents of the object depend on the payment method being used. Developers need to consult whomever controls the URL for the expected shape of the details object.Returns the payment method identifier for the payment method that the user selected, for example, Visa, Mastercard, Paypal, etc.Returns the email address supplied by the user. This option is only present when the requestPayerEmail option is set to true in the options parameter of the PaymentRequest() constructor.Returns the name supplied by the user. This option is only present when the requestPayerName option is set to true in the options parameter of the PaymentRequest() constructor.Returns the phone number supplied by the user. This option is only present when the requestPayerPhone option is set to true in the options parameter of the PaymentRequest() constructor.Returns the identifier of the PaymentRequest that produced the current response. This is the same value supplied in the PaymentRequest() constructor by details.id.Returns the shipping Address supplied by the user. This option is only present when the requestShipping option is set to true in the options parameter of the PaymentRequest() constructor.Returns the ID attribute of the shipping option selected by the user. This option is only present when the requestShipping option is set to true in the options parameter of the PaymentRequest() constructor.If something is wrong with the payment response's data (and there is a recoverable error), this method allows a merchant to request that the user retry the payment. The method takes an object as argument, which is used to signal to the user exactly what is wrong with the payment response so they can try to correct any issues.Notifies the user agent that the user interaction is over. This causes any remaining user interface to be closed. This method should only be called after the Promise returned by the PaymentRequest.show() method.Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired during a retry when the user makes changes to their personal information while filling out a payment request form. Allows the developer to revalidate any requested user data (e.g., the phone number or the email address) if it changes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse"
},
{
	"api_id": "607",
	"name": "Pbkdf2Params",
	"description": "The Pbkdf2Params dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the PBKDF2 algorithm.A string. This should be set to PBKDF2.A string representing the digest algorithm to use. This may be one of:Warning: SHA-1 is considered vulnerable in most cryptographic applications, but is still considered safe in PBKDF2. However, it's advisable to transition away from it everywhere, so unless you need to use SHA-1, don't. Use a different digest algorithm instead.An ArrayBuffer, a TypedArray, or a DataView. This should be a random or pseudo-random value of at least 16 bytes. Unlike the input key material passed into deriveKey(), salt does not need to be kept secret.A Number representing the number of times the hash function will be executed in deriveKey(). This determines how computationally expensive (that is, slow) the deriveKey() operation will be. In this context, slow is good, since it makes it more expensive for an attacker to run a dictionary attack against the keys. The general guidance here is to use as many iterations as possible, subject to keeping an acceptable level of performance for your application.See the examples for SubtleCrypto.deriveKey().Browsers that support the "PBKDF2" algorithm for the SubtleCrypto.deriveKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params"
},
{
	"api_id": "608",
	"name": "Performance",
	"description": "The Performance interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.An object of this type can be obtained by calling the window.performance read-only attribute.Note: This interface and its members are available in Web Workers via WorkerGlobalScope.performance , except where indicated below. Also, note that performance markers and measures are per context. If you create a mark on the main thread (or other worker), you cannot see it in a worker thread, and vice versa.The Performance interface doesn't inherit any properties.A legacy PerformanceNavigation object that provides useful context about the operations included in the times listed in timing, including whether the page was a load or a refresh, how many redirections occurred, and so forth.Note: Not available in workers.A legacy PerformanceTiming object containing latency-related performance information.Note: Not available in workers.A non-standard extension added in Chrome, this property provides an object with basic memory usage information. You should not use this non-standard API.Returns the high resolution timestamp of the start time of the performance measurement.The Performance interface doesn't inherit any methods.Removes the given mark from the browser's performance entry buffer.Removes the given measure from the browser's performance entry buffer.Removes all performance entries with a entryType of "resource" from the browser's performance data buffer.Returns a list of PerformanceEntry objects based on the given filter.Returns a list of PerformanceEntry objects based on the given name and entry type.Returns a list of PerformanceEntry objects of the given entry type.Creates a timestamp in the browser's performance entry buffer with the given name.Creates a named timestamp in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).Returns a DOMHighResTimeStamp representing the number of milliseconds elapsed since a reference instant.Sets the browser's resource timing buffer size to the specified number of "resource" type performance entry objects.A jsonizer returning a JSON object representing the Performance object.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired when the browser's resource timing buffer is full.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Performance"
},
{
	"api_id": "609",
	"name": "PerformanceElementTiming",
	"description": "The PerformanceElementTiming interface of the Element Timing API reports timing information on a specific element identified by the page author. For example it could report timing information about the main image in an article.An Element representing the element we are returning information about.A string which is the id of the element.A string which is the value of the elementtiming attribute on the element.A DOMRectReadOnly which is the rectangle of the element within the viewport.A DOMHighResTimeStamp with the loadTime of the element.An unsigned 32-bit integer (unsigned long) which is the intrinsic height of the image if this is applied to an image, 0 for text.An unsigned 32-bit integer (unsigned long) which is the intrinsic width of the image if this is applied to an image, 0 for text.A DOMHighResTimeStamp with the renderTime of the element.A string which is the initial URL of the resources request for images, 0 for text.Generates a JSON description of the object.In this example we have two elements which are being observed. We use the PerformanceObserver interface to create a list of performance measurement events. In our case observing the PerformanceEntry.entrytype element in order to use the PerformanceElementTiming interface.Two entries will be output to the console. The first containing details of the image, the second with details of the text node.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming"
},
{
	"api_id": "610",
	"name": "PerformanceEntry",
	"description": "The PerformanceEntry object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).PerformanceEntry instances will always be one of the following subtypes:Note: This feature is available in Web WorkersA value that further specifies the value returned by the PerformanceEntry.entryType property. The value of both depends on the subtype. See property page for valid values.A string representing the type of performance metric such as, for example, "mark". See property page for valid values.A DOMHighResTimeStamp representing the starting time for the performance metric.A DOMHighResTimeStamp representing the time value of the duration of the performance event.Returns a JSON representation of the PerformanceEntry object.The following example checks all PerformanceEntry properties to see if the browser supports them and if so, shows their values.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry"
},
{
	"api_id": "611",
	"name": "PerformanceEventTiming",
	"description": "The PerformanceEventTiming interface of the Event Timing API provides timing information for the event types listed below.Returns the time at which event dispatch started.Returns the time at which the event dispatch ended.Returns the associated event's cancelable attribute.Returns the associated event's last target, if it is not removed.Converts the PerformanceEventTiming object to JSON.The following example shows how to use the API for all events:We can also directly query the first input delay. The first input delay or FID, measures the time from when a user first interacts with a page (i.e. when they click a link or tap on a button) to the time when the browser is actually able to begin processing event handlers in response to that interaction.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEventTiming"
},
{
	"api_id": "612",
	"name": "PerformanceLongTaskTiming",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PerformanceLongTaskTiming interface of the Long Tasks API reports instances of long tasks.Returns a sequence of TaskAttributionTiming instances.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceLongTaskTiming"
},
{
	"api_id": "613",
	"name": "PerformanceMark",
	"description": "PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.Note: This feature is available in Web WorkersThis interface has no properties but it extends the following PerformanceEntry properties by qualifying/constraining the properties as follows:Returns "mark".Returns the name given to the mark when it was created via a call to performance.mark().Returns the DOMHighResTimeStamp when performance.mark() was called.Returns "0". (A mark has no duration.)This interface has no methods.See the example in Using the User Timing API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark"
},
{
	"api_id": "614",
	"name": "PerformanceMeasure",
	"description": "PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.Note: This feature is available in Web WorkersThis interface defines:\n  Contains arbitrary metadata about the measure.\n  This may be passed in as a property of the performance.measure() argument MeasureOptions.\n  In addition, it extends the following PerformanceEntry properties by qualifying/constraining the properties as follows:Returns "measure".Returns the name given to the measure when it was created via a call to performance.measure().Returns a timestamp given to the measure when performance.measure() was called.Returns a DOMHighResTimeStamp that is the duration of the measure (typically, the measure's end mark timestamp minus its start mark timestamp).This interface has no methods.See the example in Using the User Timing API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure"
},
{
	"api_id": "615",
	"name": "PerformanceNavigation",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The legacy PerformanceNavigation interface represents information about how the navigation to the current document was done.\n  Warning: This interface is deprecated in the Navigation Timing Level 2 specification.\n  Please use the PerformanceNavigationTiming interface instead.\n  An object of this type can be obtained by calling the Performance.navigation read-only attribute.The PerformanceNavigation interface doesn't inherit any properties.An unsigned short which indicates how the navigation to this page was done. Possible values are:The page was accessed by following a link, a bookmark, a form submission, or a script, or by typing the URL in the address bar.The page was accessed by clicking the Reload button or via the Location.reload() method.The page was accessed by navigating into the history.Any other way.An unsigned short representing the number of REDIRECTs done before reaching the page.The Performance interface doesn't inherit any methods.A jsonizer returning a JSON object representing the PerformanceNavigation object.\n  This feature is no longer on track to become a standard, as the Navigation Timing specification has marked it as deprecated.\n  Use the PerformanceNavigationTiming interface instead.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation"
},
{
	"api_id": "616",
	"name": "PerformanceNavigationTiming",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PerformanceNavigationTiming interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.This interface extends the following PerformanceEntry properties for navigation performance entry types by qualifying and constraining them as follows:Returns "navigation".Returns the document's address.Returns a DOMHighResTimeStamp with a value of "0".Returns a timestamp that is the difference between the PerformanceNavigationTiming.loadEventEnd and PerformanceEntry.startTime properties.This interface also extends following PerformanceResourceTiming properties for navigation performance entry types by qualifying and constraining them as follows:Returns "navigation".The interface also supports the following properties:A DOMHighResTimeStamp representing a time value equal to the time immediately before the browser sets the current document readiness of the current document to complete.A DOMHighResTimeStamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.A DOMHighResTimeStamp representing a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.A DOMHighResTimeStamp representing the time when the load event of the current document is completed.A DOMHighResTimeStamp representing the time value equal to the time immediately before the load event of the current document is fired.A number representing the number of redirects since the last non-redirect navigation under the current browsing context.If there was no redirect, or if the redirect was from another origin, and that origin does not permit it's timing information to be exposed to the current origin then the value will be 0.A DOMHighResTimeStamp representing the time immediately before the user agent starts requesting the resource from the server, or from relevant application caches or from local resources.A DOMHighResTimeStamp representing the time immediately after the user agent's HTTP parser receives the first byte of the response from relevant application caches, or from local resources or from the server.A string representing the navigation type. Must be: "navigate", "reload", "back_forward" or "prerender".A DOMHighResTimeStamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.Returns a string that is the JSON representation of the PerformanceNavigationTiming object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming"
},
{
	"api_id": "617",
	"name": "PerformanceObserver",
	"description": "The PerformanceObserver interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.Note: This feature is available in Web WorkersCreates and returns a new PerformanceObserver object.Returns an array of the entryType values supported by the user agent.Specifies the set of entry types to observe. The performance observer's callback function will be invoked when a performance entry is recorded for one of the specified entryTypesStops the performance observer callback from receiving performance entries.Returns the current list of performance entries stored in the performance observer, emptying it out.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver"
},
{
	"api_id": "618",
	"name": "PerformanceObserverEntryList",
	"description": "The PerformanceObserverEntryList interface is a list of performance events that were explicitly observed via the observe() method.Note: this interface is exposed to Window and Worker.Returns a list of explicitly observed PerformanceEntry objects based on the given filter.Returns a list of explicitly observed PerformanceEntry objects of the given entry type.Returns a list of explicitly observed PerformanceEntry objects based on the given name and entry type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList"
},
{
	"api_id": "619",
	"name": "PerformancePaintTiming",
	"description": "The PerformancePaintTiming interface of the Paint Timing API provides timing information about "paint" (also called "render") operations during web page construction. "Paint" refers to conversion of the render tree to on-screen pixels.An application can register a PerformanceObserver for "paint" performance entry types and the observer can retrieve the times that paint events occur. Use this information to help identify areas that take too long to provide a good user experience.This interface has no properties but it extends the following PerformanceEntry properties (for "paint" performance entry types) by qualifying and constraining the properties as follows:Returns "paint".Returns either "first-paint" or "first-contentful-paint".Returns the timestamp when the paint occurred.Returns 0.This interface has no methods.The code above produces console output something like the following:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming"
},
{
	"api_id": "620",
	"name": "PerformanceResourceTiming",
	"description": "The PerformanceResourceTiming interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.The interface's properties create a resource loading timeline with high-resolution timestamps for network events such as redirect start and end times, fetch start, DNS lookup start and end times, response start and end times, etc.. Additionally, the interface extends PerformanceEntry with other properties which provide data about the size of the fetched resource as well as the type of resource that initiated the fetch.Note: This feature is available in Web WorkersThis interface extends the following PerformanceEntry properties for resource performance entry types by qualifying and constraining them as follows:Returns "resource".Returns the resources URL.Returns the timestamp for the time a resource fetch started. This value is equivalent to PerformanceResourceTiming.fetchStart.Returns a timestamp that is the difference between the responseEnd and the startTime properties.The interface also supports the following properties which are listed in the order in which they are recorded for the fetching of a single resource. An alphabetical listing is shown in the navigation, at left.A string representing the type of resource that initiated the performance entry, as specified in PerformanceResourceTiming.initiatorType.A string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).Returns a DOMHighResTimeStamp immediately before dispatching the FetchEvent if a Service Worker thread is already running, or immediately before starting the Service Worker thread if it is not already running. If the resource is not intercepted by a Service Worker the property will always return 0.A DOMHighResTimeStamp that represents the start time of the fetch which initiates the redirect.A DOMHighResTimeStamp immediately after receiving the last byte of the response of the last redirect.A DOMHighResTimeStamp immediately before the browser starts to fetch the resource.A DOMHighResTimeStamp immediately before the browser starts the domain name lookup for the resource.A DOMHighResTimeStamp representing the time immediately after the browser finishes the domain name lookup for the resource.A DOMHighResTimeStamp immediately before the browser starts to establish the connection to the server to retrieve the resource.A DOMHighResTimeStamp immediately after the browser finishes establishing the connection to the server to retrieve the resource.A DOMHighResTimeStamp immediately before the browser starts the handshake process to secure the current connection.A DOMHighResTimeStamp immediately before the browser starts requesting the resource from the server.A DOMHighResTimeStamp immediately after the browser receives the first byte of the response from the server.A DOMHighResTimeStamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.A number representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body.A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.A number that is the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings.An array of PerformanceServerTiming entries containing server timing metrics.Returns a string that is the JSON representation of the PerformanceResourceTiming object.See the example in Using the Resource Timing API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming"
},
{
	"api_id": "621",
	"name": "PerformanceServerTiming",
	"description": "Note: This feature is available in Web WorkersSecure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PerformanceServerTiming interface surfaces server metrics that are sent with the response in the Server-Timing HTTP header.This interface is restricted to the same origin, but you can use the Timing-Allow-Origin header to specify the domains that are allowed to access the server metrics. Note that this interface is only available in secure contexts (HTTPS) in some browsers.A string value of the server-specified metric description, or an empty string.A double that contains the server-specified metric duration, or value 0.0.A string value of the server-specified metric name.Returns a string that is the JSON representation of the PerformanceServerTiming object.Given a server that sends the Server-Timing header, for example a Node.js server like this:The PerformanceServerTiming entries are now observable from JavaScript via the PerformanceResourceTiming.serverTiming property:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming"
},
{
	"api_id": "622",
	"name": "PerformanceTiming",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Warning: This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.The PerformanceTiming interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the window.performance.timing property.The PerformanceTiming interface doesn't inherit any properties.These properties each describe the time at which a particular point in the page loading process was reached. Some correspond to DOM events; others describe the time at which internal browser operations of interest took place.Each time is provided as a number representing the moment, in milliseconds since the UNIX epoch.These properties are listed in the order in which they occur during the navigation process.When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as PerformanceTiming.fetchStart.When the unload event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is 0.When the unload event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is 0.When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is 0.When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart.When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.When the secure connection handshake starts. If no such connection is requested, it returns 0.When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.When the browser received the first byte of the response, from the server from a cache, or from a local resource.When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.When the parser started its work, that is when its Document.readyState changes to 'loading' and the corresponding readystatechange event is thrown.When the parser finished its work on the main document, that is when its Document.readyState changes to 'interactive' and the corresponding readystatechange event is thrown.Right before the parser sent the DOMContentLoaded event, that is right after all the scripts that need to be executed right after parsing have been executed.Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.When the parser finished its work on the main document, that is when its Document.readyState changes to 'complete' and the corresponding readystatechange event is thrown.When the load event was sent for the current document. If this event has not yet been sent, it returns 0.When the load event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns 0.The PerformanceTiming interface doesn't inherit any methods.Returns a JSON object representing this PerformanceTiming object.\n  This feature is no longer on track to become a standard, as the Navigation Timing specification has marked it as deprecated.\n  Use the PerformanceNavigationTiming interface instead.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming"
},
{
	"api_id": "623",
	"name": "PeriodicSyncEvent",
	"description": "The PeriodicSyncEvent interface of the Web Periodic Background Synchronization API provides a way to run tasks in the service worker with network connectivity.An instance of this event is passed to the periodicsync handler. This happens periodically, at an interval greater than or equal to that set in the PeriodicSyncManager.register() method. Other implementation-specific factors such as the user's engagement with the site decide the actual interval.Creates a new PeriodicSyncEvent object. This constructor is not typically used. The browser creates these objects itself and provides them to onperiodicsync callback.Returns the developer-defined identifier for this PeriodicSyncEvent. Multiple tags can be used by the web app to run different periodic tasks at different frequencies.Inherits methods from its parent ExtendableEvent.The following example shows how to respond to a periodic sync event in the service worker.fetchAndCacheLatestNews is a developer defined function.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncEvent"
},
{
	"api_id": "624",
	"name": "PeriodicSyncManager",
	"description": "The PeriodicSyncManager interface of the Web Periodic Background Synchronization API provides a way to register tasks to be run in a service worker at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests. Access PeriodicSyncManager through the ServiceWorkerRegistration.periodicSync.None.Registers a periodic sync request with the browser with the specified tag and options. Returns a Promise that resolves when the registration completes.Returns a Promise that resolves with a list of strings representing the tags that are currently registered for periodic syncing.Unregisters the periodic sync request corresponding to the specified tag and returns a Promise that resolves when unregistration completes.The following examples show how to use the interface.The following asynchronous function registers a periodic background sync at a minimum interval of one day from a browsing context:This code checks to see if a Periodic Background Sync task with a given tag is registered.The following code removes a Periodic Background Sync task to stop articles syncing in the background.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncManager"
},
{
	"api_id": "625",
	"name": "PeriodicWave",
	"description": "The PeriodicWave interface defines a periodic waveform that can be used to shape the output of an OscillatorNode.PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by BaseAudioContext.createPeriodicWave.Creates a new PeriodicWave object instance using the default values for all properties. If you wish to establish custom property values at the outset, use the BaseAudioContext.createPeriodicWave factory method instead.None; also, PeriodicWave doesn't inherit any properties.None; also, PeriodicWave doesn't inherit any methods.See BaseAudioContext.createPeriodicWave for simple example code that shows how to create a PeriodicWave object containing a simple sine wave.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave"
},
{
	"api_id": "626",
	"name": "Permissions",
	"description": "The Permissions interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissionsReturns the user permission status for a given API.Requests permission to use a given API. This is not currently supported in any browser.Requests permission to use a given set of APIs. This is not currently supported in any browser.Revokes the permission currently set on a given API.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Permissions"
},
{
	"api_id": "627",
	"name": "PermissionStatus",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PermissionStatus interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.Returns the name of a requested permission, identical to the name passed to Permissions.query.Returns the state of a requested permission; one of 'granted', 'denied', or 'prompt'.Returns the state of a requested permission; one of 'granted', 'denied', or 'prompt'. Later versions of the specification replace this with PermissionStatus.state.An event called whenever PermissionStatus.status changes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus"
},
{
	"api_id": "628",
	"name": "PictureInPictureEvent",
	"description": "The PictureInPictureEvent interface represents picture-in-picture-related events, including enterpictureinpicture, leavepictureinpicture and resizeCreates a PictureInPictureEvent event with the given parameters.This interface also inherits properties from its parent Event.Returns the PictureInPictureWindow the event relates to.This interface also inherits properties from its parent Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureEvent"
},
{
	"api_id": "629",
	"name": "PictureInPictureWindow",
	"description": "The PictureInPictureWindow interface represents an object able to programmatically obtain the width and height and resize event of the floating video window.An object with this interface is obtained using the HTMLVideoElement.requestPictureInPicture() promise return value.The PictureInPictureWindow interface doesn't inherit any properties.Determines the width of the floating video window.Determines the height of the floating video window.The PictureInPictureWindow interface doesn't inherit any methods.The PictureInPictureWindow interface doesn't inherit any events.Sent to a PictureInPictureWindow when the floating video window is resized.Given a <button> and a <video>, clicking the button will make the video enter the picture-in-picture mode; we then attach an event to print the floating video window dimensions to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PictureInPictureWindow"
},
{
	"api_id": "630",
	"name": "Plugin",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The Plugin interface provides information about a browser plugin.Note: Own properties of Plugin objects are no longer enumerable in the latest browser versions.A human readable description of the plugin.The filename of the plugin file.The name of the plugin.The plugin's version number string.Returns the MIME type of a supported content type, given the index number into a list of supported types.Returns the MIME type of a supported item.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Plugin"
},
{
	"api_id": "631",
	"name": "PluginArray",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The PluginArray interface is used to store a list of Plugin objects describing the available plugins; it's returned by the navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem("name") methods.Note: Own properties of PluginArray objects are no longer enumerable in the latest browser versions.The number of plugins in the array.Returns the Plugin at the specified index into the array.Returns the Plugin with the specified name.Refreshes all plugins on the current page, optionally reloading documents.The following example function returns the version of the Shockwave Flash plugin.The following example displays information about the installed plugin(s).In addition to listing each plugin as a pseudo-array by zero-indexed numeric properties, Firefox provides properties that are the plugin name directly on the PluginArray object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PluginArray"
},
{
	"api_id": "632",
	"name": "Point",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Point is an interface which represents a point in 2-dimensional space. It is non-standard, not broadly compatible, and should not be used.Note: Although it is not directly related to this defunct interface, you are probably looking for DOMPoint.A floating-point value specifying the point's position with respect to the X (horizontal) axis.A floating-point value specifying the point's position with respect to the Y (vertical) axis.This class was specified in the defunct 20 March 2009 Working Draft of CSS 2D Transforms Module Level 3. It is not present in any current specification.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebKitPoint"
},
{
	"api_id": "633",
	"name": "PointerEvent",
	"description": "The PointerEvent interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.A pointer is a hardware agnostic representation of input devices (such as a mouse, pen or contact point on a touch-enable surface). The pointer can target a specific coordinate (or set of coordinates) on the contact surface such as a screen.A pointer's hit test is the process a browser uses to determine the target element for a pointer event. Typically, this is determined by considering the pointer's location and also the visual layout of elements in a document on screen media.Creates a synthetic—and untrusted—PointerEvent.This interface inherits properties from MouseEvent and Event.A unique identifier for the pointer causing the event.The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.The plane angle (in degrees, in the range of -90 to 90) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis.The plane angle (in degrees, in the range of -90 to 90) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis.The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.Indicates the device type that caused the event (mouse, pen, touch, etc.)Indicates if the pointer represents the primary pointer of this pointer type.Returns a sequence of all PointerEvent instances that were coalesced into the dispatched pointermove event.Returns a sequence of PointerEvent instances that the browser predicts will follow the dispatched pointermove event's coalesced events.The PointerEvent interface has several event types. To determine which event fired, look at the event's type property.Note: It's important to note that in many cases, both pointer and mouse events get sent (in order to let non-pointer-specific code still interact with the user). If you use pointer events, you should call event.preventDefault() to keep the mouse event from being sent as well.Note: For touchscreen browsers that allow direct manipulation, a pointerdown event triggers implicit pointer capture, which causes the target to capture all subsequent pointer events as if they were occurring over the capturing target. Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set. The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.A global event handler for the pointerover event.A global event handler for the pointerenter event.A global event handler for the pointerdown event.A global event handler for the pointermove event.A global event handler for the pointerup event.A global event handler for the pointercancel event.A global event handler for the pointerout event.A global event handler for the pointerleave event.Examples of each property, event type, and global event handler are included in their respective reference pages.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent"
},
{
	"api_id": "634",
	"name": "PopStateEvent",
	"description": "PopStateEvent is an interface for the popstate event.\n  A popstate event is dispatched to the window every time the active history\n  entry changes between two history entries for the same document. If the history entry\n  being activated was created by a call to history.pushState() or was\n  affected by a call to history.replaceState(), the popstate\n  event's state property contains a copy of the history entry's state object.\nCreates a new PopStateEvent object.This interface also inherits the properties of its parent, Event.Returns a copy of the information that was provided to pushState() or replaceState().This interface has no methods of its own, but inherits the methods of its parent, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent"
},
{
	"api_id": "635",
	"name": "PositionSensorVRDevice",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PositionSensorVRDevice interface of the WebVR API represents VR hardware's position sensor. You can access information such as the current position and orientation of the sensor in relation to the head mounted display through the PositionSensorVRDevice.getState() method.Returns the current state of the position sensor for the current frame (e.g. within the current window.requestAnimationFrame callback) or for the previous frame, contained with a VRPose object. This is the method you'd normally want to use, versus getImmediateState().Returns the current instantaneous position sensor state. This is intended to only be used rarely, for certain special uses, for example sampling the immediate position of a hand orientation sensor — or at least it will be, in the future.Can be used to reset the sensor if desired, returning the position and orientation values to zero.This interface doesn't define any properties of its own, but it does inherit the properties of its parent interface, VRDisplay.Returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. All devices that are part of the same physical piece of hardware will have the same hardwareUnitId.Returns the ID for this specific VRDevice. The ID shouldn't change across browser restarts, allowing configuration data to be saved based on it.A human-readable name to identify the VRDevice.The following example uses the WebVR API to update the view of a simple 2D canvas scene on each frame of a requestAnimationFrame loop.Here we are grabbing a VRPose object using PositionSensorVRDevice.getState() and storing it in posState. We then check to make sure that position and orientation info is present in the current frame using VRPose.hasPosition and VRPose.hasOrientation (these return null if, for example the head mounted display is turned off or not pointing at the position sensor, which would cause an error.)We then output the x, y and z position and orientation values for informational purposes, and use those values to update the xPos, yPos, zPos, xOrient, yOrient, and zOrient variables, which are used to update the scene rendering on each frame.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PositionSensorVRDevice"
},
{
	"api_id": "636",
	"name": "Presentation",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Presentation can be defined as two possible user agents in the context: Controlling user agent and Receiving user agent.In controlling browsing context, the Presentation interface provides a mechanism to override the browser default behavior of launching presentation to external screen. In receiving browsing context, Presentation interface provides the access to the available presentation connections.In a controlling user agent, the defaultRequest attribute MUST return the default presentation request if any, null otherwise. In a receiving browsing context, it MUST return null.In a receiving user agent, the receiver attribute MUST return the PresentationReceiver instance associated with the receiving browsing context and created by the receiving user agent when the receiving browsing context is created.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Presentation"
},
{
	"api_id": "637",
	"name": "PresentationAvailability",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.A PresentationAvailability object is associated with available presentation displays and represents the presentation display availability for a presentation request. If the controlling user agent can monitor the list of available presentation displays in the background (without a pending request to start()), the PresentationAvailability object MUST be implemented in a controlling browsing context.The value attribute MUST return the last value it was set to. The value is updated by the monitor the list of available presentation displays algorithm.The onchange attribute is an event handler whose corresponding event handler event type is change.A boolean value indicating whether the given presentation display is available. The value attribute MUST return the last value it was set to.Indicates that the availability of the presentation display has changed.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationAvailability"
},
{
	"api_id": "638",
	"name": "PresentationConnection",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PresentationConnection interface of the Presentation API provides methods and properties for managing a single presentation. Each presentation connection is represented by a PresentationConnection object. Both the controlling user agent and receiving user agent MUST implement PresentationConnection.Returns either blob or arrayBuffer. When a PresentationConnection object is created, its binaryType IDL attribute MUST be set to the string " arraybuffer".Provides the presentation connection identifier.Returns the presentation connection's current state.Returns the URL used to create or reconnect to the presentation.Fired when there is a call to PresentationConnection.close().Fired when a presentation connection is established.Fired when there is a call to PresentationConnection.send().Fired when there is a call to PresentationConnection.terminate().Closes the current connection and sends a PresentationConnectionCloseEvent to PresentationConnection.onclosed.Sends either binary or text data between a controlling browsing context and a presenting browsing context.Terminates the current connection and fires PresentationConnection.onterminated.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection"
},
{
	"api_id": "639",
	"name": "PresentationConnectionAvailableEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PresentationConnectionAvailableEvent interface of the Presentation API is fired on a PresentationRequest when a connection associated with the object is created.A controlling user agent fires a trusted event named connectionavailable on a PresentationRequest when a connection associated with the object is created. It is fired at the PresentationRequest instance, using the PresentationConnectionAvailableEvent interface, with the connection attribute set to the PresentationConnection object that was created. The event is fired for each connection that is created for the controller, either by the controller calling start() or reconnect(), or by the controlling user agent creating a connection on the controller's behalf via defaultRequest.Creates a new PresentationConnectionAvailableEvent.Returns a references to the PresentationConnection object that fired the event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionAvailableEvent"
},
{
	"api_id": "640",
	"name": "PresentationConnectionCloseEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PresentationConnectionCloseEvent interface of the Presentation API is fired on a PresentationConnection when it is closed.Creates a new PresentationConnectionCloseEvent.A human-readable message that provides more information about why the connection was closed.Indicates why the connection was closed. This property takes one of the following values: error, closed, or wentaway.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionCloseEvent"
},
{
	"api_id": "641",
	"name": "PresentationConnectionList",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.PresentationConnectionList is the collection of incoming presentation connections.Returns the non-terminated set of PresentationConnections in the set of presentation controllers.Fired whenever a new presentation connection becomes available.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionList"
},
{
	"api_id": "642",
	"name": "PresentationReceiver",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PresentationReceiver interface of the Presentation API provides a means for a receiving browsing context to access controlling browsing contexts and communicate with them.Returns a Promise that resolves with a PresentationConnectionList object containing a list of incoming presentation connections.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationReceiver"
},
{
	"api_id": "643",
	"name": "PresentationRequest",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.A PresentationRequest object is used to initiate or reconnect to a presentation made by a controlling browsing context. The PresentationRequest object MUST be implemented in a controlling browsing context provided by a controlling user agent.When a PresentationRequest is constructed, the given urls MUST be used as the list of presentation request URLs which are each a possible presentation URL for the PresentationRequest instance.Creates a PresentationRequest.NoneFires on a successful call to PresentationRequest.start() or PresentationRequest.join(). This method provides a object with a reference to the created or joined object.Returns a Promise that resolves with a PresentationConnection after the user agent prompts the user to select a display and grant permission to use that display.When the reconnect(presentationId) method is called on a PresentationRequest presentationRequest, the user agent MUST run the following steps to reconnect to a presentation.When the getAvailability() method is called, the user agent MUST run the steps as the link.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest"
},
{
	"api_id": "644",
	"name": "ProcessingInstruction",
	"description": "The ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.Warning: ProcessingInstruction nodes are only supported in XML documents, not in HTML documents. In these, a process instruction will be considered as a comment and be represented as a Comment object in the tree.A processing instruction may be different than the XML declaration.Note: User-defined processing instructions cannot begin with "xml", as xml-prefixed processing-instruction target names are reserved by the XML specification for particular, standard uses (see, for example, <?xml-stylesheet ?>.For example:is a processing instruction whose target is xml.This interface also inherits properties from its parent interfaces, CharacterData, Node, and EventTarget.A name identifying the application to which the instruction is targeted.This interface doesn't have any specific method, but inherits methods from its parent interfaces, CharacterData, Node, and EventTarget.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"
},
{
	"api_id": "645",
	"name": "ProgressEvent",
	"description": "The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).Creates a ProgressEvent event with the given parameters.Also inherits properties from its parent Event.A boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not.A 64-bit unsigned integer value indicating the amount of work already performed by the underlying process. The ratio of work done can be calculated by dividing total by the value of this property. When downloading a resource using HTTP, this only counts the body of the HTTP message, and doesn't include headers and other overhead.A 64-bit unsigned integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this is the Content-Length (the size of the body of the message), and doesn't include the headers and other overhead.Also inherits methods from its parent Event.Initializes a ProgressEvent created using the deprecated Document.createEvent('ProgressEvent') method.The following example adds a ProgressEvent to a new XMLHTTPRequest and uses it to display the status of the request.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent"
},
{
	"api_id": "646",
	"name": "PromiseRejectionEvent",
	"description": "The PromiseRejectionEvent interface represents events which are sent to the global script context when JavaScript Promises are rejected. These events are particularly useful for telemetry and debugging purposes.For details on promise rejection events, see Promise rejection events in Using Promises.Creates a PromiseRejectionEvent event, given the type of event (unhandledrejection or rejectionhandled) and other details.Also inherits properties from its parent Event.The JavaScript Promise that was rejected.A value or Object indicating why the promise was rejected, as passed to Promise.reject().This interface has no unique methods; inherits methods from its parent Event.Fired when a JavaScript Promise is rejected, and after the rejection is handled by the promise's rejection handling code.Fired when a JavaScript Promise is rejected but there is no rejection handler to deal with the rejection.This simple example catches unhandled promise rejections and logs them for debugging purposes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent"
},
{
	"api_id": "647",
	"name": "PublicKeyCredential",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PublicKeyCredential interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password. It inherits from Credential, and was created by the Web Authentication API extension to the Credential Management API. Other interfaces that inherit from Credential are PasswordCredential and FederatedCredential.Note: This API is restricted to top-level contexts. Use from within an <iframe> element will not have any effect.Inherited from Credential. Always set to public-key for PublicKeyCredential instances.Inherited from Credential and overridden to be the base64url encoding of PublicKeyCredential.rawId.An ArrayBuffer that holds the globally unique identifier for this PublicKeyCredential. This identifier can be used to look up credentials for future calls to CredentialsContainer.get.An instance of an AuthenticatorResponse object. It is either of type AuthenticatorAttestationResponse if the PublicKeyCredential was the results of a navigator.credentials.create() call, or of type AuthenticatorAssertionResponse if the PublicKeyCredential was the result of a navigator.credentials.get() call.If any extensions were requested, this method will return the results of processing those extensions.A static method returning a Promise which resolves to true if an authenticator bound to the platform is capable of verifying the user.Here, we use navigator.credentials.create() to generate a new credential.Here, we fetch an existing credential from an authenticator, using navigator.credentials.get().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential"
},
{
	"api_id": "648",
	"name": "PublicKeyCredentialRequestOptions",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The PublicKeyCredentialRequestOptions dictionary of the Web Authentication API holds the options passed to navigator.credentials.get() in order to fetch a given PublicKeyCredential.An ArrayBuffer, a TypedArray, or a DataView, emitted by the relying party's server and used as a cryptographic challenge. This value will be signed by the authenticator and the signature will be sent back as part of AuthenticatorAssertionResponse.signature.A numerical hint, in milliseconds, which indicates the time the caller is willing to wait for the retrieval operation to complete. This hint may be overridden by the browser.A string which indicates the relying party's identifier (ex. "login.example.org"). If this option is not provided, the client will use the current origin's domain.An Array of credentials descriptor which restricts the acceptable existing credentials for retrieval.A string qualifying how the user verification should be part of the authentication process.An object with several client extensions' inputs. Those extensions are used to request additional processing (e.g. dealing with legacy FIDO APIs credentials, prompting a specific text on the authenticator, etc.).None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions"
},
{
	"api_id": "649",
	"name": "PushEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PushEvent interface of the Push API represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.Creates a new PushEvent object.Inherits properties from its parent, ExtendableEvent. Additional properties:Returns a reference to a PushMessageData object containing data sent to the PushSubscription.Inherits methods from its parent, ExtendableEvent.The following example takes data from a PushEvent and displays it on all of the service worker's clients.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PushEvent"
},
{
	"api_id": "650",
	"name": "PushManager",
	"description": "The PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.This interface is accessed via the ServiceWorkerRegistration.pushManager property.Returns an array of supported content codings that can be used to encrypt the payload of a push message.Retrieves an existing push subscription. It returns a Promise that resolves to a PushSubscription object containing details of an existing subscription. If no existing subscription exists, this resolves to a null value.Returns a Promise that resolves to the permission state of the current PushManager, which will be one of 'granted', 'denied', or 'prompt'.Subscribes to a push service. It returns a Promise that resolves to a PushSubscription object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.Returns a Promise that resolves to the PushPermissionStatus of the requesting webapp, which will be one of granted, denied, or default. Replaced by PushManager.permissionState().Subscribes to a push subscription. Replaced by PushManager.subscribe().Retrieves existing push subscriptions. Replaced by PushManager.getSubscription().Unregisters and deletes a specified subscription endpoint. In the updated API, a subscription is unregistered by calling the PushSubscription.unsubscribe() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PushManager"
},
{
	"api_id": "651",
	"name": "PushMessageData",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PushMessageData interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.Unlike the similar methods in the Fetch API, which only allow the method to be invoked once, these methods can be called multiple times.Messages received through the Push API are sent encrypted by push services and then automatically decrypted by browsers before they are made accessible through the methods of the PushMessageData interface.None.Extracts the data as an ArrayBuffer object.Extracts the data as a Blob object.Extracts the data as a JSON object.Extracts the data as a plain text string.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData"
},
{
	"api_id": "652",
	"name": "PushSubscription",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The PushSubscription interface of the Push API provides a subscription's URL endpoint and allows unsubscribing from a push service.An instance of this interface can be serialized.A string containing the endpoint associated with the push subscription.A DOMHighResTimeStamp of the subscription expiration time associated with the push subscription, if there is one, or null otherwise.An object containing the options used to create the subscription.A string containing the subscription ID associated with the push subscription.Returns an ArrayBuffer which contains the client's public key, which can then be sent to a server and used in encrypting push message data.Standard serializer — returns a JSON representation of the subscription properties.Starts the asynchronous process of unsubscribing from the push service, returning a Promise that resolves to a boolean value when the current subscription is successfully unregistered.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription"
},
{
	"api_id": "653",
	"name": "PushSubscriptionOptions",
	"description": "The PushSubscriptionOptions interface of the Push API represents the options associated with a push subscription.The read-only PushSubscriptionOptions object is returned by calling PushSubscription.options on a PushSubscription. This interface has no constructor of its own.\n  A boolean value indicating that the returned push\n  subscription will only be used for messages whose effect is made visible to the user.\n  \n  A public key your push server will use to send\n  messages to client apps via a push server.\n  Calling PushSubscription.options on a PushSubscription returns a PushSubscriptionOptions object. In the example below this is printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/PushSubscriptionOptions"
},
{
	"api_id": "654",
	"name": "queueMicrotask()",
	"description": "\n  The queueMicrotask() method,\n  which is exposed on the Window or Worker interface,\n  queues a microtask to be executed at a safe time prior to control returning to the\n  browser's event loop.\n\n  The microtask is a short function which will run after\n  the current task has completed its work and when there is no other code waiting to be\n  run before control of the execution context is returned to the browser's event loop.\n\n  This lets your code run without interfering with any other, potentially higher\n  priority, code that is pending, but before the browser regains control over the\n  execution context, potentially depending on work you need to complete. You can learn\n  more about how to use microtasks and why you might choose to do so in our microtask guide.\n\n  The importance of microtasks comes in its ability to perform tasks asynchronously but\n  in a specific order. See Using microtasks in JavaScript with queueMicrotask() for more details.\n\n  Microtasks are especially useful for libraries and frameworks that need to perform\n  final cleanup or other just-before-rendering tasks.\n\n  A function to be executed when the browser engine determines it is\n  safe to call your code. Enqueued microtasks are executed after all pending tasks have\n  completed but before yielding control to the browser's event loop.\n  None (undefined).Taken from the queueMicrotask spec:\n  The code below is basically a monkey-patch for queueMicrotask() for modern\n  engines. It creates a microtask by using a promise that resolves immediately.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask"
},
{
	"api_id": "655",
	"name": "RadioNodeList",
	"description": "The RadioNodeList interface represents a collection of radio elements in a <form> or a <fieldset> element.The RadioNodeList interface inherits the properties of NodeList.If the underlying element collection contains radio buttons, the value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.The RadioNodeList interface inherits the methods of NodeList.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList"
},
{
	"api_id": "656",
	"name": "Range",
	"description": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.A range can be created by using the Document.createRange() method. Range objects can also be retrieved by using the getRangeAt() method of the Selection object or the caretRangeFromPoint() method of the Document object.There also is the Range() constructor available.There are no inherited properties.Returns a boolean value indicating whether the range's start and end points are at the same position.Returns the deepest Node that contains the startContainer and endContainer nodes.Returns the Node within which the Range ends.Returns a number representing where in the endContainer the Range ends.Returns the Node within which the Range starts.Returns a number representing where in the startContainer the Range starts.Returns a Range object with the global Document as its start and end.There are no inherited methods.Collapses the Range to one of its boundary points.Compares the boundary points of the Range with another Range.Returns a constant representing whether the Node is before, after, inside, or surrounding the range.Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the Range.Returns a DocumentFragment copying the nodes of a Range.Returns a Range object with boundary points identical to the cloned Range.Returns a DocumentFragment created from a given string of code.Removes the contents of a Range from the Document.Releases the Range from use to improve performance.Moves contents of a Range from the document tree into a DocumentFragment.Returns a DOMRect object which bounds the entire contents of the Range; this would be the union of all the rectangles returned by range.getClientRects().Returns a list of DOMRect objects that aggregates the results of Element.getClientRects() for all the elements in the Range.Returns a boolean indicating whether the given point is in the Range.Insert a Node at the start of a Range.Returns a boolean indicating whether the given node intersects the Range.Sets the Range to contain the Node and its contents.Sets the Range to contain the contents of a Node.Sets the end position of a Range.Sets the start position of a Range.Sets the end position of a Range relative to another Node.Sets the end position of a Range relative to another Node.Sets the start position of a Range relative to another Node.Sets the start position of a Range relative to another Node.Moves content of a Range into a new Node.Returns the text of the Range.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Range"
},
{
	"api_id": "657",
	"name": "ReadableByteStreamController",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ReadableByteStreamController interface of the Streams API represents a controller allowing control of a ReadableStream's state and internal queue. Byte stream controllers are for byte streams.None. ReadableByteStreamController instances are created automatically during ReadableStream construction.Returns the current BYOB pull request.Returns the desired size required to fill the stream's internal queue.Closes the associated stream.Enqueues a given chunk in the associated stream.Causes any future interactions with the associated stream to error.TBD.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController"
},
{
	"api_id": "658",
	"name": "ReadableStream",
	"description": "The ReadableStream interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.ReadableStream is a transferable object.Creates and returns a readable stream object from the given handlers.The locked getter returns whether or not the readable stream is locked to a reader.Returns a Promise that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it.Creates a reader and locks the stream to it. While the stream is locked, no other reader can be acquired until this one is released.Provides a chainable way of piping the current stream through a transform stream or any other writable/readable pair.Pipes the current ReadableStream to a given WritableStream and returns a Promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.The tee method tees this readable stream, returning a two-element array containing the two resulting branches as new ReadableStream instances. Each of those streams receives the same incoming data.In the following example, an artificial Response is created to stream HTML fragments fetched from another resource to the browser.It demonstrates the usage of a ReadableStream in combination with a Uint8Array.Converting an (async) iterator to a readable stream:This works with both async and non-async iterators.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream"
},
{
	"api_id": "659",
	"name": "ReadableStreamBYOBReader",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ReadableStreamBYOBReader interface of the Streams API represents a BYOB ("bring your own buffer") reader that can be used to read stream data supplied by the developer (e.g. a custom ReadableStream() constructor).Creates and returns a ReadableStreamBYOBReader object instance.Returns a Promise that fulfills when the stream closes, or rejects if the stream throws an error or the reader's lock is released. This property enables you to write code that responds to an end to the streaming process.Returns a Promise that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it.Returns a Promise that resolves with an object indicating the state of the stream: either the next chunk in the stream or an indication that the stream is closed.Releases the reader's lock on the stream.TBD.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader"
},
{
	"api_id": "660",
	"name": "ReadableStreamBYOBRequest",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ReadableStreamBYOBRequest interface of the Streams API represents a pull request into a ReadableByteStreamController view.A view, as mentioned below, refers to a typed array representing the destination region to which the associated ReadableByteStreamController controller can write generated data.None. ReadableStreamBYOBRequest instance is created automatically by ReadableByteStreamController as needed.Returns the current view.xxxxxxTBD.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBRequest"
},
{
	"api_id": "661",
	"name": "ReadableStreamDefaultController",
	"description": "The ReadableStreamDefaultController interface of the Streams API represents a controller allowing control of a ReadableStream's state and internal queue. Default controllers are for streams that are not byte streams.None. ReadableStreamDefaultController instances are created automatically during ReadableStream construction.Returns the desired size required to fill the stream's internal queue.Closes the associated stream.Enqueues a given chunk in the associated stream.Causes any future interactions with the associated stream to error.In the following simple example, a custom ReadableStream is created using a constructor (see our Simple random stream example for the full code). The start() function generates a random string of text every second and enqueues it into the stream. A cancel() function is also provided to stop the generation if ReadableStream.cancel() is called for any reason.Note that a ReadableStreamDefaultController object is provided as the parameter of the start() and pull() functions.When a button is pressed, the generation is stopped, the stream is closed using ReadableStreamDefaultController.close(), and another function is run, which reads the data back out of the stream.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController"
},
{
	"api_id": "662",
	"name": "ReadableStreamDefaultReader",
	"description": "The ReadableStreamDefaultReader interface of the Streams API represents a default reader that can be used to read stream data supplied from a network (e.g. a fetch request).Creates and returns a ReadableStreamDefaultReader object instance.Returns a Promise that fulfills when the stream closes, or rejects if the stream throws an error or the reader's lock is released. This property enables you to write code that responds to an end to the streaming process.Returns a Promise that resolves when the stream is canceled. Calling this method signals a loss of interest in the stream by a consumer. The supplied reason argument will be given to the underlying source, which may or may not use it.Returns a promise providing access to the next chunk in the stream's internal queue.Releases the reader's lock on the stream.In the following example, an artificial Response is created to stream HTML fragments fetched from another resource to the browser.It demonstrates the usage of a ReadableStream in combination with a Uint8Array.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader"
},
{
	"api_id": "663",
	"name": "RelativeOrientationSensor",
	"description": "The RelativeOrientationSensor interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.Creates a new RelativeOrientationSensor object.No specific properties; inherits methods from its ancestors OrientationSensor and Sensor.No specific methods; inherits methods from its ancestors OrientationSensor and Sensor.No specific events; inherits events from its ancestor, Sensor.The following example, which is loosely based on Intel's Orientation Phone demo, instantiates an RelativeOrientationSensor with a frequency of 60 times a second.Note: The Intel demo this is based on uses the AbsoluteOrientationSensor. On each reading it uses OrientationSensor.quaternion to rotate a visual model of a phone.Using orientation sensors requires requesting permissions for multiple device sensors. Because the Permissions interface uses promises, a good way to request permissions is to use Promise.all.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RelativeOrientationSensor"
},
{
	"api_id": "664",
	"name": "RemotePlayback",
	"description": "The RemotePlayback interface of the Remote Playback API allows the page to detect availability of remote playback devices, then connect to and control playing on these devices.Represents the RemotePlayback connection's state. One of:The user agent is attempting to initiate remote playback with the selected device.The transition from local to remote playback has happened, all commands will now take place on the remote device.The remote playback has not been initiated, has failed to initiate, or has been stopped.A Promise that resolves with a callbackId of an available remote playback device.Cancels the request to monitor the availability of remote playback devices.Prompts the user to select and give permission to connect to a remote playback device.Fired when the user agent initiates remote playback.Fired when the user agent successfully connects to the remote device.Fired when the user agent disconnects from the remote device.The following example demonstrates a player with custom controls that support remote playback. Initially the button used to select a device is hidden:The RemotePlayback.watchAvailability() method is used to watch for available remote playback devices. If a device is available, use the callback to show the button.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RemotePlayback"
},
{
	"api_id": "665",
	"name": "Report",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Report interface of the Reporting API represents a single report.Reports can be accessed in a number of ways:The body of the report, which is a ReportBody object containing the detailed report information.The type of report generated, e.g. deprecation or intervention.The URL of the document that generated the report.This interface has no methods defined on it.This interface has no events that fire on it.In our deprecation_report.html example, we create a simple reporting observer to observe usage of deprecated features on our web page:We then tell it to start observing reports using ReportingObserver.observe(); this tells the observer to start collecting reports in its report queue, and runs the callback function specified inside the constructor:Because of the event handler we set up inside the ReportingObserver() constructor, we can now click the button to display the report details.\n  \nThe report details are displayed via the displayReports() function, which takes the observer callback's reports parameter as its parameter:The reports parameter contains an array of all the reports in the observer's report queue. We loop over each report using a basic for loop, then iterate over each entry of in the report's body using a for...in structure, displaying each key/value pair inside a list item.This feature is not yet available by default in any released browser. It can be activated in Firefox by setting dom_reporting_enabled to true and in Chrome if you enable this experimental feature.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Report"
},
{
	"api_id": "666",
	"name": "ReportBody",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ReportBody interface of the Reporting API represents the body of a report. Individual report types inherit from this interface, adding specific attributes relevant to the particular report.An instance of ReportBody is returned as the value of Report.body. The interface has no constructor.A serializer which returns a JSON representation of the ReportBody object.In this example we create a new ReportingObserver to observe intervention reports. The InterventionReportBody interface inherits from ReportBody.This feature is not yet available by default in any released browser. It can be activated in Firefox by setting dom_reporting_enabled to true and in Chrome if you enable this experimental feature.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReportBody"
},
{
	"api_id": "667",
	"name": "reportError()",
	"description": "Note: This feature is available in Web WorkersThe reportError() global method may be used to report errors to the console or global event handlers, emulating an uncaught JavaScript exception.\n  This feature is primarily intended for custom event-dispatching or callback-manipulating libraries.\n  Libraries can use this feature to catch errors in callback code and re-throw them to the top level handler.\n  This ensures that an exception in one callback will not prevent others from being handled, while at the same time ensuring that stack trace information is still readily available for debugging at the top level.\nAn error object such as a TypeError.None (undefined).The method is called without an error argument.Feature test for the method using:\n  The following code shows how you might create and report an error, and how it may be caught using either the global onerror handler (GlobalEventHandlers.onerror) or by adding a listener for the error event.\n  Note that the handler assigned to onerror must return true to stop the event propagating further.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/reportError"
},
{
	"api_id": "668",
	"name": "ReportingObserver",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ReportingObserver interface of the Reporting API allows you to collect and access reports.Creates a new ReportingObserver object instance, which can be used to collect and access reports.This interface has no properties defined on it.Stops a reporting observer that had previously started observing from collecting reports.Instructs a reporting observer to start collecting reports in its report queue.Returns the current list of reports contained in the observer's report queue, and empties the queue.This interface has no events that fire on it.In our deprecation_report.html example, we create a simple reporting observer to observe usage of deprecated features on our web page:We then tell it to start observing reports using ReportingObserver.observe(); this tells the observer to start collecting reports in its report queue, and runs the callback function specified inside the constructor:Later on in the example we deliberately use the deprecated version of MediaDevices.getUserMedia():This causes a deprecation report to be generated; because of the event handler we set up inside the ReportingObserver() constructor, we can now click the button to display the report details.\n  \nNote: If you look at the complete source code, you'll notice that we actually call the deprecated getUserMedia() method twice. After the first time we call ReportingObserver.takeRecords(), which returns the first generated report and empties the queue. Because of this, when the button is pressed only the second report is listed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver"
},
{
	"api_id": "669",
	"name": "ReportingObserverOptions",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The ReportingObserverOptions dictionary of the Reporting API allows options to be set in the constructor when creating a ReportingObserver.An array of strings representing the types of report to be collected by this observer. Available types include deprecation, intervention, and crash.A boolean that defines whether the reports that were generated before the observer was able to be created should be observable (true) or not (false).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserverOptions"
},
{
	"api_id": "670",
	"name": "Request",
	"description": "The Request interface of the Fetch API represents a resource request.You can create a new Request object using the Request() constructor, but you are more likely to encounter a Request object being returned as the result of another API operation, such as a service worker FetchEvent.request.Creates a new Request object.A ReadableStream of the body contents.Stores true or false to indicate whether or not the body has been used in a request yet.Contains the cache mode of the request (e.g., default, reload, no-cache).Contains the credentials of the request (e.g., omit, same-origin, include). The default is same-origin.Returns a string describing the request's destination. This is a string indicating the type of content being requested.Contains the associated Headers object of the request.Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).Contains the request's method (GET, POST, etc.)Contains the mode of the request (e.g., cors, no-cors, same-origin, navigate.)Contains the request's priority hint (e.g., high, low, auto).Contains the mode for how redirects are handled. It may be one of follow, error, or manual.Contains the referrer of the request (e.g., client).Contains the referrer policy of the request (e.g., no-referrer).Contains the URL of the request.Returns a promise that resolves with an ArrayBuffer representation of the request body.Returns a promise that resolves with a Blob representation of the request body.Creates a copy of the current Request object.Returns a promise that resolves with a FormData representation of the request body.Returns a promise that resolves with the result of parsing the request body as JSON.Returns a promise that resolves with a text representation of the request body.Note: The request body functions can be run only once; subsequent calls will resolve with empty strings/ArrayBuffers.In the following snippet, we create a new request using the Request() constructor (for an image file in the same directory as the script), then return some property values of the request:You could then fetch this request by passing the Request object in as a parameter to a fetch() call, for example:In the following snippet, we create a new request using the Request() constructor with some initial data and body content for an API request which need a body payload:Note: The body can only be a Blob, an ArrayBuffer, a TypedArray, a DataView, a FormData, a URLSearchParams, a ReadableStream, or a String object, as well as a string literal, so for adding a JSON object to the payload you need to stringify that object.You could then fetch this API request by passing the Request object in as a parameter to a fetch() call, for example and get the response:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Request"
},
{
	"api_id": "671",
	"name": "ResizeObserver",
	"description": "The ResizeObserver interface reports changes to the dimensions of an Element's content or border box, or the bounding box of an SVGElement.Note: The content box is the box in which content can be placed, meaning the border box minus the padding and border width. The border box encompasses the content, padding, and border. See The box model for further explanation.ResizeObserver avoids infinite callback loops and cyclic dependencies that are often created when resizing via a callback function. It does this by only processing elements deeper in the DOM in subsequent frames. Implementations should, if they follow the specification, invoke resize events before paint and after layout.Creates and returns a new ResizeObserver object.None.Unobserves all observed Element targets of a particular observer.Initiates the observing of a specified Element.Ends the observing of a specified Element.In the resize-observer-text.html (see source) example, we use the resize observer to change the font-size of a header and paragraph as a slider's value is changed causing the containing <div> to change width. This shows that you can respond to changes in an element's size, even if they have nothing to do with the viewport.We also provide a checkbox to turn the observer off and on. If it is turned off, the text will not change in response to the <div>'s width changing.The JavaScript looks like so:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver"
},
{
	"api_id": "672",
	"name": "ResizeObserverEntry",
	"description": "The ResizeObserverEntry interface represents the object passed to the ResizeObserver() constructor's callback function, which allows you to access the new dimensions of the Element or SVGElement being observed.An object containing the new border box size of the observed element when the callback is run.An object containing the new content box size of the observed element when the callback is run.An object containing the new content box size in device pixels of the observed element when the callback is run.A DOMRectReadOnly object containing the new size of the observed element when the callback is run. Note that this is better supported than the above two properties, but it is left over from an earlier implementation of the Resize Observer API, is still included in the spec for web compat reasons, and may be deprecated in future versions.A reference to the Element or SVGElement being observed.Note: The content box is the box in which content can be placed, meaning the border box minus the padding and border width. The border box encompasses the content, padding, and border. See The box model for further explanation.None.The following snippet is taken from the resize-observer-text.html (see source) example. This uses a simple feature detection test to see if the browser supports the newer contentBoxSize property — if so, it uses that to get the sizing data it needs. If not, it uses the older contentRect property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry"
},
{
	"api_id": "673",
	"name": "ResizeObserverSize",
	"description": "The ResizeObserverSize interface of the Resize Observer API is used by the ResizeObserverEntry interface to access the box sizing properties of the element being observed.Note: In multi-column layout, which is a fragmented context, the sizing returned by ResizeObserverSize will be the size of the first column.The length of the observed element's border box in the block dimension. For boxes with a horizontal writing-mode, this is the vertical dimension, or height; if the writing-mode is vertical, this is the horizontal dimension, or width.The length of the observed element's border box in the inline dimension. For boxes with a horizontal writing-mode, this is the horizontal dimension, or width; if the writing-mode is vertical, this is the vertical dimension, or height.Note: For more explanation of writing modes and block and inline dimensions, read Handling different text directions.In this example the ResizeObserverEntry.contentBoxSize property returns a ResizeObserverSize object. This is an array containing the sizing information for the content box of the observed element.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverSize"
},
{
	"api_id": "674",
	"name": "Response",
	"description": "The Response interface of the Fetch API represents the response to a request.You can create a new Response object using the Response() constructor, but you are more likely to encounter a Response object being returned as the result of another API operation—for example, a service worker FetchEvent.respondWith, or a simple fetch().Creates a new Response object.A ReadableStream of the body contents.Stores a boolean value that declares whether the body has been used in a response yet.The Headers object associated with the response.A boolean indicating whether the response was successful (status in the range 200–299) or not.Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry).The status code of the response. (This will be 200 for a success).The status message corresponding to the status code. (e.g., OK for 200).A Promise resolving to a Headers object, associated with the response with Response.headers for values of the HTTP Trailer header.The type of the response (e.g., basic, cors).The URL of the response.Returns a promise that resolves with an ArrayBuffer representation of the response body.Returns a promise that resolves with a Blob representation of the response body.Creates a clone of a Response object.Returns a new Response object associated with a network error.Returns a promise that resolves with a FormData representation of the response body.Returns a promise that resolves with the result of parsing the response body text as JSON.Creates a new response with a different URL.Returns a promise that resolves with a text representation of the response body.\n  In our basic fetch example (run example live) we use a simple fetch() call to grab an image and display it in an <img> element.\n  The fetch() call returns a promise, which resolves to the Response object associated with the resource fetch operation.\nYou'll notice that since we are requesting an image, we need to run Response.blob to give the response its correct MIME type.You can also use the Response() constructor to create your own custom Response object:Here we call a PHP program file that generates a JSON string, displaying the result as a JSON value, including simple error handling.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Response"
},
{
	"api_id": "675",
	"name": "RsaHashedImportParams",
	"description": "The RsaHashedImportParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when importing any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.A string. This should be set to RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP, depending on the algorithm you want to use.A string representing the name of the digest function to use. This can be one of SHA-256, SHA-384, or SHA-512.Warning: Although you can technically pass SHA-1 here, this is strongly discouraged as it is considered vulnerable.See the examples for SubtleCrypto.importKey().Browsers that support any RSA-based algorithm for the SubtleCrypto.importKey() or SubtleCrypto.unwrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedImportParams"
},
{
	"api_id": "676",
	"name": "RsaHashedKeyGenParams",
	"description": "The RsaHashedKeyGenParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.A string. This should be set to RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP, depending on the algorithm you want to use.A Number. The length in bits of the RSA modulus. This should be at least 2048: see for example see SP 800-131A Rev. 2. Some organizations are now recommending that it should be 4096.A Uint8Array. The public exponent. Unless you have a good reason to use something else, specify 65537 here ([0x01, 0x00, 0x01]).A string representing the name of the digest function to use. You can pass any of SHA-256, SHA-384, or SHA-512 here.Warning: Although you can technically pass SHA-1 as a value here, this is strongly discouraged as SHA-1 is considered vulnerable.See the examples for SubtleCrypto.generateKey().Browsers that support any RSA-based algorithm for the SubtleCrypto.generateKey() method will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams"
},
{
	"api_id": "677",
	"name": "RsaOaepParams",
	"description": "The RsaOaepParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the RSA_OAEP algorithm.A string. This should be set to RSA-OAEP.An ArrayBuffer, a TypedArray, or a DataView — an array of bytes that does not itself need to be encrypted but which should be bound to the ciphertext. A digest of the label is part of the input to the encryption operation.Unless your application calls for a label, you can just omit this argument and it will not affect the security of the encryption operation.See the examples for SubtleCrypto.encrypt() and SubtleCrypto.decrypt().Browsers that support the "RSA-OAEP" algorithm for the SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RsaOaepParams"
},
{
	"api_id": "678",
	"name": "RsaPssParams",
	"description": "The RsaPssParams dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify(), when using the RSA-PSS algorithm.A string. This should be set to RSA-PSS.A long integer representing the length of the random salt to use, in bytes.RFC 3447 says that "Typical salt lengths" are either 0 or the length of the output of the digest algorithm that was selected when this key was generated. For example, if you use SHA-256 as the digest algorithm, this could be 32.The maximum size of saltLength is given by:So for a key length of 2048 bits and a digest output size of 32 bytes, the maximum size would be 222.See the examples for SubtleCrypto.sign() and SubtleCrypto.verify().Browsers that support the "RSA-PSS" algorithm for the SubtleCrypto.sign() and SubtleCrypto.verify() methods will support this type.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams"
},
{
	"api_id": "679",
	"name": "RTCCertificate",
	"description": "The interface of the WebRTC API provides an object represents a certificate that an RTCPeerConnection uses to authenticate.Returns the expiration date of the certificate.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate"
},
{
	"api_id": "680",
	"name": "RTCDataChannel",
	"description": "The RTCDataChannel interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an RTCPeerConnection, and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).To create a data channel and ask a remote peer to join you, call the RTCPeerConnection's createDataChannel() method. The peer being invited to exchange data receives a datachannel event (which has type RTCDataChannelEvent) to let it know the data channel has been added to the connection.RTCDataChannel is a transferable object.Also inherits properties from EventTarget.\n  A string specifying the type of object\n  that should be used to represent binary data received on the RTCDataChannel.\n  Values are the same as allowed on the WebSocket.binaryType property:\n  blob if Blob objects are being used,\n  or arraybuffer if ArrayBuffer objects are being used.\n  The default is blob.\n  \n  Returns the number of bytes of data\n  currently queued to be sent over the data channel.\n  \n  Specifies the number of bytes of buffered outgoing data that is considered "low".\n  The default value is 0.\n  \n  Returns an ID number (between 0 and 65,534)\n  which uniquely identifies the RTCDataChannel.\n  \n  Returns a string that contains a name describing the data channel.\n  These labels are not required to be unique.\n  \n  Returns the amount of time,\n  in milliseconds,\n  the browser is allowed to take to attempt to transmit a message,\n  as set when the data channel was created,\n  or null.\n  \n  Returns the maximum number of times\n  the browser should try to retransmit a message before giving up,\n  as set when the data channel was created,\n  or null, which indicates that there is no maximum.\n  \n  Indicates\n  whether the RTCDataChannel's connection was negotiated by the Web app\n  (true)\n  or by the WebRTC layer (false).\n  The default is false.\n  \n  Indicates whether or not the data channel guarantees in-order delivery of messages;\n  the default is true, which indicates that the data channel is indeed ordered.\n  \n  Returns a string containing the name of the subprotocol in use.\n  If no protocol was specified\n  when the data channel was created,\n  then this property's value is the empty string ("").\n  \n  Returns a string\n  which indicates the state of the data channel's underlying data connection.\n  It can have one of the following values:\n  connecting, open, closing, or closed.\n  Indicates whether or not the data channel is reliable.\n  Returns an ID number (between 0 and 65,535)\n  which uniquely identifies the data channel.\n  Also inherits methods from EventTarget.\n  Closes theRTCDataChannel.\n  Either peer is permitted to call this method\n  to initiate closure of the channel.\n  Sends data across the data channel to the remote peer.\n  Sent\n  when the number of bytes of data in the outgoing data buffer\n  falls below the value specified by bufferedAmountLowThreshold.\n  Sent when the underlying data transport closes.Sent when the underlying data transport is about to start closing.Sent when an error occurs on the data channel.\n  Sent when a message has been received from the remote peer.\n  The message contents can be found\n  in the event's data property.\n  \n  Sent when the data channel is first opened,\n  or when an existing data channel's underlying connection re-opens.\n  The underlying data format is defined by the IEEE specification SDP Offer/Answer Procedures for SCTP over DTLS Transport(RFC 8841). The current format specifies its protocol as either "UDP/DTLS/SCTP" (UDP carrying DTLS carrying SCTP) or "TCP/DTLS/SCTP" (TCP carrying DTLS carrying SCTP). Older browsers may only specify "DTLS/SCTP".",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel"
},
{
	"api_id": "681",
	"name": "RTCDataChannelEvent",
	"description": "\n  The RTCDataChannelEvent interface\n  represents an event related to a specific RTCDataChannel.\nCreates a new RTCDataChannelEvent.Also inherits properties from Event.Returns the RTCDataChannel associated with the event.In this example, the datachannel event handler is set up to save the data channel reference and set up handlers for the events which need to be monitored. The channel property provides the RTCDataChannel representing the connection to the other peer.See A simple RTCDataChannel sample for another, more complete, example of how to use data channels.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent"
},
{
	"api_id": "682",
	"name": "RTCDtlsTransport",
	"description": "The RTCDtlsTransport interface provides access to information about the Datagram Transport Layer Security (DTLS) transport over which a RTCPeerConnection's RTP and RTCP packets are sent and received by its RTCRtpSender and RTCRtpReceiver objects.A RTCDtlsTransport object is also used to provide information about SCTP packets transmitted and received by an connection's data channels.Features of the DTLS transport include the addition of security to the underlying transport; the RTCDtlsTransport interface can be used to obtain information about the underlying transport and the security added to it by the DTLS layer.Also inherits properties from EventTarget.Returns a reference to the underlying RTCIceTransport object.\n  Returns a string\n  which describes the underlying Datagram Transport Layer Security (DTLS) transport state.\n  It can be one of the following values:\n  new, connecting, connected, closed, or failed.\n  \n  An event handler\n  which specifies a function the browser calls\n  when theerror event is received.\n  \n  An event handler\n  which specifies a function the browser calls\n  when thestatechange event is received.\n  Also inherits properties from EventTarget.Returns an array of ArrayBuffer containing the certificates of the remote peer of the connection.Sent when a transport-level error occurs on the RTCPeerConnection.Sent when the state of the DTLS transport changes.RTCDtlsTransport objects are created when an app calls either setLocalDescription() or setRemoteDescription(). The number of DTLS transports created and how they're used depends on the bundling mode used when creating the RTCPeerConnection.Whether bundling is used depends on what the other endpoint is able to negotiate. All browsers support bundling, so when both endpoints are browsers, you can rest assured that bundling will be used.Some non-browser legacy endpoints, however, may not support bundle. To be able to negotiate with such endpoints (or to exclude them entirely), the bundlePolicy property may be provided when creating the connection. The bundlePolicy lets you control how to negotiate with these legacy endpoints. The default policy is "balanced", which provides a balance between performance and compatibility.For example, to create the connection using the highest level of bundling:Bundling lets you use one RTCDtlsTransport to carry the data for multiple higher-level transports, such as multiple RTCRtpTransceivers.When the connection is created without using BUNDLE, each RTP or RTCP component of each RTCRtpTransceiver has its own RTCDtlsTransport; that is, every RTCRtpSender and RTCRtpReceiver, has its own transport, and all RTCDataChannel objects share a transport dedicated to SCTP.When the connection is using BUNDLE, each RTCDtlsTransport object represents a group of RTCRtpTransceiver objects. If the connection was created using max-compat mode, each transport is responsible for handling all of the communications for a given type of media (audio, video, or data channel). Thus, a connection that has any number of audio and video channels will always have exactly one DTLS transport for audio and one for video communications.Because transports are established early in the negotiation process, it's likely that it won't be known until after they're created whether or not the remote peer supports bundling or not. For this reason, you'll sometimes see separate transports created at first, one for each track, then see them get bundled up once it's known that bundling is possible. If your code accesses RTCRtpSenders and/or RTCRtpReceivers directly, you may encounter situations where they're initially separate, then half or more of them get closed and the senders and receivers updated to refer to the appropriate remaining RTCDtlsTransport objects.RTCDataChannels use SCTP to communicate. All of a peer connection's data channels share a single RTCSctpTransport, found in the connection's sctp property.You can, in turn, identify the RTCDtlsTransport used to securely encapsulate the data channels' SCTP communications by looking at the RTCSctpTransport object's transport property.This example presents a function, tallySenders(), which iterates over an RTCPeerConnection's RTCRtpSenders, tallying up how many of them are in various states. The function returns an object containing properties whose values indicate how many of the senders are in each state.Note that in this code, the new and connecting states are being treated as a single connectionPending status in the returned object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport"
},
{
	"api_id": "683",
	"name": "RTCDTMFSender",
	"description": "The RTCDTMFSender interface provides a mechanism for transmitting DTMF codes on a WebRTC RTCPeerConnection. You gain access to the connection's RTCDTMFSender through the RTCRtpSender.dtmf property on the audio track you wish to send DTMF with.The primary purpose for WebRTC's DTMF support is to allow WebRTC-based communication clients to be connected to a public-switched telephone network (PSTN) or other legacy telephone service, including extant voice over IP (VoIP) services. For that reason, DTMF can't be used between two WebRTC-based devices, because there is no mechanism provided by WebRTC for receiving DTMF codes.A string which contains the list of DTMF tones currently in the queue to be transmitted (tones which have already been played are no longer included in the string). See toneBuffer for details on the format of the tone buffer.Given a string describing a set of DTMF codes and, optionally, the duration of and inter-tone gap between the tones, insertDTMF() starts sending the specified tones. Calling insertDTMF() replaces any already-pending tones from the toneBuffer. You can abort sending queued tones by specifying an empty string ("") as the set of tones to play.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.The tonechange event is sent to the RTCDTMFSender instance's event handler to indicate that a tone has either started or stopped playing.See the article Using DTMF with WebRTC for a full example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFSender"
},
{
	"api_id": "684",
	"name": "RTCDTMFToneChangeEvent",
	"description": "The RTCDTMFToneChangeEvent interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.In addition to the properties of Event, this interface offers the following:A string specifying the tone which has begun playing, or an empty string ("") if the previous tone has finished playing.Returns a new RTCDTMFToneChangeEvent. It takes two parameters, the first being a string representing the type of the event (always "tonechange"); the second a dictionary containing the initial state of the properties of the event.Supports the methods defined in Event. There are no additional methods.This snippet is derived loosely from the full, working example you'll find in When a tone finishes playing in Using DTMF with WebRTC. It appends each tone to a display box as it's played, and, once all tones have been sent, re-enabled a previously-disabled "Send" button, allowing the next DMTF string to be entered.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent"
},
{
	"api_id": "685",
	"name": "RTCError",
	"description": "The RTCError interface describes an error which has occurred while handling WebRTC operations. It's based upon the standard DOMException interface that describes general DOM errors.Creates and returns a new RTCError object initialized with the different parameters and, optionally, a string to use as the value of the error's message property.In addition to the properties defined by the parent interface, DOMException, RTCError includes the following properties:A string specifying the WebRTC-specific error code identifying the type of error that occurred.An unsigned long integer value indicating the fatal DTLS error which was received from the network. Only valid if the errorDetail string is dtls-failure. If null, no DTLS error was received.If errorDetail is sctp-failure, this property is a long integer specifying the SCTP cause code indicating the cause of the failed SCTP negotiation. null if the error isn't an SCTP error.If errorDetail is sdp-syntax-error, this property is a long integer identifying the line number of the SDP on which the syntax error occurred. null if the error isn't an SDP syntax error.If errorDetail is dtls-failure, this property is an unsigned long integer indicating the fatal DTLS error that was sent out by this device. If null, no DTLS error was transmitted.Note: All RTCError objects have their name set to OperationError.\n  In this example, a handler is established for an RTCDataChannel's\n  error event.\n\n  If the error is an SDP syntax error—indicated by its errorDetail property being sdp-syntax-error—, a message string is\n  constructed to present the error message and the line number within the SDP at which the\n  error occurred. This message is then displayed using a function called\n  showMyAlertMessage(), which stands in for whatever output mechanism this\n  code might use.\n\n  Any other error is treated as terminal, causing a terminateMyConnection()\n  function to be called.\n\n  The above example uses addEventListener() to add the handler for error events. You can also\n  use the RTCDataChannel object's onerror event handler property, like this:\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCError"
},
{
	"api_id": "686",
	"name": "RTCErrorEvent",
	"description": "The WebRTC API's RTCErrorEvent interface represents an error sent to a WebRTC object. It's based on the standard Event interface, but adds RTC-specific information describing the error, as shown below.Creates and returns a new RTCErrorEvent object.In addition to the standard properties available on the Event interface, RTCErrorEvent also includes the following:An RTCError object specifying the error which occurred; this object includes the type of error that occurred, information about where the error occurred (such as which line number in the SDP or what SCTP cause code was at issue).No additional methods are provided beyond any found on the parent interface, Event.There are other data types used for error events in WebRTC, as needed for errors with special information sharing requirements. The most common of these is probably RTCPeerConnectionIceErrorEvent, used by the icecandidateerror event, which signals an error that has occurred while gathering ICE candidates during connection negotiation.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCErrorEvent"
},
{
	"api_id": "687",
	"name": "RTCIceCandidate",
	"description": "The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Interactive Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.An ICE candidate describes the protocols and routing needed for WebRTC to be able to communicate with a remote device. When starting a WebRTC peer connection, typically a number of candidates are proposed by each end of the connection, until they mutually agree upon one which describes the connection they decide will be best. WebRTC then uses that candidate's details to initiate the connection.For details on how the ICE process works, see Lifetime of a WebRTC session. The article WebRTC connectivity provides additional useful details.Creates an RTCIceCandidate object to represent a single ICE candidate, optionally configured based on a configuration object.Note: For backwards compatibility, the constructor also accepts as input a string containing the value of the candidate property instead of the configuration object.A string containing the IP address of the candidate.A string representing the transport address for the candidate that can be used for connectivity checks. The format of this address is a candidate-attribute as defined in RFC 5245. This string is empty ("") if the RTCIceCandidate is an "end of candidates" indicator.A string which indicates whether the candidate is an RTP or an RTCP candidate; its value is either rtp or rtcp, and is derived from the "component-id" field in the candidate a-line string.Returns a string containing a unique identifier that is the same for any candidates of the same type, share the same base (the address from which the ICE agent sent the candidate), and come from the same STUN server. This is used to help optimize ICE performance while prioritizing and correlating candidates that appear on multiple RTCIceTransport objects.An integer value indicating the candidate's port number.A long integer value indicating the candidate's priority.A string indicating whether the candidate's protocol is "tcp" or "udp".If the candidate is derived from another candidate, relatedAddress is a string containing that host candidate's IP address. For host candidates, this value is null.For a candidate that is derived from another, such as a relay or reflexive candidate, the relatedPort is a number indicating the port number of the candidate from which this candidate is derived. For host candidates, the relatedPort property is null.A string specifying the candidate's media stream identification tag which uniquely identifies the media stream within the component with which the candidate is associated, or null if no such association exists.If not null, sdpMLineIndex indicates the zero-based index number of the media description (as defined in RFC 4566) in the SDP with which the candidate is associated.If protocol is "tcp", tcpType represents the type of TCP candidate. Otherwise, tcpType is null.A string indicating the type of candidate as one of the strings listed on RTCIceCandidate.type.A string containing a randomly-generated username fragment ("ice-ufrag") which ICE uses for message integrity along with a randomly-generated password ("ice-pwd"). You can use this string to verify generations of ICE generation; each generation of the same ICE process will use the same usernameFragment, even across ICE restarts.\n  Returns a JSON representation of the RTCIceCandidate's current configuration.\n  The format of the representation is the same as the candidateInfo object that can optionally be passed to the RTCIceCandidate() constructor to configure a candidate.\n  For examples, see the article Signaling and video calling, which demonstrates the entire process.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate"
},
{
	"api_id": "688",
	"name": "RTCIceCandidatePair",
	"description": "The RTCIceCandidatePair dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints. It is used as the return value from RTCIceTransport.getSelectedCandidatePair() to identify the currently-selected candidate pair identified by the ICE agent.An RTCIceCandidate describing the configuration of the local end of the connection.The RTCIceCandidate describing the configuration of the remote end of the connection.See RTCIceTransport.onselectedcandidatepairchange for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair"
},
{
	"api_id": "689",
	"name": "RTCIceCandidatePairStats",
	"description": "The WebRTC RTCIceCandidatePairStats dictionary reports statistics which provide insight into the quality and performance of an RTCPeerConnection while connected and configured as described by the specified pair of ICE candidates.If a RTCStats-based object's type is candidate-pair, it's an RTCIceCandidatePairStats object.RTCIceCandidatePairStats is based upon RTCStats and inherits its properties. In addition, it adds the following new properties:Provides an informative value representing the available inbound capacity of the network by reporting the total number of bits per second available for all of the candidate pair's incoming RTP streams. This does not take into account the size of the IP overhead, nor any other transport layers such as TCP or UDP.Provides an informative value representing the available outbound capacity of the network by reporting the total number of bits per second available for all of the candidate pair's outgoing RTP streams. This does not take into account the size of the IP overhead, nor any other transport layers such as TCP or UDP.The total number of payload bytes received (that is, the total number of bytes received minus any headers, padding, or other administrative overhead) on this candidate pair so far.The total number of payload bytes sent (that is, the total number of bytes sent minus any headers, padding, or other administrative overhead) so far on this candidate pair.The total number of consent requests that have been sent on this candidate pair.A floating-point value indicating the total time, in seconds, that elapsed between the most recently-sent STUN request and the response being received. This may be based upon requests that were involved in confirming permission to open the connection.A DOMHighResTimeStamp value indicating the time at which the last packet was received by the local peer from the remote peer for this candidate pair. Timestamps are not recorded for STUN packets.A DOMHighResTimeStamp value indicating the time at which the last packet was sent from the local peer to the remote peer for this candidate pair. Timestamps are not recorded for STUN packets.The unique ID string corresponding to the RTCIceCandidate from the data included in the RTCIceCandidateStats object providing statistics for the candidate pair's local candidate.A Boolean value which, if true, indicates that the candidate pair described by this object is one which has been proposed for use, and will be (or was) used if its priority is the highest among the nominated candidate pairs. See RFC 5245, section 7.1.3.2.4 for details.The total number of packets received on this candidate pair.The total number of packets sent on this candidate pair.The unique ID string corresponding to the remote candidate from which data was taken to construct the RTCIceCandidateStats object describing the remote end of the connection.The total number of connectivity check requests that have been received, including retransmissions. This value includes both connectivity checks and STUN consent checks.The total number of connectivity check requests that have been sent, not including retransmissions.The total number of connectivity check responses that have been received.The total number of connectivity check responses that have been sent. This includes both connectivity check requests and STUN consent requests.A string which indicates the state of the connection between the two candidates.A floating-point value indicating the total time, in seconds, that has elapsed between sending STUN requests and receiving responses to them, for all such requests made to date on this candidate pair. This includes both connectivity check and consent check requests. You can compute the average round trip time (RTT) by dividing this value by responsesReceived.A string that uniquely identifies the RTCIceTransport that was inspected to obtain the transport-related statistics (as found in RTCTransportStats) used in generating this object.The following properties have been removed from the specification and should no longer be used. You should update any existing code to avoid using them as soon as is practical. Check the compatibility table for details on which browsers support them and in which versions.An integer value indicating the candidate pair's priority.A Boolean value indicating whether or not data can be sent over the connection described by the candidate pair.A Boolean value indicating whether or not data can be received on the connection described by the candidate pair.A Firefox-specific Boolean value which is true if the candidate pair described by this object is the one currently in use. The spec-compliant way to determine the selected candidate pair is to look for a stats object of type transport, which is an RTCTransportStats object. That object's selectedCandidatePairId property indicates whether or not the specified transport is the one being used.The currently-active ICE candidate pair—if any—can be obtained by calling the RTCIceTransport method getSelectedCandidatePair(), which returns an RTCIceCandidatePair object, or null if there isn't a pair selected. The active candidate pair describes the current configuration of the two ends of the RTCPeerConnection.Any candidate pair that isn't the active pair of candidates for a transport gets deleted if the RTCIceTransport performs an ICE restart, at which point the state of the ICE transport returns to new and negotiation starts once again. For more information, see ICE restart in Lifetime of a WebRTC session.This example computes the average time elapsed between connectivity checks if the RTCStats object rtcStats is an RTCIceCandidatePairStats object.The code begins by looking at rtcStats to see if its type is candidate-pair. If it is, then we know that rtcStats is in fact an RTCIceCandidatePairStats object. If so, we compute the average time elapsed between STUN connectivity checks and log that information.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats"
},
{
	"api_id": "690",
	"name": "RTCIceCandidateStats",
	"description": "The WebRTC API's RTCIceCandidateStats dictionary provides statistics related to an RTCIceCandidate.RTCIceCandidateStats is based upon the RTCStats dictionary, so it includes those properties in addition to the ones below.A string containing the address of the candidate. This value may be an IPv4 address, an IPv6 address, or a fully-qualified domain name. This property was previously named ip and only accepted IP addresses.A string matching one of the values in RTCIceCandidate.type, indicating what kind of candidate the object provides statistics for.A Boolean value indicating whether or not the candidate has been released or deleted; the default value is false. For local candidates, it's value is true if the candidate has been deleted or released. For host candidates, true means that any network resources (usually a network socket) associated with the candidate have already been released. For TURN candidates, the TURN allocation is no longer active for deleted candidates. This property is not present for remote candidates.The network port number used by the candidate.The candidate's priority, corresponding to RTCIceCandidate.priority.A string specifying the protocol (tcp or udp) used to transmit data on the port.A string identifying the protocol used by the endpoint for communicating with the TURN server; valid values are tcp, udp, and tls. Only present for local candidates.A string uniquely identifying the transport object that was inspected in order to obtain the RTCTransportStats associated with the candidate corresponding to these statistics.For local candidates, the url property is the URL of the ICE server from which the candidate was received. This URL matches the one included in the RTCPeerConnectionIceEvent object representing the icecandidate event that delivered the candidate to the local peer.In this example, the candidate's type is used to present a modified user interface for host candidates (those where the ip refers directly to the remote peer, rather than an intermediary).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats"
},
{
	"api_id": "691",
	"name": "RTCIceParameters",
	"description": "The RTCIceParameters dictionary specifies the username fragment and password assigned to an ICE session.During ICE negotiation, each peer's username fragment and password are recorded in an RTCIceParameters object, which can be obtained from the RTCIceTransport by calling its getLocalParameters() or getRemoteParameters() method, depending on which end interests you.A string specifying the value of the ICE session's username fragment field, ufrag.A string specifying the session's password string.The username fragment and password uniquely identify the remote peer for the duration of the ICE session, and are used to both ensure security and to avoid crosstalk across multiple ongoing ICE sessions. See RTCIceCandidate.usernameFragment for further information.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceParameters"
},
{
	"api_id": "692",
	"name": "RTCIceServer",
	"description": "The RTCIceServer dictionary defines how to connect to a single ICE server (such as a STUN or TURN server). Objects of this type are provided in the configuration of an RTCPeerConnection, in the iceServers array.The credential to use when logging into the server. This is only used if the RTCIceServer represents a TURN server.If the RTCIceServer represents a TURN server, this attribute specifies what kind of credential is to be used when connecting. The default is password.This required property is either a single string or an array of strings, each specifying a URL which can be used to connect to the server.If the RTCIceServer is a TURN server, then this is the username to use during the authentication process.Avoid specifying an unnecessarily large number of URLs in the urls property; the startup time for your connection will go up substantially. Every server in the list will be contacted and tried out before one is selected to be used for negotiation.Note: Older versions of the WebRTC specification included an url property instead of urls; this was changed in order to let you specify multiple addresses for each server in the list, as shown in the example below.The following properties have been removed from the specification and should not be used.This obsolete property is a string specifies a single ICE server's URL. Do not use this property; use urls instead. Because many older books and examples still use this, we include it to help developers update their code or make sense of older examples.The configuration below establishes two ICE servers. The first one, stun:stun.services.mozilla.com, requires authentication, so the username and password are provided. The second server has two URLs: stun:stun.example.com and stun:stun-1.example.com.Once the configuration object has been created, it is passed into the RTCPeerConnection() constructor to use it as the configuration for the new peer connection.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer"
},
{
	"api_id": "693",
	"name": "RTCIceTransport",
	"description": "\n  The RTCIceTransport interface provides access to information about the ICE transport layer over which the data is being sent and received.\n  This is particularly useful if you need to access state information about the connection.\nThe RTCIceTransport interface inherits properties from its parent, EventTarget. It also offers the following properties:The ICE component being used by the transport. The value is one of the strings from the RTCIceTransport enumerated type: "RTP" or "RTSP".A string indicating which current gathering state of the ICE agent: "new", "gathering", or "complete".Returns a string whose value is either "controlling" or "controlled"; this indicates whether the ICE agent is the one that makes the final decision as to the candidate pair to use or not.A string indicating what the current state of the ICE agent is. The value of state can be used to determine whether the ICE agent has made an initial connection using a viable candidate pair ("connected"), made its final selection of candidate pairs ("completed"), or in an error state ("failed"), among other states.Also includes methods from EventTarget, the parent interface.Returns an array of RTCIceCandidate objects, each describing one of the ICE candidates that have been gathered so far for the local device. These are the same candidates which have already been sent to the remote peer by sending an icecandidate event to the RTCPeerConnection for transmission.Returns a RTCIceParameters object describing the ICE parameters established by a call to the RTCPeerConnection.setLocalDescription() method. Returns null if parameters have not yet been received.Returns an array of RTCIceCandidate objects, one for each of the remote device's ICE candidates that have been received by the local end of the RTCPeerConnection and delivered to ICE by calling addIceCandidate().Returns a RTCIceParameters object containing the ICE parameters for the remote device, as set by a call to RTCPeerConnection.setRemoteDescription(). If setRemoteDescription() hasn't been called yet, the return value is null.Returns a RTCIceCandidatePair object that identifies the two candidates—one for each end of the connection—that have been selected so far. It's possible that a better pair will be found and selected later; if you need to keep up with this, watch for the selectedcandidatepairchange event. If no candidate pair has been selected yet, the return value is null.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Sent to the RTCIceTransport object to indicate that the value of the gatheringState property has changed, indicating a change in this transport's ICE candidate negotiation process.\n  Also available through the ongatheringstatechange event handler property.\n  \n  Sent to the RTCIceTransport when a new, better pair of candidates has been selected to describe the connectivity between the two peers. This occurs during negotiation or renegotiation, including after an ICE restart, which reuses the existing RTCIceTransport objects. The current candidate pair can be obtained using getSelectedCandidatePair().\n  Also available using the onselectedcandidatepairchange event handler property.\n  \n  Sent to the RTCIceTransport instance when the value of the state property has changed, indicating that the ICE gathering process has changed state.\n  Also available through the onstatechange event handler property.\n  tbd",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport"
},
{
	"api_id": "694",
	"name": "RTCIdentityAssertion",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The RTCIdentityAssertion interface of the WebRTC API represents the identity of a remote peer of the current connection. If no peer has yet been set and verified, then this interface returns null. Once set it can't be changed.Indicates the provider of the identity assertion.Indicates the name of the identity assertion provider.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityAssertion"
},
{
	"api_id": "695",
	"name": "RTCInboundRtpStreamStats",
	"description": "The WebRTC API's RTCInboundRtpStreamStats dictionary, based upon RTCReceivedRtpStreamStats and RTCStats, contains statistics related to the receiving end of an RTP stream on the local end of the RTCPeerConnection.The RTCInboundRtpStreamStats dictionary is based on the RTCReceivedRtpStreamStats dictionary, whose properties are also available.A floating-point value indicating the average RTCP interval between two consecutive compound RTCP packets.A 64-bit integer which indicates the total number of bytes that have been received so far for this media source.An integer value indicating the number of RTP Forward Error Correction (FEC) packets which have been received for this source, for which the error correction payload was discarded.An integer value indicating the total number of RTP FEC packets received for this source. This counter may also be incremented when FEC packets arrive in-band along with media content; this can happen with Opus, for example.An integer value which indicates the total number of Full Intra Request (FIR) packets which this receiver has sent to the sender. This is an indicator of how often the stream has lagged, requiring frames to be skipped in order to catch up. This value is only available for video streams.A long integer value indicating the total number of frames of video which have been correctly decoded so far for this media source. This is the number of frames that would have been rendered if none were dropped. Only valid for video streams.A DOMHighResTimeStamp indicating the time at which the last packet was received for this source. The timestamp property, on the other hand, indicates the time at which the statistics object was generated.An integer value indicating the total number of Negative ACKnolwedgement (NACK) packets this receiver has sent.An integer value indicating the total number of packets that have been discarded because they were duplicates. These packets are not counted by packetsDiscarded.An integer totaling the number of RTP packets that could not be decrypted. These packets are not counted by packetsDiscarded.A record of key-value pairs with strings as the keys mapped to 32-bit integer values, each indicating the total number of packets this receiver has received on this RTP stream from this source for each Differentiated Services Code Point (DSCP).An integer specifying the number of times the receiver has notified the sender that some amount of encoded video data for one or more frames has been lost, using Picture Loss Indication (PLI) packets. This is only available for video streams.A 64-bit value containing the sum of the QP values for every frame decoded by this RTP receiver. You can determine the average QP per frame by dividing this value by framesDecoded. Valid only for video streams.A string indicating which identifies the RTCAudioReceiverStats or RTCVideoReceiverStats object associated with the stream's receiver. This ID is stable across multiple calls to getStats().A string which identifies the RTCRemoteOutboundRtpStreamStats object that provides statistics for the remote peer for this same SSRC. This ID is stable across multiple calls to getStats().An integer indicating the number of times the receiver sent a Slice Loss Indication (SLI) frame to the sender to tell it that one or more consecutive (in terms of scan order) video macroblocks have been lost or corrupted. Available only for video streams.A string which identifies the statistics object representing the receiving track; this object is one of two types: RTCReceiverAudioTrackAttachmentStats or RTCReceiverVideoTrackAttachmentStats. This ID is stable across multiple calls to getStats().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats"
},
{
	"api_id": "696",
	"name": "RTCOutboundRtpStreamStats",
	"description": "The RTCOutboundRtpStreamStats dictionary is the RTCStats-based object which provides metrics and statistics related to an outbound RTP stream being sent by an RTCRtpSender.The RTCOutboundRtpStreamStats dictionary includes the following properties in addition to those it inherits from RTCSentRtpStreamStats, RTCRtpStreamStats, and RTCStats.A floating-point value indicating the average RTCP interval between two consecutive compound RTCP packets.An integer value which indicates the total number of Full Intra Request (FIR) packets which this RTCRtpSender has sent to the remote RTCRtpReceiver. This is an indicator of how often the stream has lagged, requiring frames to be skipped in order to catch up. Valid only for video streams.The number of frames that have been successfully encoded so far for sending on this RTP stream. Only valid for video streams.A DOMHighResTimeStamp indicating the time at which the last packet was sent for this SSRC. The timestamp property, on the other hand, indicates the time at which the RTCOutboundRtpStreamStats object was generated.An integer value indicating the total number of Negative ACKnolwedgement (NACK) packets this RTCRtpSender has received from the remote RTCRtpReceiver.A record of key-value pairs with strings as the keys mapped to 32-bit integer values, each indicating the total number of packets this RTCRtpSender has transmitted for this source for each Differentiated Services Code Point (DSCP).An integer specifying the number of times the remote receiver has notified this RTCRtpSender that some amount of encoded video data for one or more frames has been lost, using Picture Loss Indication (PLI) packets. Only available for video streams.A 64-bit value containing the sum of the QP values for every frame encoded by this RTCRtpSender. Valid only for video streams.A record mapping each of the quality limitation reasons in the RTCRemoteInboundRtpStreamStats enumeration to a floating-point value indicating the number of seconds the stream has spent with its quality limited for that reason.One of the string none, cpu, bandwidth, or other, explaining why the resolution and/or frame rate is being limited for this RTP stream. Valid only for video streams.A string which identifies the RTCRemoteInboundRtpStreamStats object that provides statistics for the remote peer for this same SSRC. This ID is stable across multiple calls to getStats().The total number of bytes that have been retransmitted for this source as of the time the statistics were sampled. These retransmitted bytes comprise the packets included in the value returned by retransmittedPacketsSent.The total number of packets that have needed to be retransmitted for this source as of the time the statistics were sampled. These retransmitted packets are included in the value returned by packetsSent.The id of the RTCAudioSenderStats or RTCVideoSenderStats object containing statistics about this stream's RTCRtpSender.An integer indicating the number of times this sender received a Slice Loss Indication (SLI) frame from the remote peer, indicating that one or more consecutive video macroblocks have been lost or corrupted. Available only for video streams.A value indicating the bit rate the RTCRtpSender's codec is configured to attempt to achieve in its output media.A cumulative sum of the target frame sizes (the targeted maximum size of the frame in bytes when the codec is asked to compress it) for all of the frames encoded so far. This will likely differ from the total of the actual frame sizes.A floating-point value indicating the total number of seconds that have been spent encoding the frames encoded so far by this RTCRtpSender.The id of the RTCSenderAudioTrackAttachmentStats or RTCSenderVideoTrackAttachmentStats object containing the current track attachment to the RTCRtpSender responsible for this stream.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCOutboundRtpStreamStats"
},
{
	"api_id": "697",
	"name": "RTCPeerConnection",
	"description": "The RTCPeerConnection interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.\n  Returns a newly-created RTCPeerConnection,\n  which represents a connection between the local device and a remote peer.\n  \n  Creates an X.509 certificate and its corresponding private key,\n  returning a Promise that resolves with the new RTCCertificate once it is generated.\n  Also inherits properties from EventTarget.\n  Returns a boolean value which indicates whether or not\n  the remote peer can accept trickled ICE candidates.\n  \n  Indicates the current state of the peer connection\n  by returning one of the strings\n  new, connecting, connected, disconnected,\n  failed, or closed.\n  \n  Returns an RTCSessionDescription object describing\n  the local end of the connection\n  as it was most recently successfully negotiated\n  since the last time\n  this RTCPeerConnection finished negotiating and connecting to a remote peer.\n  Also included is a list of any ICE candidates\n  that may already have been generated by the ICE agent\n  since the offer or answer represented by the description was first instantiated.\n  \n  Returns an RTCSessionDescription object describing\n  the remote end of the connection\n  as it was most recently successfully negotiated\n  since the last time\n  this RTCPeerConnection finished negotiating and connecting to a remote peer.\n  Also included is a list of any ICE candidates\n  that may already have been generated by the ICE agent\n  since the offer or answer represented by the description was first instantiated.\n  \n  Returns a string which state of the ICE agent associated with this RTCPeerConnection.\n  It can be one of the following values:\n  new, checking, connected, completed,\n  failed, disconnected, or closed.\n  \n  Returns a string\n  that describes connection's ICE gathering state.\n  This lets you detect, for example,\n  when collection of ICE candidates has finished.\n  Possible values are:\n  new, gathering, or complete.\n  \n  Returns an RTCSessionDescription\n  describing the session for the local end of the connection.\n  If it has not yet been set, returns null.\n  \n  Returns a Promise\n  that resolves to an RTCIdentityAssertion\n  which contains a string\n  identifying the remote peer.\n  Once this promise resolves successfully,\n  the resulting identity is the target peer identity\n  and will not change for the duration of the connection.\n  \n  Returns an RTCSessionDescription object\n  describing a pending configuration change for the local end of the connection.\n  This does not describe the connection as it currently stands,\n  but as it may exist in the near future.\n  \n  Returns an RTCSessionDescription object\n  describing a pending configuration change for the remote end of the connection.\n  This does not describe the connection as it currently stands,\n  but as it may exist in the near future.\n  \n  Returns an RTCSessionDescription object\n  describing the session,\n  including configuration and media information,\n  for the remote end of the connection.\n  If this hasn't been set yet, this returns null.\n  \n  Returns an RTCSctpTransport object\n  describing the SCTP transport layer\n  over which SCTP data is being sent and received.\n  If SCTP hasn't been negotiated, this value is null.\n  \n  Returns a string\n  describing the state of the signaling process on the local end of the connection\n  while connecting or reconnecting to another peer.\n  It is one of the following values:\n  stable, have-local-offer, have-remote-offer,\n  have-local-pranswer, have-remote-pranswer, or closed.\n  Also inherits methods from EventTarget.\n  Adds a new remote candidate to the RTCPeerConnection's remote description,\n  which describes the state of the remote end of the connection.\n  \n  Adds a new MediaStreamTrack\n  to the set of tracks\n  which will be transmitted to the other peer.\n  \n  Creates a new RTCRtpTransceiver\n  and adds it to the set of transceivers associated with the connection.\n  Each transceiver represents a bidirectional stream,\n  with both an RTCRtpSender and an RTCRtpReceiver associated with it.\n  Closes the current peer connection.\n  Initiates the creation an SDP answer\n  to an offer received from a remote peer\n  during the offer/answer negotiation of a WebRTC connection.\n  The answer contains information\n  about any media already attached to the session,\n  codecs and options supported by the browser,\n  and any ICE candidates already gathered.\n  \n  Initiates the creation a new channel linked with the remote peer,\n  over which any kind of data may be transmitted.\n  This can be useful for back-channel content,\n  such as images, file transfer, text chat, game update packets, and so forth.\n  \n  Initiates the creation of an SDP offer\n  for the purpose of starting a new WebRTC connection to a remote peer.\n  The SDP offer includes information about any MediaStreamTrack objects\n  already attached to the WebRTC session, codec, and options supported by the browser,\n  as well as any candidates already gathered by the ICE agent,\n  for the purpose of being sent over the signaling channel to a potential peer\n  to request a connection or to update the configuration of an existing connection.\n  \n  Returns an object\n  which indicates the current configuration of the connection.\n  \n  Initiates the gathering of an identity assertion\n  and returns a Promise\n  which resolves to an identity assertion encoded as a string.\n  This has an effect only\n  if signalingState is not closed.\n  \n  Returns an array of RTCRtpReceiver objects,\n  each of which represents one RTP receiver.\n  \n  Returns an array of RTCRtpSender objects,\n  each of which represents the RTP sender\n  responsible for transmitting one track's data.\n  \n  Returns a Promise\n  which resolves with data providing statistics\n  about either the overall connection\n  or about the specified MediaStreamTrack.\n  \n  Returns a list of all the RTCRtpTransceiver objects\n  being used to send and receive data on the connection.\n  \n  Tells the local end of the connection\n  to stop sending media from the specified track,\n  without actually removing the corresponding RTCRtpSender\n  from the list of senders\n  as reported by getSenders().\n  If the track is already stopped,\n  or is not in the connection's senders list,\n  this method has no effect.\n  \n  Allows to easily request\n  that ICE candidate gathering be redone\n  on both ends of the connection.\n  This simplifies the process\n  by allowing the same method\n  to be used by either the caller or the receiver to trigger an ICE restart.\n  \n  Sets the current configuration of the connection\n  based on the values included in the specified object.\n  This lets you change the ICE servers\n  used by the connection\n  and which transport policies to use.\n  \n  Sets the Identity Provider (IdP) to the triplet given in parameter:\n  its name, the protocol used to communicate with it and an username.\n  The protocol and the username are optional.\n  \n  Changes the local description associated with the connection.\n  This description specifies the properties of the local end of the connection,\n  including the media format.\n  It returns a Promise\n  which is fulfilled\n  once the description has been changed, asynchronously.\n  \n  Sets the specified session description\n  as the remote peer's current offer or answer.\n  The description specifies the properties of the remote end of the connection,\n  including the media format.\n  It returns a Promise\n  which is fulfilled\n  once the description has been changed, asynchronously.\n  \n  Adds a MediaStream as a local source of audio or video.\n  Instead of using this obsolete method,\n  you should instead use addTrack()\n  once for each track\n  you wish to send to the remote peer.\n  \n  Creates a new RTCDTMFSender,\n  associated to a specific MediaStreamTrack,\n  that will be able to send DTMF phone signaling over the connection.\n  \n  Returns the MediaStream with the given id\n  that is associated with local or remote end of the connection.\n  This property has been replaced\n  with the getSenders()\n  and getReceivers() methods.\n  \n  Removes a MediaStream as a local source of audio or video.\n  Because this method is obsolete,\n  you should instead use removeTrack().\n  Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.Sent when the overall connectivity status of the RTCPeerConnection changes.Sent when the remote peer adds an RTCDataChannel to the connection.Sent to request that the specified candidate be transmitted to the remote peer.Sent to the connection if an error occurred during ICE candidate gathering. The event describes the error.Sent when the state of the ICE connection changes, such as when it disconnects.\n  Sent when the ICE layer's gathering state, reflected by iceGatheringState, changes.\n  This indicates whether ICE negotiation has not yet begun (new),\n  has begun gathering candidates (gathering),\n  or has completed (complete).\n  \n  Sent when negotiation or renegotiation of the ICE connection needs to be performed;\n  this can happen both when first opening a connection\n  as well as when it is necessary to adapt to changing network conditions.\n  The receiver should respond by creating an offer and sending it to the other peer.\n  Sent when the connection's ICE signaling state changes.\n  Sent after a new track has been added\n  to one of the RTCRtpReceiver instances which comprise the connection.\n  \n  Sent when a new MediaStream has been added to the connection.\n  Instead of listening for this obsolete event,\n  you should listen for track events;\n  one is sent for each MediaStreamTrack added to the connection.\n  \n  Sent when a MediaStream is removed from the connection.\n  Instead of listening for this obsolete event,\n  you should listen for removetrack events on each stream.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection"
},
{
	"api_id": "698",
	"name": "RTCPeerConnectionIceErrorEvent",
	"description": "The RTCPeerConnectionIceErrorEvent interface—based upon the Event interface—provides details pertaining to an ICE error announced by sending an icecandidateerror event to the RTCPeerConnection object.Creates and returns a new RTCPeerConnectionIceErrorEvent object, with its type and other properties initialized as specified in the parameters. You will not normally create an object of this type yourself.The RTCPeerConnectionIceErrorEvent interface includes the properties found on the Event interface, as well as the following properties:A string providing the local IP address used to communicate with the STUN or TURN server being used to negotiate the connection, or null if the local IP address has not yet been exposed as part of a local ICE candidate.An unsigned integer value stating the numeric STUN error code returned by the STUN or TURN server. If no host candidate can reach the server, this property is set to the number 701, which is outside the range of valid STUN error codes. The 701 error is fired only once per server URL, and only while the icegatheringstate is gathering.A string containing the STUN reason text returned by the STUN or TURN server. If communication with the STUN or TURN server couldn't be established at all, this string will be a browser-specific string explaining the error.An unsigned integer value giving the port number over which communication with the STUN or TURN server is taking place, using the IP address given in address. null if the connection hasn't been established (that is, if address is null).A string indicating the URL of the STUN or TURN server with which the error occurred.RTCPeerConnectionIceErrorEvent has no methods other than any provided by the parent interface, Event.TBD",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent"
},
{
	"api_id": "699",
	"name": "RTCPeerConnectionIceEvent",
	"description": "The RTCPeerConnectionIceEvent interface represents events that occur in relation to ICE candidates with the target, usually an RTCPeerConnection.Only one event is of this type: icecandidate.A RTCPeerConnectionIceEvent being an Event, this event also implements these properties.Contains the RTCIceCandidate containing the candidate associated with the event, or null if this event indicates that there are no further candidates to come.Returns a new RTCPeerConnectionIceEvent. It takes two parameters, the first being a string representing the type of the event; the second a dictionary containing the RTCIceCandidate it refers to.A RTCPeerConnectionIceEvent being an Event, this event also implements these properties. There is no specific RTCDataChannelEvent method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent"
},
{
	"api_id": "700",
	"name": "RTCRemoteOutboundRtpStreamStats",
	"description": "The WebRTC statistics model's RTCRemoteOutboundRtpStreamStats dictionary extends the underlying RTCSentRtpStreamStats dictionary with properties measuring metrics specific to outgoing RTP streams.In addition to the properties defined by RTCSentRtpStreamStats and its underlying RTCRtpStreamStats and RTCStats dictionaries, RTCRemoteOutboundRtpStreamStats defines the following properties.A string which is used to find the local RTCInboundRtpStreamStats object which shares the same Synchronization Source (SSRC).A DOMHighResTimeStamp specifying the timestamp (on the remote device) at which the statistics in the RTCRemoteOutboundRtpStreamStats object were sent by the remote endpoint. This is different from the timestamp found in the base RTCStats dictionary; it represents the time at which the object's statistics were received or generated by the local endpoint.The RTCRemoteOutboundRtpStreamStats object's remoteTimestamp property provides statistics based on the received data's NTP timestamp taken from an RTCP Sender Report (SR) block. Be aware that the remote clock may not be synchronized with the local clock (either in current time or speed at which time elapses).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRemoteOutboundRtpStreamStats"
},
{
	"api_id": "701",
	"name": "RTCRtcpParameters",
	"description": "The RTCRtcpParameters dictionary provides parameters of an RTCP connection. It's used as the value of the rtcp property of the parameters of an RTCRtpSender or RTCRtpReceiver.The Canonical Name (CNAME) being used by RTCP. This is used, for example, in SDES (SDP security descriptions) messages, described in RFC 4568. This property cannot be changed once initialized.A Boolean value indicating whether or not reduced size RTCP is configured. If this value is true, reduced size RTCP (described in RFC 5506) is in effect. If false, compound RTCP is in use, as found in RFC 3550. This property cannot be changed once initialized.This example obtains the canonical name (CNAME) being used for RTCP on an RTCRtpSender or RTCRtpReceiver.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtcpParameters"
},
{
	"api_id": "702",
	"name": "RTCRtpCapabilities",
	"description": "The RTCRtpCapabilities dictionary is a data type used to describe the capabilities of an RTCRtpSender or RTCRtpReceiver in response to a call to the RTCRtpSender.getCapabilities() or RTCRtpReceiver.getCapabilities() static functions, both of which return an array of RTCRtpCapabilities objects.An RTCRtpCapabilities object contains an array of objects conforming to RTCRtpCodecCapability (each describing the capabilities of one codec) and an array of the supported RTP header extensions for that codec.An array of RTCRtpCodecCapability objects, each describing one of the codecs supported by the RTCRtpSender or RTCRtpReceiver. There are some special entries in this array, described below in the section The codecs array.An array of objects conforming to the RTCRtpHeaderExtensionCapability dictionary. Each object contains a single string, uri, specifying the URI of the header extension, as described in RFC 5285.The codecs array is an array of objects conforming to the dictionary RTCRtpCodecCapability. Each of these objects describes a single codec and its basic capabilities.The browser will only report distinct capability combinations separately. If two sets of capabilities can be described as one, they will be. That means that, for instance, if there are two entries for the H.264 codec (as identified by the mimeType being "video/H264"), there are other values in the capabilities objects indicating how they're different in some way.Note: The MIME type strings used by RTP differ from those used elsewhere. See RFC 3555, section 4 for the complete IANA registry of these types.There are three special entries that should always be present, representing underlying components of the transport. Those components are:The media type of an RED entry may vary due to there being several versions of it, but it will end with red, such as video/red or video/fwdred. The base RED standard can be found in RFC 2198. There may be multiple entries for RED if different forms are supported; each will have a unique media type in that case.An FEC component handles error correction data; its media type may also vary due to there being advanced versions of the standard available, but it will always end with fec. One possible value is video/ulpfec (a generic error connection model). There may also be multiple FEC entries if more than one form is supported.This component is responsible for retransmission of data; it's media type should be video/rtx. There will only be one entry for RTX, and it will not have an sdpFmtpLine property.Don't be surprised to see these show up ijn the list; be prepared to ignore them if you're only interested in the actual codecs used for the media itself.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpCapabilities"
},
{
	"api_id": "703",
	"name": "RTCRtpCodecCapability",
	"description": "The WebRTC API's RTCRtpCodecCapability dictionary provides information describing the capabilities of a single media codec.An unsigned integer value indicating the maximum number of channels supported by the codec; for example, a codec that supports only mono sound would have a value of 1; stereo codecs would have a 2, etc.An unsigned long integer specifying the codec's clock rate in Hertz (Hz). The IANA maintains a list of codecs and their parameters, including their clock rates.A string indicating the codec's MIME media type and subtype. See Codecs used by WebRTC for details about potential codecs that might be referenced here.A string giving the format specific parameters field from the a=fmtp line in the SDP which corresponds to the codec, if such a line exists. If there is no parameters field, this property is left out.RTCRtpCodecCapabilities describes the basic parameters for a single codec supported by the user's device. An array of objects of this type is returned in the codecs property of the RTCRtpCapabilities object returned in response to a call to either of the static functions RTCRtpSender.getCapabilities() or RTCRtpReceiver.getCapabilities().TBD",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpCodecCapability"
},
{
	"api_id": "704",
	"name": "RTCRtpCodecParameters",
	"description": "The RTCRtpCodecParameters dictionary, part of the WebRTC API, is used to describe the configuration parameters for a single media codec.In addition to being the type of the RTCRtpParameters.codecs property, it's used when calling RTCRtpTransceiver.setCodecPreferences() to configure a transceiver's codecs before beginning the offer/answer process to establish a WebRTC peer connection.Most of the fields in this property take values which are defined and maintained by the Internet Assigned Numbers Authority (IANA). References to relevant IANA documents are provided in the see also section at the end of this article.The RTP payload type used to identify this codec.The codec's MIME media type and subtype specified as a string of the form "type/subtype". IANA maintains a registry of valid MIME types.An unsigned long integer value specifying the codec's clock rate in hertz (Hz). The clock rate is the rate at which the codec's RTP timestamp advances. Most codecs have specific values or ranges of values they permit; see the IANA payload format media type registry for details.An unsigned short integer indicating the number of channels the codec should support. For example, for audio codecs, a value of 1 specifies monaural sound while 2 indicates stereo.A string containing the format-specific parameters field from the "a=fmtp" line in the codec's SDP, if one is present; see section 5.8 of the IETF specification for JSEP.Note: On an RTCRtpReceiver, the format-specific parameters come from the SDP sent by the remote peer, while for RTCRtpSender, they're provided by the local description.The IANA document providing registries of permitted values for the RTP parameters used by this dictionary.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpCodecParameters"
},
{
	"api_id": "705",
	"name": "RTCRtpContributingSource",
	"description": "The RTCRtpContributingSource dictionary of the WebRTC API is used by getContributingSources() to provide information about a given contributing source (CSRC), including the most recent time a packet that the source contributed was played out.The information provided is based on the last ten seconds of media received.A double-precision floating-point value between 0 and 1 specifying the audio level contained in the last RTP packet played from this source.The RTP timestamp of the media played out at the time indicated by timestamp. This value is a source-generated time value which can be used to help with sequencing and synchronization.A 32-bit unsigned integer value specifying the CSRC identifier of the contributing source.A DOMHighResTimeStamp indicating the most recent time at which a frame originating from this source was delivered to the receiver's MediaStreamTrack",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpContributingSource"
},
{
	"api_id": "706",
	"name": "RTCRtpEncodingParameters",
	"description": "An instance of the WebRTC API's RTCRtpEncodingParameters dictionary describes a single configuration of a codec for an RTCRtpSender.This dictionary is used in the RTCRtpSendParameters describing the configuration of an RTP sender's encodings; RTCRtpDecodingParameters is used to describe the configuration of an RTP receiver's encodings.If true, the described encoding is currently actively being used. That is, for RTP senders, the encoding is currently being used to send data, while for receivers, the encoding is being used to decode received data. The default value is true.When describing a codec for an RTCRtpSender, codecPayloadType is a single 8-bit byte (or octet) specifying the codec to use for sending the stream; the value matches one from the owning RTCRtpParameters object's codecs parameter. This value can only be set when creating the transceiver; after that, this value is read only.Only used for an RTCRtpSender whose kind is audio, this property indicates whether or not to use discontinuous transmission (a feature by which a phone is turned off or the microphone muted automatically in the absence of voice activity). The value is taken either enabled or disabled.An unsigned long integer indicating the maximum number of bits per second to allow for this encoding. Other parameters may further constrain the bit rate, such as the value of maxFramerate or transport or physical network limitations.A value specifying the maximum number of frames per second to allow for this encoding.An unsigned long integer value indicating the preferred duration of a media packet in milliseconds. This is typically only relevant for audio encodings. The user agent will try to match this as well as it can, but there is no guarantee.A string which, if set, specifies an RTP stream ID (RID) to be sent using the RID header extension. This parameter cannot be modified using setParameters(). Its value can only be set when the transceiver is first created.Only used for senders whose track's kind is video, this is a double-precision floating-point value specifying a factor by which to scale down the video during encoding. The default value, 1.0, means that the sent video's size will be the same as the original. A value of 2.0 scales the video frames down by a factor of 2 in each dimension, resulting in a video 1/4 the size of the original. The value must not be less than 1.0 (you can't use this to scale the video up).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters"
},
{
	"api_id": "707",
	"name": "RTCRtpParameters",
	"description": "The RTCRtpParameters dictionary is the basic object describing the parameters of an RTP transport. It is extended separately for senders and receivers in the form of the RTCRtpSendParameters and RTCRtpReceiveParameters dictionaries.To obtain the parameters of a sender or receiver, call its getParameters() method:An array of RTCRtpCodecParameters objects describing the set of codecs from which the sender or receiver will choose. This parameter cannot be changed once initially set.An array of zero or more RTP header extensions, each identifying an extension supported by the sender or receiver. Header extensions are described in RFC 3550, section 5.3.1. This parameter cannot be changed once initially set.An RTCRtcpParameters object providing the configuration parameters used for RTCP on the sender or receiver. This parameter cannot be changed once initially set.This example obtains the canonical name (CNAME) being used for RTCP on an RTCRtpSender or RTCRtpReceiver.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpParameters"
},
{
	"api_id": "708",
	"name": "RTCRtpReceiveParameters",
	"description": "The RTCRtpReceiveParameters dictionary, based upon the RTCRtpParameters dictionary, is returned by the RTCRtpReceiver method getParameters(). It describes the parameters being used by the receiver's RTP connection to the remote peer.This dictionary currently has no properties of its own; it exists for future expansion. It inherits all of the properties of its parent, RTCRtpParameters.See RTCRtpReceiver.getParameters() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiveParameters"
},
{
	"api_id": "709",
	"name": "RTCRtpReceiver",
	"description": "The RTCRtpReceiver interface of the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.Returns the MediaStreamTrack associated with the current RTCRtpReceiver instance.Returns the RTCDtlsTransport instance over which the media for the receiver's track is received.This property has been removed; the RTP and RTCP transports have been combined into a single transport. Use the transport property instead.Returns an array of RTCRtpContributingSource instances for each unique CSRC (contributing source) identifier received by the current RTCRtpReceiver in the last ten seconds.Returns an RTCRtpParameters object which contains information about how the RTC data is to be decoded.Returns a Promise whose fulfillment handler receives a RTCStatsReport which contains statistics about the incoming streams and their dependencies.Returns an array including one RTCRtpSynchronizationSource instance for each unique SSRC (synchronization source) identifier received by the current RTCRtpReceiver in the last ten seconds.Returns the most optimistic view of the capabilities of the system for receiving media of the given kind.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver"
},
{
	"api_id": "710",
	"name": "RTCRtpSender",
	"description": "The RTCRtpSender interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.With it, you can configure the encoding used for the corresponding track, get information about the device's media capabilities, and so forth. You can also obtain access to an RTCDTMFSender which can be used to send DTMF codes (to simulate the user pressing buttons on a telephone's dial pad) to the remote peer.An RTCDTMFSender which can be used to send DTMF tones using telephone-event payloads on the RTP session represented by the RTCRtpSender object. If null, the track and/or the connection doesn't support DTMF. Only audio tracks can support DTMF.The MediaStreamTrack which is being handled by the RTCRtpSender. If track is null, the RTCRtpSender doesn't transmit anything.The RTCDtlsTransport over which the sender is exchanging the RTP and RTCP packets used to manage transmission of media and control data. This value is null until the transport is established. When bundling is in use, more than transceiver may be sharing the same transport object.This property has been removed; the RTP and RTCP transports have been combined into a single transport. Use the transport property instead.Returns a RTCRtpParameters object describing the current configuration for the encoding and transmission of media on the track.Returns a Promise which is fulfilled with a RTCStatsReport which provides statistics data for all outbound streams being sent using this RTCRtpSender.Applies changes to parameters which configure how the track is encoded and transmitted to the remote peer.Sets the MediaStream(s) associated with the track being transmitted by this sender.Attempts to replace the track currently being sent by the RTCRtpSender with another track, without performing renegotiation. This method can be used, for example, to toggle between the front- and rear-facing cameras on a device.Returns an RTCRtpCapabilities object describing the system's capabilities for sending a specified kind of media data.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender"
},
{
	"api_id": "711",
	"name": "RTCRtpSendParameters",
	"description": "The WebRTC API's RTCRtpSendParameters dictionary is used to specify the parameters for an RTCRtpSender when calling its setParameters() method.In addition to the properties below, RTCRtpSendParameters inherits the properties from the RTCRtpParameters interface.An array of RTCRtpEncodingParameters objects, each specifying the parameters for a single codec that could be used to encode the track's media.A string containing a unique ID for the last set of parameters applied; this value is used to ensure that setParameters() can only be called to alter changes made by a specific previous call to getParameters(). Once this parameter is initially set, it cannot be changed.Specifies the preferred way the WebRTC layer should handle optimizing bandwidth against quality in constrained-bandwidth situations; the possible values are maintain-framerate, maintain-resolution, or balanced. The default value is balanced.A string that indicates the encoding's priority. It is one of: very-low, low, medium, or high. The default value is low.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSendParameters"
},
{
	"api_id": "712",
	"name": "RTCRtpStreamStats",
	"description": "The RTCRtpStreamStats dictionary is returned by the RTCPeerConnection.getStats(), RTCRtpSender.getStats(), and RTCRtpReceiver.getStats() methods to provide detailed statistics about WebRTC connectivity.While the dictionary has a base set of properties that are present in each of these cases, there are also additional properties added depending on which interface the method is called on.RTCRtpStreamStats is the base class for all RTP-related statistics reports. It's based on RTCStats and adds the following additional fields.Note: This interface was called RTCRTPStreamStats until a specification update in the spring of 2017. Check the Browser compatibility table to know if and when the name change was implemented in specific browsers.The RTCRtpStreamStats dictionary is based on RTCStats, and inherits its properties. In addition, some or all of the following properties are available.A string which uniquely identifies the object which was inspected to produce the RTCCodecStats object associated with this RTP stream.A string whose value is "audio" if the associated MediaStreamTrack is audio-only or "video" if the track contains video. This value will match that of the media type indicated by RTCCodecStats.codec, as well as the track's kind property. Previously called mediaType.The 32-bit integer which identifies the source of the RTP packets this RTCRtpStreamStats object covers. This value is generated per the RFC 3550 specification.A string which uniquely identifies the RTCMediaStreamTrackStats object representing the associated MediaStreamTrack. This is not the same as the value of MediaStreamTrack.id.A string uniquely identifying the object which was inspected to produce the RTCTransportStats object associated with this RTP stream.Renamed to kind in the specification in February 2018. See Browser compatibility in RTCRtpStreamStats.kind to determine when browsers made the transition.These properties are computed locally, and are only available to the device receiving the media stream. Their primary purpose is to examine the error resiliency of the connection, as they provide information about lost packets, lost frames, and how heavily compressed the data is.A count of the total number of Full Intra Request (FIR) packets received by the sender. This statistic is only available to the device which is receiving the stream and is only available for video tracks. A FIR packet is sent by the receiving end of the stream when it falls behind or has lost packets and is unable to continue decoding the stream; the sending end of the stream receives the FIR packet and responds by sending a full frame instead of a delta frame, thereby letting the receiver "catch up." The higher this number is, the more often a problem of this nature arose, which can be a sign of network congestion or an overburdened receiving device.The number of times the receiver notified the sender that one or more RTP packets has been lost by sending a Negative ACKnowledgement (NACK, also called "Generic NACK") packet to the sender. This value is only available to the receiver.The number of times the receiving end of the stream sent a Picture Loss Indication (PLI) packet to the sender, indicating that it has lost some amount of encoded video data for one or more frames. Only the receiver has this value, and it's only valid for video tracks.The sum of the Quantization Parameter (QP) values associated with every frame received to date on the video track described by this RTCRtpStreamStats object. In general, the higher this number is, the more heavily compressed the video track was. Combined with RTCReceivedRtpStreamStats.framesDecoded or RTCSentRtpStreamStats.framesEncoded, you can approximate the average QP over those frames, keeping in mind that codecs often vary the quantizer values even within frames. Also keep in mind that the values of QP can vary from codec to codec, so this value is only potentially useful when compared against the same codec.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpStreamStats"
},
{
	"api_id": "713",
	"name": "RTCRtpTransceiver",
	"description": "The WebRTC interface RTCRtpTransceiver describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.Each SDP media section describes one bidirectional SRTP ("Secure Real Time Protocol") stream (excepting the media section for RTCDataChannel, if present). This pairing of send and receive SRTP streams is significant for some applications, so RTCRtpTransceiver is used to represent this pairing, along with other important state from the media section. Each non-disabled SRTP media section is always represented by exactly one transceiver.A transceiver is uniquely identified using its mid property, which is the same as the media ID (mid) of its corresponding m-line. An RTCRtpTransceiver is associated with an m-line if its mid is non-null; otherwise it's considered disassociated.A read-only string which indicates the transceiver's current directionality, or null if the transceiver is stopped or has never participated in an exchange of offers and answers. To change the transceiver's directionality, set the value of the direction property.A string which is used to set the transceiver's desired direction.The media ID of the m-line associated with this transceiver. This association is established, when possible, whenever either a local or remote description is applied. This field is null if neither a local or remote description has been applied, or if its associated m-line is rejected by either a remote offer or any answer.The RTCRtpReceiver object that handles receiving and decoding incoming media.The RTCRtpSender object responsible for encoding and sending data to the remote peer.Indicates whether or not sending and receiving using the paired RTCRtpSender and RTCRtpReceiver has been permanently disabled, either due to SDP offer/answer, or due to a call to stop().A list of RTCRtpCodecParameters objects which override the default preferences used by the user agent for the transceiver's codecs.Permanently stops the RTCRtpTransceiver. The associated sender stops sending data, and the associated receiver likewise stops receiving and decoding incoming data.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver"
},
{
	"api_id": "714",
	"name": "RTCSctpTransport",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (DTLS) transport over which SCTP packets for all of an RTCPeerConnection's data channels are sent and received.You don't create RTCSctpTransport objects yourself; instead, you get access to the RTCSctpTransport for a given RTCPeerConnection through its sctp property.Possibly the most useful property on this interface is its maxMessageSize property, which you can use to determine the upper limit on the size of messages you can send over a data channel on the peer connection.Also inherits properties from: EventTargetAn integer value indicating the maximum number of RTCDataChannels that can be open simultaneously.An integer value indicating the maximum size, in bytes, of a message which can be sent using the RTCDataChannel.send() method.A string enumerated value indicating the state of the SCTP transport.An RTCDtlsTransport object representing the DTLS transport used for the transmission and receipt of data packets.Fired when the RTCSctpTransport.state changes.This interface has no methods, but inherits methods from: EventTargetTBD",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport"
},
{
	"api_id": "715",
	"name": "RTCSessionDescription",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The RTCSessionDescription interface describes one end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.The process of negotiating a connection between two peers involves exchanging RTCSessionDescription objects back and forth, with each description suggesting one combination of connection configuration options that the sender of the description supports. Once the two peers agree upon a configuration for the connection, negotiation is complete.The RTCSessionDescription interface doesn't inherit any properties.An enum describing the session description's type.A string containing the SDP describing the session.The RTCSessionDescription doesn't inherit any methods.This constructor returns a new RTCSessionDescription. The parameter is a RTCSessionDescriptionInit dictionary containing the values to assign the two properties.Returns a JSON description of the object. The values of both properties, type and sdp, are contained in the generated JSON.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription"
},
{
	"api_id": "716",
	"name": "RTCStats",
	"description": "The RTCStats dictionary is the basic statistics object used by WebRTC's statistics monitoring model, providing the properties required of all statistics data objects.Specific classes of statistic are defined as dictionaries based on RTCStats. For example, statistics about a received RTP stream are represented by RTCReceivedRtpStreamStats.A string which uniquely identifies the object which was inspected to produce this object based on RTCStats.A DOMHighResTimeStamp object indicating the time at which the sample was taken for this statistics object.A string indicating the type of statistics the object contains.The various dictionaries that are used to define the contents of the objects that contain each of the various types of statistics for WebRTC are structured in such a way that they build upon the core RTCStats dictionary, each layer adding more relevant information.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCStats"
},
{
	"api_id": "717",
	"name": "RTCStatsReport",
	"description": "The RTCStatsReport interface provides a statistics report obtained by calling one of the RTCPeerConnection.getStats(), RTCRtpReceiver.getStats(), and RTCRtpSender.getStats() methods.This statistics report contains a mapping of statistic category string names to objects containing the corresponding statistics data.Calling getStats() on an RTCPeerConnection lets you specify whether you wish to obtain statistics for outbound, inbound, or all streams on the connection. The RTCRtpReceiver and RTCRtpSender versions of getStats() specifically only return statistics available to the incoming or outgoing stream on which you call them.For each category of statistic information, there is a dictionary whose properties provide the relevant information.All WebRTC statistics objects are fundamentally based on the RTCStats dictionary, which provides the most fundamental information: the timestamp, the statistic type string, and an ID uniquely identifying the source of the data.The type gives the name of the statistic category represented by the object, and is how you locate the specific type of data you need.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport"
},
{
	"api_id": "718",
	"name": "RTCTrackEvent",
	"description": "The WebRTC API interface RTCTrackEvent represents the track event, which is sent when a new MediaStreamTrack is added to an RTCRtpReceiver which is part of the RTCPeerConnection.The target is the RTCPeerConnection object to which the track is being added.This event is sent by the WebRTC layer to the web site or application, so you will not typically need to instantiate an RTCTrackEvent yourself.Creates and returns a new RTCTrackEvent object, initialized with properties taken from the specified RTCTrackEventInit dictionary. You will probably not need to create new track events yourself, since they're typically created by the WebRTC infrastructure and sent to the connection's ontrack event handler.Since RTCTrackEvent is based on Event, its properties are also available.The RTCRtpReceiver used by the track that's been added to the RTCPeerConnection.An array of MediaStream objects, each representing one of the media streams to which the added track belongs. By default, the array is empty, indicating a streamless track.The MediaStreamTrack which has been added to the connection.The RTCRtpTransceiver being used by the new track.There is only one type of track event.The track event is sent to the RTCPeerConnection when a new track has been added to the connection. By the time the track event is delivered to the RTCPeerConnection's ontrack handler, the new media has completed its negotiation for a specific RTCRtpReceiver (which is specified by the event's receiver property).In addition, the MediaStreamTrack specified by the receiver's track is the same one specified by the event's track, and the track has been added to any associated remote MediaStream objects.You can add a track event listener to be notified when the new track is available so that you can, for example, attach its media to a <video> element, using either RTCPeerConnection.addEventListener() or the ontrack event handler property.Note: It may be helpful to keep in mind that you receive the track event when a new inbound track has been added to your connection, and you call addTrack() to add a track to the far end of the connection, thereby triggering a track event on the remote peer.This simple example creates an event listener for the track event which sets the srcObject of the <video> element with the ID videobox to the first stream in the list passed in the event's streams array.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent"
},
{
	"api_id": "719",
	"name": "Sanitizer",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n  The Sanitizer interface of the HTML Sanitizer API provides methods to sanitize untrusted strings of HTML, Document and DocumentFragment objects.\n  After sanitization, unwanted elements or attributes are removed, and the returned objects can safely be inserted into a document's DOM.\nA Sanitizer object is also used by the Element.setHTML() method to parse and sanitize a string of HTML, and immediately insert it into an element.\n  The default configuration strips out XSS-relevant input by default, including <script> tags, custom elements, and comments.\n  This configuration may be customized using constructor options.\nCreates and returns a Sanitizer object, optionally with custom sanitization behavior.Returns a sanitized DocumentFragment from an input Document or DocumentFragmentParses a string of HTML in the context a particular element, and returns an HTML element of that type containing the sanitized subtree.For examples see the HTML Sanitizer API and the individual methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Sanitizer"
},
{
	"api_id": "720",
	"name": "Scheduler",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Scheduler interface of the Prioritized Task Scheduling API provides the Scheduler.postTask() method that can be used for adding prioritized tasks to be scheduled.A Scheduler can be accessed from the global object Window or WorkerGlobalScope (this.scheduler).None.Adds a task to the scheduler as a callback, optionally specifying a priority, delay, and/or a signal for aborting the task.\n  If the feature is defined, an instance of this object is returned by the global this in both workers and the main thread.\n  The only property of the interface is the postTask() method, which is used to post the task and returns a promise.\n\n  The code below shows a simple task that resolves with the text 'Task executing'.\n  This text is logged on success.\n  The code also shows a catch block, which would be required in more complex code to handle when a task is aborted or throws an error.\nFor more comprehensive example code see Prioritized Task Scheduling API > Examples.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Scheduler"
},
{
	"api_id": "721",
	"name": "Screen",
	"description": "The Screen interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.Also inherits properties from its parent EventTarget.Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.Returns the first available pixel available from the left side of the screen.Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.Returns the amount of horizontal space in pixels available to the window.Returns the color depth of the screen.Returns the height of the screen in pixels.Returns the distance in pixels from the left side of the main screen to the left side of the current screen.Returns the ScreenOrientation instance associated with this screen.Gets the bit depth of the screen.Returns the distance in pixels from the top side of the current screen.Returns the width of the screen.Boolean. Setting to false will turn off the device's screen.Controls the brightness of a device's screen. A double between 0 and 1.0 is expected.Also inherits methods from its parent EventTarget.Lock the screen orientation (only works in fullscreen or for installed apps)Unlock the screen orientation (only works in fullscreen or for installed apps)Fires when the screen orientation changes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Screen"
},
{
	"api_id": "722",
	"name": "ScreenOrientation",
	"description": "The ScreenOrientation interface of the Screen Orientation API provides information about the current orientation of the document.A ScreenOrientation instance object can be retrieved using the screen.orientation property.Returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".Returns the document's current orientation angle.The event handler called whenever the screen changes orientation.Locks the orientation of the containing document to its default orientation and returns a Promise.Unlocks the orientation of the containing document from its default orientation.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation"
},
{
	"api_id": "723",
	"name": "ScriptProcessorNode",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The ScriptProcessorNode interface allows the generation, processing, or analyzing of audio using JavaScript.Note: This feature was replaced by AudioWorklets and the AudioWorkletNode interface.The ScriptProcessorNode interface is an AudioNode audio-processing module that is linked to two buffers, one containing the input audio data, one containing the processed output audio data. An event, implementing the AudioProcessingEvent interface, is sent to the object each time the input buffer contains new data, and the event handler terminates when it has filled the output buffer with data.\n  \nThe size of the input and output buffer are defined at the creation time, when the BaseAudioContext.createScriptProcessor method is called (both are defined by BaseAudioContext.createScriptProcessor's bufferSize parameter). The buffer size must be a power of 2 between 256 and 16384, that is 256, 512, 1024, 2048, 4096, 8192 or 16384. Small numbers lower the latency, but large number may be necessary to avoid audio breakup and glitches.If the buffer size is not defined, which is recommended, the browser will pick one that its heuristic deems appropriate.Inherits properties from its parent, AudioNode.Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range 256–16384.No specific methods; inherits methods from its parent, AudioNode.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface:\n  Fired when an input buffer of a ScriptProcessorNode is ready to be processed.\n  Also available via the onaudioprocess event handler property.\n  See BaseAudioContext.createScriptProcessor() for example code.Since the August 29 2014 Web Audio API specification publication, this feature has been deprecated. It is no longer on track to become a standard.It was replaced by AudioWorklets and the AudioWorkletNode interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode"
},
{
	"api_id": "724",
	"name": "SecurityPolicyViolationEvent",
	"description": "The SecurityPolicyViolationEvent interface inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.Creates a new SecurityPolicyViolationEvent object instance.A string representing the URI of the resource that was blocked because it violates a policy.The column number in the document or worker at which the violation occurred.Indicates how the violated policy is configured to be treated by the user agent. This will be "enforce" or "report".A string representing the URI of the document or worker in which the violation was found.A string representing the directive whose enforcement uncovered the violation.The line number in the document or worker at which the violation occurred.A string containing the policy whose enforcement uncovered the violation.A string representing the referrer of the resources whose policy was violated. This will be a URL or null.A string representing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style — external resources causing a violation will not generate a sample.A string representing the URI of the document or worker in which the violation was found.A number representing the HTTP status code of the document or worker in which the violation occurred.A string representing the directive whose enforcement uncovered the violation.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent"
},
{
	"api_id": "725",
	"name": "Selection",
	"description": "A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or manipulation, call window.getSelection().A user may make a selection from left to right (in document order) or right to left (reverse of document order). The anchor is where the user began the selection and the focus is where the user ends the selection. If you make a selection with a desktop mouse, the anchor is placed where you pressed the mouse button, and the focus is placed where you released the mouse button.Note: Anchor and focus should not be confused with the start and end positions of a selection. The anchor can be placed before the focus or vice-versa, depending on the direction you made your selection.Returns the Node in which the selection begins. Can return null if selection never existed in the document (e.g., an iframe that was never clicked on).Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.Returns the Node in which the selection ends. Can return null if selection never existed in the document (for example, in an iframe that was never clicked on).Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.Returns a Boolean indicating whether the selection's start and end points are at the same position.Returns the number of ranges in the selection.Returns a string describing the type of the current selection.A Range object that will be added to the selection.Collapses the current selection to a single point.Collapses the selection to the end of the last range in the selection.Collapses the selection to the start of the first range in the selection.Indicates if a certain node is part of the selection.Deletes the selection's content from the document.Moves the focus of the selection to a specified point.Returns a Range object representing one of the ranges currently selected.Changes the current selection.Removes a range from the selection.Removes all ranges from the selection.Adds all the children of the specified node to the selection.Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.Returns a string currently being represented by the selection object, i.e. the currently selected text.Calling the Selection.toString() method returns the text contained within the selection, e.g.:Note that using a selection object as the argument to window.alert will call the object's toString method.A selection object represents the Ranges that the user has selected. Typically, it holds only one range, accessed as follows:As the Selection API specification notes, the Selection API was initially created by Netscape and allowed multiple ranges (for instance, to allow the user to select a column from a <table>). However, browsers other than Gecko did not implement multiple ranges, and the specification also requires the selection to always have a single range.Selection and input focus (indicated by Document.activeElement) have a complex relationship that varies by browser. In cross-browser compatible code, it's better to handle them separately.Safari and Chrome (unlike Firefox) currently focus the element containing selection when modifying the selection programmatically; it's possible that this may change in the future (see W3C bug 14383 and WebKit bug 38696).The Selection API has a common behavior (i.e., shared between browsers) that governs how focus behavior changes for editing hosts after certain methods are called.The behavior is as follows:Note: The Selection API methods may only move focus to an editing host, not to other focusable elements (e.g., <a>).The above behavior applies to selections made using the following methods:And when the Range is modified using the following methods:Other key terms used in this section.The anchor of a selection is the beginning point of the selection. When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed. As the user changes the selection using the mouse or the keyboard, the anchor does not move.An editable element (e.g., an HTML element with contenteditable set, or the HTML child of a document that has designMode enabled).The focus of a selection is the end point of the selection. When making a selection with a mouse, the focus is where in the document the mouse button is released. As the user changes the selection using the mouse or the keyboard, the focus is the end of the selection that moves.Note: This is not the same as the focused element of the document, as returned by document.activeElement.A range is a contiguous part of a document. A range can contain entire nodes as well as portions of nodes (such as a portion of a text node). A user will normally only select a single range at a time, but it's possible for a user to select multiple ranges (e.g., by using the Control key). A range can be retrieved from a selection as a range object. Range objects can also be created via the DOM and programmatically added or removed from a selection.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Selection"
},
{
	"api_id": "726",
	"name": "self.crypto",
	"description": "The global read-only crypto property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.\n  Although the property itself is read-only, all of its methods (and the methods of its\n  child object, SubtleCrypto) are not read-only, and therefore vulnerable\n  to attack by polyfill.\nAlthough crypto is available on all windows, the returned Crypto object only has one usable feature in insecure contexts: the getRandomValues() method. In general, you should use this API only in secure contexts.An instance of the Crypto interface, providing access to general-purpose cryptography and a strong random-number generator.This example uses the crypto property to access the getRandomValues() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/crypto_property"
},
{
	"api_id": "727",
	"name": "self.performance",
	"description": "The global performance property returns a Performance object, which can be used to gather performance information about the current document. It serves as the point of exposure for the Performance Timeline API, the High Resolution Time API, the Navigation Timing API, the User Timing API, and the Resource Timing API.\n  A Performance object offering access to the performance and\n  timing-related information offered by the APIs it exposes.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/performance_property"
},
{
	"api_id": "728",
	"name": "Sensor",
	"description": "The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces. This interface cannot be used directly. Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.If a feature policy blocks use of a feature it is because your code is inconsistent with the policies set on your server. This is not something that would ever be shown to a user. The Feature-Policy HTTP header article contains implementation instructions.When initially created, the Sensor object is idle, meaning it does not take measures. Once the start()} method is called, it prepares itself to read data and, once ready, the activate event is sent and the sensor becomes activated. It then sends a reading event each time new data is available.In case of an error, the error event is sent, reading stops, and the Sensor object becomes idle again. The start()} method needs to be called again before it can read further data.Below is a list of interfaces based on the Sensor interface.Returns a boolean value indicating whether the sensor is active.Returns a boolean value indicating whether the sensor has a reading.Returns the time stamp of the latest sensor reading.Activates one of the sensors based on Sensor.Deactivates one of the sensors based on Sensor.Fired when a sensor becomes activated.Fired when an exception occurs on a sensor.Fired when a new reading is available on a sensor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Sensor"
},
{
	"api_id": "729",
	"name": "SensorErrorEvent",
	"description": "The SensorErrorEvent interface of the Sensor APIs provides information about errors thrown by a Sensor or derived interface.Creates a new SensorErrorEvent object.Returns the DOMException object passed in the event's constructor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SensorErrorEvent"
},
{
	"api_id": "730",
	"name": "Serial",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The Serial interface of the Web Serial API provides attributes and methods for finding and connecting to serial ports from a web page.Returns a Promise that resolves with an instance of SerialPort representing the device chosen by the user or rejects if no device was selected.This method must be called with user activation.\n  Returns a Promise that resolves with an array of SerialPort objects representing serial ports connected to\n  the host which the origin has permission to access.\n  The following events are available to Serial via event bubbling from SerialPort:An event fired when a port has been connected to the device.An event fired when a port has been disconnected from the device.The following example shows how a site can check for available ports and allow the user to grant it permission to access additional ports.On load event listeners are added for the connect and disconnect events so that the site can react when a device is connected or disconnected from the system. The getPorts() method is then called to see which ports are connected that the site already has access to.If the site doesn't have access to any connected ports it has to wait until it has user activation to proceed. In this example we use a click event handler on a button for this task. A filter is passed to requestPort() with a USB vendor ID in order to limit the set of devices shown to the user to only USB devices built by a particular manufacturer.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Serial"
},
{
	"api_id": "731",
	"name": "SerialPort",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The SerialPort interface of the Web Serial API provides access to a serial port on the host device.Instances of this interface may be obtained by calling methods of the Serial interface, therefore it has no constructor of its own.Returns a ReadableStream for receiving data from the device connected to the port.Returns a WritableStream for sending data to the device connected to the port.Returns a Promise that resolves with an object containing properties of the port.Returns a Promise that resolves when the port is opened. By default the port is opened with 8 data bits, 1 stop bit and no parity checking.Sets control signals on the port and returns a Promise that resolves when they are set.Returns a Promise that resolves with an object containing the current state of the port's control signals.Returns a Promise that resolves when the port closes.An event fired when the port has connected to the device.An event fired when the port has disconnected from the device.Before communicating on a serial port it must be opened. Opening the port allows the site to specify the necessary parameters that control how data is transmitted and received. Developers should check the documentation for the device they are connecting to for the appropriate parameters.Once the Promise returned by open() resolves the readable and writable attributes can be accessed to get the ReadableStream and WritableStream instances for receiving data from and sending data to the connected device.The following example shows how to read data from a port. The outer loop handles non-fatal errors, creating a new reader until a fatal error is encountered and readable becomes null.The following example shows how to write a string to a port. A TextEncoder converts the string to a Uint8Array before transmission.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SerialPort"
},
{
	"api_id": "732",
	"name": "ServiceWorker",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The ServiceWorker interface of the Service Worker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.A ServiceWorker object is available in the ServiceWorkerRegistration.active property, and the ServiceWorkerContainer.controller property — this is a service worker that has been activated and is controlling the page (the service worker has been successfully registered, and the controlled page has been reloaded.)The ServiceWorker interface is dispatched a set of lifecycle events — install and activate — and functional events including fetch. A ServiceWorker object has an associated ServiceWorker.state, related to its lifecycle.The ServiceWorker interface inherits properties from its parent, EventTarget.Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.Returns the state of the service worker. It returns one of the following values: installing, installed, activating, activated, or redundant.The ServiceWorker interface inherits methods from its parent, EventTarget.Fires anytime the ServiceWorker.state changes.This code snippet is from the service worker registration-events sample (live demo). The code listens for any change in the ServiceWorker.state and returns its value.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker"
},
{
	"api_id": "733",
	"name": "ServiceWorkerContainer",
	"description": "The ServiceWorkerContainer interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.Most importantly, it exposes the ServiceWorkerContainer.register() method used to register service workers, and the ServiceWorkerContainer.controller property used to determine whether or not the current page is actively controlled.Returns a ServiceWorker object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active). This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.Provides a way of delaying code execution until a service worker is active. It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker. Once that condition is met, it resolves with the ServiceWorkerRegistration.Occurs when the document's associated ServiceWorkerRegistration acquires a new active worker.Fired whenever an error occurs in the associated service workers.Occurs when incoming messages are received by the ServiceWorkerContainer object (e.g. via a MessagePort.postMessage() call).Creates or updates a ServiceWorkerRegistration for the given scriptURL.Gets a ServiceWorkerRegistration object whose scope matches the provided document URL. The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.Returns all ServiceWorkerRegistration objects associated with a ServiceWorkerContainer in an array. The method returns a Promise that resolves to an array of ServiceWorkerRegistration.explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()). This can be used to react to sent messages earlier, even before that page's content has finished loading.The example below first checks to see if the browser supports service workers. If supported, the code registers the service worker and determines if the page is actively controlled by the service worker. If it isn't, it prompts the user to reload the page so the service worker can take control. The code also reports any registration failures.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer"
},
{
	"api_id": "734",
	"name": "ServiceWorkerGlobalScope",
	"description": "The ServiceWorkerGlobalScope interface of the Service Worker API represents the global execution context of a service worker.Developers should keep in mind that the ServiceWorker state is not persisted across the termination/restart cycle, so each event handler should assume it's being invoked with a bare, default global state.Once successfully registered, a service worker can and will be terminated when idle to conserve memory and processor power. An active service worker is automatically restarted to respond to events, such as onfetch or onmessage.Additionally, synchronous requests are not allowed from within a service worker — only asynchronous requests, like those initiated via the fetch() method, can be used.This interface inherits from the WorkerGlobalScope interface, and its parent EventTarget.Contains the CacheStorage object associated with the service worker.Contains the Clients object associated with the service worker.Contains the ServiceWorkerRegistration object that represents the service worker's registration.Occurs when a ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker.Occurs when an item is removed from the Content Index.Occurs when a fetch() is called.Occurs when a ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.installing worker.Occurs when incoming messages are received. Controlled pages can use the MessagePort.postMessage() method to send messages to service workers. The service worker can optionally send a response back via the MessagePort exposed in event.data.port, corresponding to the controlled page.Occurs when a user clicks on a displayed notification.Occurs — when a user closes a displayed notification.Triggered when a call to SyncManager.register is made from a service worker client page. The attempt to sync is made either immediately if the network is available or as soon as the network becomes available.Occurs at periodic intervals, which were specified when registering a PeriodicSyncManager.Occurs when a server push notification is received.Occurs when a push subscription has been invalidated, or is about to be invalidated (e.g. when a push service sets an expiration time).Allows the current service worker registration to progress from waiting to active state while service worker clients are using it.ServiceWorkerGlobalScope implements WorkerGlobalScope. Therefore it also has the following property available to it:Starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request. This algorithm is the entry point for the fetch handling handed to the service worker context.This code snippet is from the service worker prefetch sample (see prefetch example live.) The onfetch event handler listens for the fetch event. When fired, the code returns a promise that resolves to the first matching request in the Cache object. If no match is found, the code fetches a response from the network.The code also handles exceptions thrown from the fetch() operation. Note that an HTTP error response (e.g., 404) will not trigger an exception. It will return a normal response object that has the appropriate error code set.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope"
},
{
	"api_id": "735",
	"name": "ServiceWorkerRegistration",
	"description": "The ServiceWorkerRegistration interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.The lifetime of a service worker registration is beyond that of the ServiceWorkerRegistration objects that represent them within the lifetime of their corresponding service worker clients. The browser maintains a persistent list of active ServiceWorkerRegistration objects.Note: This feature is available in Web Workers.Also implements properties from its parent interface, EventTarget.Returns a service worker whose state is activating or activated. This is initially set to null. An active worker will control a Client if the client's URL falls within the scope of the registration (the scope option set when ServiceWorkerContainer.register is first called.)Returns a reference to the ContentIndex interface, for managing indexed content for offline viewing.Returns a service worker whose state is installing. This is initially set to null.Returns the instance of NavigationPreloadManager associated with the current service worker registration.Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the ServiceWorker.Returns a reference to the SyncManager interface, which manages background synchronization processes.Returns a service worker whose state is installed. This is initially set to null.Returns a string indicating what is the cache strategy to use when updating the service worker scripts. It can be one of the following: imports, all, or none.Also implements methods from its parent interface, EventTarget.Returns a Promise that resolves to an array of Notification objects.Displays the notification with the requested title.Unregisters the service worker registration and returns a Promise. The service worker will finish any ongoing operations before it is unregistered.Checks the server for an updated version of the service worker without consulting caches.Fired any time the ServiceWorkerRegistration.installing property acquires a new service worker.In this example, the code first checks whether the browser supports service workers and if so registers one. Next, it adds an updatefound listener in which it uses the service worker registration to listen for further changes to the service worker's state. If the service worker hasn't changed since the last time it was registered, then the updatefound event will not be fired.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration"
},
{
	"api_id": "736",
	"name": "setInterval()",
	"description": "\n  The setInterval() method,\n  offered on the Window and Worker interfaces, repeatedly\n  calls a function or executes a code snippet, with a fixed time delay between each\n  call.\n\n  This method returns an interval ID which uniquely identifies the interval, so you\n  can remove it later by calling clearInterval().\nA function to be executed every delay milliseconds. The first execution happens after delay milliseconds.\n  An optional syntax allows you to include a string instead of a function, which is\n  compiled and executed every delay milliseconds. This syntax is not\nrecommended for the same reasons that make using eval() a\n  security risk.\n  \n  The time, in milliseconds (thousandths of a second), the timer should delay in\n  between executions of the specified function or code. Defaults to 0 if not specified. See Delay restrictions\n  below for details on the permitted range of delay values.\n  \n  Additional arguments which are passed through to the function specified by\n  func once the timer expires.\n  \n  The returned intervalID is a numeric, non-zero value which identifies the\n  timer created by the call to setInterval(); this value can be passed to\n  clearInterval() to cancel the interval.\n\n  It may be helpful to be aware that setInterval() and\n  setTimeout() share the same pool\n  of IDs, and that clearInterval() and\n  clearTimeout() can technically\n  be used interchangeably. For clarity, however, you should try to always match them to\n  avoid confusion when maintaining your code.\n\n  Note: The delay argument is converted to a\n  signed 32-bit integer. This effectively limits delay to 2147483647 ms,\n  since it's specified as a signed integer in the IDL.\n  The following example demonstrates setInterval()'s basic syntax.\n  The following example calls the flashtext() function once a second until\n  the Stop button is pressed.\nSee also: clearInterval().\n  When you pass a method to setInterval() or any other function, it is\n  invoked with the wrong this\n  value. This problem is explained in detail in the JavaScript reference.\n\n  Code executed by setInterval() runs in a separate execution context than\n  the function from which it was called. As a consequence, the this\n  keyword for the called function is set to the window (or\n  global) object, it is not the same as the this value for the\n  function that called setTimeout. See the following example (which uses\n  setTimeout() instead of setInterval() – the problem, in fact,\n  is the same for both timers):\n\n  As you can see there are no ways to pass the this object to the callback\n  function in the legacy JavaScript.\nAll modern JavaScript runtimes (in browsers and elsewhere) support arrow functions, with lexical this — allowing us to write setInterval( () => this.myMethod) if we're inside the myArray method.If you need to support IE, use the Function.prototype.bind() method, which lets you specify the value that should be used as this for all calls to a given function. That lets you easily bypass problems where it's unclear what this will be, depending on the context from which your function was called.\n  The setInterval() function is commonly used to set a delay for functions\n  that are executed again and again, such as animations. You can cancel the interval using\n  clearInterval().\n\n  If you wish to have your function called once after the specified delay, use\n  setTimeout().\n\n  It's possible for intervals to be nested; that is, the callback for\n  setInterval() can in turn call setInterval() to start another\n  interval running, even though the first one is still going. To mitigate the potential\n  impact this can have on performance, once intervals are nested beyond five levels deep,\n  the browser will automatically enforce a 4 ms minimum value for the interval. Attempts\n  to specify a value less than 4 ms in deeply-nested calls to setInterval()\n  will be pinned to 4 ms.\n\n  Browsers may enforce even more stringent minimum values for the interval under some\n  circumstances, although these should not be common. Note also that the actual amount of\n  time that elapses between calls to the callback may be longer than the given\n  delay; see\n  Reasons for\n delays longer than specified in setTimeout() for examples.\n\n  If there is a possibility that your logic could take longer to execute than the\n  interval time, it is recommended that you recursively call a named function using\n  setTimeout(). For example, if\n  using setInterval() to poll a remote server every 5 seconds, network\n  latency, an unresponsive server, and a host of other issues could prevent the request\n  from completing in its allotted time. As such, you may find yourself with queued up XHR\n  requests that won't necessarily return in order.\nIn these cases, a recursive setTimeout() pattern is preferred:\n  In the above snippet, a named function loop() is declared and is\n  immediately executed. loop() is recursively called inside\n  setTimeout() after the logic has completed executing. While this pattern\n  does not guarantee execution on a fixed interval, it does guarantee that the previous\n  interval has completed before recursing.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/setInterval"
},
{
	"api_id": "737",
	"name": "setTimeout()",
	"description": "\n  The global setTimeout() method sets a timer which executes a function or specified\n  piece of code once the timer expires.\nA function to be executed after the timer expires.\n  An alternative syntax that allows you to include a string instead of a function,\n  which is compiled and executed when the timer expires. This syntax is not\nrecommended for the same reasons that make using\n  eval() a security risk.\n  \n  The time, in milliseconds that the timer should wait before\n  the specified function or code is executed. If this parameter is omitted, a value of 0\n  is used, meaning execute "immediately", or more accurately, the next event cycle.\n  Note that in either case, the actual delay may be longer than intended; see Reasons for delays longer than specified below.Also note that if the value isn't a number, implicit type coercion is silently done on the value to convert it to a number — which can lead to unexpected and surprising results; see Non-number delay values are silently coerced into numbers for an example.\n  Additional arguments which are passed through to the function specified by\n  function.\n  \n  The returned timeoutID is a positive integer value which\n  identifies the timer created by the call to setTimeout(). This value can be\n  passed to clearTimeout() to\n  cancel the timeout.\n\n  It is guaranteed that a timeoutID value will never be reused by a subsequent call to\n  setTimeout() or setInterval() on the same object (a window or\n  a worker). However, different objects use separate pools of IDs.\n\n  Timeouts are cancelled using\n  clearTimeout().\n\n  To call a function repeatedly (e.g., every N milliseconds), consider using\n  setInterval().\nIf setTimeout() is called with delay value that's not a number, implicit type coercion is silently done on the value to convert it to a number. For example, the following code incorrectly uses the string "1000" for the delay value, rather than the number 1000 – but it nevertheless works, because when the code runs, the string is coerced into the number 1000, and so the code executes 1 second later.But in many cases, the implicit type coercion can lead to unexpected and surprising results. For example, when the following code runs, the string "1 second" ultimately gets coerced into the number 0 — and so, the code executes immediately, with zero delay.Therefore, don't use strings for the delay value but instead always use numbers:\n  setTimeout() is an asynchronous function, meaning that the timer function will not pause execution of other functions in the functions stack.\n  In other words, you cannot use setTimeout() to create a "pause" before the next function in the function stack fires.\nSee the following example:\n  Notice that the first function does not create a 5-second "pause" before calling the second function. Instead, the first function is called, but waits 5 seconds to\n  execute. While the first function is waiting to execute, the second function is called, and a 3-second wait is applied to the second function before it executes. Since neither\n  the first nor the second function's timers have completed, the third function is called and completes its execution first. Then the second follows. Then finally the first function\n  is executed after its timer finally completes.\nTo create a progression in which one function only fires after the completion of another function, see the documentation on Promises.\n  When you pass a method to setTimeout(), it will be invoked with a this value that may differ from your\n  expectation. The general issue is explained in detail in the JavaScript reference.\n\n  Code executed by setTimeout() is called from an execution context separate\n  from the function from which setTimeout was called. The usual rules for\n  setting the this keyword for the called function apply, and if you have not\n  set this in the call or with bind, it will default to\n  the window (or global) object. It will not be the same as the\n  this value for the function that called setTimeout.\nSee the following example:\n  The above works because when myMethod is called, its this is\n  set to myArray by the call, so within the function,\n  this[sProperty] is equivalent to myArray[sProperty]. However,\n  in the following:\n\n  The myArray.myMethod function is passed to setTimeout, then\n  when it's called, its this is not set, so it defaults to the\n  window object.\n\n  There's also no option to pass a thisArg to\n  setTimeout as there is in Array methods such as forEach() and reduce(). As shown below,\n  using call to set this doesn't work either.\n\n  A common way to solve the problem is to use a wrapper function that sets\n  this to the required value:\nThe wrapper function can be an arrow function:Alternatively, you can use bind() to set the value of this for all calls to a given function:\n  Passing a string instead of a function to setTimeout() has the same problems as using\n  eval().\nA string passed to setTimeout() is evaluated in the global context, so local symbols in the context where setTimeout() was called will not be available when the string is evaluated as code.\n  There are a number of reasons why a timeout may take longer to fire than anticipated.\n  This section describes the most common reasons.\n\n  As specified in the HTML standard,\n  browsers will enforce a minimum timeout of 4 milliseconds once a nested call to setTimeout has been scheduled 5 times.\n\n  This can be seen in the following example, in which we nest a call to setTimeout with a delay of 0 milliseconds,\n  and log the delay each time the handler is called. The first four times, the delay is approximately 0 milliseconds, and after that it is\n  approximately 4 milliseconds:\n\n  To reduce the load (and associated battery usage) from background tabs, browsers will enforce\n  a minimum timeout delay in inactive tabs. It may also be waived if a page is playing sound\n  using a Web Audio API AudioContext.\nThe specifics of this are browser-dependent:\n  Firefox enforces additional throttling for scripts that it recognizes as tracking scripts.\n  When running in the foreground, the throttling minimum delay is still 4ms. In background tabs, however,\n  the throttling minimum delay is 10,000 ms, or 10 seconds, which comes into effect 30 seconds after a\n  document has first loaded.\n\n  See Tracking Protection for\n  more details.\n\n  The timeout can also fire later than expected if the page (or the OS/browser) is busy with other tasks.\n  One important case to note is that the function or code snippet cannot be executed until\n  the thread that called setTimeout() has terminated. For example:\nWill write to the console:\n  This is because even though setTimeout was called with a delay of zero,\n  it's placed on a queue and scheduled to run at the next opportunity; not immediately.\n  Currently-executing code must complete before functions on the queue are executed, thus\n  the resulting execution order may not be as expected.\n\n  Firefox will defer firing setTimeout() timers\n  while the current tab is loading. Firing is deferred until the main thread is deemed\n  idle (similar to window.requestIdleCallback()),\n  or until the load event is fired.\n\n  In WebExtensions, setTimeout()\n  does not work reliably. Extension authors should use the alarms\n  API instead.\n\n  Browsers including Internet Explorer, Chrome, Safari, and Firefox store the delay as a\n  32-bit signed integer internally. This causes an integer overflow when using delays\n  larger than 2,147,483,647 ms (about 24.8 days), resulting in the timeout being executed\n  immediately.\n\n  The following example sets up two simple buttons in a web page and hooks them to the\n  setTimeout() and clearTimeout() routines. Pressing the first\n  button will set a timeout which shows a message after two seconds and stores the\n  timeout id for use by clearTimeout(). You may optionally cancel this\n  timeout by pressing on the second button.\nSee also the clearTimeout() example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout"
},
{
	"api_id": "738",
	"name": "ShadowRoot",
	"description": "The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.You can retrieve a reference to an element's shadow root using its Element.shadowRoot property, provided it was created using Element.attachShadow() with the mode option set to open.Returns the Element within the shadow tree that has focus.\n  Add an array of constructed stylesheets to be used by the shadow DOM subtree.\n  These may be shared with other DOM subtrees that share the same parent Document node, and the document itself.\n  Returns a boolean that indicates whether delegatesFocus was set when the shadow was attached (see Element.attachShadow()).The element that's currently in full screen mode for this shadow tree.Returns a reference to the DOM element the ShadowRoot is attached to.Sets or returns a reference to the DOM tree inside the ShadowRoot.\n  The mode of the ShadowRoot — either open or closed.\n  This defines whether or not the shadow root's internal features are accessible from JavaScript.\n  Returns the Element within the shadow tree that is currently being presented in picture-in-picture mode.\n  Returns the Element set as the target for mouse events while the pointer is locked.\n  null if lock is pending, pointer is unlocked, or if the target is in another tree.\n  Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a shadow tree.An event handler representing the code to be called when the slotchange event is raised.Returns an array of all Animation objects currently in effect, whose target elements are descendants of the shadow tree.Returns a Selection object representing the range of text selected by the user, or the current position of the caret.Returns the topmost element at the specified coordinates.Returns an array of all elements at the specified coordinates.The following snippets are taken from our life-cycle-callbacks example (see it live also), which creates an element that displays a square of a size and color specified in the element's attributes.Inside the <custom-square> element's class definition we include some life cycle callbacks that make a call to an external function, updateStyle(), which actually applies the size and color to the element. You'll see that we are passing it this (the custom element itself) as a parameter.\n  In the updateStyle() function itself, we get a reference to the shadow DOM using Element.shadowRoot.\n  From here we use standard DOM traversal techniques to find the <style> element inside the shadow DOM and then update the CSS found inside it:\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot"
},
{
	"api_id": "739",
	"name": "SharedWorker",
	"description": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.Note: If SharedWorker can be accessed from several browsing contexts, all those browsing contexts must share the exact same origin (same protocol, host and port).Creates a shared web worker that executes the script at the specified URL.Inherits properties from its parent, EventTarget.Returns a MessagePort object used to communicate with and control the shared worker.Fires when an error occurs in the shared worker.Inherits methods from its parent, EventTarget.In our Basic shared worker example (run shared worker), we have two HTML pages, each of which uses some JavaScript to perform a simple calculation. The different scripts are using the same worker file to perform the calculation — they can both access it, even if their pages are running inside different windows.The following code snippet shows creation of a SharedWorker object using the SharedWorker() constructor. Both scripts contain this:Both scripts then access the worker through a MessagePort object created using the SharedWorker.port property. If the onmessage event is attached using addEventListener, the port is manually started using its start() method:When the port is started, both scripts post messages to the worker and handle messages sent from it using port.postMessage() and port.onmessage, respectively:Inside the worker we use the onconnect handler to connect to the same port discussed above. The ports associated with that worker are accessible in the connect event's ports property — we then use MessagePort start() method to start the port, and the onmessage handler to deal with messages sent from the main threads.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker"
},
{
	"api_id": "740",
	"name": "SharedWorkerGlobalScope",
	"description": "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.This interface inherits properties from the WorkerGlobalScope interface, and its parent EventTarget.The name that the SharedWorker was (optionally) given when it was created using the SharedWorker() constructor. This is mainly useful for debugging purposes.This property returns the ApplicationCache object for the worker.Returns an object reference to the DedicatedWorkerGlobalScope object itself.Returns the console object associated with the worker.Returns the WorkerLocation associated with the worker. WorkerLocation is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.Returns the WorkerNavigator associated with the worker. WorkerNavigator is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.Returns the Performance object associated with the worker, which is a regular performance object, but with a subset of its properties and methods available.This interface inherits methods from the WorkerGlobalScope interface, and its parent EventTarget.Discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope.Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's window.dump, but for workers.Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example: importScripts('foo.js', 'bar.js');Decodes a string of data which has been encoded using base-64 encoding.Creates a base-64 encoded ASCII string from a string of binary data.Cancels the repeated execution set using setInterval().Cancels the repeated execution set using setTimeout().Schedules the execution of a function every X milliseconds.Sets a delay for executing a function.Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.Fired on shared workers when a new client connects.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope"
},
{
	"api_id": "741",
	"name": "SourceBuffer",
	"description": "The SourceBuffer interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.Controls the timestamp for the end of the append window.Controls the timestamp for the start of the append window. This is a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps within this range will be appended, whereas those outside the range will be filtered out.A list of the audio tracks currently contained inside the SourceBuffer.Returns the time ranges that are currently buffered in the SourceBuffer.Controls how the order of media segments in the SourceBuffer is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence.A list of the text tracks currently contained inside the SourceBuffer.Controls the offset applied to timestamps inside media segments that are subsequently appended to the SourceBuffer.A boolean indicating whether the SourceBuffer is currently being updated — i.e. whether an SourceBuffer.appendBuffer(), SourceBuffer.appendStream(), or SourceBuffer.remove() operation is currently in progress.A list of the video tracks currently contained inside the SourceBuffer.Inherits methods from its parent interface, EventTarget.Aborts the current segment and resets the segment parser.Appends media segment data from an ArrayBuffer, a TypedArray or a DataView object to the SourceBuffer.Starts the process of asynchronously appending the specified buffer to the SourceBuffer. Returns a Promise which is fulfilled once the buffer has been appended.Appends media segment data from a ReadableStream object to the SourceBuffer.Changes the MIME type that future calls to appendBuffer() will expect the new data to conform to.Removes media segments within a specific time range from the SourceBuffer.Starts the process of asynchronously removing media segments in the specified range from the SourceBuffer. Returns a Promise which is fulfilled once all matching segments have been removed.Fired whenever SourceBuffer.appendBuffer() or SourceBuffer.appendStream() is ended by a call to SourceBuffer.abort(). SourceBuffer.updating changes from true to false.Fired whenever an error occurs during SourceBuffer.appendBuffer() or SourceBuffer.appendStream(). SourceBuffer.updating changes from true to false.Fired whenever SourceBuffer.appendBuffer() or SourceBuffer.remove() completes. SourceBuffer.updating changes from true to false. This event is fired before updateend.Fired after SourceBuffer.appendBuffer() or SourceBuffer.remove() ends. This event is fired after update.Fired whenever the value of SourceBuffer.updating changes from false to true.The following simple example loads a video chunk by chunk as fast as possible, playing it as soon as it can. This example was written by Nick Desaulniers and can be viewed live here (you can also download the source for further investigation.)",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer"
},
{
	"api_id": "742",
	"name": "SourceBufferList",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SourceBufferList interface represents a simple container list for multiple SourceBuffer objects.The source buffer list containing the SourceBuffers appended to a particular MediaSource can be retrieved using the MediaSource.sourceBuffers property.The individual source buffers can be accessed using the array operator [].Returns the number of SourceBuffer objects in the list.Inherits methods from its parent interface, EventTarget.Fired when a SourceBuffer is added to the list.Fired when a SourceBuffer is removed from the list.This example shows how to access the active source buffers of the MediaSource connected to an already playing HTMLVideoElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList"
},
{
	"api_id": "743",
	"name": "SpeechGrammar",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechGrammar interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.Grammar is defined using JSpeech Grammar Format (JSGF.) Other formats may also be supported in the future.Creates a new SpeechGrammar object.Sets and returns a string containing the grammar from within in the SpeechGrammar object instance.Sets and returns the weight of the SpeechGrammar object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar"
},
{
	"api_id": "744",
	"name": "SpeechGrammarList",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechGrammarList interface of the Web Speech API represents a list of SpeechGrammar objects containing words or patterns of words that we want the recognition service to recognize.Grammar is defined using JSpeech Grammar Format (JSGF.) Other formats may also be supported in the future.Creates a new SpeechGrammarList object.Returns the number of SpeechGrammar objects contained in the SpeechGrammarList.Standard getter — allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax.Takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object.Adds a grammar in a string to the SpeechGrammarList as a new SpeechGrammar object.In our simple Speech color changer example, we create a new SpeechRecognition object instance using the SpeechRecognition() constructor, create a new SpeechGrammarList, add our grammar string to it using the SpeechGrammarList.addFromString method, and set it to be the grammar that will be recognized by the SpeechRecognition instance using the SpeechRecognition.grammars property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList"
},
{
	"api_id": "745",
	"name": "SpeechRecognition",
	"description": "The SpeechRecognition interface of the Web Speech API is the controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service.Note: On some browsers, like Chrome, using Speech Recognition on a web page involves a server-based recognition engine. Your audio is sent to a web service for recognition processing, so it won't work offline.Creates a new SpeechRecognition object.SpeechRecognition also inherits properties from its parent interface, EventTarget.Returns and sets a collection of SpeechGrammar objects that represent the grammars that will be understood by the current SpeechRecognition.Returns and sets the language of the current SpeechRecognition. If not specified, this defaults to the HTML lang attribute value, or the user agent's language setting if that isn't set either.Controls whether continuous results are returned for each recognition, or only a single result. Defaults to single (false.)Controls whether interim results should be returned (true) or not (false.) Interim results are results that are not yet final (e.g. the SpeechRecognitionResult.isFinal property is false.)Sets the maximum number of SpeechRecognitionAlternatives provided per result. The default value is 1.SpeechRecognition also inherits methods from its parent interface, EventTarget.Stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a SpeechRecognitionResult.Starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.Stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when the user agent has started to capture audio.\n  Also available via the onaudiostart property.\n  \n  Fired when the user agent has finished capturing audio.\n  Also available via the onaudioend property.\n  \n  Fired when the speech recognition service has disconnected.\n  Also available via the onend property.\n  \n  Fired when a speech recognition error occurs.\n  Also available via the onerror property.\n  \n  Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the confidence threshold.\n  Also available via the onnomatch property.\n  \n  Fired when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app.\n  Also available via the onresult property.\n  \n  Fired when any sound — recognizable speech or not — has been detected.\n  Also available via the onsoundstart property.\n  \n  Fired when any sound — recognizable speech or not — has stopped being detected.\n  Also available via the onsoundend property.\n  \n  Fired when sound that is recognized by the speech recognition service as speech has been detected.\n  Also available via the onspeechstart property.\n  \n  Fired when speech recognized by the speech recognition service has stopped being detected.\n  Also available via the onspeechend property.\n  \n  Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.\n  Also available via the onstart property.\n  In our simple Speech color changer example, we create a new SpeechRecognition object instance using the SpeechRecognition() constructor, create a new SpeechGrammarList, and set it to be the grammar that will be recognized by the SpeechRecognition instance using the SpeechRecognition.grammars property.After some other values have been defined, we then set it so that the recognition service starts when a click event occurs (see SpeechRecognition.start().) When a result has been successfully recognized, the result event fires, we extract the color that was spoken from the event object, and then set the background color of the <html> element to that color.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition"
},
{
	"api_id": "746",
	"name": "SpeechRecognitionAlternative",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechRecognitionAlternative interface of the Web Speech API represents a single word that has been recognized by the speech recognition service.Returns a string containing the transcript of the recognized word.Returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.\n  This code is excerpted from our\n  Speech color changer example.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative"
},
{
	"api_id": "747",
	"name": "SpeechRecognitionErrorEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechRecognitionErrorEvent interface of the Web Speech API represents error messages from the recognition service.SpeechRecognitionErrorEvent also inherits properties from its parent interface, Event.Returns the type of error raised.Returns a message describing the error in more detail.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionErrorEvent"
},
{
	"api_id": "748",
	"name": "SpeechRecognitionEvent",
	"description": "The SpeechRecognitionEvent interface of the Web Speech API represents the event object for the result and nomatch events, and contains all the data associated with an interim or final speech recognition result.SpeechRecognitionEvent also inherits properties from its parent interface, Event.Returns an Extensible MultiModal Annotation markup language (EMMA) — XML — representation of the result.Returns the semantic meaning of what the user said.Returns the lowest index value result in the SpeechRecognitionResultList "array" that has actually changed.Returns a SpeechRecognitionResultList object representing all the speech recognition results for the current session.This code is excerpted from our Speech color changer example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent"
},
{
	"api_id": "749",
	"name": "SpeechRecognitionResult",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechRecognitionResult interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.A boolean value that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.Returns the length of the "array" — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as "n-best alternatives".)A standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax.This code is excerpted from our Speech color changer example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult"
},
{
	"api_id": "750",
	"name": "SpeechRecognitionResultList",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechRecognitionResultList interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in continuous mode.Returns the length of the "array" — the number of SpeechRecognitionResult objects in the list.A standard getter that allows SpeechRecognitionResult objects in the list to be accessed via array syntax.This code is excerpted from our Speech color changer example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList"
},
{
	"api_id": "751",
	"name": "SpeechSynthesis",
	"description": "The SpeechSynthesis interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.SpeechSynthesis also inherits properties from its parent interface, EventTarget.A boolean value that returns true if the SpeechSynthesis object is in a paused state.A boolean value that returns true if the utterance queue contains as-yet-unspoken utterances.A boolean value that returns true if an utterance is currently in the process of being spoken — even if SpeechSynthesis is in a paused state.SpeechSynthesis also inherits methods from its parent interface, EventTarget.Removes all utterances from the utterance queue.Returns a list of SpeechSynthesisVoice objects representing all the available voices on the current device.Puts the SpeechSynthesis object into a paused state.Puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused.Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.Listen to this event using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed.\n  Also available via the onvoiceschanged property.\n  First, a simple example:Now we'll look at a more fully-fledged example. In our Speech synthesizer demo, we first grab a reference to the SpeechSynthesis controller using window.speechSynthesis. After defining some necessary variables, we retrieve a list of the voices available using SpeechSynthesis.getVoices() and populate a select menu with them so the user can choose what voice they want.Inside the inputForm.onsubmit handler, we stop the form submitting with preventDefault(), create a new SpeechSynthesisUtterance instance containing the text from the text <input>, set the utterance's voice to the voice selected in the <select> element, and start the utterance speaking via the SpeechSynthesis.speak() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis"
},
{
	"api_id": "752",
	"name": "SpeechSynthesisErrorEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The SpeechSynthesisErrorEvent interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.SpeechSynthesisErrorEvent extends the SpeechSynthesisEvent interface, which inherits properties from its parent interface, Event.Returns an error code indicating what has gone wrong with a speech synthesis attempt.SpeechSynthesisErrorEvent extends the SpeechSynthesisEvent interface, which inherits methods from its parent interface, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent"
},
{
	"api_id": "753",
	"name": "SpeechSynthesisEvent",
	"description": "The SpeechSynthesisEvent interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.The SpeechSynthesisEvent interface also inherits properties from its parent interface, Event.Returns the index position of the character in the SpeechSynthesisUtterance.text that was being spoken when the event was triggered.Returns the elapsed time in seconds after the SpeechSynthesisUtterance.text started being spoken that the event was triggered at.Returns the name associated with certain types of events occurring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a mark event, or the type of boundary reached in the case of a boundary event.Returns the SpeechSynthesisUtterance instance that the event was triggered on.The SpeechSynthesisEvent interface also inherits methods from its parent interface, Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent"
},
{
	"api_id": "754",
	"name": "SpeechSynthesisUtterance",
	"description": "\n  The SpeechSynthesisUtterance interface of the Web Speech API represents a speech request.\n  It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)\nReturns a new SpeechSynthesisUtterance object instance.SpeechSynthesisUtterance also inherits properties from its parent interface, EventTarget.Gets and sets the language of the utterance.Gets and sets the pitch at which the utterance will be spoken at.Gets and sets the speed at which the utterance will be spoken at.Gets and sets the text that will be synthesized when the utterance is spoken.Gets and sets the voice that will be used to speak the utterance.Gets and sets the volume that the utterance will be spoken at.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when the spoken utterance reaches a word or sentence boundary.\n  Also available via the onboundary property.\n  \n  Fired when the utterance has finished being spoken.\n  Also available via the onend property.\n  \n  Fired when an error occurs that prevents the utterance from being successfully spoken.\n  Also available via the onerror property\n  \n  Fired when the spoken utterance reaches a named SSML "mark" tag.\n  Also available via the onmark property.\n  \n  Fired when the utterance is paused part way through.\n  Also available via the onpause property.\n  \n  Fired when a paused utterance is resumed.\n  Also available via the onresume property.\n  \n  Fired when the utterance has begun to be spoken.\n  Also available via the onstart property.\n  \n  In our basic Speech synthesizer demo, we first grab a reference to the SpeechSynthesis controller using window.speechSynthesis.\n  After defining some necessary variables, we retrieve a list of the voices available using SpeechSynthesis.getVoices() and populate a select menu with them so the user can choose what voice they want.\nInside the inputForm.onsubmit handler, we stop the form submitting with preventDefault(), use the constructor to create a new utterance instance containing the text from the text <input>, set the utterance's voice to the voice selected in the <select> element, and start the utterance speaking via the SpeechSynthesis.speak() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance"
},
{
	"api_id": "755",
	"name": "SpeechSynthesisVoice",
	"description": "\n  The SpeechSynthesisVoice interface of the Web Speech API represents a voice that the system supports.\n  Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.\nA boolean value indicating whether the voice is the default voice for the current app language (true), or not (false.)Returns a BCP 47 language tag indicating the language of the voice.A boolean value indicating whether the voice is supplied by a local speech synthesizer service (true), or a remote speech synthesizer service (false.)Returns a human-readable name that represents the voice.Returns the type of URI and location of the speech synthesis service for this voice.The following snippet is excerpted from our Speech synthesizer demo.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice"
},
{
	"api_id": "756",
	"name": "StaticRange",
	"description": "The DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.This interface offers the same set of properties and methods as AbstractRange.AbstractRange and StaticRange are not available from web workers.Creates a new StaticRange object given the StaticRangeInit dictionary specifying the default values for its properties.The properties below are inherited from its parent interface, AbstractRange.Returns a Boolean value which is true if the range's start and end positions are the same, resulting in a range of length 0.Returns the DOM Node which contains the ending point of the range. The offset into the node at which the end position is located is indicated by endOffset.Returns an integer value indicating the offset into the node given by endContainer at which the last character of the range is found.Returns the DOM Node which contains the starting point of the range (which is in turn identified by startOffset.Returns an integer value indicating the offset into the node specified by startContainer at which the first character of the range is located.A DOM range specifies a span of content in a document, potentially beginning inside one node (or element) and ending inside another one. Unlike a Range, a StaticRange represents a range which is fixed in time; it does not change to try to keep the same content within it as the document changes. If any changes are made to the DOM, the actual data contained within the range specified by a StaticRange may change. This lets the user agent avoid a lot of work that is unnecessary if the web app or site doesn't need a live-updating range.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange"
},
{
	"api_id": "757",
	"name": "StereoPannerNode",
	"description": "The StereoPannerNode interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an AudioNode audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.\n  \nCreates a new instance of a StereoPannerNode object.Inherits properties from its parent, AudioNode.An a-rate AudioParam representing the amount of panning to apply.No specific method; inherits methods from its parent, AudioNode.See BaseAudioContext.createStereoPanner() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode"
},
{
	"api_id": "758",
	"name": "Storage",
	"description": "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.To manipulate, for instance, the session storage for a domain, a call to Window.sessionStorage is made; whereas for local storage the call is made to Window.localStorage.Returns an integer representing the number of data items stored in the Storage object.When passed a number n, this method will return the name of the nth key in the storage.When passed a key name, will return that key's value.When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.When passed a key name, will remove that key from the storage.When invoked, will empty all keys out of the storage.Here we access a Storage object by calling localStorage. We first test whether the local storage contains data items using !localStorage.getItem('bgcolor'). If it does, we run a function called setStyles() that grabs the data items using Storage.getItem() and uses those values to update page styles. If it doesn't, we run another function, populateStorage(), which uses Storage.setItem() to set the item values, then runs setStyles().Note: To see this running as a complete working example, see our Web Storage Demo.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage"
},
{
	"api_id": "759",
	"name": "StorageEvent",
	"description": "\n  The StorageEvent interface is implemented by the storage event, which is\n  sent to a window\n  when a storage area the window has access to is changed within the context of another document.\nReturns a newly constructed StorageEvent object.In addition to the properties listed below, this interface inherits the properties of its parent interface, Event.\n  Returns a string that represents the key changed.\n  The key attribute is null\n  when the change is caused by the storage clear() method.\n  \n  Returns a string with the new value of the key.\n  This value is null\n  when the change has been invoked by storage clear() method,\n  or the key has been removed from the storage.\n  \n  Returns a string with the original value of the key.\n  This value is null when the key has been newly added\n  and therefore doesn't have any previous value.\n  Returns a Storage object that represents the storage that was affected.Returns string with the URL of the document whose key changed.In addition to the methods listed below, this interface inherits the methods of its parent interface, Event.\n  Initializes the event in a manner analogous to the similarly-named initEvent() method in the DOM\n  Events interfaces. Use the constructor instead.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent"
},
{
	"api_id": "760",
	"name": "StorageManager",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The StorageManager interface of the Storage API provides an interface for managing persistence permissions and estimating available storage. You can get a reference to this interface using either navigator.storage or WorkerNavigator.storage.Returns a Promise that resolves to an object containing usage and quota numbers for your origin.Returns a Promise that resolves to true if the user agent is able to persist your site's storage.Returns a Promise that resolves to true if persistence has already been granted for your site's storage.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StorageManager"
},
{
	"api_id": "761",
	"name": "structuredClone()",
	"description": "The global structuredClone() method creates a deep clone of a given value using the structured clone algorithm.\n  The method also allows transferable objects in the original value to be transferred rather than cloned to the new object.\n  Transferred objects are detached from the original object and attached to the new object; they are no longer accessible in the original object.\n\n  The object to be cloned.\n  This can be any structured-clonable type.\n  An array of transferable objects in value that will be moved rather than cloned to the returned object.The returned value is a deep copy of the original value.Thrown if any part of the input value is not serializable.\n  This function can be used to deep copy JavaScript values.\n  It also supports circular references, as shown below:\n\n  Transferable objects (only) can be transferred rather than duplicated in the cloned object, using the optional parameter's transfer value.\n  Transferring makes the original object unusable.\n\n  Note: A scenario where this might be useful is when asynchronously validating some data in a buffer before saving it.\n  To avoid the buffer being modified before the data is saved, you can clone the buffer and validate that data.\n  If you also transfer the data, any attempts to modify the original buffer will fail, preventing its accidental misuse.\n  \n  The following code shows how to clone an array and transfer its underlying resources to the new object.\n  On return, the original uInt8Array.buffer will be cleared.\n\n  You can clone any number of objects and transfer any subset of those objects.\n  For example, the code below would transfer arrayBuffer1 from the passed in value, but not arrayBuffer2.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/structuredClone"
},
{
	"api_id": "762",
	"name": "StylePropertyMap",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The StylePropertyMap interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.Inherits properties from its parent, StylePropertyMapReadOnly.Inherits methods from its parent, StylePropertyMapReadOnly.Adds a new CSS declaration to the StylePropertyMap with the given property and value.Removes all declarations in the StylePropertyMap.Removes the CSS declaration with the given property.Changes the CSS declaration with the given property.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMap"
},
{
	"api_id": "763",
	"name": "StylePropertyMapReadOnly",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The StylePropertyMapReadOnly interface of the CSS Typed Object Model API provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration. Retrieve an instance of this interface using Element.computedStyleMap().Returns an unsigned long integer containing the size of the StylePropertyMapReadOnly object.Returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).Executes a provided function once for each element of StylePropertyMapReadOnly.Returns the value of the specified property.Returns an array of CSSStyleValue objects containing the values for the provided property.Indicates whether the specified property is in the StylePropertyMapReadOnly object.Returns a new array iterator containing the keys for each item in StylePropertyMapReadOnly.Returns a new array iterator containing the values for each index in the StylePropertyMapReadOnly object.We have to have an element to observe:We add a touch of CSS with a custom property to better demonstrate the output:We add JavaScript to grab our paragraph and return back a definition list of all the default CSS property values using Element.computedStyleMap().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly"
},
{
	"api_id": "764",
	"name": "StyleSheet",
	"description": "An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.A boolean value representing whether the current stylesheet has been applied or not.Returns a string representing the location of the stylesheet.Returns a MediaList representing the intended destination medium for style information.Returns a Node associating this style sheet with the current document.Returns a StyleSheet including this one, if any; returns null if there aren't any.Returns a string representing the advisory title of the current style sheet.Returns a string representing the style sheet language for this style sheet.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet"
},
{
	"api_id": "765",
	"name": "StyleSheetList",
	"description": "The StyleSheetList interface represents a list of CSSStyleSheet objects. An instance of this object can be returned by Document.styleSheets.It is an array-like object but can't be iterated over using Array methods. However it can be iterated over in a standard for loop over its indices, or converted to an Array.Returns the number of CSSStyleSheet objects in the collection.Returns the CSSStyleSheet object at the index passed in, or null if no item exists for that index.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList"
},
{
	"api_id": "766",
	"name": "SubmitEvent",
	"description": "The SubmitEvent interface defines the object used to represent an HTML form's submit event. This event is fired at the <form> when the form's submit action is invoked.Creates and returns a new SubmitEvent object whose type and other options are configured as specified. Note that currently the only valid type for a SubmitEvent is submit.In addition to the properties listed below, this interface inherits the properties of its parent interface, Event.An HTMLElement object which identifies the button or other element which was invoked to trigger the form being submitted.While SubmitEvent offers no methods of its own, it inherits any specified by its parent interface, Event.In this example, a shopping cart may have an assortment of different submit buttons depending on factors such as the user's settings, the shop's settings, and any minimum or maximum shopping card totals established by the payment processors. Each of the submit elements' id is used to identify which payment processor the button corresponds to.The handler ID is obtained by using the submit event's submitter property to get the submit button, from which we then get the ID. With that in hand, we can call a processOrder() function to handle the order, passing along the form and the handler ID.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent"
},
{
	"api_id": "767",
	"name": "SubtleCrypto",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The SubtleCrypto interface of the Web Crypto API provides a number of low-level cryptographic functions. Access to the features of SubtleCrypto is obtained through the subtle property of the Crypto object you get from the crypto property.Warning: This API provides a number of low-level cryptographic primitives. It's very easy to misuse them, and the pitfalls involved can be very subtle.Even assuming you use the basic cryptographic functions correctly, secure key management and overall security system design are extremely hard to get right, and are generally the domain of specialist security experts.Errors in security system design and implementation can make the security of the system completely ineffective.Please learn and experiment, but don't guarantee or imply the security of your work before an individual knowledgeable in this subject matter thoroughly reviews it. The Crypto 101 Course can be a great place to start learning about the design and implementation of secure systems.This interface doesn't inherit any properties, as it has no parent interface.This interface doesn't inherit any methods, as it has no parent interface.Returns a Promise that fulfills with the encrypted data corresponding to the clear text, algorithm, and key given as parameters.Returns a Promise that fulfills with the clear data corresponding to the encrypted text, algorithm, and key given as parameters.Returns a Promise that fulfills with the signature corresponding to the text, algorithm, and key given as parameters.Returns a Promise that fulfills with a boolean value indicating if the signature given as a parameter matches the text, algorithm, and key that are also given as parameters.Returns a Promise that fulfills with a digest generated from the algorithm and text given as parameters.Returns a Promise that fulfills with a newly-generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithms. These will match the algorithm, usages, and extractability given as parameters.Returns a Promise that fulfills with a newly generated CryptoKey derived from the master key and specific algorithm given as parameters.Returns a Promise that fulfills with a newly generated buffer of pseudo-random bits derived from the master key and specific algorithm given as parameters.Returns a Promise that fulfills with a CryptoKey corresponding to the format, the algorithm, raw key data, usages, and extractability given as parameters.Returns a Promise that fulfills with a buffer containing the key in the requested format.Returns a Promise that fulfills with a wrapped symmetric key for usage (transfer and storage) in insecure environments. The wrapped key matches the format specified in the given parameters, and wrapping is done by the given wrapping key, using the specified algorithm.Returns a Promise that fulfills with a CryptoKey corresponding to the wrapped key given in the parameter.We can split the functions implemented by this API into two groups: cryptography functions and key management functions.These are the functions you can use to implement security features such as privacy and authentication in a system. The SubtleCrypto API provides the following cryptography functions:Except for digest(), all the cryptography functions in the API use cryptographic keys. In the SubtleCrypto API a cryptographic key is represented using a CryptoKey object. To perform operations like signing and encrypting, you pass a CryptoKey object into the sign() or encrypt() function.The generateKey() and deriveKey() functions both create a new CryptoKey object.The difference is that generateKey() will generate a new distinct key value each time you call it, while deriveKey() derives a key from some initial keying material. If you provide the same keying material to two separate calls to deriveKey(), you will get two CryptoKey objects that have the same underlying value. This is useful if, for example, you want to derive an encryption key from a password and later derive the same key from the same password to decrypt the data.To make keys available outside your app, you need to export the key, and that's what exportKey() is for. You can choose one of a number of export formats.The inverse of exportKey() is importKey(). You can import keys from other systems, and support for standard formats like PKCS #8 and JSON Web Key helps you do this. The exportKey() function exports the key in an unencrypted format.If the key is sensitive you should use wrapKey(), which exports the key and then encrypts it using another key; the API calls a "key-wrapping key".The inverse of wrapKey() is unwrapKey(), which decrypts then imports the key.CryptoKey objects can be stored using the structured clone algorithm, meaning that you can store and retrieve them using standard web storage APIs. The specification expects that most developers will use the IndexedDB API to store CryptoKey objects.The cryptographic functions provided by the Web Crypto API can be performed by one or more different cryptographic algorithms: the algorithm argument to the function indicates which algorithm to use. Some algorithms need extra parameters: in these cases the algorithm argument is a dictionary object that includes the extra parameters.The table below summarizes which algorithms are suitable for which cryptographic operations:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto"
},
{
	"api_id": "768",
	"name": "SVGAElement",
	"description": "The SVGAElement interface provides access to the properties of an <a> element, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGGraphicsElement, and implements properties from HTMLHyperlinkElementUtils.See HTMLAnchorElement.download.An SVGAnimatedString that reflects the href or xlink:href attribute.A string that reflects the hreflang attribute, indicating the language of the linked resource.A string that reflects the ping attribute, containing a space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background). Typically used for tracking.See HTMLAnchorElement.referrerPolicy.See HTMLAnchorElement.rel.See HTMLAnchorElement.relList.It corresponds to the target attribute of the given element.A string being a synonym for the Node.textContent property.A string that reflects the type attribute, indicating the MIME type of the linked resource.This interface has no methods but inherits methods from its parent, SVGGraphicsElement.In the example below, the target attribute of the <a> element is set to _blank and when the link is clicked, it logs to notify whether the condition is met or not.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement"
},
{
	"api_id": "769",
	"name": "SVGAltGlyphDefElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGAltGlyphDefElement interface corresponds to the <altGlyphDef> element.Warning: This interface was removed in the SVG 2 specification.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphDefElement"
},
{
	"api_id": "770",
	"name": "SVGAltGlyphElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGAltGlyphElement interface represents an <altglyph> element. This interface makes it possible to implement more sophisticated and particular glyph characters. For some textual representations as: ligatures (e.g. æ, ß, etc ), special-purpose fonts (e.g. musical symbols) or even alternate glyphs such as Asian text strings it is required that a different set of glyphs be used than the normal given character data.This interface also inherits properties from its parent interface, SVGGraphicsElement.It corresponds to the attribute glyphRef on the given element. It's data type is 'String'. It defines the glyph identifier, whose format is dependent on the 'format' of the given font.It corresponds to the attribute format on the given element. It's data type is 'String'. This property specifies the format of the given font.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement"
},
{
	"api_id": "771",
	"name": "SVGAltGlyphItemElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGAltGlyphItemElement interface corresponds to the <altGlyphItem> element.Warning: This interface was removed in the SVG 2 specification.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphItemElement"
},
{
	"api_id": "772",
	"name": "SVGAngle",
	"description": "The SVGAngle interface is used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only.An SVGAngle object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.An SVGAngle object can be associated with a particular element. The associated element is used to determine which element's content attribute to update if the object reflects an attribute. Unless otherwise described, an SVGAngle object is not associated with any element.Every SVGAngle object operates in one of two modes:Some unknown type of value.A unitless <number> interpreted as a value in degrees.An <angle> with a deg unit.An <angle> with a rad unit.An <angle> with a grad unit.The type of the value as specified by one of the SVG_ANGLETYPE_* constants defined on this interface.The value as a floating point value, in user units. Setting this attribute will cause valueInSpecifiedUnits and valueAsString to be updated automatically to reflect this setting.Exceptions on setting: A DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised when the length corresponds to a read-only attribute, or when the object itself is read-only.The value as a floating point value, in the units expressed by unitType. Setting this attribute will cause value and valueAsString to be updated automatically to reflect this setting.Exceptions on setting: A DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised when the length corresponds to a read-only attribute, or when the object itself is read-only.The value as a string value, in the units expressed by unitType. Setting this attribute will cause value, valueInSpecifiedUnits, and unitType to be updated automatically to reflect this setting.Exceptions on setting:A DOMException with code SYNTAX_ERR is raised if the assigned string cannot be parsed as a valid <angle>.A DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised when the length corresponds to a read-only attribute, or when the object itself is read-only.Reset the value as a number with an associated unitType, thereby replacing the values for all of the attributes on the object.Exceptions:Preserve the same underlying stored value, but reset the stored unit identifier to the given unitType. Object attributes unitType, valueInSpecifiedUnits, and valueAsString might be modified as a result of this method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle"
},
{
	"api_id": "773",
	"name": "SVGAnimateColorElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGAnimateColorElement interface corresponds to the <animateColor> element.This interface has no properties but inherits properties from its parent, SVGAnimationElement.This interface has no methods but inherits methods from its parent, SVGAnimationElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateColorElement"
},
{
	"api_id": "774",
	"name": "SVGAnimatedAngle",
	"description": "The SVGAnimatedAngle interface is used for attributes of basic type <angle> which can be animated.The SVGAnimatedAngle interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle"
},
{
	"api_id": "775",
	"name": "SVGAnimatedBoolean",
	"description": "The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.The SVGAnimatedBoolean interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean"
},
{
	"api_id": "776",
	"name": "SVGAnimatedEnumeration",
	"description": "The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.The SVGAnimatedEnumeration interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration"
},
{
	"api_id": "777",
	"name": "SVGAnimatedInteger",
	"description": "The SVGAnimatedInteger interface is used for attributes of basic type <integer> which can be animated.The SVGAnimatedInteger interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger"
},
{
	"api_id": "778",
	"name": "SVGAnimatedLength",
	"description": "The SVGAnimatedLength interface represents attributes of type <length> which can be animated.A SVGLength representing the base value of the given attribute before applying any animations.\n  If the given attribute or property is being animated,\n  a SVGLength containing the current animated value of the attribute or property.\n  If the given attribute or property is not currently being animated,\n  a SVGLength containing the same value as baseVal.\n  This interface does not implement any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength"
},
{
	"api_id": "779",
	"name": "SVGAnimatedLengthList",
	"description": "The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.The SVGAnimatedLengthList interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList"
},
{
	"api_id": "780",
	"name": "SVGAnimatedNumber",
	"description": "The SVGAnimatedNumber interface is used for attributes of basic type <Number> which can be animated.The SVGAnimatedNumber interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber"
},
{
	"api_id": "781",
	"name": "SVGAnimatedNumberList",
	"description": "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.A SVGNumberList that represents the base value of the given attribute before applying any animations.A read only SVGNumberList that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the SVGNumberList will have the same contents as baseVal. The object referenced by animVal will always be distinct from the one referenced by baseVal, even when the attribute is not animated.The SVGAnimatedNumberList interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList"
},
{
	"api_id": "782",
	"name": "SVGAnimatedPreserveAspectRatio",
	"description": "The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.A SVGPreserveAspectRatio that represents the base value of the given attribute before applying any animations.A SVGPreserveAspectRatio that represents the current animated value of the given attribute. If the given attribute is not currently being animated, then the SVGPreserveAspectRatio will have the same contents as baseVal. The object referenced by animVal is always distinct from the one referenced by baseVal, even when the attribute is not animated.The SVGAnimatedPreserveAspectRatio interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio"
},
{
	"api_id": "783",
	"name": "SVGAnimatedRect",
	"description": "The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.The SVGAnimatedRect interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect"
},
{
	"api_id": "784",
	"name": "SVGAnimatedString",
	"description": "The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.This is a string representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.This is a string representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.The SVGAnimatedString interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString"
},
{
	"api_id": "785",
	"name": "SVGAnimatedTransformList",
	"description": "The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.The SVGAnimatedTransformList interface doesn't provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList"
},
{
	"api_id": "786",
	"name": "SVGAnimateElement",
	"description": "The SVGAnimateElement interface corresponds to the <animate> element.This interface has no properties but inherits properties from its parent, SVGAnimationElement.This interface has no methods but inherits methods from its parent, SVGAnimationElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement"
},
{
	"api_id": "787",
	"name": "SVGAnimateMotionElement",
	"description": "The SVGAnimateMotionElement interface corresponds to the <animateMotion> element.This interface has no properties but inherits properties from its parent, SVGAnimationElement.This interface has no methods but inherits methods from its parent, SVGAnimationElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement"
},
{
	"api_id": "788",
	"name": "SVGAnimateTransformElement",
	"description": "The SVGAnimateTransformElement interface corresponds to the <animateTransform> element.This interface has no properties but inherits properties from its parent, SVGAnimationElement.This interface has no methods but inherits methods from its parent, SVGAnimationElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement"
},
{
	"api_id": "789",
	"name": "SVGAnimationElement",
	"description": "The SVGAnimationElement interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.This interface also inherits properties from its parent, SVGElement.An SVGStringList reflecting the requiredExtensions attribute of the given element.An SVGStringList reflecting the systemLanguage attribute of the given element.An SVGElement representing the element which is being animated. If no target element is being animated (for example, because the href specifies an unknown element) the value returned is null.This interface also inherits methods from its parent, SVGElement.Returns a float representing the begin time, in seconds, for this animation element's current interval, if it exists, regardless of whether the interval has begun yet. If there is no current interval, then a DOMException with code INVALID_STATE_ERR is thrown.Returns a float representing the current time in seconds relative to time zero for the given time container.Returns a float representing the number of seconds for the simple duration for this animation. If the simple duration is undefined (e.g., the end time is indefinite), then a DOMException with code NOT_SUPPORTED_ERR is raised.Creates a begin instance time for the current time. The new instance time is added to the begin instance times list. The behavior of this method is equivalent to beginElementAt(0).Creates a begin instance time for the current time plus the specified offset. The new instance time is added to the begin instance times list.Creates an end instance time for the current time. The new instance time is added to the end instance times list. The behavior of this method is equivalent to endElementAt(0).Creates a end instance time for the current time plus the specified offset. The new instance time is added to the end instance times list.Listen to these events using addEventListener() or by assigning an event listener to the on... handler property of this interface.Fired when the element local timeline begins to play.Fired when at the active end of the animation is reached.Fired when the element's local timeline repeats. It will be fired each time the element repeats, after the first iteration.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement"
},
{
	"api_id": "790",
	"name": "SVGCircleElement",
	"description": "The SVGCircleElement interface is an interface for the <circle> element.This interface also inherits properties from its parent, SVGGeometryElement.This property defines the x-coordinate of the center of the <circle> element. It is denoted by the cx attribute of the element.This property defines the y-coordinate of the center of the <circle> element. It is denoted by the cy attribute of the element.This property defines the radius of the <circle> element. It is denoted by the r of the element.This interface has no methods but inherits methods from its parent, SVGGeometryElement.In this example we draw a circle and randomly increase or decrease its radius when you click it.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement"
},
{
	"api_id": "791",
	"name": "SVGClipPathElement",
	"description": "The SVGClipPathElement interface provides access to the properties of <clipPath> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGElement.An SVGAnimatedEnumeration corresponding to the clipPathUnits attribute of the given <clipPath> element. Takes one of the constants defined in SVGUnitTypes.This interface doesn't implement any specific methods, but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement"
},
{
	"api_id": "792",
	"name": "SVGComponentTransferFunctionElement",
	"description": "The SVGComponentTransferFunctionElement interface defines a base interface used by the component transfer function interfaces.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOMPONENTTRANSFER_TYPE_* constants defined on this interface.An SVGAnimatedNumberList corresponding to the tableValues attribute of the given element.An SVGAnimatedNumber corresponding to the slope attribute of the given element.An SVGAnimatedNumber corresponding to the intercept attribute of the given element.An SVGAnimatedNumber corresponding to the amplitude attribute of the given element.An SVGAnimatedNumber corresponding to the exponent attribute of the given element.An SVGAnimatedNumber corresponding to the offset attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement"
},
{
	"api_id": "793",
	"name": "SVGCursorElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGCursorElement interface provides access to the properties of <cursor> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGElement.An SVGAnimatedLength corresponding to the x attribute of the given <cursor> element.An SVGAnimatedLength corresponding to the y attribute of the given <cursor> element.This interface doesn't implement any specific methods, but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGCursorElement"
},
{
	"api_id": "794",
	"name": "SVGDefsElement",
	"description": "The SVGDefsElement interface corresponds to the <defs> element.This interface doesn't implement any specific properties, but inherits properties from its parent, SVGGraphicsElement.This interface doesn't implement any specific methods, but inherits properties from its parent, SVGGraphicsElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement"
},
{
	"api_id": "795",
	"name": "SVGDescElement",
	"description": "The SVGDescElement interface corresponds to the <desc> element.This interface also inherits properties from its parent, SVGGeometryElement.This interface has no methods but inherits methods from its parent, SVGGeometryElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement"
},
{
	"api_id": "796",
	"name": "SVGElement",
	"description": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.Also inherits properties from: DocumentAndElementEventHandlers, Element, GlobalEventHandlers, SVGElementInstanceA StylePropertyMap representing the declarations of the element's style attribute.A DOMStringMap object which provides a list of key/value pairs of named data attributes which correspond to custom data attributes attached to the element. These can also be defined in SVG using attributes of the form data-*, where * is the key name for the pair. This works just like HTML's HTMLElement.dataset property and HTML's data-* global attribute.An SVGAnimatedString that reflects the value of the class attribute on the given element, or the empty string if class is not present. This attribute is deprecated and may be removed in a future version of this specification. Authors are advised to use Element.classList instead.Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.An SVGSVGElement referring to the nearest ancestor <svg> element. null if the given element is the outermost <svg> element.A CSSStyleDeclaration representing the declarations of the element's style attribute.The position of the element in the tabbing order.The SVGElement which established the current viewport. Often the nearest ancestor <svg> element. null if the given element is the outermost <svg> element.This interface has no methods, but inherits methods from: DocumentAndElementEventHandlers, Element, GlobalEventHandlers, SVGElementInstanceListen to these events using addEventListener() or by assigning an event listener to the equivalent on... handler property defined on GlobalEventHandlers.\n  Fired when page loading is stopped before an SVG element has been allowed to load completely.\n  Also available via the onabort property.\n  \n  Fired when an SVG element does not load properly or when an error occurs during script execution.\n  Also available via the onerror property.\n  \n  Fires on an SVGElement when it is loaded in the browser.\n  Also available via the onload property.\n  \n  Fired when an SVG document is being resized.\n  Also available via the onresize property.\n  \n  Fired when an SVG document view is being shifted along the X and/or Y axes.\n  Also available via the onscroll property.\n  Fired when the DOM implementation removes an SVG document from a window or frame.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
},
{
	"api_id": "797",
	"name": "SVGEllipseElement",
	"description": "The SVGEllipseElement interface provides access to the properties of <ellipse> elements.This interface also inherits properties from its parent interface, SVGGeometryElement.This property returns a SVGAnimatedLength reflecting the cx attribute of the given <ellipse> element.This property returns a SVGAnimatedLength reflecting the cy attribute of the given <ellipse> element.This property returns a SVGAnimatedLength reflecting the rx attribute of the given <ellipse> element.This property returns a SVGAnimatedLength reflecting the ry attribute of the given <ellipse> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGeometryElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement"
},
{
	"api_id": "798",
	"name": "SVGEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGEvent interface represents the event object for most SVG-related events.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGEvent"
},
{
	"api_id": "799",
	"name": "SVGFEBlendElement",
	"description": "The SVGFEBlendElement interface corresponds to the <feBlend> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the in2 attribute of the given element.An SVGAnimatedEnumeration corresponding to the mode attribute of the given element. It takes one of the SVG_FEBLEND_MODE_* constants defined on this interface.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement"
},
{
	"api_id": "800",
	"name": "SVGFEColorMatrixElement",
	"description": "The SVGFEColorMatrixElement interface corresponds to the <feColorMatrix> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOLORMATRIX_TYPE_* constants defined on this interface.An SVGAnimatedNumberList corresponding to the values attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement"
},
{
	"api_id": "801",
	"name": "SVGFEComponentTransferElement",
	"description": "The SVGFEComponentTransferElement interface corresponds to the <feComponentTransfer> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement"
},
{
	"api_id": "802",
	"name": "SVGFECompositeElement",
	"description": "The SVGFECompositeElement interface corresponds to the <feComposite> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_FECOMPOSITE_OPERATOR_* constants defined on this interface.An SVGAnimatedNumberList corresponding to the values attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement"
},
{
	"api_id": "803",
	"name": "SVGFEConvolveMatrixElement",
	"description": "The SVGFEConvolveMatrixElement interface corresponds to the <feConvolveMatrix> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the bias attribute of the given element.An SVGAnimatedNumber corresponding to the divisor attribute of the given element.An SVGAnimatedEnumeration corresponding to the edgeMode attribute of the given element. Takes one of the SVG_EDGEMODE_* constants defined on this interface.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedNumberList corresponding to the kernelMatrix attribute of the given element.An SVGAnimatedNumber corresponding to the kernelUnitLength attribute of the given element.An SVGAnimatedNumber corresponding to the kernelUnitLength attribute of the given element.An SVGAnimatedInteger corresponding to the order attribute of the given element.An SVGAnimatedInteger corresponding to the order attribute of the given element.An SVGAnimatedBoolean corresponding to the preserveAlpha attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedInteger corresponding to the targetX attribute of the given element.An SVGAnimatedInteger corresponding to the targetY attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement"
},
{
	"api_id": "804",
	"name": "SVGFEDiffuseLightingElement",
	"description": "The SVGFEDiffuseLightingElement interface corresponds to the <feDiffuseLighting> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the diffuseConstant attribute of the given element.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedNumber corresponding to the X component of the kernelUnitLength attribute of the given element.An SVGAnimatedNumber corresponding to the Y component of the kernelUnitLength attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedNumber corresponding to the surfaceScale attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement"
},
{
	"api_id": "805",
	"name": "SVGFEDisplacementMapElement",
	"description": "The SVGFEDisplacementMapElement interface corresponds to the <feDisplacementMap> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the in2 attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedNumber corresponding to the scale attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedEnumeration corresponding to the xChannelSelect attribute of the given element. It takes one of the SVG_CHANNEL_* constants defined on this interface.An SVGAnimatedLength corresponding to the y attribute of the given element.An SVGAnimatedEnumeration corresponding to the yChannelSelect attribute of the given element. It takes one of the SVG_CHANNEL_* constants defined on this interface.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement"
},
{
	"api_id": "806",
	"name": "SVGFEDistantLightElement",
	"description": "The SVGFEDistantLightElement interface corresponds to the <feDistantLight> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the azimuth attribute of the given element.An SVGAnimatedNumber corresponding to the elevation attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement"
},
{
	"api_id": "807",
	"name": "SVGFEDropShadowElement",
	"description": "The SVGFEDropShadowElement interface corresponds to the <feDropShadow> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the dx attribute of the given element.An SVGAnimatedNumber corresponding to the dy attribute of the given element.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedNumber corresponding to the (possibly automatically computed) X component of the stdDeviationX attribute of the given element.An SVGAnimatedNumber corresponding to the (possibly automatically computed) Y component of the stdDeviationY attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface also inherits methods of its parent, SVGElement.Sets the values for the stdDeviation attribute.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDropShadowElement"
},
{
	"api_id": "808",
	"name": "SVGFEFloodElement",
	"description": "The SVGFEFloodElement interface corresponds to the <feFlood> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement"
},
{
	"api_id": "809",
	"name": "SVGFEFuncAElement",
	"description": "The SVGFEFuncAElement interface corresponds to the <feFuncA> element.This interface not provide any specific properties, but inherits properties from its parent interface, SVGComponentTransferFunctionElement.This interface does not provide any specific methods, but implements those of its parent, SVGComponentTransferFunctionElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement"
},
{
	"api_id": "810",
	"name": "SVGFEFuncBElement",
	"description": "The SVGFEFuncBElement interface corresponds to the <feFuncB> element.This interface not provide any specific properties, but inherits properties from its parent interface, SVGComponentTransferFunctionElement.This interface does not provide any specific methods, but implements those of its parent, SVGComponentTransferFunctionElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement"
},
{
	"api_id": "811",
	"name": "SVGFEFuncGElement",
	"description": "The SVGFEFuncGElement interface corresponds to the <feFuncG> element.This interface not provide any specific properties, but inherits properties from its parent interface, SVGComponentTransferFunctionElement.This interface does not provide any specific methods, but implements those of its parent, SVGComponentTransferFunctionElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement"
},
{
	"api_id": "812",
	"name": "SVGFEFuncRElement",
	"description": "The SVGFEFuncRElement interface corresponds to the <feFuncR> element.This interface not provide any specific properties, but inherits properties from its parent interface, SVGComponentTransferFunctionElement.This interface does not provide any specific methods, but implements those of its parent, SVGComponentTransferFunctionElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement"
},
{
	"api_id": "813",
	"name": "SVGFEGaussianBlurElement",
	"description": "The SVGFEGaussianBlurElement interface corresponds to the <feGaussianBlur> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedEnumeration corresponding to the edgeMode attribute of the given element. Takes one of the SVG_EDGEMODE_* constants defined on this interface.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedNumber corresponding to the (possibly automatically computed) X component of the stdDeviation attribute of the given element.An SVGAnimatedNumber corresponding to the (possibly automatically computed) Y component of the stdDeviation attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface also inherits methods of its parent, SVGElement.Sets the values for the stdDeviation attribute.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement"
},
{
	"api_id": "814",
	"name": "SVGFEImageElement",
	"description": "The SVGFEImageElement interface corresponds to the <feImage> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedString reflects the crossorigin attribute of the given element, limited to only known values.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString that reflects the href or xlink:href attribute of the given element.An SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement"
},
{
	"api_id": "815",
	"name": "SVGFEMergeElement",
	"description": "The SVGFEMergeElement interface corresponds to the <feMerge> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement"
},
{
	"api_id": "816",
	"name": "SVGFEMergeNodeElement",
	"description": "The SVGFEMergeNodeElement interface corresponds to the <feMergeNode> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedString corresponding to the in attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement"
},
{
	"api_id": "817",
	"name": "SVGFEMorphologyElement",
	"description": "The SVGFEMorphologyElement interface corresponds to the <feMorphology> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedEnumeration corresponding to the operator attribute of the given element. It takes one of the SVG_MORPHOLOGY_OPERATOR_* constants defined on this interface.An SVGAnimatedNumber corresponding to the X component of the radius attribute of the given element.An SVGAnimatedNumber corresponding to the Y component of the radius attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement"
},
{
	"api_id": "818",
	"name": "SVGFEOffsetElement",
	"description": "The SVGFEOffsetElement interface corresponds to the <feOffset> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedNumber corresponding to the dx attribute of the given element.An SVGAnimatedNumber corresponding to the dy attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement"
},
{
	"api_id": "819",
	"name": "SVGFEPointLightElement",
	"description": "The SVGFEPointLightElement interface corresponds to the <fePointLight> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the x attribute of the given element.An SVGAnimatedNumber corresponding to the y attribute of the given element.An SVGAnimatedNumber corresponding to the z attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement"
},
{
	"api_id": "820",
	"name": "SVGFESpecularLightingElement",
	"description": "The SVGFESpecularLightingElement interface corresponds to the <feSpecularLighting> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedNumber corresponding to the X component of the kernelUnitLength attribute of the given element.An SVGAnimatedNumber corresponding to the Y component of the kernelUnitLength attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedNumber corresponding to the specularConstant attribute of the given element.An SVGAnimatedNumber corresponding to the specularExponent attribute of the given element.An SVGAnimatedNumber corresponding to the surfaceScale attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement"
},
{
	"api_id": "821",
	"name": "SVGFESpotLightElement",
	"description": "The SVGFESpotLightElement interface corresponds to the <feSpotLight> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the x attribute of the given element.An SVGAnimatedNumber corresponding to the y attribute of the given element.An SVGAnimatedNumber corresponding to the z attribute of the given element.An SVGAnimatedNumber corresponding to the pointAtX attribute of the given element.An SVGAnimatedNumber corresponding to the pointAtY attribute of the given element.An SVGAnimatedNumber corresponding to the pointAtZ attribute of the given element.An SVGAnimatedNumber corresponding to the specularExponent attribute of the given element.An SVGAnimatedNumber corresponding to the limitingConeAngle attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement"
},
{
	"api_id": "822",
	"name": "SVGFETileElement",
	"description": "The SVGFETileElement interface corresponds to the <feTile> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedString corresponding to the in attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement"
},
{
	"api_id": "823",
	"name": "SVGFETurbulenceElement",
	"description": "The SVGFETurbulenceElement interface corresponds to the <feTurbulence> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the X component of the baseFrequency attribute of the given element.An SVGAnimatedNumber corresponding to the Y component of the baseFrequency attribute of the given element.An SVGAnimatedLength corresponding to the height attribute of the given element.An SVGAnimatedInteger corresponding to the numOctaves attribute of the given element.An SVGAnimatedString corresponding to the result attribute of the given element.An SVGAnimatedNumber corresponding to the seed attribute of the given element.An SVGAnimatedEnumeration corresponding to the stitchTiles attribute of the given element. It takes one of the SVG_STITCHTYPE_* constants defined on this interface.An SVGAnimatedEnumeration corresponding to the type attribute of the given element. It takes one of the SVG_TURBULENCE_TYPE_* constants defined on this interface.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement"
},
{
	"api_id": "824",
	"name": "SVGFilterElement",
	"description": "The SVGFilterElement interface provides access to the properties of <filter> elements, as well as methods to manipulate them.An SVGAnimatedString that corresponds to the href or xlink:href attribute of the given <filter> element.An SVGAnimatedEnumeration that corresponds to the filterUnits attribute of the given <filter> element. Takes one of the constants defined in SVGUnitTypes.An SVGAnimatedEnumeration that corresponds to the primitiveUnits attribute of the given <filter> element. Takes one of the constants defined in SVGUnitTypes.An SVGAnimatedLength that corresponds to the x attribute on the given <filter> element.An SVGAnimatedLength that corresponds to the y attribute of the given <filter> element.An SVGAnimatedLength that corresponds to the width attribute of the given <filter> element.An SVGAnimatedLength that corresponds to the height attribute of the given <filter> element.An SVGAnimatedInteger that contains the X component of the filterRes attribute of the given <filter> element.An SVGAnimatedInteger that contains the Y component of the filterRes attribute of the given <filter> element.Sets the values of the filterRes attribute.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement"
},
{
	"api_id": "825",
	"name": "SVGFontElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGFontElement interface corresponds to the <font> elements.Object-oriented access to the attributes of the <font> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontElement"
},
{
	"api_id": "826",
	"name": "SVGFontFaceElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGFontFaceElement interface corresponds to the <font-face> elements.Object-oriented access to the attributes of the <font-face> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceElement"
},
{
	"api_id": "827",
	"name": "SVGFontFaceFormatElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGFontFaceFormatElement interface corresponds to the <font-face-format> elements.Object-oriented access to the attributes of the <font-face-format> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceFormatElement"
},
{
	"api_id": "828",
	"name": "SVGFontFaceNameElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGFontFaceNameElement interface corresponds to the <font-face-name> elements.Object-oriented access to the attributes of the <font-face-name> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceNameElement"
},
{
	"api_id": "829",
	"name": "SVGFontFaceSrcElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGFontFaceSrcElement interface corresponds to the <font-face-src> elements.Object-oriented access to the attributes of the <font-face-src> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceSrcElement"
},
{
	"api_id": "830",
	"name": "SVGFontFaceUriElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGFontFaceUriElement interface corresponds to the <font-face-uri> elements.Object-oriented access to the attributes of the <font-face-uri> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceUriElement"
},
{
	"api_id": "831",
	"name": "SVGForeignObjectElement",
	"description": "The SVGForeignObjectElement interface provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGGraphicsElement.An SVGAnimatedLength corresponding to the x attribute of the given <foreignObject> element.An SVGAnimatedLength corresponding to the x attribute of the given <foreignObject> element.An SVGAnimatedLength corresponding to the width attribute of the given <foreignObject> element.An SVGAnimatedLength corresponding to the height attribute of the given <foreignObject> element.This interface has no methods but inherits methods from its parent, SVGGraphicsElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement"
},
{
	"api_id": "832",
	"name": "SVGGElement",
	"description": "The SVGGElement interface corresponds to the <g> element.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGGraphicsElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGraphicsElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement"
},
{
	"api_id": "833",
	"name": "SVGGeometryElement",
	"description": "The SVGGeometryElement interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.This interface also inherits properties from its parent, SVGGraphicsElement.This property reflects the pathLength attribute.This interface also inherits methods from its parent, SVGGraphicsElement.Determines whether a given point is within the fill shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the fill.Determines whether a given point is within the stroke shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the stroke.Returns the user agent's computed value for the total length of the path in user units.Returns the point at a given distance along the path.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement"
},
{
	"api_id": "834",
	"name": "SVGGlyphElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGGlyphElement interface corresponds to the <glyph> element.Object-oriented access to the attributes of the <glyph> element via the SVG DOM is not possible.Warning: This interface was removed in the SVG 2 specification.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphElement"
},
{
	"api_id": "835",
	"name": "SVGGlyphRefElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGGlyphRefElement interface corresponds to the <glyphRef> elements.This interface also inherits properties from its parent, SVGElement.A string corresponding to the glyphRef attribute of the given element.A string corresponding to the format attribute of the given element.A float corresponding to the x attribute of the given element.A float corresponding to the y attribute of the given element.A float corresponding to the dx attribute of the given element.A float corresponding to the dy attribute of the given element.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphRefElement"
},
{
	"api_id": "836",
	"name": "SVGGradientElement",
	"description": "The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.This interface also inherits properties from its parent, SVGElement.An SVGAnimatedString corresponding to the href or xlink:href attribute of the given element.An SVGAnimatedEnumeration corresponding to the gradientUnits attribute on the given element. This property takes one of the constants defined in SVGUnitTypes.An SVGAnimatedTransformList corresponding to the gradientTransform attribute on the given element.An SVGAnimatedEnumeration corresponding to the spreadMethod attribute on the given element. One of the spread method types defined on this interface.This interface does not provide any specific methods, but implements those of its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement"
},
{
	"api_id": "837",
	"name": "SVGGraphicsElement",
	"description": "The SVGGraphicsElement interface represents SVG elements whose primary purpose is to directly render graphics into a group.This interface also inherits properties from its parent, SVGElement.An SVGStringList reflecting the requiredExtensions attribute of the given element.An SVGStringList reflecting the systemLanguage attribute of the given element.An SVGAnimatedTransformList reflecting the computed value of the transform property and its corresponding transform attribute of the given element.This interface also inherits methods from its parent, SVGElement.Returns a DOMRect representing the computed bounding box of the current element.Returns a DOMMatrix representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.Returns a DOMMatrix representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.Listen to these events using addEventListener() or by assigning an event listener to the equivalent on... handler property defined on GlobalEventHandlers.Fired when the user initiates a copy action through the browser's user interface.Fired when the user has initiated a "cut" action through the browser's user interface.Fires when the user has initiated a "paste" action through the browser's user interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement"
},
{
	"api_id": "838",
	"name": "SVGHKernElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGHKernElement interface corresponds to the <hkern> elements.Object-oriented access to the attributes of the <hkern> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGHKernElement"
},
{
	"api_id": "839",
	"name": "SVGImageElement",
	"description": "The SVGImageElement interface corresponds to the <image> element.This interface also inherits properties from its parent, SVGGraphicsElement.An SVGAnimatedString corresponding to the href or xlink:href attribute of the given <image> element.A string corresponding to the crossorigin attribute of the given <image> element.A string representing a hint given to the browser on how it should decode the image.An SVGAnimatedLength corresponding to the height attribute of the given <image> element.An SVGAnimatedPreserveAspectRatio corresponding to the preserveAspectRatio attribute of the given <image> element.An SVGAnimatedLength corresponding to the width attribute of the given <image> element.An SVGAnimatedLength corresponding to the x attribute of the given <image> element.An SVGAnimatedLength corresponding to the y attribute of the given <image> element.This interface also inherits methods from its parent interface, SVGGraphicsElement.Initiates asynchronous decoding of the image data. Returns a Promise which resolves once the image data is ready to be used.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement"
},
{
	"api_id": "840",
	"name": "SVGLength",
	"description": "The SVGLength interface correspond to the <length> basic data type.An SVGLength object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.Results on a desktop monitor (pixel units will be dpi-dependent):\n    The value as a floating point value, in user units. Setting this\n    attribute will cause valueInSpecifiedUnits and\n    valueAsString to be updated automatically to reflect this\n    setting.\n    \n    Exceptions on setting: a\n    DOMException with code\n    NO_MODIFICATION_ALLOWED_ERR is raised when the length\n    corresponds to a read only attribute or when the object itself is read\n    only.\n    \n    The value as a floating point value, in the units expressed by\n    unitType. Setting this attribute will cause\n    value and valueAsString to be updated\n    automatically to reflect this setting.\n    \n    Exceptions on setting: a\n    DOMException with code\n    NO_MODIFICATION_ALLOWED_ERR is raised when the length\n    corresponds to a read only attribute or when the object itself is read\n    only.\n    \n    The value as a string value, in the units expressed by\n    unitType. Setting this attribute will cause\n    value, valueInSpecifiedUnits, and\n    unitType to be updated automatically to reflect this\n    setting.\n    Exceptions on setting:\n    Reset the value as a number with an associated unitType, thereby\n    replacing the values for all of the attributes on the object.\n    Exceptions:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLength"
},
{
	"api_id": "841",
	"name": "SVGLengthList",
	"description": "The SVGLengthList defines a list of SVGLength objects.An SVGLengthList object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.Note: Starting in Gecko 5.0,the SVGLengthList DOM interface is now indexable and can be accessed like arrays\n    Clears all existing current items from the list, with the result being\n    an empty list.\n    Exceptions:\n    Clears all existing current items from the list and re-initializes the\n    list to hold the single item specified by the parameter. If the\n    inserted item is already in a list, it is removed from its previous\n    list before it is inserted into this list. The inserted item is the\n    item itself and not a copy. The return value is the item inserted into\n    the list.\n    Exceptions:\n    Returns the specified item from the list. The returned item is the\n    item itself and not a copy. Any changes made to the item are\n    immediately reflected in the list. The first item is number 0.\n    Exceptions:\n    Inserts a new item into the list at the specified position. The first\n    item is number 0. If newItem is already in a list, it is\n    removed from its previous list before it is inserted into this list.\n    The inserted item is the item itself and not a copy. If the item is\n    already in this list, note that the index of the item to insert before\n    is before the removal of the item. If the index is equal\n    to 0, then the new item is inserted at the front of the list. If the\n    index is greater than or equal to numberOfItems, then the\n    new item is appended to the end of the list.\n    Exceptions:\n    Replaces an existing item in the list with a new item. If\n    newItem is already in a list, it is removed from its\n    previous list before it is inserted into this list. The inserted item\n    is the item itself and not a copy. If the item is already in this\n    list, note that the index of the item to replace is before the removal\n    of the item.\n    Exceptions:Removes an existing item from the list.Exceptions:\n    Inserts a new item at the end of the list. If newItem is\n    already in a list, it is removed from its previous list before it is\n    inserted into this list. The inserted item is the item itself and not\n    a copy.\n    Exceptions:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList"
},
{
	"api_id": "842",
	"name": "SVGLinearGradientElement",
	"description": "The SVGLinearGradientElement interface corresponds to the <linearGradient> element.This interface also inherits properties from its parent, SVGGradientElement.An SVGAnimatedLength corresponding to the x1 attribute of the given <linearGradient> element.An SVGAnimatedLength corresponding to the y1 attribute of the given <linearGradient> element.An SVGAnimatedLength corresponding to the x2 attribute of the given <linearGradient> element.An SVGAnimatedLength corresponding to the y2 attribute of the given <linearGradient> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGradientElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement"
},
{
	"api_id": "843",
	"name": "SVGLineElement",
	"description": "The SVGLineElement interface provides access to the properties of <line> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGGeometryElement.Returns an SVGAnimatedLength that corresponds to attribute x1 on the given <line> element.Returns an SVGAnimatedLength that corresponds to attribute y1 on the given <line> element.Returns an SVGAnimatedLength that corresponds to attribute x2 on the given <line> element.Returns an SVGAnimatedLength that corresponds to attribute y2 on the given <line> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGeometryElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement"
},
{
	"api_id": "844",
	"name": "SVGMarkerElement",
	"description": "The SVGMarkerElement interface provides access to the properties of <marker> elements, as well as methods to manipulate them. The <marker> element defines the graphics used for drawing marks on a shape.The following properties and methods all return, or act on the attributes of the <marker> element represented by SVGMarkerElement.This interface also inherits properties from its parent, SVGElement.Returns an SVGAnimatedEnumeration object, with one of the following values:SVG_MARKERUNITS_UNKNOWN which means that the markerUnits attribute has a value other than the two predefined keywords.SVG_MARKERUNITS_USERSPACEONUSE which means that the markerUnits attribute has the keyword value userSpaceOnUse.SVG_MARKERUNITS_STROKEWIDTH which means that the markerUnits attribute has the keyword value strokeWidth.Returns an SVGAnimatedLength object containing the width of the <marker> viewport.Returns an SVGAnimatedLength object containing the height of the <marker> viewport.Returns an SVGAnimatedEnumeration object, with one of the following values:SVG_MARKER_ORIENT_UNKNOWN which means that the orient attribute has a value other than the two predefined keywords.SVG_MARKERUNITS_ORIENT_AUTO which means that the orient attribute has the keyword value auto.SVG_MARKERUNITS_ORIENT_ANGLE which means that the orient attribute has an <angle> or <number> value indicating the angle.Returns an SVGAnimatedAngle object containing the angle of the orient attribute.Returns an SVGAnimatedLength object containing the value of the refX attribute of the <marker>.Returns an SVGAnimatedLength object containing the value of the refY attribute of the <marker>.Returns an SVGAnimatedRect object containing an SVGRect which contains the values set by the viewBox attribute on the <marker>.Returns an SVGPreserveAspectRatio object which contains the values set by the preserveAspectRatio attribute on the <marker> viewport.This interface also inherits methods from its parent, SVGElement.Sets the value of the orient attribute to auto.Sets the value of the orient attribute to a specific angle value.The following SVG will be referenced in the examples.The markerWidth property returns an SVGAnimatedLength which contains an SVGLength with the value of the markerWidth attribute.In the following example the value of the orient attribute is updated using setOrientToAngle() using an SVGAngle created using SVGElement.createSVGAngle().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMarkerElement"
},
{
	"api_id": "845",
	"name": "SVGMaskElement",
	"description": "The SVGMaskElement interface provides access to the properties of <mask> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGElement.An SVGAnimatedEnumeration corresponding to the maskUnits attribute of the given <mask> element. Takes one of the constants defined in SVGUnitTypes.An SVGAnimatedEnumeration corresponding to the maskContentUnits attribute of the given <mask> element. Takes one of the constants defined in SVGUnitTypes.An SVGAnimatedLength corresponding to the x attribute of the given <mask> element.An SVGAnimatedLength corresponding to the y attribute of the given <mask> element.An SVGAnimatedLength corresponding to the width attribute of the given <mask> element.An SVGAnimatedLength corresponding to the height attribute of the given <mask> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement"
},
{
	"api_id": "846",
	"name": "SVGMatrix",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Many of SVG's graphics operations utilize 2x3 matrices of the form:which, when expanded into a 3x3 matrix for the purposes of matrix arithmetic, become:An SVGMatrix object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.SVGMatrix does not have a public constructor. You can create an SVGMatrix using the createSVGMatrix() method of SVGSVGElement.Warning: SVG 2 replaced the SVGMatrix interface by the more general DOMMatrix and DOMMatrixReadOnly interfaces.A float representing the a component of the matrix.A float representing the b component of the matrix.A float representing the c component of the matrix.A float representing the d component of the matrix.A float representing the e component of the matrix.A float representing the f component of the matrix.Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as SVGMatrix.Returns the inverse matrix as SVGMatrix.Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as SVGMatrix.Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as SVGMatrix.Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as SVGMatrix.Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as SVGMatrix.Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as SVGMatrix. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used.Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as SVGMatrix.Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as SVGMatrix.Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as SVGMatrix.Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as SVGMatrix.A DOMException with the code NO_MODIFICATION_ALLOWED_ERR is raised when attempting updating a read-only attribute or when the object itself is read-only.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix"
},
{
	"api_id": "847",
	"name": "SVGMetadataElement",
	"description": "The SVGMetadataElement interface corresponds to the <metadata> element.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement"
},
{
	"api_id": "848",
	"name": "SVGMissingGlyphElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGMissingGlyphElement interface corresponds to the <missing-glyph> elements.Object-oriented access to the attributes of the <missing-glyph> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMissingGlyphElement"
},
{
	"api_id": "849",
	"name": "SVGMPathElement",
	"description": "The SVGMPathElement interface corresponds to the <mpath> element.This interface also inherits properties from its parent, SVGElement.An SVGAnimatedString that corresponds to the href or xlink:href attribute of the given <mpath> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement"
},
{
	"api_id": "850",
	"name": "SVGNumber",
	"description": "The SVGNumber interface corresponds to the <number> basic data type.An SVGNumber object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.A float representing the number.Note: If the SVGNumber is read-only, a DOMException with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.This interface doesn't provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber"
},
{
	"api_id": "851",
	"name": "SVGNumberList",
	"description": "The SVGNumberList defines a list of SVGNumber objects.An SVGNumberList object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.Note: Starting in Gecko 5.0,the SVGNumberList DOM interface is now indexable and can be accessed like arrays.\n    Clears all existing current items from the list, with the result being\n    an empty list.\n    Exceptions:\n    Clears all existing current items from the list and re-initializes the\n    list to hold the single item specified by\n    newItem. If the inserted item is already in a list, it is removed from its\n    previous list before it is inserted into this list. The inserted item\n    is the item itself and not a copy. The return value is the item\n    inserted into the list.\n    Exceptions:\n    Returns the specified item from the list. The returned item is the\n    item itself and not a copy. Any changes made to the item are\n    immediately reflected in the list. The first item is\n    number 0.\n    Exceptions:\n    Inserts a new item into the list at the specified position. The first\n    item is number 0.\n    \n    If newItem is already in a list, it is removed\n    from its previous list before it is inserted into this list. The\n    inserted item is the item itself and not a copy. If the item is\n    already in this list, note that the index of the item to insert before\n    is before the removal of the item.\n    \n    If the index is equal to 0, then\n    the new item is inserted at the front of the list. If the index is\n    greater than or equal to numberOfItems, then the new item\n    is appended to the end of the list.\n    Exceptions:\n    Replaces an existing item in the list with a new item. If\n    newItem is already in a list, it is removed\n    from its previous list before it is inserted into this list. The\n    inserted item is the item itself and not a copy. If the item is\n    already in this list, note that the index of the item to replace is\n    before the removal of the item.\n    Exceptions:Removes an existing item from the list.Exceptions:\n    Inserts a new item at the end of the list. If\n    newItem is already in a list, it is removed\n    from its previous list before it is inserted into this list. The\n    inserted item is the item itself and not a copy.\n    Exceptions:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList"
},
{
	"api_id": "852",
	"name": "SVGPathElement",
	"description": "The SVGPathElement interface corresponds to the <path> element.Note: In SVG 2 the getPathSegAtLength() and createSVGPathSeg* methods were removed and the pathLength property and the getTotalLength() and getPointAtLength() methods were moved to SVGGeometryElement.This interface inherits properties from its parent, SVGGeometryElement.This interface also inherits methods from its parent, SVGGeometryElement.Returns an unsigned long representing the index within the pathSegList utilizing the user agent's distance-along-a-path algorithm.Returns a stand-alone, parentless SVGPathSegClosePath object.Returns a stand-alone, parentless SVGPathSegMovetoAbs object.Returns a stand-alone, parentless SVGPathSegMovetoRel object.Returns a stand-alone, parentless SVGPathSegLinetoAbs object.Returns a stand-alone, parentless SVGPathSegLinetoRel object.Returns a stand-alone, parentless SVGPathSegCurvetoCubicAbs object.Returns a stand-alone, parentless SVGPathSegCurvetoCubicRel object.Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticAbs object.Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticRel object.Returns a stand-alone, parentless SVGPathSegArcAbs object.Returns a stand-alone, parentless SVGPathSegArcRel object.Returns a stand-alone, parentless SVGPathSegLinetoHorizontalAbs object.Returns a stand-alone, parentless SVGPathSegLinetoHorizontalRel object.Returns a stand-alone, parentless SVGPathSegLinetoVerticalAbs object.Returns a stand-alone, parentless SVGPathSegLinetoVerticalRel object.Returns a stand-alone, parentless SVGPathSegCurvetoCubicSmoothAbs object.Returns a stand-alone, parentless SVGPathSegCurvetoCubicSmoothRel object.Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticSmoothAbs object.Returns a stand-alone, parentless SVGPathSegCurvetoQuadraticSmoothRel object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement"
},
{
	"api_id": "853",
	"name": "SVGPatternElement",
	"description": "The SVGPatternElement interface corresponds to the <pattern> element.This interface also inherits properties from its parent, SVGElement and implements the ones from SVGFitToViewBox.An SVGAnimatedString corresponding to the href or xlink:href attribute of the given <pattern> element.An SVGAnimatedEnumeration corresponding to the patternUnits attribute of the given <pattern> element. Takes one of the constants defined in SVGUnitTypes.An SVGAnimatedEnumeration corresponding to the patternContentUnits attribute of the given <pattern> element. Takes one of the constants defined in SVGUnitTypes.An SVGAnimatedTransformList corresponding to the patternTransform attribute of the given <pattern> element.An SVGAnimatedEnumeration corresponding to the x attribute of the given <pattern> element.An SVGAnimatedEnumeration corresponding to the y attribute of the given <pattern> element.An SVGAnimatedEnumeration corresponding to the width attribute of the given <pattern> element.An SVGAnimatedEnumeration corresponding to the height attribute of the given <pattern> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement and implements the ones from SVGFitToViewBox.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement"
},
{
	"api_id": "854",
	"name": "SVGPoint",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n  Warning: SVGPoint is deprecated.\n  Use DOMPoint or DOMPointReadOnly instead.\n  An SVGPoint represents a 2D or 3D point in the SVG coordinate system.The returned value is an SVGPoint object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint"
},
{
	"api_id": "855",
	"name": "SVGPointList",
	"description": "The SVGPointList interface represents a list of SVGPoint objects.An SVGPointList can be designated as read-only, which means that attempts to modify the object will result in an exception being thrown.Returns the number of points in the list.Returns the number of points in the list.Removes all items in the list.First removes all items in the list, then adds a single value to the list.Gets an item from the list at a specified position.Inserts an element into the list at a specified position.Replaces an item in the list with a new item.Removes an item from the list.Adds an item to the end of the list.The following example shows an SVG which contains a <polyline> with five coordinate pairs. The points property returns an SVGPointList.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPointList"
},
{
	"api_id": "856",
	"name": "SVGPolygonElement",
	"description": "The SVGPolygonElement interface provides access to the properties of <polygon> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGGeometryElement.A SVGPointList representing the animated value of the element's points attribute. If the points attribute is not being animated, it contains the same value as the points property.A SVGPointList representing the base (i.e., static) value of the element's points attribute. Modifications via the SVGPointList object are reflected in the points attribute, and vice versa.This interface doesn't implement any specific methods, but inherits methods from its parent, SVGGeometryElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement"
},
{
	"api_id": "857",
	"name": "SVGPolylineElement",
	"description": "The SVGPolylineElement interface provides access to the properties of <polyline> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGGeometryElement.A SVGPointList representing the animated value of the element's points attribute. If the points attribute is not being animated, it contains the same value as the points property.A SVGPointList representing the base (i.e., static) value of the element's points attribute. Modifications via the SVGPointList object are reflected in the points attribute, and vice versa.This interface doesn't implement any specific methods, but inherits methods from its parent, SVGGeometryElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement"
},
{
	"api_id": "858",
	"name": "SVGPreserveAspectRatio",
	"description": "The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.An SVGPreserveAspectRatio object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.Exceptions on setting: a DOMException with code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value of an attribute on a read only object.The SVGPreserveAspectRatio interface do not provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio"
},
{
	"api_id": "859",
	"name": "SVGRadialGradientElement",
	"description": "The SVGRadialGradientElement interface corresponds to the <RadialGradient> element.This interface also inherits properties from its parent, SVGGradientElement.An SVGAnimatedLength corresponding to the cx attribute of the given <RadialGradient> element.An SVGAnimatedLength corresponding to the cy attribute of the given <RadialGradient> element.An SVGAnimatedLength corresponding to the r attribute of the given <RadialGradient> element.An SVGAnimatedLength corresponding to the fx attribute of the given <RadialGradient> element.An SVGAnimatedLength corresponding to the fy attribute of the given <RadialGradient> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGradientElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement"
},
{
	"api_id": "860",
	"name": "SVGRect",
	"description": "The SVGRect represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.An SVGRect object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of 0 were specified.The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of 0 were specified.This represents the width of the rectangle. A value that is negative results to an error. A value of 0 disables rendering of the elementThis represents the height of the rectangle. A value that is negative results to an error. A value of 0 disables rendering of the element.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRect"
},
{
	"api_id": "861",
	"name": "SVGRectElement",
	"description": "The SVGRectElement interface provides access to the properties of <rect> elements, as well as methods to manipulate them.This interface also inherits properties from its parent, SVGGeometryElement.Returns an SVGAnimatedLength corresponding to the x attribute of the given <rect> element.Returns an SVGAnimatedLength corresponding to the y attribute of the given <rect> element.Returns an SVGAnimatedLength corresponding to the width attribute of the given <rect> element.Returns an SVGAnimatedLength corresponding to the height attribute of the given <rect> element.Returns an SVGAnimatedLength corresponding to the rx attribute of the given <rect> element.Returns an SVGAnimatedLength corresponding to the ry attribute of the given <rect> element.This interface doesn't implement any specific methods, but inherits methods from its parent, SVGGeometryElement.This example sets the fill color of an SVGRectElement to a random value whenever the user clicks it.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement"
},
{
	"api_id": "862",
	"name": "SVGRenderingIntent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGRenderingIntent interface defines the enumerated list of possible values for rendering-intent attributes or descriptors.Warning: This interface was removed in the SVG 2 specification.This interface doesn't implement any specific properties.This interface doesn't implement any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGRenderingIntent"
},
{
	"api_id": "863",
	"name": "SVGScriptElement",
	"description": "The SVGScriptElement interface corresponds to the SVG <script> element.An SVGAnimatedString corresponding to the href or xlink:href attribute of the given <script> element.A string corresponding to the type attribute of the given <script> element. A DOMException is raised with the code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read only attribute.A string corresponding to the crossorigin attribute of the given <script> element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement"
},
{
	"api_id": "864",
	"name": "SVGSetElement",
	"description": "The SVGSetElement interface corresponds to the <set> element.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGAnimationElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGAnimationElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement"
},
{
	"api_id": "865",
	"name": "SVGStopElement",
	"description": "The SVGStopElement interface corresponds to the <stop> element.This interface also inherits properties from its parent interface, SVGElement.An SVGAnimatedNumber corresponding to the offset of the given element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement"
},
{
	"api_id": "866",
	"name": "SVGStringList",
	"description": "The SVGStringList defines a list of strings.An SVGStringList object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n    Clears all existing current items from the list, with the result being\n    an empty list.\n    Exceptions:\n    Clears all existing current items from the list and re-initializes the\n    list to hold the single item specified by the parameter. If the\n    inserted item is already in a list, it is removed from its previous\n    list before it is inserted into this list. The inserted item is the\n    item itself and not a copy. The return value is the item inserted into\n    the list.\n    Exceptions:\n    Returns the specified item from the list. The returned item is the\n    item itself and not a copy. Any changes made to the item are\n    immediately reflected in the list. The first item is number 0.\n    Exceptions:\n    Inserts a new item into the list at the specified position. The first\n    item is number 0. If newItem is already in a list, it is\n    removed from its previous list before it is inserted into this list.\n    The inserted item is the item itself and not a copy. If the item is\n    already in this list, note that the index of the item to insert before\n    is before the removal of the item. If the index is equal\n    to 0, then the new item is inserted at the front of the list. If the\n    index is greater than or equal to numberOfItems, then the\n    new item is appended to the end of the list.\n    Exceptions:\n    Replaces an existing item in the list with a new item. If\n    newItem is already in a list, it is removed from its\n    previous list before it is inserted into this list. The inserted item\n    is the item itself and not a copy. If the item is already in this\n    list, note that the index of the item to replace is before the removal\n    of the item.\n    Exceptions:Removes an existing item from the list.Exceptions:\n    Inserts a new item at the end of the list. If newItem is\n    already in a list, it is removed from its previous list before it is\n    inserted into this list. The inserted item is the item itself and not\n    a copy.\n    Exceptions:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList"
},
{
	"api_id": "867",
	"name": "SVGStyleElement",
	"description": "The SVGStyleElement interface corresponds to the SVG <style> element.This interface also inherits properties from its parent interface, SVGElement.A string corresponding to the type attribute of the given element.SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.A string corresponding to the media attribute of the given element.SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.A string corresponding to the title attribute of the given element.SVG 1.1 defined that a DOMException is raised with code NO_MODIFICATION_ALLOWED_ERR on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement"
},
{
	"api_id": "868",
	"name": "SVGSVGElement",
	"description": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.This interface also inherits properties from its parent, SVGGraphicsElement and also implements the ones from SVGFitToViewBox.An SVGAnimatedLength corresponding to the x attribute of the given <svg> element.An SVGAnimatedLength corresponding to the y attribute of the given <svg> element.An SVGAnimatedLength corresponding to the width attribute of the given <svg> element.An SVGAnimatedLength corresponding to the height attribute of the given <svg> element.An SVGAnimatedLength corresponding to the contentScriptType attribute of the given <svg> element.An SVGAnimatedLength corresponding to the contentStyleType attribute of the given <svg> element.A float representing the size of the pixel unit (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided.A float representing the size of a pixel unit along the y-axis of the viewport.User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the browser actually knows the physical size of a "screen unit", this float attribute will express that information; otherwise, user agents will provide a suitable default value (such as .28mm).Corresponding size of a screen pixel along the y-axis of the viewport.The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view, i.e., based on attributes on the <svg> element such as viewBox) or on a "custom" view (i.e., a hyperlink into a particular <view> or other element). If the initial view is the "standard" view, then this attribute is false. If the initial view is a "custom" view, then this attribute is true.An SVGViewSpec defining the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation: If the initial view was a "standard" view, then:If the initial view was a link into a <view> element, then:If the initial view was a link into another element (i.e., other than a <view>), then:If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(…)), then:On an outermost <svg> element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes currentScale and currentTranslate are equivalent to the 2×3 matrix [a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]. If "magnification" is enabled (i.e., zoomAndPan="magnify"), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost <svg> element).An SVGPoint representing the translation factor that takes into account user "magnification" corresponding to an outermost <svg> element. The behavior is undefined for <svg> elements that are not at the outermost level.This interface also inherits methods from its parent, SVGGraphicsElement and also implements the ones from SVGFitToViewBox.Takes a time-out value which indicates that redraw shall not occur until:the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out.In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to suspendRedraw() and unsuspendRedraw() should, but need not be, made in balanced pairs.To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:and follow the changes with a method call similar to:Note that multiple suspendRedraw() calls can be used at once, and that each such method call is treated independently of the other suspendRedraw() method calls.Cancels a specified suspendRedraw() by providing a unique suspend handle ID that was returned by a previous suspendRedraw() call.Cancels all currently active suspendRedraw() method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending suspendRedraw() method calls have been cancelled.In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this <svg> element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.Resumes (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.Returns true if this SVG document fragment is in a paused state.Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime() is called before the document timeline has begun (for example, by script running in a <script> element before the document's SVGLoad event is dispatched), then 0 is returned.Adjusts the clock for this SVG document fragment, establishing a new current time. If setCurrentTime() is called before the document timeline has begun (for example, by script running in a <script> element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.Returns a NodeList of graphics elements whose rendered content intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing.Returns a NodeList of graphics elements whose rendered content is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing.Returns true if the rendered content of the given element intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing.Returns true if the rendered content of the given element is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing.Unselects any selected objects, including any selections of text strings and type-in bars.Creates an SVGNumber object outside of any document trees. The object is initialized to 0.Creates an SVGLength object outside of any document trees. The object is initialized to 0 user units.Creates an SVGAngle object outside of any document trees. The object is initialized to a value of 0 degrees (unitless).Creates an SVGPoint object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system.Creates an SVGMatrix object outside of any document trees. The object is initialized to the identity matrix.Creates an SVGRect object outside of any document trees. The object is initialized such that all values are set to 0 user units.Creates an SVGTransform object outside of any document trees. The object is initialized to an identity matrix transform (SVG_TRANSFORM_MATRIX).Creates an SVGTransform object outside of any document trees. The object is initialized to the given matrix transform (i.e., SVG_TRANSFORM_MATRIX). The values from the parameter matrix are copied, the matrix parameter is not adopted as SVGTransform::matrix.Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id.The following Window onXYZ event handler properties are also available as aliases targeting the window object. However, it is advised to listen to them on the window object directly rather than on SVGSVGElement.Note: Using addEventListener() on SVGSVGElement will not work for the onXYZ event handlers listed below. Listen to the events on the window object instead.Fired after the associated document has started printing or the print preview has been closed.Fired when the associated document is about to be printed or previewed for printing.Fired when the window, the document and its resources are about to be unloaded.Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.Fired when the browser detects that a gamepad has been disconnected.Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).Fired when the user's preferred language changes.Fired when the window receives a message, for example from a call to Window.postMessage() from another browsing context.Fired when the window receives a message that can't be deserialized.Fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.Fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.Fired when the browser hides the current page in the process of presenting a different page from the session's history.Fired when the browser displays the window's document due to navigation.Fired when the active history entry changes while the user navigates the session history.Fired whenever a JavaScript Promise is rejected and the rejection has been handled.Fired when a storage area (localStorage) has been modified in the context of another document.Fired whenever a Promise is rejected but the rejection was not handled.Fired when the document is being unloaded.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement"
},
{
	"api_id": "869",
	"name": "SVGSwitchElement",
	"description": "The SVGSwitchElement interface corresponds to the <switch> element.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGGraphicsElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGraphicsElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement"
},
{
	"api_id": "870",
	"name": "SVGSymbolElement",
	"description": "The SVGSymbolElement interface corresponds to the <symbol> element.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGGraphicsElement, and implements properties from SVGFitToViewBox.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGraphicsElement, and implements methods from SVGFitToViewBox.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement"
},
{
	"api_id": "871",
	"name": "SVGTextContentElement",
	"description": "The SVGTextContentElement interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.This interface also inherits properties from its parent, SVGGraphicsElement.An SVGAnimatedLength reflecting the textLength attribute of the given element.An SVGAnimatedEnumeration reflecting the lengthAdjust attribute of the given element. The numeric type values represent one of the constant values above.This interface also inherits methods from its parent, SVGGraphicsElement.Returns a long representing the total number of addressable characters available for rendering within the current element, regardless of whether they will be rendered.Returns a float representing the computed length for the text within the element.Returns a float representing the computed length of the formatted text advance distance for a substring of text within the element. Note that this method only accounts for the widths of the glyphs in the substring and any extra spacing inserted by the CSS 'letter-spacing' and 'word-spacing' properties. Visual spacing adjustments made by the 'x' attribute is ignored.Returns a DOMPoint representing the position of a typographic character after text layout has been performed.Note: In SVG 1.1 this method returned an SVGPoint.Returns a DOMPoint representing the trailing position of a typographic character after text layout has been performed.Note: In SVG 1.1 this method returned an SVGPoint.Returns a DOMRect representing the computed tight bounding box of the glyph cell that corresponds to a given typographic character.Returns a float representing the rotation of typographic character.Returns a long representing the character which caused a text glyph to be rendered at a given position in the coordinate system. Because the relationship between characters and glyphs is not one-to-one, only the first character of the relevant typographic character is returnedSelects text within the element.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement"
},
{
	"api_id": "872",
	"name": "SVGTextElement",
	"description": "The SVGTextElement interface corresponds to the <text> elements.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGTextPositioningElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGTextPositioningElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement"
},
{
	"api_id": "873",
	"name": "SVGTextPathElement",
	"description": "The SVGTextPathElement interface corresponds to the <textPath> element.This interface also inherits properties from its parent interface, SVGTextContentElement.An SVGAnimatedString corresponding to the href or xlink:href attribute of the given element.An SVGAnimatedLength corresponding to the X component of the startOffset attribute of the given element.An SVGAnimatedEnumeration corresponding to the method attribute of the given element. It takes one of the TEXTPATH_METHODTYPE_* constants defined on this interface.An SVGAnimatedEnumeration corresponding to the spacing attribute of the given element. It takes one of the TEXTPATH_SPACINGTYPE_* constants defined on this interface.This interface does not provide any specific methods, but implements those of its parent, SVGTextContentElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement"
},
{
	"api_id": "874",
	"name": "SVGTextPositioningElement",
	"description": "The SVGTextPositioningElement interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.This interface also inherits properties from its parent, SVGTextContentElement.Returns an SVGAnimatedLengthList reflecting the x attribute of the given element.Returns an SVGAnimatedLengthList reflecting the y attribute of the given element.Returns an SVGAnimatedLengthList reflecting the dx attribute of the given element.Returns an SVGAnimatedLengthList reflecting the dy attribute of the given element.Returns an SVGAnimatedNumberList reflecting the rotate attribute of the given element.This interface doesn't provide any specific methods, but inherits methods from its parent, SVGTextContentElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement"
},
{
	"api_id": "875",
	"name": "SVGTitleElement",
	"description": "The SVGTitleElement interface corresponds to the <title> element.This interface doesn't implement any specific properties, but inherits properties from its parent interface, SVGElement.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement"
},
{
	"api_id": "876",
	"name": "SVGTransform",
	"description": "SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.An SVGTransform object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.\n    The matrix that represents this transformation. The matrix object is\n    live, meaning that any changes made to the\n    SVGTransform object are immediately reflected in the\n    matrix object and vice versa. In case the matrix object is changed\n    directly (i.e., without using the methods on the\n    SVGTransform interface itself) then the type of the\n    SVGTransform changes to\n    SVG_TRANSFORM_MATRIX.\n    \n    Sets the transform type to SVG_TRANSFORM_MATRIX, with\n    parameter matrix defining the new transformation. Note that the values\n    from the parameter matrix are copied.\n    Exceptions:\n    Sets the transform type to SVG_TRANSFORM_TRANSLATE, with\n    parameters tx and ty defining the\n    translation amounts.\n    Exceptions:\n    Sets the transform type to SVG_TRANSFORM_SCALE, with\n    parameters sx and sy defining the scale\n    amounts.\n    Exceptions:\n    Sets the transform type to SVG_TRANSFORM_ROTATE, with\n    parameter angle defining the rotation angle and\n    parameters cx and cy defining the optional\n    center of rotation.\n    Exceptions:\n    Sets the transform type to SVG_TRANSFORM_SKEWX, with\n    parameter angle defining the amount of skew.\n    Exceptions:\n    Sets the transform type to SVG_TRANSFORM_SKEWY, with\n    parameter angle defining the amount of skew.\n    Exceptions:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform"
},
{
	"api_id": "877",
	"name": "SVGTransformList",
	"description": "The SVGTransformList defines a list of SVGTransform objects.An SVGTransformList object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.Note: Starting in Gecko 9.0,the SVGTransformList DOM interface is now indexable and can be accessed like Arrays\n    Clears all existing current items from the list, with the result being\n    an empty list.\n    Exceptions:\n    Clears all existing current items from the list and re-initializes the\n    list to hold the single item specified by the parameter. If the\n    inserted item is already in a list, it is removed from its previous\n    list before it is inserted into this list. The inserted item is the\n    item itself and not a copy. The return value is the item inserted into\n    the list.\n    Exceptions:\n    Returns the specified item from the list. The returned item is the\n    item itself and not a copy. Any changes made to the item are\n    immediately reflected in the list. The first item is number 0.\n    Exceptions:\n    Inserts a new item into the list at the specified position. The first\n    item is number 0. If newItem is already in a list, it is\n    removed from its previous list before it is inserted into this list.\n    The inserted item is the item itself and not a copy. If the item is\n    already in this list, note that the index of the item to insert before\n    is before the removal of the item. If the index is equal\n    to 0, then the new item is inserted at the front of the list. If the\n    index is greater than or equal to numberOfItems, then the\n    new item is appended to the end of the list.\n    Exceptions:\n    Replaces an existing item in the list with a new item. If\n    newItem is already in a list, it is removed from its\n    previous list before it is inserted into this list. The inserted item\n    is the item itself and not a copy. If the item is already in this\n    list, note that the index of the item to replace is before the removal\n    of the item.\n    Exceptions:Removes an existing item from the list.Exceptions:\n    Inserts a new item at the end of the list. If newItem is\n    already in a list, it is removed from its previous list before it is\n    inserted into this list. The inserted item is the item itself and not\n    a copy.\n    Exceptions:\n    Consolidates the list of separate SVGTransform objects by\n    multiplying the equivalent transformation matrices together to result\n    in a list consisting of a single SVGTransform object of\n    type SVG_TRANSFORM_MATRIX. The consolidation operation\n    creates new SVGTransform object as the first and only\n    item in the list. The returned item is the item itself and not a copy.\n    Any changes made to the item are immediately reflected in the list.\n    Exceptions:In this example we create a function that will apply three different transformations to the SVG element that has been clicked on. In order to do this we create a separate SVGTransform object for each transformation — such as translate, rotate, and scale. We apply multiple transformation by appending the transform object to the SVGTransformList associated with an SVG element.Live preview:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList"
},
{
	"api_id": "878",
	"name": "SVGTRefElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGTRefElement interface corresponds to the <tref> elements.Object-oriented access to the attributes of the <tref> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGTextPositioningElement.This interface has no methods but inherits methods from its parent, SVGTextPositioningElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTRefElement"
},
{
	"api_id": "879",
	"name": "SVGTSpanElement",
	"description": "The SVGTSpanElement interface represents a <tspan> element.This interface doesn't provide any specific properties, but inherits the properties from its parent, SVGTextPositioningElement.This interface doesn't provide any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement"
},
{
	"api_id": "880",
	"name": "SVGUnitTypes",
	"description": "The SVGUnitTypes interface defines a commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.This interface doesn't implement any specific properties.This interface doesn't implement any specific methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes"
},
{
	"api_id": "881",
	"name": "SVGUseElement",
	"description": "The SVGUseElement interface corresponds to the <use> element.This interface also inherits properties from its parent interface, SVGGraphicsElement.An SVGAnimatedString corresponding to the href or xlink:href attribute of the given element.An SVGAnimatedLength corresponding to the x attribute of the given element.An SVGAnimatedLength corresponding to the y attribute of the given element.An SVGAnimatedLength corresponding to the width attribute of the given element.An SVGAnimatedLength corresponding to the height attribute of the given element.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGGraphicsElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement"
},
{
	"api_id": "882",
	"name": "SVGViewElement",
	"description": "The SVGViewElement interface provides access to the properties of <view> elements, as well as methods to manipulate them.This interface also inherits properties from its parent interface, SVGElement.An SVGStringList corresponding to the viewTarget attribute of the given <view> element. A list of string values which contain the names listed in the viewTarget attribute. Each of the string values can be associated with the corresponding element using the getElementById() method call.This interface doesn't implement any specific methods, but inherits methods from its parent interface, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement"
},
{
	"api_id": "883",
	"name": "SVGVKernElement",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The SVGVKernElement interface corresponds to the <vkern> elements.Object-oriented access to the attributes of the <vkern> element via the SVG DOM is not possible.This interface has no properties but inherits properties from its parent, SVGElement.This interface has no methods but inherits methods from its parent, SVGElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGVKernElement"
},
{
	"api_id": "884",
	"name": "SyncEvent",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.The SyncEvent interface represents a sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.This interface inherits from the ExtendableEvent interface.Creates a new SyncEvent object.Inherits properties from its ancestor, Event.Returns the developer-defined identifier for this SyncEvent.Returns true if the user agent will not make further synchronization attempts after the current attempt.Inherits methods from its parent, ExtendableEvent.None.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent"
},
{
	"api_id": "885",
	"name": "SyncManager",
	"description": "The SyncManager interface of the ServiceWorker API provides an interface for registering and listing sync registrations.None.Create a new sync registration and return a Promise.Return a list of developer-defined identifiers for SyncManager registration.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/SyncManager"
},
{
	"api_id": "886",
	"name": "TaskAttributionTiming",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The TaskAttributionTiming interface of the Long Tasks API returns information about the work involved in a long task and its associate frame context. The frame context, also called the container, is the iframe, embed or object that is being implicated, on the whole, for a long task.Returns the type of frame container, one of iframe, embed, or object.Returns the container's src attribute.Returns the container's id attribute.Returns the container's name attribute.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TaskAttributionTiming"
},
{
	"api_id": "887",
	"name": "TaskController",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  The TaskController interface of the Prioritized Task Scheduling API represents a controller object that can be used to both abort and change the priority of one or more prioritized tasks.\n  If there is no need to change task priorities, then AbortController can be used instead.\n\n  A new TaskController instance is created using the TaskController() constructor, optionally specifying a priority for its associated signal (a TaskSignal).\n  If not specified, the signal will have a priority of "user-visible" by default.\n\n  The controller's signal can be passed as an argument to the Scheduler.postTask() method for one or more tasks.\n  For mutable tasks (only) the task is initialized with the signal priority, and can later be changed by calling TaskController.setPriority().\n  For immutable tasks, any priority initialized or set by the controller is ignored.\nTasks can be aborted by calling abort() on the controller.Creates a new TaskController object, optionally specifying the priority of its associated signal.This interface also inherits the methods of its parent, AbortController.\n  Sets the priority of the controller's signal, and hence the priority of any tasks with which it is associated.\n  This notifies observers of the priority change by dispatching a prioritychange event.\n  This interface also inherits the properties of its parent, AbortController.\n  Returns a TaskSignal object instance.\n  The signal is passed to tasks so that they can be aborted or re-prioritized by the controller.\n  The property is inherited from AbortController.\n  Note: Additional "live" examples can be found in: Prioritized Task Scheduling API > Examples.First we create a task controller, setting the priority of its associated signal to user-blocking.\n  We then add an event listener for prioritychange events (here addEventListener() is called, but we could instead assign a handler to TaskSignal.onprioritychange).\n  The handler uses previousPolicy on the event to get the original priority and TaskSignal.priority on the event target to get the new priority.\n\n  We can also listen for abort events as shown below.\n  This same approach would be used if the controller was an AbortController.\n\n  Next we post the task, passing the controller signal in the optional argument.\n  In this case the task is just an arrow function that resolves the promise by returning some text.\n  We use then and catch to handle when the task resolves or is rejected, logging the return text or the error in each case.\n  Note that in a later code block we abort the task, so only the catch() block will actually be run!\n\n  We can use the controller to manage the task.\n  Here we can change the priority using TaskController.setPriority().\n  This will trigger the associated prioritychange event.\nFinally, the task can be aborted by calling abort() on the controller.The console output of this example would be:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TaskController"
},
{
	"api_id": "888",
	"name": "TaskPriorityChangeEvent",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The TaskPriorityChangeEvent is the interface for the prioritychange event.Creates a new TaskPriorityChangeEvent object, setting an event name and previous priority.This interface also inherits the properties of its parent, Event.Returns the priority of the corresponding TaskSignal before this prioritychange event.This interface has no methods of its own, but inherits the methods of its parent, Event.\n  An object of this type is returned in the handler for a prioritychange event.\n  The code below shows a handler in which the newPriority and previousPriority are logged.\nA more complete live example can be found in prioritychange event > Examples.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TaskPriorityChangeEvent"
},
{
	"api_id": "889",
	"name": "TaskSignal",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The TaskSignal interface of the Prioritized Task Scheduling API represents a signal object that allows you to communicate with a prioritized task, and abort it or change the priority (if required) via a TaskController object.\n  An object of this type is created, and associated with, a TaskController.\n  The initial priority of the signal may be set by specifying it as an argument to the TaskController constructor (by default it is "user-visible").\n  The priority can be changed by calling TaskController.setPriority() on the controller.\n\n  The signal may be passed as the options.signal argument in Scheduler.postTask(), after which it's associated controller can be used to abort the task.\n  If the task priority is mutable, the controller can also be used to change the task's priority.\n  Abortable tasks that do not need the priority to change may instead specify an AbortSignal as the options.signal argument.\nThe TaskSignal interface also inherits properties from its parent interface, AbortSignal.Returns the priority of the signal.The TaskSignal interface inherits methods from its parent interface, AbortSignal.The TaskSignal interface inherits static methods from its parent interface, AbortSignal.The TaskSignal interface also inherits events and event handlers from its parent interface, AbortSignal.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when the priority is changed.\n  This is triggered by calling TaskController.setPriority() on the associated controller.\n  Examples for how the TaskSignal is created and used for prioritizing and aborting tasks can be found here:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TaskSignal"
},
{
	"api_id": "890",
	"name": "Text",
	"description": "The Text interface represents a text node in a DOM tree.To understand what a text node is, consider the following document:In that document, there are three text nodes, with the following contents:Each of those text nodes is an object that has the properties and methods documented in this article.Returns a new Text node with the parameter as its textual content.Inherits properties from its parents, CharacterData, Node, and EventTarget.Returns a HTMLSlotElement representing the <slot> the node is inserted in.Returns a string containing the text of all Text nodes logically adjacent to this Node, concatenated in document order.Inherits methods from its parent, CharacterData, Node, and EventTarget.Breaks the node into two nodes at a specified offset.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Text"
},
{
	"api_id": "891",
	"name": "TextDecoder",
	"description": "The TextDecoder interface represents a decoder for a specific text encoding, such as UTF-8, ISO-8859-2, KOI8-R, GBK, etc. A decoder takes a stream of bytes as input and emits a stream of code points.Note: This feature is available in Web WorkersThis example shows how to decode a Chinese/Japanese character \n  , as represented by five different typed arrays: Uint8Array, Int8Array, Uint16Array, Int16Array, and Int32Array.\nIn this example, we decode the Russian text "Привет, мир!", which means "Hello, world." In our TextDecoder() constructor, we specify the Windows-1251 character encoding, which is appropriate for Cyrillic script.Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters.The TextDecoder interface doesn't inherit any properties.A string containing the name of the decoder, that is a string describing the method the TextDecoder will use.A Boolean indicating whether the error mode is fatal.A Boolean indicating whether the byte order mark is ignored.The TextDecoder interface doesn't inherit any method.Returns a string containing the text decoded with the method of the specific TextDecoder object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"
},
{
	"api_id": "892",
	"name": "TextDecoderStream",
	"description": "The TextDecoderStream interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding. It is the streaming equivalent of TextDecoder.Creates a new TextDecoderStream object.An encoding.A boolean indicating if the error mode is fatal.A boolean indicating whether the byte order mark is ignored.Returns the ReadableStream instance controlled by this object.Returns the WritableStream instance controlled by this object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream"
},
{
	"api_id": "893",
	"name": "TextEncoder",
	"description": "The TextEncoder interface takes a stream of code points as input and emits a stream of UTF-8 bytes.Note: This feature is available in Web WorkersReturns a newly constructed TextEncoder that will generate a byte stream with UTF-8 encoding.The TextEncoder interface doesn't inherit any property.Always returns "utf-8".The TextEncoder interface doesn't inherit any method.Takes a string as input, and returns a Uint8Array containing UTF-8 encoded text.Takes a string to encode and a destination Uint8Array to put resulting UTF-8 encoded text into, and returns a dictionary object indicating the progress of the encoding. This is potentially more performant than the older encode() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"
},
{
	"api_id": "894",
	"name": "TextEncoderStream",
	"description": "The TextEncoderStream interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding. It is the streaming equivalent of TextEncoder.Creates a new TextEncoderStream object.Always returns "utf-8".Returns the ReadableStream instance controlled by this object.Returns the WritableStream instance controlled by this object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextEncoderStream"
},
{
	"api_id": "895",
	"name": "TextMetrics",
	"description": "The TextMetrics interface represents the dimensions of a piece of text in the canvas; a TextMetrics instance can be retrieved using the CanvasRenderingContext2D.measureText() method.A double giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.A double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going left from the given alignment point.A double giving the distance from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels. The distance is measured parallel to the baseline.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the em square in the line box, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the em square in the line box, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels.A double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels.This example demonstrates the baselines the TextMetrics object holds. The default baseline is the alphabeticBaseline. See also the CanvasRenderingContext2D.textBaseline property.When measuring the x-direction of a piece of text, the sum of actualBoundingBoxLeft and actualBoundingBoxRight can be wider than the width of the inline box (width), due to slanted/italic fonts where characters overhang their advance width.It can therefore be useful to use the sum of actualBoundingBoxLeft and actualBoundingBoxRight as a more accurate way to get the absolute text width:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics"
},
{
	"api_id": "896",
	"name": "TextTrack",
	"description": "The TextTrack interface—part of the API for handling WebVTT (text tracks on media presentations)—describes and controls the text track associated with a particular <track> element.This interface also inherits properties from EventTarget.A TextTrackCueList object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times. Thus, for displayed cues such as captions or subtitles, the active cues are currently being displayed.A TextTrackCueList which contains all of the track's cues.A string which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (""). If the TextTrack is associated with a <track> element, then the track's ID matches the element's ID.Returns a string which indicates the track's in-band metadata track dispatch type.Returns a string indicating what kind of text track the TextTrack describes. It must be one of the permitted values.A human-readable string which contains the text track's label, if one is present; otherwise, this is an empty string (""), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.A string which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in RFC 5646: Tags for Identifying Languages (also known as BCP 47), just like the HTML lang attribute. For example, this can be "en-US" for United States English or "pt-BR" for Brazilian Portuguese.A string specifying the track's current mode, which must be one of the permitted values. Changing this property's value changes the track's current mode to match. The default is disabled, unless the <track> element's default Boolean attribute is specified, in which case the default mode is started.This interface also inherits methods from EventTarget.Note: The TextTrackCue interface is an abstract class used as the parent for other cue interfaces such as VTTCue. Therefore, when adding or removing a cue you will be passing in one of the cue types that inherit from TextTrackCue.Adds a cue (specified as a TextTrackCue object) to the track's list of cues.Removes a cue (specified as a TextTrackCue object) from the track's list of cues.\n  Fired when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited.\n  Also available via the oncuechange property.\n  The following example adds a new TextTrack to a video, then sets it to display using TextTrack.mode.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack"
},
{
	"api_id": "897",
	"name": "TextTrackCue",
	"description": "TextTrackCue is an abstract class which is used as the basis for the various derived cue types, such as VTTCue; you will instead work with those derived types. These cues represent strings of text presented for some duration of time during the performance of a TextTrack. The cue includes the start time (the time at which the text will be displayed) and the end time (the time at which it will be removed from the display), as well as other information.This interface also inherits properties from EventTarget.The TextTrack that this cue belongs to, or null if it doesn't belong to any.A string that identifies the cue.A double that represents the video time that the cue will start being displayed, in seconds.A double that represents the video time that the cue will stop being displayed, in seconds.A boolean for whether the video will pause when this cue stops being displayed.Fired when a cue becomes active.Fired when the cue has stopped being active.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue"
},
{
	"api_id": "898",
	"name": "TextTrackCueList",
	"description": "The TextTrackCueList array-like object represents a dynamically updating list of TextTrackCue objects.This interface has no constructor. Retrieve an instance of this object with TextTrack.cues which returns all of the cues in a TextTrack object.An unsigned long that is the number of cues in the list.Returns the first TextTrackCue object with the identifier passed to it.The HTMLMediaElement.textTracks property returns a TextTrackList object listing all of the TextTrack objects, one for each text track linked to the media. The TextTrack.cues property then returns a TextTrackCueList containing the cues for that particular track.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList"
},
{
	"api_id": "899",
	"name": "TextTrackList",
	"description": "The TextTrackList interface is used to represent a list of the text tracks defined by the <track> element, with each track represented by a separate textTrack object in the list.Retrieve an instance of this object with the textTracks property of an HTMLMediaElement object.For a given HTMLMediaElement object media, the individual tracks can be accessed using:This interface also inherits properties from its parent interface, EventTarget.The number of tracks in the list.This interface also inherits methods from its parent interface, EventTarget.Returns the TextTrack found within the TextTrackList whose id matches the specified string. If no match is found, null is returned.\n  Fired when a new text track has been added to the media element.\n  Also available via the onaddtrack property.\n  \n  Fired when a text track has been made active or inactive.\n  Also available via the onchange property.\n  \n  Fired when a new text track has been removed from the media element.\n  Also available via the onremovetrack property.\n  In addition to being able to obtain direct access to the text tracks present on a media element, TextTrackList lets you set event handlers on the addtrack and removetrack events, so that you can detect when tracks are added to or removed from the media element's stream.To get a media element's TextTrackList, use its textTracks property.In this example, we have an app that displays information about the number of channels available. To keep it up to date, handlers for the addtrack and removetrack events are set up.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList"
},
{
	"api_id": "900",
	"name": "TimeEvent",
	"description": "The TimeEvent interface, a part of SVG SMIL animation, provides specific contextual information associated with Time events.A long that specifies some detail information about the Event, depending on the type of the event. For this event type, indicates the repeat number for the animation.A WindowProxy that identifies the Window from which the event was generated.Used to initialize the value of a TimeEvent created through the DocumentEvent interface. This method may only be called before the TimeEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent"
},
{
	"api_id": "901",
	"name": "TimeRanges",
	"description": "When loading a media resource for use by an <audio> or <video> element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.A TimeRanges object includes one or more ranges of time, each specified by a starting time offset and an ending time offset. You reference each time range by using the start() and end() methods, passing the index number of the time range you want to retrieve.Several members of HTMLMediaElement objects return a normalized TimeRanges object — which the spec describes as having the following characteristics:The ranges in such an object are ordered, don't overlap, and don't touch (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a single moment in time).Returns an unsigned long representing the number of time ranges represented by the time range object.Returns the time for the start of the range with the specified index.Returns the time for the end of the specified range.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges"
},
{
	"api_id": "902",
	"name": "Touch",
	"description": "The Touch interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.The Touch.radiusX, Touch.radiusY, and Touch.rotationAngle describe the area of contact between the user and the screen, the touch area. This can be helpful when dealing with imprecise pointing devices such as fingers. These values are set to describe an ellipse that as closely as possible matches the entire area of contact (such as the user's fingertip). \n  Experimental\nNote: Many of the properties' values are hardware-dependent; for example, if the device doesn't have a way to detect the amount of pressure placed on the surface, the force value will always be 0. This may also be the case for radiusX and radiusY; if the hardware reports only a single point, these values will be 1.Creates a Touch object.This interface has no parent, and doesn't inherit or implement other properties.Returns a unique identifier for this Touch object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.Returns the X coordinate of the touch point relative to the left edge of the screen.Returns the Y coordinate of the touch point relative to the top edge of the screen.Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.Returns the X coordinate of the touch point relative to the left edge of the document. Unlike clientX, this value includes the horizontal scroll offset, if any.Returns the Y coordinate of the touch point relative to the top of the document. Unlike clientY, this value includes the vertical scroll offset, if any.Returns the Element on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenX.Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenY.Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.Returns the amount of pressure being applied to the surface by the user, as a float between 0.0 (no pressure) and 1.0 (maximum pressure).This interface has no methods and no parent, and doesn't inherit or implement any methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Touch"
},
{
	"api_id": "903",
	"name": "TouchEvent",
	"description": "The TouchEvent interface represents an UIEvent which is sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.Touches are represented by the Touch object; each touch is described by a position, size and shape, amount of pressure, and target element. Lists of touches are represented by TouchList objects.Creates a TouchEvent object.This interface inherits properties from its parent, UIEvent and Event.A Boolean value indicating whether or not the alt key was down when the touch event was fired.A TouchList of all the Touch objects representing individual points of contact whose states changed between the previous touch event and this one.A Boolean value indicating whether or not the control key was down when the touch event was fired.A Boolean value indicating whether or not the meta key was down when the touch event was fired.A Boolean value indicating whether or not the shift key was down when the touch event was fired.A TouchList of all the Touch objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event.A TouchList of all the Touch objects representing all current points of contact with the surface, regardless of target or changed status.Change in rotation (in degrees) since the event's beginning. Positive values indicate clockwise rotation; negative values indicate counterclockwise rotation. Initial value: 0.0Distance between two digits since the event's beginning. Expressed as a floating-point multiple of the initial distance between the digits at the beginning of the event. Values below 1.0 indicate an inward pinch (zoom out). Values above 1.0 indicate an outward unpinch (zoom in). Initial value: 1.0There are several types of event that can be fired to indicate that touch-related changes have occurred. You can determine which of these has happened by looking at the event's TouchEvent.type property.\n  Sent when the user places a touch point on the touch surface.\n  The event's target will be the element in which the touch occurred.\n  \n  Sent when the user removes a touch point from the surface;\n  that is, when they lift a finger or stylus from the surface.\n  This is also sent\n  if the touch point moves off the edge of the surface;\n  for example, if the user's finger slides off the edge of the screen.\n  \n  The event's target is the same element\n  that received the touchstart event\n  corresponding to the touch point,\n  even if the touch point has moved outside that element.\n  \n  The touch point (or points)\n  that were removed from the surface\n  can be found in the TouchList\n  specified by the changedTouches attribute.\n  \n  Sent when the user moves a touch point along the surface.\n  The event's target is the same element\n  that received the touchstart event corresponding to the touch point,\n  even if the touch point has moved outside that element.\n  \n  This event is also sent\n  if the values of the radius, rotation angle, or force attributes of a touch point change.\n  Note: The rate at which touchmove events is sent is browser-specific, and may also vary depending on the capability of the user's hardware. You must not rely on a specific granularity of these events.\n  Sent when a touch point has been disrupted in some way.\n  There are several possible reasons why this might happen\n  (and the exact reasons will vary from device to device, as well as browser to browser):\n  It's important to note that in many cases, both touch and mouse events get sent (in order to let non-touch-specific code still interact with the user). If you use touch events, you should call preventDefault() to keep the mouse event from being sent as well.The exception to this is Chrome, starting with version 56 (desktop, Chrome for Android, and Android webview), where the default value for the passive option for touchstart and touchmove is true and calls to preventDefault() will have no effect. To override this behavior, you need to set the passive option to false, after which calling preventDefault() will work as specified. The change to treat listeners as passive by default prevents the listener from blocking page rendering while a user is scrolling. A demo is available on the Chrome Developer site.See the example on the main Touch events article.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent"
},
{
	"api_id": "904",
	"name": "TouchList",
	"description": "The TouchList interface represents a list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.The number of Touch objects in the TouchList.Returns the Touch object at the specified index in the list.See the example on the main Touch events article.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TouchList"
},
{
	"api_id": "905",
	"name": "TrackEvent",
	"description": "The TrackEvent interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are addtrack and removetrack.It's important not to confuse TrackEvent with the RTCTrackEvent interface, which is used for tracks which are part of an RTCPeerConnection.Events based on TrackEvent are always sent to one of the media track list types:Creates and initializes a new TrackEvent object with the event type specified, as well as optional additional properties.TrackEvent is based on Event, so properties of Event are also available on TrackEvent objects.The DOM track object the event is in reference to. If not null, this is always an object of one of the media track types: AudioTrack, VideoTrack, or TextTrack).TrackEvent has no methods of its own; however, it is based on Event, so it provides the methods available on Event objects.This example sets up a function, handleTrackEvent(), which is called for any addtrack or removetrack event on the first <video> element found in the document.The event handler uses the JavaScript instanceof operator to determine which type of track the event occurred on, then outputs to console a message indicating what kind of track it is and whether it's being added to or removed from the element.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent"
},
{
	"api_id": "906",
	"name": "TransformStream",
	"description": "The TransformStream interface of the Streams API represents a set of transformable data.TransformStream is a transferable object.Creates and returns a transform stream object from the given handlers.The readable end of a TransformStream.The writable end of a TransformStream.NoneIn the following example, a transform stream passes through all chunks it receives as Uint8Array values.Note that this is deprecated by the native constructors. This is intended as a polyfill for unsupported platforms.Similarly, TextDecoderStream can be written as such:This is a useful one, where multiple streams can be conjoined. Examples include building a PWA with progressive loading and progressive streaming.Note that this is not resilient to other influences.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TransformStream"
},
{
	"api_id": "907",
	"name": "TransformStreamDefaultController",
	"description": "The TransformStreamDefaultController interface of the Streams API provides methods to manipulate the associated ReadableStream and WritableStream.When constructing a TransformStream, the TransformStreamDefaultController is created. It therefore has no constructor. The way to get an instance of TransformStreamDefaultController is via the callback methods of TransformStream().Returns the desired size to fill the readable side of the stream's internal queue.Enqueues a chunk (single piece of data) in the readable side of the stream.Errors both the readable and writable side of the transform stream.Closes the readable side and errors the writable side of the stream.In the following example, a transform stream passes through all chunks it receives as Uint8Array values, using the error() and enqueue() methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TransformStreamDefaultController"
},
{
	"api_id": "908",
	"name": "TransitionEvent",
	"description": "The TransitionEvent interface represents events providing information related to transitions.Creates a TransitionEvent event with the given parameters.Also inherits properties from its parent Event.A string containing the name CSS property associated with the transition.A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.A string, starting with ::, containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''.An Event fired when a CSS transition has been cancelled.An Event fired when a CSS transition has finished playing.An Event fired when a CSS transition is created (i.e, when it is added to a set of running transitions), though not necessarily started.An Event fired when a CSS transition has started transitioning.Also inherits properties from its parent Event.Initializes a TransitionEvent created using the deprecated Document.createEvent('TransitionEvent') method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent"
},
{
	"api_id": "909",
	"name": "TreeWalker",
	"description": "The TreeWalker object represents the nodes of a document subtree and a position within them.A TreeWalker can be created using the Document.createTreeWalker() method.This interface doesn't inherit any property.Returns a Node representing the root node as specified when the TreeWalker was created.Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:Returns a NodeFilter used to select the relevant nodes.Is the Node on which the TreeWalker is currently pointing at.This interface doesn't inherit any method.Note: in the context of a TreeWalker, a node is visible if it exists in the logical view determined by the whatToShow and filter parameter arguments. (Whether or not the node is visible on the screen is irrelevant.)Moves the current Node to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.Moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed. Note that the node returned by firstChild() is dependent on the value of whatToShow set during instantiation of the TreeWalker object. Assuming the following HTML tree, and if you set the whatToShow to NodeFilter.SHOW_ALL a call to firstChild() will return a Text node and not an HTMLDivElement object.The same applies to nextSibling(), previousSibling(), firstChild() and lastChild()Moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, null is returned and the current node is not changed.Moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.Moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, null is returned and the current node is not changed.Moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns null and the current node is not changed.Moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker"
},
{
	"api_id": "910",
	"name": "TrustedHTML",
	"description": "The TrustedHTML interface of the Trusted Types API represents a string that a developer can insert into an injection sink that will render it as HTML. These objects are created via TrustedTypePolicy.createHTML() and therefore have no constructor.The value of a TrustedHTML object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.Returns a JSON representation of the stored data.A string containing the sanitized HTML.In the below example we create a policy that will create TrustedHTML objects using TrustedTypePolicyFactory.createPolicy(). We can then use TrustedTypePolicy.createHTML to create a sanitized HTML string to be inserted into the document.The sanitized value can then be used with Element.innerHTML to ensure that no new HTML elements can be injected.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TrustedHTML"
},
{
	"api_id": "911",
	"name": "TrustedScript",
	"description": "The TrustedScript interface of the Trusted Types API represents a string with an uncompiled script body that a developer can insert into an injection sink that might execute the script. These objects are created via TrustedTypePolicy.createScript() and therefore have no constructor.The value of a TrustedScript object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.Returns a JSON representation of the stored data.A string containing the sanitized script.The constant sanitized is an object created via a Trusted Types policy.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TrustedScript"
},
{
	"api_id": "912",
	"name": "TrustedScriptURL",
	"description": "The TrustedScriptURL interface of the Trusted Types API represents a string that a developer can insert into an injection sink that will parse it as a URL of an external script. These objects are created via TrustedTypePolicy.createScriptURL() and therefore have no constructor.The value of a TrustedScriptURL object is set when the object is created and cannot be changed by JavaScript as there is no setter exposed.Returns a JSON representation of the stored data.A string containing the sanitized URL.The constant sanitized is an object created via a Trusted Types policy.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TrustedScriptURL"
},
{
	"api_id": "913",
	"name": "TrustedTypePolicy",
	"description": "The TrustedTypePolicy interface of the Trusted Types API defines a group of functions which create TrustedType objects.A TrustedTypePolicy object is created by TrustedTypePolicyFactory.createPolicy() to define a policy for enforcing security rules on input. Therefore, TrustedTypePolicy has no constructor.A string containing the name of the policy.Creates a TrustedHTML object.Creates a TrustedScript object.Creates a TrustedScriptURL object.In the below example we create a policy that will create TrustedHTML objects using TrustedTypePolicyFactory.createPolicy(). We can then use TrustedTypePolicy.createHTML to create a sanitized HTML string to be inserted into the document.The sanitized value can then be used with Element.innerHTML to ensure that no new HTML elements can be injected.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy"
},
{
	"api_id": "914",
	"name": "TrustedTypePolicyFactory",
	"description": "The TrustedTypePolicyFactory interface of the Trusted Types API creates policies and allows the verification of Trusted Type objects against created policies.Returns a TrustedHTML object containing an empty string.Returns a TrustedScript object containing an empty string.Returns the default TrustedTypePolicy or null if this is empty.Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.When passed a value checks that it is a valid TrustedHTML object.When passed a value checks that it is a valid TrustedScript object.When passed a value checks that it is a valid TrustedScriptURL object.Allows web developers to check whether a Trusted Type is required for an element and attribute, and if so which one.Allows web developers to check whether a Trusted Type is required for a property, and if so which one.The below code creates a policy with the name "myEscapePolicy" with a function defined for createHTML() which sanitizes HTML.We then use the policy to sanitize a string, creating a TrustedHTML object, escaped. This object can be tested with isHTML() to ensure that it was created by one of our policies.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicyFactory"
},
{
	"api_id": "915",
	"name": "UIEvent",
	"description": "The UIEvent interface represents simple user interface events.UIEvent derives from Event. Although the UIEvent.initUIEvent() method is kept for backward compatibility, you should create a UIEvent object using the UIEvent() constructor.Several interfaces are direct or indirect descendants of this one: MouseEvent, TouchEvent, FocusEvent, KeyboardEvent, WheelEvent, InputEvent, and CompositionEvent.Creates a UIEvent object.This interface also inherits properties of its parent, Event.Returns a long with details about the event, depending on the event type.Returns an instance of the InputDeviceCapabilities interface, which provides information about the physical device responsible for generating a touch event.Returns a WindowProxy that contains the view that generated the event.Returns the numeric keyCode of the key pressed, or the character code (charCode) for an alphanumeric key pressed.This interface also inherits methods of its parent, Event.Initializes a UIEvent object. If the event has already being dispatched, this method does nothing.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent"
},
{
	"api_id": "916",
	"name": "URL",
	"description": "The URL interface is used to parse, construct, normalize, and encode URLs. It works by providing properties which allow you to easily read and modify the components of a URL.You normally create a new URL object by specifying the URL as a string when calling its constructor, or by providing a relative URL and a base URL. You can then easily read the parsed components of the URL or make changes to the URL.If a browser doesn't yet support the URL() constructor, you can access a URL object using the Window interface's URL property. Be sure to check to see if any of your target browsers require this to be prefixed.Note: This feature is available in Web WorkersCreates and returns a URL object referencing the URL specified using an absolute URL string, or a relative URL string and a base URL string.A string containing a '#' followed by the fragment identifier of the URL.A string containing the domain (that is the hostname) followed by (if a port was specified) a ':' and the port of the URL.A string containing the domain of the URL.A stringifier that returns a string containing the whole URL.Returns a string containing the origin of the URL, that is its scheme, its domain and its port.A string containing the password specified before the domain name.A string containing an initial '/' followed by the path of the URL, not including the query string or fragment.A string containing the port number of the URL.A string containing the protocol scheme of the URL, including the final ':'.A string indicating the URL's parameter string; if any parameters are provided, this string includes all of them, beginning with the leading ? character.A URLSearchParams object which can be used to access the individual query parameters found in search.A string containing the username specified before the domain name.Returns a string containing the whole URL. It is a synonym for URL.href, though it can't be used to modify the value.Returns a string containing the whole URL. It returns the same string as the href property.Returns a string containing a unique blob URL, that is a URL with blob: as its scheme, followed by an opaque string uniquely identifying the object in the browser.Revokes an object URL previously created using URL.createObjectURL().The constructor takes a url parameter, and an optional base parameter to use as a base if the url parameter is a relative URL:URL properties can be set to construct the URL:URLs are encoded according to the rules found in RFC 3986. For instance:The URLSearchParams interface can be used to build and manipulate the URL query string.To get the search params from the current window's URL, you can do this:The toString() method of URL just returns the value of the href property, so the constructor can be used to normalize and encode a URL directly.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/URL"
},
{
	"api_id": "917",
	"name": "URLPattern",
	"description": "\n  The URLPattern interface matches URLs or parts of URLs against a pattern.\n  The pattern can contain capturing groups that extract parts of the matched URL.\n\n  More information about the syntax of patterns can be found on the API overview\n  page: URL Pattern API\nNote: This feature is available in Web WorkersReturns a new URLPattern object based on the given pattern and base URL.\n  A string containing a pattern to match the hash part\n  of a URL.\n  \n  A string containing a pattern to match the hostname\n  part of a URL.\n  \n  A string containing a pattern to match the password\n  part of a URL.\n  \n  A string containing a pattern to match the pathname\n  part of a URL.\n  \n  A string containing a pattern to match the port part\n  of a URL.\n  \n  A string containing a pattern to match the protocol\n  part of a URL.\n  \n  A string containing a pattern to match the search part\n  of a URL.\n  \n  A string containing a pattern to match the username\n  part of a URL.\n  \n  Returns an object with the matched parts of the URL or null if the URL\n  does not match.\n  Returns true if the URL matches the given pattern, false otherwise.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/URLPattern"
},
{
	"api_id": "918",
	"name": "URLSearchParams",
	"description": "The URLSearchParams interface defines utility methods to work with the query string of a URL.An object implementing URLSearchParams can directly be used in a for...of structure to iterate over key/value pairs in the same order as they appear in the query string, for example the following two lines are equivalent:Note: This feature is available in Web WorkersReturns a URLSearchParams object instance.Appends a specified key/value pair as a new search parameter.Deletes the given search parameter, and its associated value, from the list of all search parameters.Returns an iterator allowing iteration through all key/value pairs contained in this object in the same order as they appear in the query string.Allows iteration through all values contained in this object via a callback function.Returns the first value associated with the given search parameter.Returns all the values associated with a given search parameter.Returns a boolean value indicating if such a given parameter exists.Returns an iterator allowing iteration through all keys of the key/value pairs contained in this object.Sets the value associated with a given search parameter to the given value. If there are several values, the others are deleted.Sorts all key/value pairs, if any, by their keys.Returns a string containing a query string suitable for use in a URL.Returns an iterator allowing iteration through all values of the key/value pairs contained in this object.The URLSearchParams constructor does not parse full URLs. However, it will strip an initial leading ? off of a string, if present.The URLSearchParams constructor interprets plus signs (+) as spaces, which might cause problems.You can avoid this by encoding the data with the encodeURIComponent().URLSearchParams doesn't distinguish between a parameter with nothing after the =, and a parameter that doesn't have a = altogether.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"
},
{
	"api_id": "919",
	"name": "USB",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The USB interface of the WebUSB API provides attributes and methods for finding and connecting USB devices from a web page.Use navigator.usb to get access to the USB object.The USB interface inherits from EventTarget.None.Returns a Promise that resolves with an array of USBDevice objects for paired attached devices.Returns a Promise that resolves with an instance of USBDevice if the specified device is found. Calling this function triggers the user agent's pairing flow.Fired whenever a previously paired device is connected.Fired whenever a paired device is disconnected.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USB"
},
{
	"api_id": "920",
	"name": "USBAlternateInterface",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBAlternateInterface interface of the WebUSB API provides information about a particular configuration of an interface provided by the USB device. An interface includes one or more alternate settings which can configure a set of endpoints based on the operating mode of the device.Creates a new USBAlternateInterface object which will be populated with information about the alternate interface of the provided USBInterface with the given alternate setting number.Returns the alternate setting number of this interface. This is equal to the bAlternateSetting field of the interface descriptor defining this interface.Returns the class of this interface. This is equal to the bInterfaceClass field of the interface descriptor defining this interface. Standardized values for this field are defined by the USB Implementers Forum. A value of 0xFF indicates a vendor-defined interface.Returns the subclass of this interface. This is equal to the bInterfaceSubClass field of the interface descriptor defining this interface. The meaning of this value depends on the interfaceClass field.Returns the protocol supported by this interface. This is equal to the bInterfaceProtocol field of the interface descriptor defining this interface. The meaning of this value depends on the interfaceClass and interfaceSubclass fields.Returns the name of the interface, if one is provided by the device. This is the value of the string descriptor with the index specified by the iInterface field of the interface descriptor defining this interface.Returns an array containing instances of the USBEndpoint interface describing each of the endpoints that are part of this interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBAlternateInterface"
},
{
	"api_id": "921",
	"name": "USBConfiguration",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBConfiguration interface of the WebUSB API provides information about a particular configuration of a USB device and the interfaces that it supports.Creates a new USBConfiguration object which contains information about the configuration on the provided USBDevice with the given configuration value.Returns the configuration value of this configuration. This is equal to the bConfigurationValue field of the configuration descriptor provided by the device defining this configuration.Returns the name provided by the device to describe this configuration. This is equal to the value of the string descriptor with the index provided in the iConfiguration field of the configuration descriptor defining this configuration.Returns an array containing instances of the USBInterface describing each interface supported by this configuration.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBConfiguration"
},
{
	"api_id": "922",
	"name": "USBConnectionEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBConnectionEvent interface of the WebUSB API is the event type passed to USB.onconnect and USB.ondisconnect when the user agent detects that a new USB device has been connected or disconnected.Returns a USBConnectionEvent object.Returns a USBDevice object representing the current device.In the following example listening for connect and disconnect events is used to add and remove the devices from the user interface of an application.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBConnectionEvent"
},
{
	"api_id": "923",
	"name": "USBDevice",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBDevice interface of the WebUSB API provides access to metadata about a paired USB device and methods for controlling it.A USBConfiguration object for the currently selected interface for a paired USB device.An array of device-specific interfaces for controlling a paired USB device.One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceSubclass and USBDevice.deviceProtocol.One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceClass and USBDevice.deviceSubclass.One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are USBDevice.deviceClass and USBDevice.deviceProtocol.The major version number of the device in a semantic versioning scheme.The minor version number of the device in a semantic versioning scheme.The patch version number of the device in a semantic versioning scheme.The of the organization that manufactured the USB device.Indicates whether a session has been started with a paired USB device.The manufacturer-defined code that identifies a USB device.The manufacturer-defined name that identifies a USB device.The manufacturer-defined serial number for the specific USB device.One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMinor and USBDevice.usbVersionSubminor.One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMajor and USBDevice.usbVersionSubminor.One of three properties that declare the USB protocol version supported by the device. The other two properties are USBDevice.usbVersionMajor and USBDevice.usbVersionMinor.The official usg.org-assigned vendor ID.Returns a Promise that resolves when the requested interface is claimed for exclusive access.Returns a Promise that resolves when a halt condition is cleared.Returns a Promise that resolves with a USBInTransferResult when a command or status operation has been transmitted to the USB device.Returns a Promise that resolves with a USBOutTransferResult when a command or status operation has been transmitted from the USB device.Returns a Promise that resolves when all open interfaces are released and the device session has ended.Returns a Promise that resolves with a USBIsochronousInTransferResult when time sensitive information has been transmitted to the USB device.Returns a Promise that resolves with a USBIsochronousOutTransferResult when time sensitive information has been transmitted from the USB device.Returns a Promise that resolves when a device session has started.Returns a Promise that resolves when a claimed interface is released from exclusive access.Returns a Promise that resolves when the device is reset and all app operations canceled and their promises rejected.Returns a Promise that resolves when the specified alternative endpoint is selected.Returns a Promise that resolves when the specified configuration is selected.Returns a Promise that resolves with a USBInTransferResult when bulk or interrupt data is received from the USB device.Returns a Promise that resolves with a USBOutTransferResult when bulk or interrupt data is sent to the USB device.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBDevice"
},
{
	"api_id": "924",
	"name": "USBEndpoint",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBEndpoint interface of the WebUSB API provides information about an endpoint provided by the USB device. An endpoint represents a unidirectional data stream into or out of a device.Creates a new USBEndpoint object which will be populated with information about the endpoint on the provided USBAlternateInterface with the given endpoint number and transfer direction.Returns this endpoint's "endpoint number" which is a value from 1 to 15 extracted from the bEndpointAddress field of the endpoint descriptor defining this endpoint. This value is used to identify the endpoint when calling methods on USBDevice.Returns the direction in which this endpoint transfers data, one of:Returns the type of this endpoint, one of:Returns the size of the packets that data sent through this endpoint will be divided into.While sometimes the developer knows ahead of time the exact layout of a device's endpoints there are cases where this must be discovered at runtime. For example, a USB serial device must provide bulk input and output endpoints but their endpoint numbers will depend on what other interfaces the device provides.This code identifies the correct endpoints by searching for the interface implementing the USB CDC interface class and then identifying the candidate endpoints based on their type and direction.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBEndpoint"
},
{
	"api_id": "925",
	"name": "USBInterface",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBInterface interface of the WebUSB API provides information about an interface provided by the USB device. An interface represents a feature of the device which implements a particular protocol and may contain endpoints for bidirectional communication.Creates a new USBInterface object which will be populated with information about the interface on the provided USBConfiguration with the given interface number.Returns the interface number of this interface. This is equal to the bInterfaceNumber field of the interface descriptor defining this interface.Returns the currently selected alternative configuration of this interface. By default this is the USBAlternateInterface from alternates with alternateSetting equal to 0. It can be changed by calling USBDevice.selectAlternateInterface() with any other value found in alternates.Returns an array containing instances of the USBAlternateInterface interface describing each of the alternative configurations possible for this interface.Returns whether or not this interface has been claimed by the current page by calling USBDevice.claimInterface().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBInterface"
},
{
	"api_id": "926",
	"name": "USBInTransferResult",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBInTransferResult interface of the WebUSB API provides the result from a call to the transferIn() and controlTransferIn() methods of the USBDevice interface. It represents the result from requesting a transfer of data from the USB device to the USB host.Creates a new USBInTransferResult object with the provided status and data fields.Returns a DataView object containing the data received from the USB device, if any.Returns the status of the transfer request, one of:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBInTransferResult"
},
{
	"api_id": "927",
	"name": "USBIsochronousInTransferPacket",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBIsochronousInTransferPacket interface of the WebUSB API is part of the response from a call to the isochronousTransferIn() method of the USBDevice interface. It represents the status of an individual packet from a request to transfer data from the USB device to the USB host over an isochronous endpoint.Creates a new USBIsochronousInTransferPacket object with the provided status and data fields.Returns a DataView object containing the data received from the USB device in this packet, if any.Returns the status of the transfer request, one of:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousInTransferPacket"
},
{
	"api_id": "928",
	"name": "USBIsochronousInTransferResult",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBIsochronousInTransferResult interface of the WebUSB API provides the result from a call to the isochronousTransferIn() method of the USBDevice interface. It represents the result from requesting a transfer of data from the USB device to the USB host.Creates a new USBIsochronousInTransferResult object with the provided packets and data fields.Returns a DataView object containing the data received from the device. This is the combined data from all packets. See the individual DataView objects in the packets array for the portion of this buffer containing data from each packet.Returns an array of USBIsochronousInTransferPacket objects containing the result of each request to receive a packet from the device.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousInTransferResult"
},
{
	"api_id": "929",
	"name": "USBIsochronousOutTransferPacket",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBIsochronousOutTransferPacket interface of the WebUSB API is part of the response from a call to the isochronousTransferOut() method of the USBDevice interface. It represents the status of an individual packet from a request to transfer data from the USB host to the USB device over an isochronous endpoint.Creates a new USBIsochronousOutTransferPacket object with the provided status and bytesWritten fields.Returns the number of bytes from the packet that were sent to the device.Returns the status of the transfer request, one of:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousOutTransferPacket"
},
{
	"api_id": "930",
	"name": "USBIsochronousOutTransferResult",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBIsochronousOutTransferResult interface of the WebUSB API provides the result from a call to the isochronousTransferOut() method of the USBDevice interface. It represents the result from requesting a transfer of data from the USB host to the USB device.Creates a new USBIsochronousOutTransferResult object with the provided packet field.Returns an array of USBIsochronousOutTransferPacket objects containing the result of each request to send a packet to the device.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBIsochronousOutTransferResult"
},
{
	"api_id": "931",
	"name": "USBOutTransferResult",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The USBOutTransferResult interface of the WebUSB API provides the result from a call to the transferOut() and controlTransferOut() methods of the USBDevice interface. It represents the result from requesting a transfer of data from the USB host to the USB device.Creates a new USBOutTransferResult object with the provided status and bytesWritten fields.Returns the number of bytes from the transfer request that were sent to the device.Returns the status of the transfer request, one of:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/USBOutTransferResult"
},
{
	"api_id": "932",
	"name": "UserProximityEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.Warning: UserProximityEvent is not supported by any current major browser, and should not be used.The UserProximityEvent indicates whether a nearby physical object is present by using the proximity sensor of a device.Indicates if the device has sensed a nearby physical object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/UserProximityEvent"
},
{
	"api_id": "933",
	"name": "ValidityState",
	"description": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.For each of these Boolean properties, a value of true indicates that the specified reason validation may have failed is true, with the exception of the valid property, which is true if the element's value obeys all constraints.A boolean value that is true if the user has provided input that the browser is unable to convert.A boolean value indicating whether the element's custom validity message has been set to a non-empty string by calling the element's setCustomValidity() method.A boolean value that is true if the value does not match the specified pattern, and false if it does match. If true, the element matches the :invalid CSS pseudo-class.A boolean value that is true if the value is greater than the maximum specified by the max attribute, or false if it is less than or equal to the maximum. If true, the element matches the :invalid and :out-of-range and CSS pseudo-classes.A boolean value that is true if the value is less than the minimum specified by the min attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.A boolean value that is true if the value does not fit the rules determined by the step attribute (that is, it's not evenly divisible by the step value), or false if it does fit the step rule. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.A boolean value that is true if the value exceeds the specified maxlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is less than or equal to the maximum length. Note: This property is never true in Gecko, because elements' values are prevented from being longer than maxlength. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.A boolean value that is true if the value fails to meet the specified minlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is greater than or equal to the minimum length. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.A boolean value that is true if the value is not in the required syntax (when type is email or url), or false if the syntax is correct. If true, the element matches the :invalid CSS pseudo-class.A boolean value that is true if the element meets all its validation constraints, and is therefore considered to be valid, or false if it fails any constraint. If true, the element matches the :valid CSS pseudo-class; the :invalid CSS pseudo-class otherwise.A boolean value that is true if the element has a required attribute, but no value, or false otherwise. If true, the element matches the :invalid CSS pseudo-class.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState"
},
{
	"api_id": "934",
	"name": "VideoColorSpace",
	"description": "The VideoColorSpace interface of the WebCodecs API represents the color space of a video.Creates a new VideoColorSpace object.A string containing the color primary describing the color gamut of a video sample.A string containing the transfer characteristics of video samples.A string containing the matrix coefficients describing the relationship between sample component values and color coordinates.A Boolean. If true indicates that full-range color values are used.Returns a JSON representation of the VideoColorSpace object.In the following example, colorSpace is a VideoColorSpace object returned from VideoFrame. The object is then printed to the console.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoColorSpace"
},
{
	"api_id": "935",
	"name": "VideoDecoder",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The VideoDecoder interface of the WebCodecs API decodes chunks of video.Creates a new VideoDecoder object.An integer representing the number of decode queue requests.Indicates whether the underlying codec is configured for decoding.Enqueues a control message to configure the video decoder for decoding chunks.Enqueues a control message to decode a given chunk of video.Returns a promise that resolves once all pending messages in the queue have been completed.Resets all states including configuration, control messages in the control message queue, and all pending callbacks.Ends all pending work and releases system resources.Video processing with WebCodecs",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoDecoder"
},
{
	"api_id": "936",
	"name": "VideoEncoder",
	"description": "\n  Creates a new VideoEncoder object.An integer representing the number of encode queue requests.Represents the state of the underlying codec and whether it is configured for encoding.Enqueues a control message to configure the video encoder for encoding chunks.Enqueues a control message to encode a given VideoFrame.Returns a promise that resolves once all pending messages in the queue have been completed.Returns a promise indicating whether the provided VideoEncoderConfig is supported.Resets all states including configuration, control messages in the control message queue, and all pending callbacks.Ends all pending work and releases system resources.Video processing with WebCodecs",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoEncoder"
},
{
	"api_id": "937",
	"name": "VideoFrame",
	"description": "The VideoFrame interface of the Web Codecs API represents a frame of a video.VideoFrame is a transferable object.A VideoFrame object can be created or accessed in a number of ways. The MediaStreamTrackProcessor breaks a media track into individual VideoFrame objects.\n  A VideoFrame is an image source and has a constructor that accepts any other canvas source (\n  an SVGImageElement,\n  an HTMLVideoElement,\n  an HTMLCanvasElement,\n  an ImageBitmap,\n  an OffscreenCanvas,\n  or another VideoFrame).\n  This means that a frame can be created from an image or video element.\nA second constructor enables the creation of a VideoFrame from its binary pixel representation in an ArrayBuffer, a TypedArray, or a DataView.Created frames may then turned into a media track, for example with the MediaStreamTrackGenerator interface that creates a media track from a stream of frames.Creates a new VideoFrame object.Returns the pixel format of the VideoFrame.Returns the width of the VideoFrame in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.Returns the height of the VideoFrame in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.Returns a DOMRectReadOnly with the width and height matching codedWidth and codedHeight.Returns a DOMRectReadOnly describing the visible rectangle of pixels for this VideoFrame.Returns the width of the VideoFrame when displayed after applying aspect ratio adjustments.Returns the height of the VideoFrame when displayed after applying aspect ratio adjustments.Returns an integer indicating the duration of the video in microseconds.Returns an integer indicating the timestamp of the video in microseconds.Returns a VideoColorSpace object.Returns the number of bytes required to hold the VideoFrame as filtered by options passed into the method.Copies the contents of the VideoFrame to an ArrayBuffer.Creates a new VideoFrame object with reference to the same media resource as the original.Clears all states and releases the reference to the media resource.In the following example frames are returned from a MediaStreamTrackProcessor, then encoded. See the full example and read more about it in the article Video processing with WebCodecs.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoFrame"
},
{
	"api_id": "938",
	"name": "VideoPlaybackQuality",
	"description": "A VideoPlaybackQuality object is returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.The VideoPlaybackQuality interface doesn't inherit properties from any other interfaces.A DOMHighResTimeStamp containing the time in milliseconds between the start of the navigation and the creation of the object.An unsigned long giving the number of video frames dropped since the creation of the associated HTMLVideoElement.An unsigned long giving the number of video frames created and dropped since the creation of the associated HTMLVideoElement.An unsigned long giving the number of video frames corrupted since the creation of the associated HTMLVideoElement. A corrupted frame may be created or dropped.A double containing the sum of the frame delay since the creation of the associated HTMLVideoElement. The frame delay is the difference between a frame's theoretical presentation time and its effective display time.The VideoPlaybackQuality interface has no methods, and does not inherit any.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality"
},
{
	"api_id": "939",
	"name": "VideoTrack",
	"description": "The VideoTrack interface represents a single video track from a <video> element.The most common use for accessing a VideoTrack object is to toggle its selected property in order to make it the active video track for its <video> element.A Boolean value which controls whether or not the video track is active. Only a single video track can be active at any given time, so setting this property to true for one track while another track is active will make that other track inactive.A string which uniquely identifies the track within the media. This ID can be used to locate a specific track within a video track list by calling VideoTrackList.getTrackById(). The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.A string specifying the category into which the track falls. For example, the main video track would have a kind of "main".A string providing a human-readable label for the track. For example, a track whose kind is "sign" might have a label of "A sign-language interpretation". This string is empty if no label is provided.A string specifying the video track's primary language, or an empty string if unknown. The language is specified as a BCP 47 (RFC 5646) language code, such as "en-US" or "pt-BR".The SourceBuffer that created the track. Returns null if the track was not created by a SourceBuffer or the SourceBuffer has been removed from the MediaSource.sourceBuffers attribute of its parent media source.To get a VideoTrack for a given media element, use the element's videoTracks property, which returns a VideoTrackList object from which you can get the individual tracks contained in the media:You can then access the media's individual tracks using either array syntax or functions such as forEach().This first example gets the first video track on the media:The next example scans through all of the media's video tracks, activating the first video track that is in the user's preferred language (taken from a variable userLanguage).The language is in standard (RFC 5646) format. For US English, this would be "en-US", for example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack"
},
{
	"api_id": "940",
	"name": "VideoTrackList",
	"description": "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list.Retrieve an instance of this object with HTMLMediaElement.videoTracks. The individual tracks can be accessed using array syntax or functions such as forEach() for example.This interface also inherits properties from its parent interface, EventTarget.The number of tracks in the list.The index of the currently selected track, if any, or −1 otherwise.This interface also inherits methods from its parent interface, EventTarget.Returns the VideoTrack found within the VideoTrackList whose id matches the specified string. If no match is found, null is returned.\n  Fired when a new video track has been added to the media element.\n  Also available via the onaddtrack property.\n  \n  Fired when a video track has been made active or inactive.\n  Also available via the onchange property.\n  \n  Fired when a new video track has been removed from the media element.\n  Also available via the onremovetrack property.\n  In addition to being able to obtain direct access to the video tracks present on a media element, VideoTrackList lets you set event handlers on the addtrack and removetrack events, so that you can detect when tracks are added to or removed from the media element's stream.To get a media element's VideoTrackList, use its videoTracks property.In this example, we have an app that displays information about the number of channels available. To keep it up to date, handlers for the addtrack and removetrack events are set up.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList"
},
{
	"api_id": "941",
	"name": "VisualViewport",
	"description": "The VisualViewport interface of the Visual Viewport API represents the visual viewport for a given window. For a page containing iframes, each iframe, as well as the containing page, will have a unique window object. Each window on a page will have a unique VisualViewport representing the properties associated with that window.You can get a window's visual viewport using Window.visualViewport.Note: Only the top-level window has a visual viewport that's distinct from the layout viewport. Therefore, it's generally only the VisualViewport object of the top-level window that's useful. For an <iframe>, visual viewport metrics like VisualViewport.width always correspond to layout viewport metrics like document.documentElement.clientWidth.VisualViewport also inherits properties from its parent, EventTarget.Returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels.Returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels.Returns the x coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels.Returns the y coordinate of the visual viewport relative to the initial containing block origin of the top edge in CSS pixels.Returns the width of the visual viewport in CSS pixels.Returns the height of the visual viewport in CSS pixels.Returns the pinch-zoom scaling factor applied to the visual viewport.Listen to these events using addEventListener() or by assigning an event listener to the relevant oneventname property of this interface.\n  Fired when the visual viewport is resized.\n  Also available via the onresize property.\n  \n  Fired when the visual viewport is scrolled.\n  Also available via the onscroll property.\n  This example, taken from the Visual Viewport README, shows how to write a simple bit of code that will hide an overlaid box (which might contain an advert, say) when the user zooms in. This is a nice way to improve the user experience when zooming in on pages. A live sample is also available.This example, also taken from the Visual Viewport README, shows how to use this API to simulate position: device-fixed, which fixes elements to the visual viewport. A live sample is also available.Note: This technique should be used with care; emulating position: device-fixed in this way can result in the fixed element flickering during scrolling.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport"
},
{
	"api_id": "942",
	"name": "VRDisplay",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRDisplay interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.An array of all connected VR Devices can be returned by invoking the Navigator.getVRDisplays() method.Returns a VRDisplayCapabilities object that indicates the various capabilities of the VRDisplay.Gets and sets the z-depth defining the far plane of the eye view frustum, i.e. the furthest viewable boundary of the scene.Gets and sets the z-depth defining the near plane of the eye view frustum, i.e. the nearest viewable boundary of the scene.Returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see Gamepad.displayId).Returns a human-readable name to identify the VRDisplay.Returns a boolean value indicating whether the VRDisplay is connected to the computer.Returns a boolean value indicating whether the VRDisplay is currently having content presented through it.Returns a VRStageParameters object containing room-scale parameters, if the VRDisplay is capable of supporting room-scale experiences.Returns the VREyeParameters object containing the eye parameters for the specified eye.Accepts a VRFrameData object and populates it with the information required to render the current frame.Returns a VRPose object defining the current pose of the VRDisplay, with no prediction applied. This is no longer needed, and has been removed from the spec.Returns the layers currently being presented by the VRDisplay.Returns a VRPose object defining the future predicted pose of the VRDisplay as it will be when the current frame is actually presented. This method is deprecated — instead, you should use VRDisplay.getFrameData(), which also provides a VRPose object.Resets the pose for this VRDisplay, treating its current VRPose.position and VRPose.orientation as the "origin/zero" values.A special implementation of Window.cancelAnimationFrame that allows callbacks registered with VRDisplay.requestAnimationFrame() to be unregistered.A special implementation of Window.requestAnimationFrame containing a callback function that will be called every time a new frame of the VRDisplay presentation is rendered.Starts the VRDisplay presenting a scene.Stops the VRDisplay presenting a scene.Captures the current state of the VRLayerInit currently being presented and displays it on the VRDisplay.Note: You can see this complete code at raw-webgl-example.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay"
},
{
	"api_id": "943",
	"name": "VRDisplayCapabilities",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRDisplayCapabilities interface of the WebVR API describes the capabilities of a VRDisplay — its features can be used to perform VR device capability tests, for example can it return position information.Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.This interface is accessible through the VRDisplay.capabilities property.Returns a boolean value stating whether the VR display is capable of presenting content (e.g. through an HMD).Returns a boolean value stating whether the VR display is separate from the device's primary display.Returns a boolean value stating whether the VR display can track and return orientation information.Returns a boolean value stating whether the VR display can track and return position information.Returns a number indicating the maximum number of VRLayerInits that the VR display can present at once (e.g. the maximum length of the array that VRDisplay.requestPresent() can accept.)This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities"
},
{
	"api_id": "944",
	"name": "VRDisplayEvent",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRDisplayEvent interface of the WebVR API represents the event object of WebVR-related events (see the list of WebVR window extensions).Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.Creates a VRDisplayEvent object instance.VRDisplayEvent also inherits properties from its parent object, Event.The VRDisplay associated with this event.A human-readable reason why the event was fired.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayEvent"
},
{
	"api_id": "945",
	"name": "VREyeParameters",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VREyeParameters interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.This interface is accessible through the VRDisplay.getEyeParameters() method.Warning: The values in this interface should not be used to compute view or projection matrices. In order to ensure the widest possible hardware compatibility use the matrices provided by VRFrameData.Represents the offset from the center point between the user's eyes to the center of the eye, measured in meters.Describes the current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD).Describes the recommended render target width of each eye viewport, in pixels.Describes the recommended render target height of each eye viewport, in pixels.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters"
},
{
	"api_id": "946",
	"name": "VRFieldOfView",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRFieldOfView interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.The number of degrees upwards that the field of view extends in.The number of degrees to the right that the field of view extends in.The number of degrees downwards that the field of view extends in.The number of degrees to the left that the field of view extends in.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView"
},
{
	"api_id": "947",
	"name": "VRFrameData",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRFrameData interface of the WebVR API represents all the information needed to render a single frame of a VR scene; constructed by VRDisplay.getFrameData().Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.Creates a VRFrameData object instance.A Float32Array representing a 4x4 matrix that describes the projection to be used for the left eye's rendering.A Float32Array representing a 4x4 matrix that describes the view transform to be used for the left eye's rendering.The VRPose of the VRDisplay at the current VRFrameData.timestamp.A Float32Array representing a 4x4 matrix that describes the projection to be used for the right eye's rendering.A Float32Array representing a 4x4 matrix that describes the view transform to be used for the right eye's rendering.A constantly increasing timestamp value representing the time a frame update occurred.See VRDisplay.getFrameData() for example code.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRFrameData"
},
{
	"api_id": "948",
	"name": "VRLayerInit",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRLayerInit dictionary of the WebVR API represents a content layer (an HTMLCanvasElement or OffscreenCanvas) that you want to present in a VR display.Note: This dictionary was part of the old WebVR API. It has been superseded by the WebXR Device API.You can retrieve VRLayerInit objects using VRDisplay.getLayers(), and present them using the VRDisplay.requestPresent() method.Defines the left texture bounds of the canvas whose contents will be presented by the VRDisplay.Defines the right texture bounds of the canvas whose contents will be presented by the VRDisplay.Defines the canvas whose contents will be presented by the VRDisplay when VRDisplay.submitFrame() is called.VRLayerInit objects look something like this:Note: The canvasReference refers to the <canvas> element itself, not the WebGL context associated with the canvas. The other two members are arraysThis dictionary was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRLayerInit"
},
{
	"api_id": "949",
	"name": "VRPose",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRPose interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information.)Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.This interface is accessible through the VRDisplay.getPose() and VRDisplay.getFrameData() methods. VRDisplay.getPose() is deprecated.Returns the position of the VRDisplay at the current VRPose.timestamp as a 3D vectorReturns the linear velocity of the VRDisplay at the current VRPose.timestamp, in meters per second.Returns the linear acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second.Returns the orientation of the sensor at the current VRPose.timestamp, as a quarternion value.Returns the angular velocity of the VRDisplay at the current VRPose.timestamp, in radians per second.Returns the angular acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second.Returns the current time stamp of the system — a monotonically increasing value useful for determining if position data has been updated, and what order updates have occurred in. This version of timestamp has been removed from the spec — instead, timestamps are now returned when VRDisplay.getFrameData() is called — see VRFrameData.timestamp.See VRDisplay.getFrameData() for example code.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRPose"
},
{
	"api_id": "950",
	"name": "VRStageParameters",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.The VRStageParameters interface of the WebVR API represents the values describing the stage area for devices that support room-scale experiences.Note: This interface was part of the old WebVR API. It has been superseded by the WebXR Device API.This interface is accessible through the VRDisplay.stageParameters property.Contains a matrix that transforms the sitting-space view matrices of VRFrameData to standing-space.Returns the width of the play-area bounds in meters.Returns the depth of the play-area bounds in meters.This interface was part of the old WebVR API that has been superseded by the WebXR Device API. It is no longer on track to becoming a standard.Until all browsers have implemented the new WebXR APIs, it is recommended to rely on frameworks, like A-Frame, Babylon.js, or Three.js, or a polyfill, to develop WebXR applications that will work across all browsers [1].",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VRStageParameters"
},
{
	"api_id": "951",
	"name": "VTTCue",
	"description": "The VTTCue interface—part of the API for handling WebVTT (text tracks on media presentations)—describes and controls the text track associated with a particular <track> element.Returns a newly created VTTCue object that covers the given time range and has the given text.This interface also inherits properties from TextTrackCue.A VTTRegion object describing the video's sub-region that the cue will be drawn onto, or null if none is assigned.Returns an enum representing the cue writing direction.Returns true if the VTTCue.line attribute is an integer number of lines or a percentage of the video size.Returns the line positioning of the cue. This can be the string auto or a number whose interpretation depends on the value of VTTCue.snapToLines.Returns an enum representing the alignment of the VTTCue.line.Returns the indentation of the cue within the line. This can be the string auto or a number representing the percentage of the VTTCue.region, or the video size if VTTCue.region is null.Returns an enum representing the alignment of the cue. This is used to determine what the VTTCue.position is anchored to. The default is auto.Returns a double representing the size of the cue, as a percentage of the video size.Returns an enum representing the alignment of all the lines of text within the cue box.Returns a string with the contents of the cue.Returns the cue text as a DocumentFragment.The following example adds a new TextTrack to the video, then adds cues using the TextTrack.addCue() method, with a VTTCue object as the value.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VTTCue"
},
{
	"api_id": "952",
	"name": "VTTRegion",
	"description": "The VTTRegion interface—part of the API for handling WebVTT (text tracks on media presentations)—describes a portion of the video to render a VTTCue onto.Returns a newly created VTTRegion object.A string that identifies the region.A double representing the width of the region, as a percentage of the video.A double representing the height of the region, in number of lines.A double representing the region anchor X offset, as a percentage of the region.A double representing the region anchor Y offset, as a percentage of the region.A double representing the viewport anchor X offset, as a percentage of the video.A double representing the viewport anchor Y offset, as a percentage of the video.An enum representing how adding new cues will move existing cues.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/VTTRegion"
},
{
	"api_id": "953",
	"name": "WakeLock",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WakeLock interface of the Screen Wake Lock API prevents device screens from dimming or locking when an application needs to keep running.The system wake lock is exposed through the global Navigator.wakeLock property.Requests a WakeLockSentinel object, which returns a Promise that resolves with a WakeLockSentinel object.The following asynchronous function requests a WakeLockSentinel object. The WakeLock.request() method is wrapped in a try...catch statement to account for if the browser refuses the request for any reason.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLock"
},
{
	"api_id": "954",
	"name": "WakeLockSentinel",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WakeLockSentinel interface of the Screen Wake Lock API provides a handle to the underlying platform wake lock and can be manually released and reacquired. An Object representing the wake lock is returned via the navigator.wakelock.request() method.An acquired WakeLockSentinel can be released manually via the release() method, or automatically via the platform wake lock. This can happen if the document becomes inactive or looses visibility, if the device is low on power or the user turns on a power save mode. Releasing all WakeLockSentinel instances of a given wake lock type will cause the underlying platform wake lock to be released.This interface provides the following properties.Returns a boolean indicating whether the WakeLockSentinel has been released.\n  Returns a string representation of the currently acquired WakeLockSentinel type.\n  Return values are:\n  Fired when the release() method is called or the wake lock is released by the user agent.Releases the WakeLockSentinel, returning a Promise that is resolved once the sentinel has been successfully released.In this example we create an asynchronous function which requests a WakeLockSentinel. Once acquired we listen for the release event which can be used to give appropriate UI feedback. The sentinel can be acquired or released via appropriate interactions.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel"
},
{
	"api_id": "955",
	"name": "WaveShaperNode",
	"description": "The WaveShaperNode interface represents a non-linear distorter.It is an AudioNode that uses a curve to apply a wave shaping distortion to the signal. Beside obvious distortion effects, it is often used to add a warm feeling to the signal.A WaveShaperNode always has exactly one input and one output.Creates a new instance of an WaveShaperNode object.Inherits properties from its parent, AudioNode.A Float32Array of numbers describing the distortion to apply.An enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal.No specific method; inherits methods from its parent, AudioNode.See BaseAudioContext.createWaveShaper() for example code.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode"
},
{
	"api_id": "956",
	"name": "WEBGL_color_buffer_float",
	"description": "The WEBGL_color_buffer_float extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to WebGL 1 contexts only. For WebGL 2, use the EXT_color_buffer_float extension.The OES_texture_float extension implicitly enables this extension.RGBA 32-bit floating-point color-renderable format.RGB 32-bit floating-point color-renderable format.??This extension extends WebGLRenderingContext.renderbufferStorage():",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float"
},
{
	"api_id": "957",
	"name": "WEBGL_compressed_texture_astc",
	"description": "The WEBGL_compressed_texture_astc extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.For more information, see the article Using ASTC Texture Compression for Game Assets by NVIDIA.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: ASTC compression is typically available on Mali ARM GPUs, Intel GPUs, and NVIDIA Tegra chips.This extension is available to both, WebGL1 and WebGL2 contexts.This extension exposes one new methods.Returns an array of strings containing the names of the ASTC profiles supported by the implementation.The compressed texture formats are exposed by 28 constants and can be used in two functions: compressedTexImage2D() and compressedTexSubImage2D().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc"
},
{
	"api_id": "958",
	"name": "WEBGL_compressed_texture_etc",
	"description": "The WEBGL_compressed_texture_etc extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.The compressed texture formats are exposed by 10 constants and can be used in two functions: compressedTexImage2D() and compressedTexSubImage2D().One-channel (red) unsigned format compression.One-channel (red) signed format compression.Two-channel (red and green) unsigned format compression.Two-channel (red and green) signed format compression.Compresses RGB8 data with no alpha channel.Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately.Compresses sRGB8 data with no alpha channel.Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately.Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc"
},
{
	"api_id": "959",
	"name": "WEBGL_compressed_texture_etc1",
	"description": "The WEBGL_compressed_texture_etc1 extension is part of the WebGL API and exposes the ETC1 compressed texture format.Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.The compressed texture format is exposed by a constant and can be used with the compressedTexImage2D() method (note that ETC1 is not supported with the compressedTexSubImage2D() method).Compresses 24-bit RGB data with no alpha channel.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1"
},
{
	"api_id": "960",
	"name": "WEBGL_compressed_texture_pvrtc",
	"description": "The WEBGL_compressed_texture_pvrtc extension is part of the WebGL API and exposes four PVRTC compressed texture formats.Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.\n  Note: PVRTC is typically only available on mobile devices with PowerVR chipsets.\n  It is used in all generations of the iPhone, iPod Touch and iPad and supported on certain Android devices that use a PowerVR GPU.\n  This extension is available to both, WebGL1 and WebGL2 contexts.Note: On iOS devices, this extension is named WEBKIT_WEBGL_compressed_texture_pvrtc.The compressed texture formats are exposed by four constants and can be used in two functions: compressedTexImage2D() (where the height and width parameters must be powers of 2) and compressedTexSubImage2D() (where the height and width parameters must equal the current values of the existing texture and the xoffset and yoffset parameters must be 0).RGB compression in 4-bit mode. One block for each 4×4 pixels.RGBA compression in 4-bit mode. One block for each 4×4 pixels.RGB compression in 2-bit mode. One block for each 8×4 pixels.RGBA compression in 2-bit mode. One block for each 8×4 pixels.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc"
},
{
	"api_id": "961",
	"name": "WEBGL_compressed_texture_s3tc",
	"description": "The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.The compressed texture formats are exposed by four constants and can be used in two functions: compressedTexImage2D() and compressedTexSubImage2D().A DXT1-compressed image in an RGB image format.A DXT1-compressed image in an RGB image format with a simple on/off alpha value.A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc"
},
{
	"api_id": "962",
	"name": "WEBGL_compressed_texture_s3tc_srgb",
	"description": "The WEBGL_compressed_texture_s3tc_srgb extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.Compressed textures reduce the amount of memory needed to store a texture on the GPU, allowing for higher resolution textures or more of the same resolution textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both WebGL1 and WebGL2 contexts.The compressed texture formats are exposed by four constants and can be used in two functions: compressedTexImage2D() and compressedTexSubImage2D().A DXT1-compressed image in an sRGB image format.A DXT1-compressed image in an sRGB image format with a simple on/off alpha value.A DXT3-compressed image in an sRGBA image format.A DXT5-compressed image in an sRGBA image format.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb"
},
{
	"api_id": "963",
	"name": "WEBGL_debug_renderer_info",
	"description": "The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.Depending on the privacy settings of the browser, this extension might only be available to privileged contexts. Generally, the graphics driver information should only be used in edge cases to optimize your WebGL content or to debug GPU problems. The WebGLRenderingContext.getParameter() method can help you to detect which features are supported and the failIfMajorPerformanceCaveat context attribute lets you control if a context should be returned at all, if the performance would be dramatically slow.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: Depending on the privacy settings of the browser, this extension might only be available to privileged contexts or not work at all. In Firefox, if privacy.resistFingerprinting is set to true, this extensions is disabled.This extension is available to both, WebGL1 and WebGL2 contexts.Vendor string of the graphics driver.Renderer string of the graphics driver.With the help of this extension, privileged contexts are able to retrieve debugging information about the user's graphic driver:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info"
},
{
	"api_id": "964",
	"name": "WEBGL_debug_shaders",
	"description": "The WEBGL_debug_shaders extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.This extension is not directly available to web sites as the way of how the shader is translated may uncover personally-identifiable information to the web page about the kind of graphics card in the user's computer.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: Depending on the privacy settings of the browser, this extension might only be available to privileged contexts.This extension is available to both, WebGL1 and WebGL2 contexts.Returns the translated shader source.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders"
},
{
	"api_id": "965",
	"name": "WEBGL_depth_texture",
	"description": "The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. The constant in WebGL2 is gl.UNSIGNED_INT_24_8.This extension adds a new constant:Unsigned integer type for 24-bit depth texture data.This extension extends WebGLRenderingContext.texImage2D():This extension extends WebGLRenderingContext.framebufferTexture2D():Note: Incorrectly stated as the target parameter in the specification, see https://www.khronos.org/bugzilla/show_bug.cgi?id=674.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture"
},
{
	"api_id": "966",
	"name": "WEBGL_draw_buffers",
	"description": "The WEBGL_draw_buffers extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is only available to WebGL1 contexts. In WebGL2, the functionality of this extension is available on the WebGL2 context by default. In WebGL 2, the constants are available without the "WEBGL" suffix and the new GLSL built-ins require GLSL #version 300 es.This extension exposes new constants, which can be used in the gl.framebufferRenderbuffer(), gl.framebufferTexture2D(), gl.getFramebufferAttachmentParameter() ext.drawBuffersWEBGL(), and gl.getParameter() methods.A GLenum specifying a color buffer.A GLenum returning a draw buffer.A GLint indicating the maximum number of framebuffer color attachment points.A GLint indicating the maximum number of draw buffers.This extension exposes one new method.Defines the draw buffers to which all fragment colors are written. (When using WebGL2, this method is available as gl.drawBuffers() by default).Enabling the extension:Binding multiple textures (to a tx[] array) to different framebuffer color attachments:Mapping the color attachments to draw buffer slots that the fragment shader will write to using gl_FragData:Shader code that writes to multiple textures:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers"
},
{
	"api_id": "967",
	"name": "WEBGL_lose_context",
	"description": "The WEBGL_lose_context extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.WebGL extensions are available using the WebGLRenderingContext.getExtension() method. For more information, see also Using Extensions in the WebGL tutorial.Note: This extension is available to both, WebGL1 and WebGL2 contexts.Simulates losing the context.Simulates restoring the context.With this extension, you can simulate the webglcontextlost and webglcontextrestored events:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context"
},
{
	"api_id": "968",
	"name": "WEBGL_multi_draw",
	"description": "\n  The WEBGL_multi_draw extension is part of the\n  WebGL API and allows to render more\n  than one primitive with a single function call. This can improve a WebGL application's performance\n  as it reduces binding costs in the renderer and speeds up GPU thread time with uniform data.\nWhen this extension is enabled:\n  Note: This extension is available to both,\n  WebGL 1 and\n  WebGL 2 contexts.\n  \n  In shader code, the directive #extension GL_ANGLE_multi_draw\n  needs to be called to enable the extension.\n  This extension enables the ANGLE_instanced_arrays extension implicitly.\n  Renders multiple primitives from array data (identical to multiple calls to\n  drawArrays).\n  \n  Renders multiple primitives from element array data (identical to multiple calls to\n  drawElements).\n  \n  Renders multiple primitives from array data (identical to multiple calls to\n  drawArraysInstanced).\n  \n  Renders multiple primitives from element array data (identical to multiple calls to\n  drawElementsInstanced).\n  \n  Note: Although the extension name is named WEBGL_multi_draw,\n  the extension must be enabled with the #extension GL_ANGLE_multi_draw\n  directive to use the extension in a shader.\n\n  When this extension is enabled, the gl_DrawID built-in can be used\n  in shader code. For any multi* draw call variant,\n  the index of the draw i may be read by the vertex shader\n  as gl_DrawID. For non-multi* calls, the value of\n  gl_DrawID is 0.\n\n  WebGL extensions are available using the WebGLRenderingContext.getExtension() method.\n  For more information, see also Using Extensions\n  in the WebGL tutorial.\n\n  Example calls for ext.multiDrawArraysWEBGL()\n  and ext.multiDrawArraysInstancedWEBGL():\n\n  Example calls for ext.multiDrawElementsWEBGL()\n  and ext.multiDrawElementsInstancedWEBGL().\n\n  Assumes that the indices which have been previously uploaded to the\n  ELEMENT_ARRAY_BUFFER are to be treated as UNSIGNED_SHORT.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_multi_draw"
},
{
	"api_id": "969",
	"name": "WebGL2RenderingContext",
	"description": "The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML <canvas> element.To get an object of this interface, call getContext() on a <canvas> element, supplying "webgl2" as the argument:Note: WebGL 2 is an extension to WebGL 1. The WebGL2RenderingContext interface implements all members of the WebGLRenderingContext interface. Some methods of the WebGL 1 context can accept additional values when used in a WebGL 2 context. You will find this info noted on the WebGL 1 reference pages.The WebGL tutorial has more information, examples, and resources on how to get started with WebGL.See the WebGL constants page.Returns the indexed value for the given target.Initializes and creates the buffer object's data store.Updates a subset of a buffer object's data store.Copies part of the data of a buffer to another buffer.Reads data from a buffer and writes them to an ArrayBuffer or SharedArrayBuffer.Transfers a block of pixels from the read framebuffer to the draw framebuffer.Attaches a single layer of a texture to a framebuffer.Invalidates the contents of attachments in a framebuffer.Invalidates portions of the contents of attachments in a framebufferSelects a color buffer as the source for pixels.Returns information about implementation-dependent support for internal formats.Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.Specifies all levels of two-dimensional texture storage.Specifies all levels of a three-dimensional texture or two-dimensional array texture.Specifies a three-dimensional texture image.Specifies a sub-rectangle of the current 3D texture.Copies pixels from the current WebGLFramebuffer into an existing 3D texture sub-image.Specifies a three-dimensional texture image in a compressed format.Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.Returns the binding of color numbers to user-defined varying out variables.Methods specifying values of uniform variables.Methods specifying matrix values for uniform variables.Methods specifying integer values for generic vertex attributes.Specifies integer data formats and locations of vertex attributes in a vertex attributes array.Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with gl.drawArraysInstanced() and gl.drawElementsInstanced().Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.Renders primitives from array data in a given range.Specifies a list of color buffers to be drawn into.Clears buffers from the currently bound framebuffer.Methods for working with WebGLQuery objects.Creates a new WebGLQuery object.Deletes a given WebGLQuery object.Returns true if a given object is a valid WebGLQuery object.Begins an asynchronous query.Marks the end of an asynchronous query.Returns a WebGLQuery object for a given target.Returns information about a query.Creates a new WebGLSampler object.Deletes a given WebGLSampler object.Binds a given WebGLSampler to a texture unit.Returns true if a given object is a valid WebGLSampler object.Sets sampler parameters.Returns sampler parameter information.Creates a new WebGLSync object and inserts it into the GL command stream.Returns true if the passed object is a valid WebGLSync object.Deletes a given WebGLSync object.Blocks and waits for a WebGLSync object to become signaled or a given timeout to be passed.Returns immediately, but waits on the GL server until the given WebGLSync object is signaled.Returns parameter information of a WebGLSync object.Creates and initializes WebGLTransformFeedback objects.Deletes a given WebGLTransformFeedback object.Returns true if the passed object is a valid WebGLTransformFeedback object.Binds a passed WebGLTransformFeedback object to the current GL state.Starts a transform feedback operation.Ends a transform feedback operation.Specifies values to record in WebGLTransformFeedback buffers.Returns information about varying variables from WebGLTransformFeedback buffers.Pauses a transform feedback operation.Resumes a transform feedback operation.Binds a given WebGLBuffer to a given binding point (target) at a given index.Binds a range of a given WebGLBuffer to a given binding point (target) at a given index.Retrieves the indices of a number of uniforms within a WebGLProgram.Retrieves information about active uniforms within a WebGLProgram.Retrieves the index of a uniform block within a WebGLProgram.Retrieves information about an active uniform block within a WebGLProgram.Retrieves the name of the active uniform block at a given index within a WebGLProgram.Assigns binding points for active uniform blocks.Methods for working with WebGLVertexArrayObject (VAO) objects.Creates a new WebGLVertexArrayObject.Deletes a given WebGLVertexArrayObject.Returns true if a given object is a valid WebGLVertexArrayObject.Binds a given WebGLVertexArrayObject to the buffer.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext"
},
{
	"api_id": "970",
	"name": "WebGLActiveInfo",
	"description": "The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.The read-only name of the requested variable.The read-only size of the requested variable.The read-only type of the requested variable.A WebGLActiveInfo object is returned by:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo"
},
{
	"api_id": "971",
	"name": "WebGLBuffer",
	"description": "The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.The WebGLBuffer object does not define any methods or properties of its own and its content is not directly accessible. When working with WebGLBuffer objects, the following methods of the WebGLRenderingContext are useful:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer"
},
{
	"api_id": "972",
	"name": "WebGLContextEvent",
	"description": "The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.This interface inherits properties from its parent interface, Event.A read-only property containing additional information about the event.This interface doesn't define any own methods, but inherits methods from its parent interface, Event.With the help of the WEBGL_lose_context extension, you can simulate the webglcontextlost and webglcontextrestored events:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent"
},
{
	"api_id": "973",
	"name": "WebGLFramebuffer",
	"description": "The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.The WebGLFramebuffer object does not define any methods or properties of its own and its content is not directly accessible. When working with WebGLFramebuffer objects, the following methods of the WebGLRenderingContext are useful:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer"
},
{
	"api_id": "974",
	"name": "WebGLProgram",
	"description": "The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).To create a WebGLProgram, call the GL context's createProgram() function. After attaching the shader programs using attachShader(), you link them into a usable program. This is shown in the code below.See WebGLShader for information on creating the vertexShader and fragmentShader in the above example.The steps to actually do some work with the program involve telling the GPU to use the program, bind the appropriate data and configuration options, and finally draw something to the screen.If there is an error linking the program or you wish to delete an existing program, then it is as simple as running WebGLRenderingContext.deleteProgram(). This frees the memory of the linked program.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram"
},
{
	"api_id": "975",
	"name": "WebGLQuery",
	"description": "The WebGLQuery interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.Another kind of queries are disjoint timer queries, which allow you to measure performance and profiling of your GPU. Disjoint timer queries are available with the EXT_disjoint_timer_query extension only.When working with WebGLQuery objects, the following methods of the WebGL2RenderingContext are useful:in this example, gl must be a WebGL2RenderingContext. WebGLQuery objects are not available in WebGL 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery"
},
{
	"api_id": "976",
	"name": "WebGLRenderbuffer",
	"description": "The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or that can be a source or target of a rendering operation.The WebGLRenderbuffer object does not define any methods or properties of its own and its content is not directly accessible. When working with WebGLRenderbuffer objects, the following methods of the WebGLRenderingContext are useful:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer"
},
{
	"api_id": "977",
	"name": "WebGLRenderingContext",
	"description": "The WebGLRenderingContext interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.To get an access to a WebGL context for 2D and/or 3D graphics rendering, call getContext() on a <canvas> element, supplying "webgl" as the argument:Once you have the WebGL rendering context for a canvas, you can render within it. The WebGL tutorial has more information, examples, and resources on how to get started with WebGL.If you require a WebGL 2.0 context, see WebGL2RenderingContext; this supplies access to an implementation of OpenGL ES 3.0 graphics.See the WebGL constants page.The following properties and methods provide general information and functionality to deal with the WebGL context:A read-only back-reference to the HTMLCanvasElement. Might be null if it is not associated with a <canvas> element.Pushes frames back to the original HTMLCanvasElement, if the context is not directly fixed to a specific canvas.The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.Returns a WebGLContextAttributes object that contains the actual context parameters. Might return null, if the context is lost.Returns true if the context is lost, otherwise returns false.Ensures the context is compatible with the user's XR hardware, re-creating the context if necessary with a new configuration to do so. This can be used to start an application using standard 2D presentation, then transition to using a VR or AR mode later.Defines the scissor box.Sets the viewport.Selects the active texture unit.Sets the source and destination blending factors.Sets both the RGB blend equation and alpha blend equation to a single equation.Sets the RGB blend equation and alpha blend equation separately.Defines which function is used for blending pixel arithmetic.Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.Specifies the color values used when clearing color buffers.Specifies the depth value used when clearing the depth buffer.Specifies the stencil value used when clearing the stencil buffer.Sets which color components to enable or to disable when drawing or rendering to a WebGLFramebuffer.Specifies whether or not front- and/or back-facing polygons can be culled.Specifies a function that compares incoming pixel depth to the current depth buffer value.Sets whether writing into the depth buffer is enabled or disabled.Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.Disables specific WebGL capabilities for this context.Enables specific WebGL capabilities for this context.Specifies whether polygons are front- or back-facing by setting a winding orientation.Returns a value for the passed parameter name.Returns error information.Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.Tests whether a specific WebGL capability is enabled or not for this context.Sets the line width of rasterized lines.Specifies the pixel storage modesSpecifies the scale factors and units to calculate depth values.Specifies multi-sample coverage parameters for anti-aliasing effects.Sets the both front and back function and reference value for stencil testing.Sets the front and/or back function and reference value for stencil testing.Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.Sets both the front and back-facing stencil test actions.Sets the front and/or back-facing stencil test actions.Binds a WebGLBuffer object to a given target.Updates buffer data.Updates buffer data starting at a passed offset.Creates a WebGLBuffer object.Deletes a WebGLBuffer object.Returns information about the buffer.Returns a Boolean indicating if the passed buffer is valid.Binds a WebGLFrameBuffer object to a given target.Returns the status of the framebuffer.Creates a WebGLFrameBuffer object.Deletes a WebGLFrameBuffer object.Attaches a WebGLRenderingBuffer object to a WebGLFrameBuffer object.Attaches a textures image to a WebGLFrameBuffer object.Returns information about the framebuffer.Returns a Boolean indicating if the passed WebGLFrameBuffer object is valid.Reads a block of pixels from the WebGLFrameBuffer.Binds a WebGLRenderBuffer object to a given target.Creates a WebGLRenderBuffer object.Deletes a WebGLRenderBuffer object.Returns information about the renderbuffer.Returns a Boolean indicating if the passed WebGLRenderingBuffer is valid.Creates a renderbuffer data store.Binds a WebGLTexture object to a given target.Specifies a 2D texture image in a compressed format.Specifies a 2D texture sub-image in a compressed format.Copies a 2D texture image.Copies a 2D texture sub-image.Creates a WebGLTexture object.Deletes a WebGLTexture object.Generates a set of mipmaps for a WebGLTexture object.Returns information about the texture.Returns a Boolean indicating if the passed WebGLTexture is valid.Specifies a 2D texture image.Updates a sub-rectangle of the current WebGLTexture.Sets texture parameters.Sets texture parameters.Attaches a WebGLShader to a WebGLProgram.Binds a generic vertex index to a named attribute variable.Compiles a WebGLShader.Creates a WebGLProgram.Creates a WebGLShader.Deletes a WebGLProgram.Deletes a WebGLShader.Detaches a WebGLShader.Returns a list of WebGLShader objects attached to a WebGLProgram.Returns information about the program.Returns the information log for a WebGLProgram object.Returns information about the shader.Returns a WebGLShaderPrecisionFormat object describing the precision for the numeric format of the shader.Returns the information log for a WebGLShader object.Returns the source code of a WebGLShader as a string.Returns a Boolean indicating if the passed WebGLProgram is valid.Returns a Boolean indicating if the passed WebGLShader is valid.Links the passed WebGLProgram object.Sets the source code in a WebGLShader.Uses the specified WebGLProgram as part the current rendering state.Validates a WebGLProgram.Disables a vertex attribute array at a given position.Enables a vertex attribute array at a given position.Returns information about an active attribute variable.Returns information about an active uniform variable.Returns the location of an attribute variable.Returns the value of a uniform variable at a given location.Returns the location of a uniform variable.Returns information about a vertex attribute at a given position.Returns the address of a given vertex attribute.Specifies a value for a uniform variable.Specifies a matrix value for a uniform variable.Specifies a value for a generic vertex attribute.Specifies the data formats and locations of vertex attributes in a vertex attributes array.Clears specified buffers to preset values.Renders primitives from array data.Renders primitives from element array data.Blocks execution until all previously called commands are finished.Empties different buffer commands, causing all commands to be executed as quickly as possible.These methods manage WebGL extensions:Returns an Array of strings containing all the supported WebGL extensions.Returns an extension object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext"
},
{
	"api_id": "978",
	"name": "WebGLSampler",
	"description": "The WebGLSampler interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.When working with WebGLSampler objects, the following methods of the WebGL2RenderingContext are useful:in this example, gl must be a WebGL2RenderingContext. WebGLSampler objects are not available in WebGL 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler"
},
{
	"api_id": "979",
	"name": "WebGLShader",
	"description": "The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.To create a WebGLShader use WebGLRenderingContext.createShader, then hook up the GLSL source code using WebGLRenderingContext.shaderSource(), and finally invoke WebGLRenderingContext.compileShader() to finish and compile the shader. At this point the WebGLShader is still not in a usable form and must still be attached to a WebGLProgram.See WebGLProgram for information on attaching the shaders.Note that there are many other strategies for writing and accessing shader source code strings. These example are for illustration purposes only.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader"
},
{
	"api_id": "980",
	"name": "WebGLShaderPrecisionFormat",
	"description": "The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.The base 2 log of the absolute value of the minimum value that can be represented.The base 2 log of the absolute value of the maximum value that can be represented.The number of bits of precision that can be represented. For integer formats this value is always 0.A WebGLShaderPrecisionFormat object is returned by the WebGLRenderingContext.getShaderPrecisionFormat() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat"
},
{
	"api_id": "981",
	"name": "WebGLSync",
	"description": "The WebGLSync interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.When working with WebGLSync objects, the following methods of the WebGL2RenderingContext are useful:in this example, gl must be a WebGL2RenderingContext. WebGLSync objects are not available in WebGL 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync"
},
{
	"api_id": "982",
	"name": "WebGLTexture",
	"description": "The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.The WebGLTexture object does not define any methods or properties of its own and its content is not directly accessible. When working with WebGLTexture objects, the following methods of the WebGLRenderingContext are useful:See also the WebGL tutorial on Using textures in WebGL.When using WebXR layers, the XRWebGLBinding object will return instances of an opaque WebGLTexture for the color and depth/stencil attachments.WebXR methods that return opaque WebGLTexture objects:The WebXR opaque texture is identical to the standard WebGLTexture with the following exceptions:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture"
},
{
	"api_id": "983",
	"name": "WebGLTransformFeedback",
	"description": "The WebGLTransformFeedback interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.When working with WebGLTransformFeedback objects, the following methods of the WebGL2RenderingContext are useful:in this example, gl must be a WebGL2RenderingContext. WebGLTransformFeedback objects are not available in WebGL 1.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback"
},
{
	"api_id": "984",
	"name": "WebGLUniformLocation",
	"description": "The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.The WebGLUniformLocation object does not define any methods or properties of its own and its content is not directly accessible. When working with WebGLUniformLocation objects, the following methods of the WebGLRenderingContext are useful:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation"
},
{
	"api_id": "985",
	"name": "WebGLVertexArrayObject",
	"description": "The WebGLVertexArrayObject interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.When working with WebGLVertexArrayObject objects, the following methods are useful:Note: The OES_vertex_array_object extension allows you to use vertex array objects in a WebGL 1 context.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject"
},
{
	"api_id": "986",
	"name": "WebSocket",
	"description": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.To construct a WebSocket, use the WebSocket() constructor.Note: This feature is available in Web WorkersReturns a newly created WebSocket object.The binary data type used by the connection.The number of bytes of queued data.The extensions selected by the server.The sub-protocol selected by the server.The current state of the connection.The absolute URL of the WebSocket.Closes the connection.Enqueues data to be transmitted.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when a connection with a WebSocket is closed.\n  Also available via the onclose property\n  \n  Fired when a connection with a WebSocket has been closed because of an error, such as when some data couldn't be sent.\n  Also available via the onerror property.\n  \n  Fired when data is received through a WebSocket.\n  Also available via the onmessage property.\n  \n  Fired when a connection with a WebSocket is opened.\n  Also available via the onopen property.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"
},
{
	"api_id": "987",
	"name": "WheelEvent",
	"description": "The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.Note: This is the standard wheel event interface to use. Old versions of browsers implemented the non-standard and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid the non-standard ones.Note: Do not confuse the wheel event with the scroll event. The default action of a wheel event is implementation-defined. Thus, a wheel event doesn't necessarily dispatch a scroll event. Even when it does, that doesn't mean that the delta* values in the wheel event necessarily reflect the content's scrolling direction. Therefore, do not rely on delta* properties to get the content's scrolling direction. Instead, detect value changes to scrollLeft and scrollTop of the target in the scroll event.Creates a WheelEvent object.This interface inherits properties from its ancestors, MouseEvent, UIEvent, and Event.Returns a double representing the horizontal scroll amount.Returns a double representing the vertical scroll amount.Returns a double representing the scroll amount for the z-axis.Returns an unsigned long representing the unit of the delta* values' scroll amount. Permitted values are:Returns an integer (32-bit) representing the distance in pixels.Returns an integer representing the horizontal scroll amount.Returns an integer representing the vertical scroll amount.Note: Element: mousewheel event has additional documentation about the deprecated properties wheelDelta, wheelDeltaX, wheelDeltaY.This interface doesn't define any specific methods, but inherits methods from its ancestors, MouseEvent, UIEvent, and Event.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent"
},
{
	"api_id": "988",
	"name": "Window",
	"description": "The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.A window for a given document can be obtained using the document.defaultView property.A global variable, window, representing the window in which the script is running, is exposed to JavaScript code.The Window interface is home to a variety of functions, namespaces, objects, and constructors which are not necessarily directly associated with the concept of a user interface window. However, the Window interface is a suitable place to include these items that need to be globally available. Many of these are documented in the JavaScript Reference and the DOM Reference.In a tabbed browser, each tab is represented by its own Window object; the global window seen by JavaScript code running within a given tab always represents the tab in which the code is running. That said, even in a tabbed browser, some properties and methods still apply to the overall window that contains the tab, such as resizeTo() and innerHeight. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.See also the DOM Interfaces.DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization.Used for creating an HTMLImageElement.Used for creating an HTMLOptionElement.Returns a StaticRange() constructor which creates a StaticRange object.Used for creating a Web worker.Converts a DOM tree into XML or HTML source.This interface inherits properties from the EventTarget interface.Note that properties which are objects (e.g., for overriding the prototype of built-in elements) are listed in a separate section below.An alias for Window.navigator.This property indicates whether the current window is closed or not.Returns a reference to the console object which provides access to the browser's debugging console.Returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.Returns the browser crypto object.Returns the ratio between physical pixels and device independent pixels in the current display.Returns a reference to the document that the window contains.Returns the current event, which is the event currently being handled by the JavaScript code's context, or undefined if no event is currently being handled. The Event object passed directly to event handlers should be used instead whenever possible.Returns an object with functions for adding external search providers to the browser.Returns the element in which the window is embedded, or null if the window is not embedded.Returns an array of the subframes in the current window.This property indicates whether the window is displayed in full screen or not.Returns a reference to the history object.Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.Returns a boolean indicating whether the current context is secure (true) or not (false).Returns the number of frames in the window. See also window.frames.Gets/sets the location, or current URL, of the window object.Returns the locationbar object, whose visibility can be toggled in the window.Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.Returns the menubar object, whose visibility can be toggled in the window.Returns the message manager object for this window.Returns the horizontal (X) coordinate of the top-left corner of the window's viewport, in screen coordinates. This value is reported in CSS pixels. See mozScreenPixelsPerCSSPixel in nsIDOMWindowUtils for a conversion factor to adapt to screen pixels if needed.Returns the vertical (Y) coordinate of the top-left corner of the window's viewport, in screen coordinates. This value is reported in CSS pixels. See mozScreenPixelsPerCSSPixel for a conversion factor to adapt to screen pixels if needed.Gets/sets the name of the window.Returns a reference to the navigator object.Returns a reference to the window that opened this current window.Gets the height of the outside of the browser window.Gets the width of the outside of the browser window.An alias for window.scrollX.An alias for window.scrollY.Returns a reference to the parent of the current window or subframe.Returns a Performance object, which includes the timing and navigation attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.Returns the personalbar object, whose visibility can be toggled in the window.Returns a reference to the screen object associated with the window.Both properties return the horizontal distance from the left border of the user's browser viewport to the left side of the screen.Both properties return the vertical distance from the top border of the user's browser viewport to the top side of the screen.Returns the scrollbars object, whose visibility can be toggled in the window.The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).Returns the number of pixels that the document has already been scrolled horizontally.Returns the number of pixels that the document has already been scrolled vertically.Returns an object reference to the window object itself.Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.Returns a reference to the window object of the sidebar.Returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.Gets/sets the text in the statusbar at the bottom of the browser.Returns the statusbar object, whose visibility can be toggled in the window.Returns the toolbar object, whose visibility can be toggled in the window.Returns a reference to the topmost window in the window hierarchy. This property is read only.Returns a VisualViewport object which represents the visual viewport for a given window.Returns a reference to the current window.Returns a reference to the window object in the frames. See Window.frames for more details.Returns the CacheStorage object associated with the current context. This object enables functionality such as storing assets for offline use, and generating custom responses to requests.Provides a mechanism for applications to asynchronously access capabilities of indexed databases; returns an IDBFactory object.Returns the global object's origin, serialized as a string.\n  Returns the Scheduler object associated with the current context.\n  This is the entry point for using the Prioritized Task Scheduling API.\n  Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.Gets/sets the status bar text for the given window.Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.The return value to be returned to the function that called window.showModalDialog() to display the window as a modal dialog.This interface inherits methods from the EventTarget interface and implements methods from WindowOrWorkerGlobalScope and EventTarget.Displays an alert dialog.Sets focus away from the window.Enables you to cancel a callback previously scheduled with Window.requestAnimationFrame.Enables you to cancel a callback previously scheduled with Window.requestIdleCallback.Cancels the repeated execution set using setImmediate.Closes the current window.Displays a dialog with a message that the user needs to respond to.Writes a message to the console.Searches for a given string in a window.Sets focus on the current window.Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.Gets default computed style for the specified element, ignoring author stylesheets.Returns the selection object representing the selected item(s).Returns a MediaQueryList object representing the specified media query string.Moves the current window by a specified amount.Moves the window to the specified coordinates.Opens a new window.Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.Opens the Print Dialog to print the current document.Returns the text entered by the user in a prompt dialog.Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.Enables the scheduling of tasks during a browser's idle periods.Resizes the current window by a certain amount.Dynamically resizes window.Scrolls the window to a particular place in the document.Scrolls the document in the window by the given amount.Scrolls the document by the given number of lines.Scrolls the current document by the specified number of pages.Scrolls to a particular set of coordinates in the document.Executes a function after the browser has finished other heavy tasks.Toggles a user's ability to resize a window.Sizes the window according to its content.Shows a file picker that allows a user to select a file or multiple files.Shows a file picker that allows a user to save a file.Displays a directory picker which allows the user to select a directory.This method stops window loading.Updates the state of commands of the current chrome window (UI).Register an event handler to a specific event type on the window.Used to trigger an event.Decodes a string of data which has been encoded using base-64 encoding.Creates a base-64 encoded ASCII string from a string of binary data.Cancels the repeated execution set using setInterval().Cancels the delayed execution set using setTimeout().Accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.Starts the process of fetching a resource from the network.Removes an event listener from the window.Schedules a function to execute every time a given number of milliseconds elapses.Schedules a function to execute in a given amount of time.Reports an error in a script, emulating an unhandled exception.Moves back one in the window history. This method is deprecated; you should instead use window.history.back().Registers the window to capture all events of the specified type.Moves the window one document forward in the history. This method is deprecated; you should instead use window.history.forward().Returns the browser to the home page.Opens a new dialog window.Releases the window from trapping events of a specific type.Displays a modal dialog.These are properties of the window object that can be set to establish event handlers for the various things that can happen in the window that might be of interest.This interface inherits event handlers from the EventTarget interface.An event handler property for user proximity events (see UserProximityEvent).Called when the loading of a resource has been aborted, such as by a user canceling the load while it is still in progress.An event handler property for change events on the window.Called after the ANY mouse button is pressed & released.Called when a double click is made with ANY mouse button.Called after the window is closed.Called when the RIGHT mouse button is pressed.Called when a resource fails to load OR when an error occurs at runtime. See error event.Called when the value of an <input> element changes.Called when you begin pressing ANY key. See keydown event.Called when a key (except Shift, Fn, and CapsLock) is in pressed position. See keypress event.Called when you finish releasing ANY key. See keyup event.Called after all resources and the DOM are fully loaded. WILL NOT get called when the page is loaded from cache, such as with back button.Called when ANY mouse button is pressed.Called continuously when the mouse is moved inside the window.Called when the pointer leaves the window.Called when the pointer enters the window.Called when ANY mouse button is released.Called when the scroll bar is moved via ANY means. If the resource fully fits in the window, then this event cannot be invoked.Called when the mouse wheel is rotated around any axis.Called after text in an input field is selected.An event handler representing the code to be called when the selectionchange event is raised.Called when a form is submitted.Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\n  Fired when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.\n  Also available via the onerror property.\n  Fired at the global scope object when the user's preferred language changes.Fired when the orientation of the device has changed.Fired at a regular interval, indicating the amount of physical force of acceleration the device is receiving and the rate of rotation, if available.Fired when fresh data is available from the magnetometer orientation sensor about the current orientation of the device as compared to the Earth coordinate frame.\n  Fired when the window has been resized.\n  Also available via the onresize property.\n  Fired when a storage area (localStorage or sessionStorage) has been modified in the context of another document.Fired when a compatible VR device has been connected to the computer.Fired when a compatible VR device has been disconnected from the computer.Fired when a display is able to be presented to.Fired when a display can no longer be presented to.Fired when presentation to a display has been paused for some reason by the browser, OS, or VR hardware.Fired when presentation to a display has resumed after being blurred.Fired when the presenting state of a VR device changes — i.e. goes from presenting to not presenting, or vice versa.\n  Fired when an animation unexpectedly aborts.\n  Also available via the onanimationcancel property.\n  \n  Fired when an animation has completed normally.\n  Also available via the onanimationend property.\n  \n  Fired when an animation iteration has completed.\n  Also available via the onanimationiteration property.\n  \n  Fired when an animation starts.\n  Also available via the onanimationstart property.\n  \n  Fired when the user initiates a copy action through the browser's user interface.\n  Also available via the oncopy property.\n  \n  Fired when the user initiates a cut action through the browser's user interface.\n  Also available via the oncut property.\n  \n  Fired when the user initiates a paste action through the browser's user interface.\n  Also available via the onpaste property.\n  Fired when the browser has lost access to the network and the value of navigator.onLine has switched to false.Fired when the browser has gained access to the network and the value of navigator.onLine has switched to true.\n  Fired when an element has lost focus.\n  Also available via the onblur property.\n  \n  Fired when an element has gained focus.\n  Also available via the onfocus property.\n  Fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.Fired when the browser detects that a gamepad has been disconnected.Fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).Sent when the browser hides the current document while in the process of switching to displaying in its place a different document from the session's history. This happens, for example, when the user clicks the Back button or when they click the Forward button to move ahead in session history.Sent when the browser makes the document visible due to navigation tasks, including not only when the page is first loaded, but also situations such as the user navigating back to the page after having navigated to another within the same tab.Fired when the active history entry changes.Fired when the window, the document and its resources are about to be unloaded.Fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.\n  Fired when the whole page has loaded, including all dependent resources such as stylesheets images.\n  Also available via the onload property.\n  Fired when the document or a child resource is being unloaded.Fired when the browser has successfully installed a page as an application.Fired when a user is about to be prompted to install a web application.Fired when the window receives a message, for example from a call to Window.postMessage() from another browsing context.Fired when a Window object receives a message that can't be deserialized.Fired after the associated document has started printing or the print preview has been closed.Fired when the associated document is about to be printed or previewed for printing.Sent every time a JavaScript Promise is rejected, regardless of whether or not there is a handler in place to catch the rejection.Sent when a JavaScript Promise is rejected but there is no handler in place to catch the rejection.\n  Fired when a CSS transition is canceled.\n  Also available via the ontransitioncancel property.\n  \n  Fired when a CSS transition has completed.\n  Also available via the ontransitionend property.\n  \n  Fired when a CSS transition is first created.\n  Also available via the ontransitionrun property.\n  \n  Fired when a CSS transition has actually started.\n  Also available via the ontransitionstart property.\n  \n  Fired when a VR display becomes available to be presented to, for example if an HMD has been moved to bring it out of standby, or woken up by being put on.\n  Also available via the onvrdisplayactivate property.\n  \n  Fired when presentation to a VR display has been paused for some reason by the browser, OS, or VR hardware.\n  Also available via the onvrdisplayblur property.\n  \n  Fired when a compatible VR display is connected to the computer.\n  Also available via the onvrdisplayconnect property.\n  \n  Fired when a VR display can no longer be presented to, for example if an HMD has gone into standby or sleep mode due to a period of inactivity.\n  Also available via the onvrdisplaydeactivate property.\n  \n  Fired when a compatible VR display is disconnected from the computer.\n  Also available via the onvrdisplaydisconnect property.\n  \n  Fired when presentation to a VR display has resumed after being blurred.\n  Also available via the onvrdisplayfocus property.\n  \n  Fired when the presenting state of a VR display changes — i.e. goes from presenting to not presenting, or vice versa.\n  Also available via the onvrdisplaypresentchange property.\n  \n  Fired when the VR display's pointer input is restricted to consumption via a pointerlocked element.\n  Also available via the onvrdisplaypointerrestricted property.\n  \n  Fired when the VR display's pointer input is no longer restricted to consumption via a pointerlocked element.\n  Also available via the onvrdisplaypointerunrestricted property.\n  See DOM Reference.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Window"
},
{
	"api_id": "989",
	"name": "WindowClient",
	"description": "The WindowClient interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browsing context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.WindowClient inherits methods from its parent interface, Client.Gives user input focus to the current client.Loads a specified URL into a controlled client page.WindowClient inherits properties from its parent interface, Client.A boolean that indicates whether the current client has focus.Indicates the visibility of the current client. This value can be one of "hidden", "visible", or "prerender".",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WindowClient"
},
{
	"api_id": "990",
	"name": "WindowControlsOverlay",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.\n  The WindowControlsOverlay interface of the Window Controls Overlay API exposes information about the geometry\n  of the title bar area in desktop Progressive Web Apps, and an event to know whenever it changes. This interface is accessible from Navigator.windowControlsOverlay.\nA Boolean that indicates whether the window controls overlay is visible or not.Returns the size and position of the title bar.Listen to these events using EventTarget.addEventListener() or by assigning an event listener to the relevant oneventname property of this interface.Fired when the geometry of the title bar area changes.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WindowControlsOverlay"
},
{
	"api_id": "991",
	"name": "WindowControlsOverlayGeometryChangeEvent",
	"description": "The WindowControlsOverlayGeometryChangeEvent interface of the Window Controls Overlay API is passed to geometrychange when the size or visibility of a desktop Progress Web App's title bar region changes.Creates a WindowControlsOverlayGeometryChangeEvent event with the given parameters.Also inherits properties from its parent Event.A DOMRect representing the position and size of the title bar region.A Boolean that indicates whether the window controls overlay is visible or not.\n  The following example shows how to use a WindowControlsOverlayGeometryChangeEvent instance by adding an\n  event handler on the Navigator.windowControlsOverlay property, to listen to geometry changes of a PWA's title bar region.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WindowControlsOverlayGeometryChangeEvent"
},
{
	"api_id": "992",
	"name": "Worker",
	"description": "The Worker interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.Creating a worker is done by calling the Worker("path/to/worker/script") constructor.Workers may themselves spawn new workers, as long as those workers are hosted at the same origin as the parent page. (Note: nested workers are not yet implemented in WebKit).Not all interfaces and functions are available to scripts inside a Worker. Workers may use XMLHttpRequest for network communication, but its responseXML and channel attributes are always null. (fetch is also available, with no such restrictions.)Creates a dedicated web worker that executes the script at the specified URL. This also works for Blob URLs.Inherits properties from its parent, EventTarget.Inherits methods from its parent, EventTarget.Sends a message — consisting of any JavaScript object — to the worker's inner scope.Immediately terminates the worker. This does not let worker finish its operations; it is halted at once. ServiceWorker instances do not support this method.Fires when an error occurs in the worker.Fires when the worker's parent receives a message from that worker.Fires when a Worker object receives a message that can't be deserialized.Fires every time a Promise rejects, regardless of whether or not there is a handler to catch the rejection.Fires when a Promise rejects with no handler to catch the rejection.The following code snippet creates a Worker object using the Worker() constructor, then uses the worker object:For a full example, see our Basic dedicated worker example (run dedicated worker).Support varies for different types of workers. See each worker type's page for specifics.In early versions of the spec, loading a cross-origin worker script threw a SecurityError. Nowadays, an error event is thrown instead.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker"
},
{
	"api_id": "993",
	"name": "WorkerGlobalScope",
	"description": "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.This interface is usually specialized by each worker type: DedicatedWorkerGlobalScope for dedicated workers, SharedWorkerGlobalScope for shared workers, and ServiceWorkerGlobalScope for ServiceWorker. The self property returns the specialized scope for each context.This interface inherits properties from the EventTarget interface.Returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.Returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope, SharedWorkerGlobalScope or ServiceWorkerGlobalScope.Returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.Returns the Performance associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.Returns the console associated with the worker.Returns the CacheStorage object associated with the current context. This object enables functionality such as storing assets for offline use, and generating custom responses to requests.Provides a mechanism for applications to asynchronously access capabilities of indexed databases; returns an IDBFactory object.Returns a boolean indicating whether the current context is secure (true) or not (false).Returns the global object's origin, serialized as a string.\n  Returns the Scheduler object associated with the current context.\n  This is the entry point for using the Prioritized Task Scheduling API.\n  Fires when an error occurred.Fires when the browser has lost access to the network and the value of navigator.onLine switched to false.Fires when the browser has gained access to the network and the value of navigator.onLine switched to true.Fires at the global/worker scope object when the user's preferred languages change.Fires on handled Promise rejection events.Fires on unhandled Promise rejection events.This interface inherits methods from the EventTarget interface.Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example: importScripts('foo.js', 'bar.js');Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's window.dump, but for workers.Decodes a string of data which has been encoded using base-64 encoding.Creates a base-64 encoded ASCII string from a string of binary data.Cancels the repeated execution set using setInterval().Cancels the delayed execution set using setTimeout().Accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.Starts the process of fetching a resource from the network.Schedules a function to execute every time a given number of milliseconds elapses.Schedules a function to execute in a given amount of time.Reports an error in a script, emulating an unhandled exception.You won't access WorkerGlobalScope directly in your code; however, its properties and methods are inherited by more specific global scopes such as DedicatedWorkerGlobalScope and SharedWorkerGlobalScope. For example, you could import another script into the worker and print out the contents of the worker scope's navigator object using the following two lines:Note: Since the global scope of the worker script is effectively the global scope of the worker you are running (DedicatedWorkerGlobalScope or whatever) and all worker global scopes inherit methods, properties, etc. from WorkerGlobalScope, you can run lines such as those above without specifying a parent object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope"
},
{
	"api_id": "994",
	"name": "WorkerLocation",
	"description": "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.This interface is only visible from inside a JavaScript script executed in the context of a Web worker.Returns a string containing the serialized URL for the worker's location.Returns the protocol part of the worker's location.Returns the host part of the worker's location.Returns the hostname part of the worker's location.Returns the worker's origin.Returns the port part of the worker's location.Returns the pathname part of the worker's location.Returns the search part of the worker's location.Returns the hash part of the worker's location.Returns a string containing the serialized URL for the worker's location. It is a synonym for WorkerLocation.href.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation"
},
{
	"api_id": "995",
	"name": "WorkerNavigator",
	"description": "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the self.navigator property.The WorkerNavigator interface doesn't inherit any property.Always returns 'Mozilla', in any browser. This property is kept only for compatibility purposes.Returns the official name of the browser. Do not rely on this property to return the correct value.Returns the version of the browser as a string. Do not rely on this property to return the correct value.Provides a NetworkInformation object containing information about the network connection of a device.Returns the number of logical processor cores available.Returns a string representing the preferred language of the user, usually the language of the browser UI. The null value is returned when this is unknown.Returns an array of strings representing the languages known to the user, by order of preference.Returns a LockManager object which provides methods for requesting a new Lock object and querying for an existing Lock object.Returns a boolean value indicating whether the browser is online.Returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API.Returns a string representing the platform of the browser. Do not rely on this property to return the correct value.Always returns 'Gecko', on any browser. This property is kept only for compatibility purposes.Returns a Serial object, which represents the entry point into the Web Serial API to enable the control of serial ports.Returns a StorageManager interface for managing persistence permissions and estimating available storage.Returns the user agent string for the current browser.Returns a NavigatorUAData object, which gives access to information about the browser and operating system of the user.The WorkerNavigator interface neither inherits nor implements any method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator"
},
{
	"api_id": "996",
	"name": "Worklet",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The Worklet interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline.With Worklets, you can run JavaScript and WebAssembly code to do graphics rendering or audio processing where high performance is required.Worklets are restricted to specific use cases; they cannot be used for arbitrary computations like Web Workers. The Worklet interface abstracts properties and methods common to all kind of worklets, and cannot be created directly. Instead, you can use one of the following classes:For 3D rendering with WebGL, you don't use Worklets. Instead, you write Vertex Shaders and Fragment Shaders using GLSL code, and those shaders will then run on the graphics card.The Worklet interface does not define any properties.Adds the script module at the given URL to the current worklet.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/Worklet"
},
{
	"api_id": "997",
	"name": "WritableStream",
	"description": "\n  The WritableStream interface of the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink.\n  This object comes with built-in backpressure and queuing.\nWritableStream is a transferable object.Creates a new WritableStream object.A boolean indicating whether the WritableStream is locked to a writer.Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.Closes the stream.Returns a new instance of WritableStreamDefaultWriter and locks the stream to that instance. While the stream is locked, no other writer can be acquired until this one is released.The following example illustrates several features of this interface. It shows the creation of the WritableStream with a custom sink and an API-supplied queueing strategy. It then calls a function called sendMessage(), passing the newly created stream and a string. Inside this function it calls the stream's getWriter() method, which returns an instance of WritableStreamDefaultWriter. A forEach() call is used to write each chunk of the string to the stream. Finally, write() and close() return promises that are processed to deal with success or failure of chunks and streams.You can find the full code in our Simple writer example.\n  Because of how backpressure is supported in the API, its implementation in code may be less than obvious.\n  To see how backpressure is implemented look for three things:\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WritableStream"
},
{
	"api_id": "998",
	"name": "WritableStreamDefaultController",
	"description": "The WritableStreamDefaultController interface of the Streams API represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.None. WritableStreamDefaultController instances are created automatically during WritableStream construction.None.Causes any future interactions with the associated stream to error.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultController"
},
{
	"api_id": "999",
	"name": "WritableStreamDefaultWriter",
	"description": "Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.The WritableStreamDefaultWriter interface of the Streams API is the object returned by WritableStream.getWriter() and once created locks the writer to the WritableStream ensuring that no other streams can write to the underlying sink.Creates a new WritableStreamDefaultWriter object instance.Allows you to write code that responds to an end to the streaming process. Returns a promise that fulfills if the stream becomes closed, or rejects if the stream errors or the writer's lock is released.Returns the desired size required to fill the stream's internal queue.Returns a Promise that resolves when the desired size of the stream's internal queue transitions from non-positive to positive, signaling that it is no longer applying backpressure.Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.Closes the associated writable stream.Releases the writer's lock on the corresponding stream. After the lock is released, the writer is no longer active. If the associated stream is errored when the lock is released, the writer will appear errored in the same way from now on; otherwise, the writer will appear closed.Writes a passed chunk of data to a WritableStream and its underlying sink, then returns a Promise that resolves to indicate the success or failure of the write operation.The following example shows the creation of a WritableStream with a custom sink and an API-supplied queuing strategy. It then calls a function called sendMessage(), passing the newly created stream and a string. Inside this function it calls the stream's getWriter() method, which returns an instance of WritableStreamDefaultWriter. A forEach() call is used to write each chunk of the string to the stream. Finally, write() and close() return promises that are processed to deal with success or failure of chunks and streams.You can find the full code in our Simple writer example.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter"
},
{
	"api_id": "1000",
	"name": "XMLDocument",
	"description": "The XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.Also inherits properties from: DocumentUsed with XMLDocument.load() to indicate an asynchronous request.Also inherits methods from: DocumentLoads an XML document.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument"
},
{
	"api_id": "1001",
	"name": "XMLHttpRequest",
	"description": "XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.XMLHttpRequest is used heavily in AJAX programming.Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML.If your communication needs to involve receiving event data or message data from a server, consider using server-sent events through the EventSource interface. For full-duplex communication, WebSockets may be a better choice.Note: This feature is available in Web Workers, except for Service WorkersThe constructor initializes an XMLHttpRequest. It must be called before any other method calls.This interface also inherits properties of XMLHttpRequestEventTarget and of EventTarget.Returns a number representing the state of the request.Returns an ArrayBuffer, a Blob, a Document, a JavaScript object, or a string, depending on the value of XMLHttpRequest.responseType, that contains the response entity body.Returns a string that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent.Specifies the type of the response.Returns the serialized URL of the response or the empty string if the URL is null.Returns a Document containing the response to the request, or null if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML. Not available in Web Workers.Returns the HTTP response status code of the request.Returns a string containing the response string returned by the HTTP server. Unlike XMLHttpRequest.status, this includes the entire text of the response message ("OK", for example).Note: According to the HTTP/2 specification RFC 7540, section 8.1.2.4: Response Pseudo-Header Fields, HTTP/2 does not define a way to carry the version or reason phrase that is included in an HTTP/1.1 status line.The time in milliseconds a request can take before automatically being terminated.A XMLHttpRequestUpload representing the upload process.Returns true if cross-site Access-Control requests should be made using credentials such as cookies or authorization headers; otherwise false.The channel used by the object when performing the request.A boolean. If true, the request will be sent without cookie and authentication headers.A boolean. If true, the same origin policy will not be enforced on the request.A boolean. It indicates whether or not the object represents a background service request.Aborts the request if it has already been sent.Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.Initializes a request.Overrides the MIME type returned by the server.Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.Sets the value of an HTTP request header. You must call setRequestHeader() after open(), but before send().\n  Fired when a request has been aborted, for example because the program called XMLHttpRequest.abort().\n  Also available via the onabort event handler property.\n  \n  Fired when the request encountered an error.\n  Also available via the onerror event handler property.\n  \n  Fired when an XMLHttpRequest transaction completes successfully.\n  Also available via the onload event handler property.\n  \n  Fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).\n  Also available via the onloadend event handler property.\n  \n  Fired when a request has started to load data.\n  Also available via the onloadstart event handler property.\n  \n  Fired periodically when a request receives more data.\n  Also available via the onprogress event handler property.\n  \n  Fired whenever the readyState property changes.\n  Also available via the onreadystatechange event handler property.\n  \n  Fired when progress is terminated due to preset time expiring.\n  Also available via the ontimeout event handler property.\n  ",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"
},
{
	"api_id": "1002",
	"name": "XMLHttpRequestEventTarget",
	"description": "XMLHttpRequestEventTarget is the interface that describes the event handlers shared on XMLHttpRequest and XMLHttpRequestUpload.You don't use XMLHttpRequestEventTarget directly; instead you interact with the sub classes.The following events are made available to XMLHttpRequest:The following events are made available to XMLHttpRequestUpload:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget"
},
{
	"api_id": "1003",
	"name": "XMLSerializer",
	"description": "The XMLSerializer interface provides the serializeToString() method to construct an XML string representing a DOM tree.Returns the serialized subtree of a string.The first, basic, example just serializes an entire document into a string containing XML.This involves creating a new XMLSerializer object, then passing the Document to be serialized into serializeToString(), which returns the XML equivalent of the document.This example uses the Element.insertAdjacentHTML() method to insert a new DOM Node into the body of the Document, based on XML created by serializing an Element object.Note: In the real world, you should usually instead call importNode() method to import the new node into the DOM, then call one of the following methods to add the node to the DOM tree:Because insertAdjacentHTML() accepts a string and not a Node as its second parameter, XMLSerializer is used to first convert the node into a string.The code creates a new <input> element by calling Document.createElement(), then serializes it into XML using serializeToString().Once that's done, insertAdjacentHTML() is used to insert the <input> element into the DOM.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer"
},
{
	"api_id": "1004",
	"name": "XPathEvaluator",
	"description": "The XPathEvaluator interface allows to compile and evaluate XPath expressions.It is implemented by the Document interface.Creates a parsed XPath expression with resolved namespaces.Adapts any DOM node to resolve namespaces allowing the XPath expression to be evaluated relative to the context of the node where it appeared within the document.Evaluates an XPath expression string and returns a result of the specified type if possible.The following example shows the use of the XPathEvaluator interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator"
},
{
	"api_id": "1005",
	"name": "XPathException",
	"description": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.In the DOM XPath API the XPathException interface represents exception conditions that can be encountered while performing XPath operations.Returns a short that contains one of the error code constants.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathException"
},
{
	"api_id": "1006",
	"name": "XPathExpression",
	"description": "This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.This is useful when an expression will be reused in an application, because it is just compiled once and all namespace prefixes which occur within the expression are preresolved.Objects of this type are created by calling XPathEvaluator.createExpression().Evaluates the XPath expression on the given node or document.The following example shows the use of the XPathExpression interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression"
},
{
	"api_id": "1007",
	"name": "XPathNSResolver",
	"description": "The XPathNSResolver interface permits prefix strings in an XPath expression to be properly bound to namespace URI strings.The XPathEvaluator interface can construct an implementation of XPathNSResolver from a node, or the interface may be implemented by any application.Looks up the namespace URI associated to the given namespace prefix.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathNSResolver"
},
{
	"api_id": "1008",
	"name": "XPathResult",
	"description": "The XPathResult interface represents the results generated by evaluating an XPath expression within the context of a given node.Since XPath expressions can result in a variety of result types, this interface makes it possible to determine and handle the type and value of the result.A boolean representing the value of the result if resultType is BOOLEAN_TYPE.Signifies that the iterator has become invalid. It is true if resultType is UNORDERED_NODE_ITERATOR_TYPE or ORDERED_NODE_ITERATOR_TYPE and the document has been modified since this result was returned.A number representing the value of the result if resultType is NUMBER_TYPE.A number code representing the type of the result, as defined by the type constants.A Node representing the value of the single node result, which may be null.The number of nodes in the result snapshot.A string representing the value of the result if resultType is STRING_TYPE.If the result is a node set, this method iterates over it and returns the next node from it or null if there are no more nodes.Returns an item of the snapshot collection or null in case the index is not within the range of nodes. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the current document if it is mutated.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult"
},
{
	"api_id": "1009",
	"name": "XRAnchor",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRAnchor interface creates anchors which keep track of the pose that is fixed relative to the real world. With anchors, you can specify poses in the world that need to be updated to correctly reflect the evolving understanding of the world, such that the poses remain aligned with the same place in the physical world. That helps to build an illusion that the placed objects are really present in the user's environment.Returns an XRSpace object to locate the anchor relative to other XRSpace objects.Removes the anchor.You can use XRFrame.createAnchor() to create an anchor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRAnchor"
},
{
	"api_id": "1010",
	"name": "XRAnchorSet",
	"description": "The XRAnchorSet interface exposes a collection of anchors. It is returned by XRFrame.trackedAnchors and is a Set-like object.See Set for details.See Set for details.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRAnchorSet"
},
{
	"api_id": "1011",
	"name": "XRBoundedReferenceSpace",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRBoundedReferenceSpace interface describes a virtual world reference space which has preset boundaries. This extends XRReferenceSpace, which describes an essentially unrestricted space around the viewer's position. These bounds are defined using an array of points, each of which defines a vertex in a polygon inside which the user is allowed to move.This is typically used when the XR system is capable of tracking the user's physical movement within a limited distance of their starting position. The specified bounds may, in fact, describe the shape and size of the room the user is located in, in order to let the WebXR site or application prevent the user from colliding with the walls or other obstacles in the real world. At a minimum, the boundaries indicate the area in which the XR device is capable of tracking the user's movement. See the article Using bounded reference spaces for details on how bounded spaces work and why they're useful.In addition to the properties of XRReferenceSpace, XRBoundedReferenceSpace includes the following:An array of DOMPointReadOnly objects, each of which defines a vertex in the polygon defining the boundaries within which the user will be required to remain. These vertices must be sorted such that they move clockwise around the viewer's position.XRBoundedReferenceSpace inherits the methods of its parent interface, XRReferenceSpace. It has no further methods.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRBoundedReferenceSpace"
},
{
	"api_id": "1012",
	"name": "XRCompositionLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRCompositionLayer interface of the WebXR Device API is a base class that defines a set of common properties and behaviors for WebXR layer types. It is not constructable on its own.Several layer types inherit from XRCompositionLayer:XRCompositionLayer itself inherits from the general XRLayer class (which inherits from EventTarget).A boolean enabling the layer's texture alpha channel.A boolean enabling optical chromatic aberration correction for the layer if the device supports it, null otherwise.The layout type of the layer.The number of mip levels in the color and texture data for the layer.A boolean signaling that the layer should be re-rendered in the next frame.Inherits methods from its parent, EventTarget.Deletes the underlying layer attachments.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRCompositionLayer"
},
{
	"api_id": "1013",
	"name": "XRCPUDepthInformation",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRCPUDepthInformation interface contains depth information from the CPU (returned by XRFrame.getDepthInformation()).This interface inherits properties from its parent, XRDepthInformation.An ArrayBuffer containing depth-buffer information in raw format.Contains the height of the depth buffer (number of rows).An XRRigidTransform that needs to be applied when indexing into the depth buffer. The transformation that the matrix represents changes the coordinate system from normalized view coordinates to normalized depth-buffer coordinates that can then be scaled by depth buffer's width and height to obtain the absolute depth-buffer coordinates.Contains the scale factor by which the raw depth values must be multiplied in order to get the depths in meters.Contains the width of the depth buffer (number of columns).Returns the depth in meters at (x, y) in normalized view coordinates.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRCPUDepthInformation"
},
{
	"api_id": "1014",
	"name": "XRCubeLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRCubeLayer interface of the WebXR Device API is a layer that renders directly from a cubemap and projects it onto the inside faces of a cube.XRCubeLayer requires the layers feature to be enabled for the XRSession. You can request it in XRSystem.requestSession().To create a new XRCubeLayer, call XRWebGLBinding.createCubeLayer().To present layers to the XR device, add them to the layers render state using XRSession.updateRenderState().Inherits properties from its parent, XRCompositionLayer.An XRSpace representing the layer's spatial relationship with the user's physical environment.A DOMPointReadOnly representing the orientation relative to the space property.Inherits methods from its parents, XRCompositionLayer and EventTarget.Sent to the XRCubeLayer object when the underlying resources of the layer are lost or when the XR Compositor can no longer reproject the layer. If this event is sent, authors should redraw the content of the layer in the next XR animation frame.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRCubeLayer"
},
{
	"api_id": "1015",
	"name": "XRCylinderLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRCylinderLayer interface of the WebXR Device API is a layer that takes up a curved rectangular space in the virtual environment. Only the front of the layer is visible.XRCylinderLayer requires the layers feature to be enabled for the XRSession. You can request it in XRSystem.requestSession().To create a new XRCylinderLayer, call either:To present layers to the XR device, add them to the layers render state using XRSession.updateRenderState().Inherits properties from its parent, XRCompositionLayer.A number indicating the ratio of the visible cylinder section. It is the ratio of the width of the visible section of the cylinder divided by its height. The width is calculated by multiplying the radius with the centralAngle.A number indicating the angle in radians of the visible section of the cylinder.A number indicating the radius of the cylinder.An XRSpace representing the layer's spatial relationship with the user's physical environment.An XRRigidTransform representing the offset and orientation relative to space.Inherits methods from its parents, XRCompositionLayer and EventTarget.Sent to the XRCylinderLayer object when the underlying resources of the layer are lost or when the XR Compositor can no longer reproject the layer. If this event is sent, authors should redraw the content of the layer in the next XR animation frame.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRCylinderLayer"
},
{
	"api_id": "1016",
	"name": "XRDepthInformation",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRDepthInformation interface contains information about the distance from the user's device to the real-world geometry in the user's environment.This interface is the parent of:Depth information from the CPU (returned by XRFrame.getDepthInformation()).Depth information from WebGL (returned by XRWebGLBinding.getDepthInformation()).You will usually interact with these child interfaces. However, XRDepthInformation provides some useful properties that are inherited:Contains the height of the depth buffer (number of rows).An XRRigidTransform that needs to be applied when indexing into the depth buffer. The transformation that the matrix represents changes the coordinate system from normalized view coordinates to normalized depth-buffer coordinates that can then be scaled by depth buffer's width and height to obtain the absolute depth-buffer coordinates.Contains the scale factor by which the raw depth values must be multiplied in order to get the depths in meters.Contains the width of the depth buffer (number of columns).None.See XRCPUDepthInformation and XRWebGLDepthInformation for code examples.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRDepthInformation"
},
{
	"api_id": "1017",
	"name": "XREquirectLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XREquirectLayer interface of the WebXR Device API is a layer that maps equirectangular coded data onto the inside of a sphere.XREquirectLayer requires the layers feature to be enabled for the XRSession. You can request it in XRSystem.requestSession().To create a new XREquirectLayer, call either:To present layers to the XR device, add them to the layers render state using XRSession.updateRenderState().Inherits properties from its parent, XRCompositionLayer.A number indicating the central horizontal angle in radians for the sphere.A number indicating the lower vertical angle in radians for the sphere.A number indicating the radius of the sphere.An XRSpace representing the layer's spatial relationship with the user's physical environment.An XRRigidTransform representing the offset and orientation relative to space.A number indicating the upper vertical angle in radians for the sphere.Inherits methods from its parents, XRCompositionLayer and EventTarget.Sent to the XREquirectLayer object when the underlying resources of the layer are lost or when the XR Compositor can no longer reproject the layer. If this event is sent, authors should redraw the content of the layer in the next XR animation frame.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XREquirectLayer"
},
{
	"api_id": "1018",
	"name": "XRFrame",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.A WebXR Device API XRFrame object is passed into the requestAnimationFrame() callback function and provides access to the information needed in order to render a single frame of animation for an XRSession describing a VR or AR scene. Events which communicate the tracking state of objects also provide an XRFrame reference as part of their structure.In addition to providing a reference to the XRSession for which this frame is to be rendered, the getViewerPose() method is provided to obtain the XRViewerPose describing the viewer's position and orientation in space, and getPose() can be used to create an XRPose describing the relative position of one XRSpace relative to another.The XRSession that for which this XRFrame describes the tracking details for all objects. The information about a specific object can be obtained by calling one of the methods on the object.An XRAnchorSet containing all anchors still tracked in the frame.Returns a Promise which resolves to a free-floating XRAnchor object.Populates a Float32Array with radii for a list of hand joint spaces. Returns true if successful for all spaces.Populates a Float32Array with the matrices of the poses, relative to a given base space. Returns true if all spaces have a valid pose.Returns an XRCPUDepthInformation object containing CPU depth information for the frame.Returns an array of XRHitTestResult objects containing hit test results for a given XRHitTestSource.Returns an array of XRTransientInputHitTestResult objects containing hit test results for a given XRTransientInputHitTestSource.Returns an XRJointPose object providing the pose of a hand joint (see XRHand) relative to a given base space.Returns an XRLightEstimate object containing estimated lighting values for an XRLightProbe.Returns an XRPose object representing the spatial relationship between the two specified XRSpace objects.Returns an XRViewerPose describing the viewer's position and orientation in a given XRReferenceSpace.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRFrame"
},
{
	"api_id": "1019",
	"name": "XRHand",
	"description": "The XRHand interface is pair iterator (an ordered map) with the key being the hand joints and the value being an XRJointSpace.XRHand is returned by XRInputSource.hand.Returns 25, the size of the pair iterator.\n  The XRhand object is a pair iterator. It can directly be used in a for...of structure. for (let joint of myHand) is equivalent to for (let joint of myHand.entries()).\n  However, it's not a map-like object, so you don't have the clear(), delete(), has(), and set() methods.\n\n  Returns an iterator with the hand joints/XRJointSpace pairs for each element.\n  See Map.prototype.entries() for more details.\n  \n  Runs a provided function once per each hand joint/XRJointSpace pair.\n  See Map.prototype.forEach() for more details.\n  \n  Returns a XRJointSpace for a given hand joint or undefined if no such hand joint key is in the map.\n  See Map.prototype.get() for more details.\n  \n  Returns an iterator with all the hand joint keys.\n  See Map.prototype.keys() for more details.\n  \n  Returns an iterator with all the XRJointSpace values.\n  See Map.prototype.values() for more details.\n  The XRHand object contains the following hand joints:\n  \n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRHand"
},
{
	"api_id": "1020",
	"name": "XRHitTestResult",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRHitTestResult interface of the WebXR Device API contains a single result of a hit test. You can get an array of XRHitTestResult objects for a frame by calling XRFrame.getHitTestResults().None.Returns a Promise that resolves with an XRAnchor created from the hit test result.Returns the XRPose of the hit test result relative to the given base space.In addition to showing XRHitTestResult within a frame loop, this example demonstrates a few things you must do before requesting this object. While setting up the session, specify "hit-test" as one of the requiredFeatures. Next, call XRSession.requestHitTestSource() with the desired references. (Obtain this by calling XRSession.requestReferenceSpace().) This returns a XRHitTestSource. That you will use in the frame loop to get XRHitTestResult objects.Use getPose() to query the result's pose.Once you find intersections on real-world surfaces using hit testing, you can create an XRAnchor to attach a virtual object to that location.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestResult"
},
{
	"api_id": "1021",
	"name": "XRHitTestSource",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRHitTestSource interface of the WebXR Device API handles hit test subscriptions. You can get an XRHitTestSource object by using the XRSession.requestHitTestSource() method.This object doesn't itself contain hit test results, but it is used to compute hit tests for each XRFrame by calling XRFrame.getHitTestResults(), which returns XRHitTestResult objects.None.Unsubscribes from the hit test.Call XRSession.requestHitTestSource() to get a hit test source.To unsubscribe from a hit test source, call XRHitTestSource.cancel(). Since the object will no longer be usable, you can clean up and set the XRHitTestSource object to null.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRHitTestSource"
},
{
	"api_id": "1022",
	"name": "XRInputSource",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRInputSource interface describes a single source of control input which is part of the user's WebXR-compatible virtual or augmented reality system. The device is specific to the platform being used, but provides the direction in which it is being aimed and optionally may generate events if the user triggers performs actions using the device.A Gamepad object describing the state of the buttons and axes on the XR input source, if it is a gamepad or comparable device. If the device isn't a gamepad-like device, this property's value is null.An XRSpace whose origin tracks the pose which is used to render objects which should appear as if they're held in the hand indicated by handedness. The orientation of this space indicates the angle at which the hand is gripping the object. Read on in the main article on gripSpace for more details on how to use this space.An XRHand object providing access to the underlying hand-tracking device.A string that indicates which hand the device represented by this XRInputSource is being used in, if any. The value will be left, right, or none.An array of strings, each specifying the name of an input profile describing the preferred visual representation and behavior of this input source.A string indicating the methodology used to produce the target ray: gaze, tracked-pointer, or screen.An XRSpace object defining the origin of the target ray and the direction in which it extends. This space is established using the method defined by targetRayMode.The XRInputSource interface defines no methods.If the device provides an indication of the direction in which it is pointed, this is done using a target ray. This is a ray extending from the position of the device outward in the direction in which it is pointed.A target ray emitted by a hand controller.\n  \nIf the device includes a trigger or other squeezable input, such as a hand gesture device that recognizes when the user squeezes their fist, that action is called a primary squeeze action. A primary squeeze action should correspond to a gripping act in reality, such as taking hold of an object or pressing a trigger on a tool or weapon. When a squeeze action begins, such as by the user pressing the trigger or tightening their grip, a squeezestart event is sent to the XRSession. Once the action is completed and the user has released the trigger or the grip, a squeeze event is sent. This is followed by a squeezeend, which is also sent if the action is aborted rather than completed.If the device has a button or other pressable input control, it is a primary input source, and this button is a primary action. A primary action may occur when the user presses a button, clicks on a touchpad or the top button of a thumb stick, or uses a hand gesture or spoken command that invokes the button-like action. When a primary action begins, a selectstart event is sent to the XRSession. When the action has completed (such as when the user releases the button), a select event is sent. Finally, once that is done—or if the user aborts the action—a selectend event is sent to the session object.An action may be aborted either by the user in some device-specific fashion or if the input device is disconnected before the action is completed.Each input source has its own local coordinate system, which is described by the gripSpace property, which is an XRSpace used to map the input's coordinate system into the world coordinate system. The grip space's coordinate system can then be used to render objects so they appear to be held in the user's hand.\n  \nFor more details on the input source's coordinate system, see the article that covers the gripSpace property in detail.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource"
},
{
	"api_id": "1023",
	"name": "XRInputSourceArray",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The interface XRInputSourceArray represents a live list of WebXR input sources, and is used as the return value of the XRSession property inputSources. Each entry is an XRInputSource representing one input device connected to the WebXR system.In addition to being able to access the input sources in the list using standard array notation (that is, with index numbers inside square brackets), methods are available to allow the use of iterators and the forEach() method is also available.The following properties are available on XRInputSourceArray objects.The number of XRInputSource objects in the list.The following methods are available on XRInputSourceArray objects. You may also use the features of the Symbol type.Returns an iterator you can use to walk the list of key/value pairs in the list. Each item returned is an array whose first value is the index and whose second value is the XRInputSource at that index.Iterates over each item in the list, in order from first to last.A list of the keys corresponding to the entries in the input source list.Returns an iterator you can use to go through all the values in the list. Each item is a single XRInputSource object.In addition to these methods, you may use array notation to access items in the list by index For example, the snippet of code below calls a function handleInput(), passing into it the first item in the input source list, if the list isn't empty.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceArray"
},
{
	"api_id": "1024",
	"name": "XRInputSourceEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRInputSourceEvent interface describes an event which has occurred on a WebXR user input device such as a hand controller, gaze tracking system, or motion tracking system. More specifically, they represent a change in the state of an XRInputSource.To learn more about handling inputs in a WebXR project, see the article Inputs and input sources.Creates and returns a new XRInputSourceEvent object whose properties match those provided in the eventInitDict dictionary provided.An XRFrame object providing the needed information about the event frame during which the event occurred. This frame may have been rendered in the past rather than being a current frame. Because this is an event frame, not an animation frame, you cannot call the XRFrame method getViewerPose() on it; instead, use getPose().An XRInputSource object indicating which input source generated the input event.The XRInputSourceEvent interface doesn't define any methods; however, several methods are inherited from the parent interface, Event.Sent to an XRSession when the sending input source has fully completed a primary action.Sent to an XRSession when an ongoing primary action ends, or when an input source with an ongoing primary action has been disconnected from the system.Sent to an XRSession when an input source begins its primary action, indicating that the user has begun a command-like input, such as pressing a trigger or button, issuing a spoken command, tapping on a touchpad, or the like.Sent to an XRSession when the sending input source has fully completed a primary squeeze action.Sent to an XRSession when an ongoing primary squeeze action ends or when an input source with an ongoing primary squeeze action is disconnected.Sent to an XRSession when an input source begins its primary squeeze action, indicating that the user has begun to grab, squeeze, or grip the controller.The code below sets up handlers for primary action events in order to determine when the user clicks on (shoots at/pokes at/whatever) objects in the scene.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourceEvent"
},
{
	"api_id": "1025",
	"name": "XRInputSourcesChangeEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API interface XRInputSourcesChangeEvent is used to represent the inputsourceschange event sent to an XRSession when the set of available WebXR input controllers changes.Creates and returns a new XRInputSourcesChangeEvent object. The specified type must be inputsourceschange, which is the only event that uses this interface.An array of zero or more XRInputSource objects, each representing an input device which has been newly connected or enabled for use.An array of zero or more XRInputSource objects representing the input devices newly connected or enabled for use.The XRSession to which this input source change event is being directed.While XRInputSourcesChangeEvent defines no methods of its own, it inherits methods from its parent interface, Event.Delivered to the XRSession when the set of input devices available to it changes.The following example shows how to set up an event handler which uses inputsourceschange events to detect newly-available pointing devices and to load their models in preparation to display them in the next animation frame.You can also add a handler for inputsourceschange events by setting the oninputsourceschange event handler:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRInputSourcesChangeEvent"
},
{
	"api_id": "1026",
	"name": "XRJointPose",
	"description": "The XRJointPose interface is an XRPose with additional information about the size of the skeleton joint it represents.The radius (distance from skin) for a joint.Call XRFrame.getJointPose() with an XRJointSpace and an XRReferenceSpace to get an XRJointPose object.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRJointPose"
},
{
	"api_id": "1027",
	"name": "XRJointSpace",
	"description": "The XRJointSpace interface is an XRSpace and represents the position and orientation of an XRHand joint.The name of the joint that is tracked. See XRHand for possible hand joint names.You can use an XRJointSpace object and an XRReferenceSpace to get an XRJointPose by calling XRFrame.getJointPose().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRJointSpace"
},
{
	"api_id": "1028",
	"name": "XRLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRLayer interface of the WebXR Device API is the base class for WebXR layer types. It inherits methods from EventTarget.Below is a list of interfaces based on the XRLayer interface.Inherits methods from its parent, EventTarget.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRLayer"
},
{
	"api_id": "1029",
	"name": "XRLayerEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRLayerEvent interface of the WebXR Device API is the event type for events related to a change of state of an XRLayer object. These events occur, for example, when the layer needs to be redrawn.Creates and returns a new XRLayerEvent object.In addition to properties inherited from its parent interface, Event, XRLayerEvent provides the following:The XRLayer which generated the event.While XRSessionEvent defines no methods, it inherits methods from its parent interface, Event.The following events are represented using the XRLayerEvent interface, and are permitted values for its type parameter.The redraw event is tent to the layer object when the underlying resources of the layer are lost or when the XR Compositor can no longer reproject the layer. If this event is sent, authors should redraw the content of the layer in the next XR animation frame. It is available on the following layer objects:",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRLayerEvent"
},
{
	"api_id": "1030",
	"name": "XRLightEstimate",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRLightEstimate interface of the WebXR Device API provides the estimated lighting values for an XRLightProbe at the time represented by an XRFrame.To get an XRLightEstimate object, call the XRFrame.getLightEstimate() method.A DOMPointReadOnly representing the direction to the primary light source from the probeSpace of an XRLightProbe.A DOMPointReadOnly (with the x, y, z values mapped to RGB) representing the intensity of the primary light source from the probeSpace of an XRLightProbe.A Float32Array containing 9 spherical harmonics coefficients.None.\n  First, use the XRSession.requestLightProbe() method to get a light probe from a session.\n  Then, within an XRFrame loop, the getLightEstimate() method will return a XRLightEstimate object containing the lighting values for each frame.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRLightEstimate"
},
{
	"api_id": "1031",
	"name": "XRLightProbe",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRLightProbe interface of the WebXR Device API contains lighting information at a given point in the user's environment. You can get an XRLighting object using the XRSession.requestLightProbe() method.This object doesn't itself contain lighting values, but it is used to collect lighting states for each XRFrame. See XRLightEstimate for the estimated lighting values for an XRLightProbe.Event handler property for the reflectionchange event.An XRSpace tracking the position and orientation the lighting estimations are relative to.None.Fired each time the estimated reflection cube map changes. (This happens when the user moves around and the environment's lighting changes.)Use the XRSession.requestLightProbe() method to get a light probe.Pass the light probe's probeSpace to XRFrame.getPose() to get a light probe for a pose.Pass XRLightProbe to get a reflection cube map whenever the reflectionchange event fires. See also XRWebGLBinding.getReflectionCubeMap().",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRLightProbe"
},
{
	"api_id": "1032",
	"name": "XRMediaBinding",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRMediaBinding interface is used to create layers that display the content of an HTMLVideoElement.\n  Note:\n  Only the video frames will be displayed in the layer. Video controls need to be implemented separately and must be drawn in another layer.\n  Creates a new XRMediaBinding object for the specified XRSession.Returns an XRCylinderLayer object bound to an HTMLVideoElement.Returns an XREquirectLayer object bound to an HTMLVideoElement.Returns an XRQuadLayer object bound to an HTMLVideoElement.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRMediaBinding"
},
{
	"api_id": "1033",
	"name": "XRPermissionStatus",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRPermissionStatus interface defines the object returned by calling navigator.permissions.query() for the xr permission name; it indicates whether or not the app or site has permission to use WebXR, and may be monitored over time for changes to that permissions tate.In addition to the properties listed below, XRPermissionStatus includes the properties defined by its parent interface, PermissionStatus.An array of strings listing the names of the features for which permission has been granted as of the time at which navigator.permissions.query() was called. Any feature which was specified in either optionalFeatures or requiredFeatures when calling navigator.permissions.query() are listed in granted if and only if permission to use them is granted.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRPermissionStatus"
},
{
	"api_id": "1034",
	"name": "XRPose",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.XRPose is a WebXR API interface representing a position and orientation in the 3D space, relative to the XRSpace within which it resides. The XRSpace—which is either an XRReferenceSpace or an XRBoundedReferenceSpace—defines the coordinate system used for the pose and, in the case of an XRViewerPose, its underlying views.To obtain the XRPose for the XRSpace used as the local coordinate system of an object, call XRFrame.getPose(), specifying that local XRSpace and the space to which you wish to convert:The pose for a viewer (or camera) is represented by the XRViewerPose subclass of XRPose. This is obtained using XRFrame.getViewerPose() instead of getPose(), specifying a reference space which has been adjusted to position and orient the node to provide the desired viewing position and angle:Here, adjReferenceSpace is a reference space which has been updated using the base frame of reference for the frame and any adjustments needed to position the viewer based on movement or rotation which is being supplied from a source other than the XR device, such as keyboard or mouse inputs.See the article Movement, orientation, and motion for further details and an example with thorough explanations of what's going on.A DOMPointReadOnly describing the angular velocity in radians per second relative to the base XRSpace.A Boolean value which is false if the position and orientation given by transform is obtained directly from a full six degree of freedom (6DoF) XR device (that is, a device which tracks not only the pitch, yaw, and roll of the head but also the forward, backward, and side-to-side motion of the viewer). If any component of the transform is computed or created artificially (such as by using mouse or keyboard controls to move through space), this value is instead true, indicating that the transform is in part emulated in software.A DOMPointReadOnly describing the linear velocity in meters per second relative to the base XRSpace.A XRRigidTransform which provides the position and orientation of the pose relative to the base XRSpace.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRPose"
},
{
	"api_id": "1035",
	"name": "XRProjectionLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRProjectionLayer interface of the WebXR Device API is a layer that fills the entire view of the observer and is refreshed close to the device's native frame rate.XRProjectionLayer is supported by all XRSession objects (no layers feature descriptor is needed).\n  To create a new XRProjectionLayer, call XRWebGLBinding.createProjectionLayer().\n  To present layers to the XR device, add them to the layers render state using XRSession.updateRenderState().\nXRProjectionLayer objects don't have an associated XRSpace, because they render to the full frame.Inherits properties from its parent, XRCompositionLayer.A boolean enabling the layer's texture alpha channel.A boolean enabling optical chromatic aberration correction for the layer if the device supports it, null otherwise.A number indicating the amount of foveation used by the XR compositor for the layer. Fixed Foveated Rendering (FFR) renders the edges of the eye textures at a lower resolution than the center and reduces the GPU load.A boolean indicating that the XR compositor is not making use of depth buffer values when rendering the layer.The layout type of the layer.The actual number of mip levels in the color and texture data for the layer.A boolean signaling that the layer should be re-rendered in the next frame.The layer's layer count for array textures when using texture-array as the textureType.The height in pixels of the color textures of this layer.The width in pixels of the color textures of this layer.Inherits methods from its parents, XRCompositionLayer and EventTarget.Registers an event handler of a specific event type on the EventTarget.Deletes the underlying layer attachments.Dispatches an event to this EventTarget.Removes an event listener from the EventTarget.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRProjectionLayer"
},
{
	"api_id": "1036",
	"name": "XRQuadLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRQuadLayer interface of the WebXR Device API is a layer that takes up a flat rectangular space in the virtual environment. An XRQuadLayer has no thickness. It is a two-dimensional object positioned and oriented in 3D space. The position of a quad refers to the center of the quad. Only the front of the layer is visible.XRQuadLayer requires the layers feature to be enabled for the XRSession. You can request it in XRSystem.requestSession().To create a new XRQuadLayer, call either:To present layers to the XR device, add them to the layers render state using XRSession.updateRenderState().Inherits properties from its parent, XRCompositionLayer.Represents the height of the layer in meters.An XRSpace representing the layer's spatial relationship with the user's physical environment.An XRRigidTransform representing the offset and orientation relative to space.Represents the width of the layer in meters.Inherits methods from its parents, XRCompositionLayer and EventTarget.Sent to the XRQuadLayer object when the underlying resources of the layer are lost or when the XR Compositor can no longer reproject the layer. If this event is sent, authors should redraw the content of the layer in the next XR animation frame.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRQuadLayer"
},
{
	"api_id": "1037",
	"name": "XRRay",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRRay interface of the WebXR Device API is a geometric ray described by an origin point and a direction vector.XRRay objects can be passed to XRSession.requestHitTestSource() or XRSession.requestHitTestSourceForTransientInput() to perform hit testing.Creates a new XRRay object.A DOMPointReadOnly representing the ray's 3-dimensional directional vector.A transform that can be used to position objects along the XRRay. This is a 4 by 4 matrix given as a 16 element Float32Array in column major order.A DOMPointReadOnly representing the 3-dimensional point in space that the ray originates from, in meters.None.The XRSession.requestHitTestSource() method takes an XRRay object for its offsetRay option. In this example, the hit test source is positioned slightly above the viewer as the application has some UI elements at the bottom while wanting to maintain the perception of a centered cursor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRRay"
},
{
	"api_id": "1038",
	"name": "XRReferenceSpace",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRReferenceSpace interface describes the coordinate system for a specific tracked entity or object within the virtual world using a specified tracking behavior. The tracking behavior is defined by the selected reference space type. It expands upon the base class, XRSpace, by adding support for several different tracking behaviors as well as to request a new reference space which describes the offset transform between the tracked object and another location in the world.All reference spaces—with the sole exception being bounded reference spaces—are described using the XRReferenceSpace type. Bounded spaces are implemented as XRBoundedReferenceSpace objects. These are special spaces which let you establish a perimeter within which it's "safe" for the viewer to move. For XR systems that allow the user to physically move around, such as those that track movement with a real-world camera, this boundary establishes the edges of the area the user is able to move around in, whether due to physical obstacles or due to limitations of the XR hardware. See the article Using bounded reference spaces to protect the viewer for more on using boundaries to keep the user from colliding with obstacles both physical and virtual.XRReferenceSpace inherits the properties of EventTarget but defines no additional properties.XRReferenceSpace also inherits methods from EventTarget in addition to the following methods.Creates and returns a new reference space object as the same type as the one on which you call the method (so, either XRReferenceSpace or XRBoundedReferenceSpace). The new reference space can be used to transform a coordinate from the reference space of the object on which the method is called into a different coordinate space. This is useful for positioning objects while rendering, and to perform the needed transforms when changing the viewer's position and/or orientation in 3D space.The reset event is sent to an XRReferenceSpace object when the browser detects a discontinuity between the tracked object's origin and the user's environment or location. This can happen, for example, after the user recalibrates their XR device, or if the device automatically adjusts its origin after losing and regaining tracking.The types of reference space are listed in the table below, with brief information about their use cases and which interface is used to implement them.An XRBoundedReferenceSpace similar to the local type, except the user is not expected to move outside a predetermined boundary, given by the boundsGeometry in the returned object.An XRReferenceSpace tracking space whose native origin is located near the viewer's position at the time the session was created. The exact position depends on the underlying platform and implementation. The user isn't expected to move much if at all beyond their starting position, and tracking is optimized for this use case. For devices with six degrees of freedom (6DoF) tracking, the local reference space tries to keep the origin stable relative to the environment.An XRReferenceSpace similar to the local type, except the starting position is placed in a safe location for the viewer to stand, where the value of the y axis is 0 at floor level. If that floor level isn't known, the user agent will estimate the floor level. If the estimated floor level is non-zero, the browser is expected to round it such a way as to avoid fingerprinting (likely to the nearest centimeter).An XRReferenceSpace tracking space which allows the user total freedom of movement, possibly over extremely long distances from their origin point. The viewer isn't tracked at all; tracking is optimized for stability around the user's current position, so the native origin may drift as needed to accommodate that need.An XRReferenceSpace tracking space whose native origin tracks the viewer's position and orientation. This is used for environments in which the user can physically move around, and is supported by all instances of XRSession, both immersive and inline, though it's most useful for inline sessions. It's particularly useful when determining the distance between the viewer and an input, or when working with offset spaces. Otherwise, typically, one of the other reference space types will be used more often.There are two situations in which you need to obtain an XRReferenceSpace. The first is when you set up your scene and need to obtain a reference space to represent the user's viewpoint on the world for the duration of the XRSession. To do that, call the XRSession method requestReferenceSpace(), specifying the reference space type you wish to obtain.The other situation in which you may need to acquire a new reference space is if you need to move the origin to a new position; this is commonly done, for example, when your project allows the user to move through the environment using input devices such as the keyboard, mouse, touchpad, or game controls that are not connected through the XR device. Since the origin will typically be the user's location in the space, you need to change the origin to reflect their movement and any orientation changes they make.To move or rotate the user's view of the world, you need to change the XRReferenceSpace used to represent that viewpoint. However, XRReferenceSpace is immutable, so you need to instead create a new reference space representing the changed viewpoint. This is easily done using the getOffsetReferenceSpace() method.This replaces the XRReferenceSpace with a new one whose origin and orientation are adjusted to place the new origin at (2, 0, 1) relative to the current origin and rotated given a unit quaternion that orients the space to put the viewer facing straight up relative to the previous world orientation.The native origin of any XRReferenceSpace is always configured so that +X is considered to be to the right, +Y is upward, and +Z is "backward" or toward the user.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace"
},
{
	"api_id": "1039",
	"name": "XRReferenceSpaceEvent",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API interface XRReferenceSpaceEvent represents an event sent to an XRReferenceSpace. Currently, the only event that uses this type is the reset event.Returns a new XRReferenceSpaceEvent with the specified type and configuration.In addition to inheriting the properties available on the parent interface, Event, XRReferenceSpaceEvent objects include the following properties:An XRReferenceSpace indicating the reference space that generated the event.An XRRigidTransform object indicating the position and orientation of the specified referenceSpace's native origin after the event, defined relative to the coordinate system before the event.While XRReferenceSpaceEvent does not define any methods, it inherits the methods of its parent interface, Event.The reset event is sent to a reference space when its native origin is changed due to a discontinuity, recalibration, or device reset. This is an opportunity for your app to update any stored transforms, position/orientation information, or the like—or to dump any cached values based on the reference's space's origin so you can recompute them as needed.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceEvent"
},
{
	"api_id": "1040",
	"name": "XRRenderState",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRRenderState interface of the WebXR Device API contains configurable values which affect how the imagery generated by an XRSession gets composited. These properties include the range of distances from the viewer within which content should be rendered, the vertical field of view (for inline presentations), and a reference to the XRWebGLLayer being used as the target for rendering the scene prior to it being presented on the XR device's display or displays.When you apply changes using the XRSession method updateRenderState(), the specified changes take effect after the current animation frame has completed, but before the next one begins.The XRWebGLLayer from which the browser's compositing system obtains the image for the XR session.The distance, in meters, of the far clip plane from the viewer. The far clip plane is the plane which is parallel to the display beyond which rendering of the scene no longer takes place. This, essentially, specifies the maximum distance the user can see.The distance, in meters, of the near clip plane from the viewer. The near clip plane is the plane, parallel to the display, at which rendering of the scene begins. Any closer to the viewer than this, and no portions of the scene are drawn.The default vertical field of view, defined in radians, to use when the session is in inline mode. null for all immersive sessions.An ordered array containing XRLayer objects that are displayed by the XR compositor.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRRenderState"
},
{
	"api_id": "1041",
	"name": "XRRigidTransform",
	"description": "The XRRigidTransform is a WebXR API interface that represents the 3D geometric transform described by a position and orientation.XRRigidTransform is used to specify transforms throughout the WebXR APIs, including:Using XRRigidTransform in these places rather than bare arrays that provide the matrix data has an advantage. It automatically computes the inverse of the transform and even caches it making subsequent requests significantly faster.Creates a new XRRigidTransform object which represents a transform that applies a specified position and/or orientation.A DOMPointReadOnly specifying a 3-dimensional point, expressed in meters, describing the translation component of the transform. The w property is always 1.0.A DOMPointReadOnly which contains a unit quaternion describing the rotational component of the transform. As a unit quaternion, its length is always normalized to 1.0.Returns the transform matrix in the form of a 16-member Float32Array. See the section Matrix format for how the array is used to represent a matrix.Returns a XRRigidTransform which is the inverse of this transform. That is, if applied to an object that had been previously transformed by the original transform, it will undo the transform and return the original object.When an XRRigidTransform is interpreted, the orientation is always applied to the affected object before the position is applied.This code snippet creates an XRRigidTransform to specify the offset and orientation in relation to the current reference space to use when creating a new reference space. It then requests the first animation frame callback by calling the session's requestAnimationFrame() method.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRRigidTransform"
},
{
	"api_id": "1042",
	"name": "XRSession",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRSession interface represents an ongoing XR session, providing methods and properties used to interact with and control the session. To open a WebXR session, use the XRSystem interface's requestSession() method.With XRSession methods, you can poll the viewer's position and orientation (the XRViewerPose), gather information about the user's environment, and present imagery to the user. XRSession supports both inline and immersive virtual and augmented reality modes.In addition to the properties listed below, XRSession inherits properties from its parent interface, EventTarget.Returns the depth-sensing data format with which the session was configured.Returns the depth-sensing usage with which the session was configured.Provides information about the DOM overlay, if the feature is enabled.Returns this session's blend mode which denotes how much of the real-world environment is visible through the XR device and how the device will blend the device imagery with it.Returns a list of this session's XRInputSources, each representing an input device used to control the camera and/or scene.Returns this session's interaction mode, which describes the best space (according to the user agent) for the application to draw interactive UI for the current session.Returns this session's preferred reflection format used for lighting estimation texture data.An XRRenderState object which contains options affecting how the imagery is rendered. This includes things such as the near and far clipping planes (distances defining how close and how far away objects can be and still get rendered), as well as field of view information.A string indicating whether or not the session's imagery is visible to the user, and if so, if it's being visible but not currently the target for user events.XRSession provides the following methods in addition to those inherited from its parent interface, EventTarget.Removes a callback from the animation frame painting callback from XRSession's set of animation frame rendering callbacks, given the identifying handle returned by a previous call to requestAnimationFrame().Ends the WebXR session. Returns a promise which resolves when the session has been shut down.Schedules the specified method to be called the next time the user agent is working on rendering an animation frame for the WebXR device. Returns an integer value which can be used to identify the request for the purposes of canceling the callback using cancelAnimationFrame(). This method is comparable to the Window.requestAnimationFrame() method.Requests an XRHitTestSource object that handles hit test subscription.Requests an XRTransientInputHitTestSource object that handles hit test subscription for a transient input source.Requests an XRLightProbe that estimates lighting information at a given point in the user's environment.Requests that a new XRReferenceSpace of the specified type be created. Returns a promise which resolves with the XRReferenceSpace or XRBoundedReferenceSpace which was requested, or throws a NotSupportedError DOMException if the requested space type isn't supported by the device.Updates the properties of the session's render state.The following events are delivered to XRSession objects.Sent to the XRSession object after the WebXR session has ended and all hardware-related functions have completed. The event is represented by an object of type XRSessionEvent. Also available through the onend event handler property.An event of type XRInputSourcesChangeEvent sent to the XRSession when the list of active XR input sources has changed. Also available through the oninputsourceschange event handler property.An event of type XRInputSourceEvent which is sent to the session when one of the session's input sources has successfully completed a primary action. This generally corresponds to the user pressing a trigger, touchpad, or button, speaks a command, or performs a recognizable gesture. The select event is sent after the selectstart event is sent and immediately before the selectend event is sent. If select is not sent, then the select action was aborted before being completed. Also available through the onselect event handler property.An event of type XRInputSourceEvent which gets sent to the session object when one of its input devices finishes its primary action or gets disconnected while in the process of handling a primary action. For example: for button or trigger actions, this means the button has been released; for spoken commands, it means the user has finished speaking. This is the last of the three select* events to be sent. Also available through the onselectend event handler property.An event of type XRInputSourceEvent which is sent to the session object when one of its input devices is first engaged by the user in such a way as to cause the primary action to begin. This is the first of the session* event to be sent. Also available through the onselectstart event handler property.An XRInputSourceEvent sent to indicate that a primary squeeze action has successfully completed. This indicates that the device being squeezed has been released, and may represent dropping a grabbed object, for example. It is sent immediately before the squeezeend event is sent to indicate that the squeeze action is over. Also available through the onsqueeze event handler property.An XRInputSourceEvent sent to the XRSession when the primary squeeze action ends, whether or not the action was successful. Also available using the onsqueezeend event handler property.An event of type XRInputSourceEvent which is sent to the XRSession when the user initially squeezes a squeezable controller. This may be, for example, a trigger which is used to represent grabbing objects, or might represent actual squeezing when wearing a haptic glove. Also available through the onsqueezestart event handler property.An XRSessionEvent which is sent to the session when its visibility state as indicated by the visibilityState changes. Also available through the onvisibilitychange event handler property.This example establishes a new XRSession in inline mode so that it can be displayed within an HTML element, avoiding the need for a dedicated AR or VR viewing device such as a headset.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRSession"
},
{
	"api_id": "1043",
	"name": "XRSessionEvent",
	"description": "The WebXR Device API's XRSessionEvent interface describes an event which indicates the change of the state of an XRSession. These events occur, for example, when the session ends or the visibility of its context changes.Creates and returns a new XRSessionEvent object.In addition to properties inherited from its parent interface, Event, XRSessionEvent provides the following:The XRSession to which the event refers.While XRSessionEvent defines no methods, it inherits methods from its parent interface, Event.The following events are represented using the XRSessionEvent interface, and are permitted values for its type property.Fired at the session when it has ended, after being terminated by the application or the user agent.Fired at the session whenever its visibility state changes.This example creates a listener that watches for the visibility state of the session to change. It reacts by calling a function mySessionVisible() with a Boolean indicating whether or not the session is visible; this function might, for instance, spin up or reconfigure a worker that handles rendering the scene.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRSessionEvent"
},
{
	"api_id": "1044",
	"name": "XRSpace",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRSpace interface of the WebXR Device API is an abstract interface providing a common basis for every class which represents a virtual coordinate system within the virtual world, in which its origin corresponds to a physical location. Spatial data in WebXR is always expressed relative to an object based upon one of the descendant interfaces of XRSpace, at the time at which a given XRFrame takes place.Numeric values such as pose positions are thus coordinates in the corresponding XRSpace, relative to that space's origin.Note: The XRSpace interface is never used directly; instead, all spaces are created using one of the interfaces based on XRSpace. At this time, those are XRReferenceSpace, XRBoundedReferenceSpace, and XRJointSpace.Below is a list of interfaces based on the XRSpace interface.Represents a reference space which may move within a region of space whose borders are defined by an array of points laid out in clockwise order along the floor to define the passable region of the space. The origin of an XRBoundedReferenceSpace is always at floor level, with its X and Z coordinates typically defaulting to a location near the room's center.Represents a reference space which is typically expected to remain static for the duration of the XRSession. While objects may move within the space, the space itself remains fixed in place. There are exceptions to this static nature; most commonly, an XRReferenceSpace may move in order to adjust based on reconfiguration of the user's headset or other motion-sensitive device.Represents the space of an XRHand joint.The XRSpace interface defines no properties of its own; however, it does inherit the properties of its parent interface, EventTarget.The XRSpace interface provides no methods of its own. However, it inherits the methods of EventTarget, its parent interface.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRSpace"
},
{
	"api_id": "1045",
	"name": "XRSubImage",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRSubImage interface of the WebXR Device API represents what viewport of the GPU texture to use for rendering.Below is a list of interfaces based on the XRSubImage interface.The XRViewport used when rendering the sub image.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRSubImage"
},
{
	"api_id": "1046",
	"name": "XRSystem",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API interface XRSystem provides methods which let you get access to an XRSession object representing a WebXR session. With that XRSession in hand, you can use it to interact with the Augmented Reality (AR) or Virtual Reality (VR) device.While XRSystem directly offers no properties, it does inherit properties from its parent interface, EventTarget.In addition to inheriting methods from its parent interface, EventTarget, the XRSystem interface includes the following methods:\n  Returns a promise which resolves to true if the browser supports the given session mode.\n  Resolves to false if the specified mode isn't supported.\n  Returns a promise that resolves to a new XRSession with the specified session mode.\n  Sent when the set of available XR devices has changed.\n  Also available using the ondevicechange event handler.\n  This interface was previously known as XR in earlier versions of the specification; if you see references to XR in code or documentation, replace that with XRSystem.The following example shows how to use both isSessionSupported() and requestSession().This code starts by checking to see if WebXR is available by looking for the navigator.xr property. If it's found, we know WebXR is present, so we proceed by establishing a handler for the button which the user can click to toggle immersive VR mode on and off.However, we don't yet know if the desired immersive mode is available. To determine this, we call isSessionSupported(), passing it the desired session option before enabling the button, immersiveButton, which the user can then use to switch to immersive mode only if immersive VR mode is available. If immersive VR isn't available, the button is disabled to prevent its use.The onButtonClicked() function checks to see if there's already a session running. If there isn't, we use requestSession() to start one and, once the returned promise resolves, we call a function onSessionStarted() to set up our session for rendering and so forth.If, on the other hand, there is already an ongoing XR session, we instead call end() to end the current session. When the current session ends, the end event is sent, so set xrSession to null in its handler to record the fact that we no longer have an ongoing session. That way, if the user clicks the button again, a new session will start.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRSystem"
},
{
	"api_id": "1047",
	"name": "XRTransientInputHitTestResult",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRTransientInputHitTestResult interface of the WebXR Device API contains an array of results of a hit test for transient input, grouped by input source.You can get an array of XRHitTestResult objects for a frame by calling XRFrame.getHitTestResultsForTransientInput().Represents the XRInputSource that was used to compute the results array.Represents an array of XRHitTestResult objects containing the hit test results for the input source, ordered by the distance along the ray used to perform the hit test, with the closest result at position 0.None.Two arrays are used to access transient input hit test results. First, you get an array of XRTransientInputHitTestResult objects by calling XRFrame.getHitTestResultsForTransientInput(). Second, to get to the actual XRHitTestResult objects for an input source, you dereference the results property on one of the XRTransientInputHitTestResult objects.The inputSource property allows you to filter hit test results by input source.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRTransientInputHitTestResult"
},
{
	"api_id": "1048",
	"name": "XRTransientInputHitTestSource",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRTransientInputHitTestSource interface of the WebXR Device API handles transient input hit test subscriptions. You can get an XRTransientInputHitTestSource object by calling the XRSession.requestHitTestSourceForTransientInput().This object doesn't itself contain transient input hit test results, but it is used to compute hit tests for each XRFrame by calling XRFrame.getHitTestResultsForTransientInput(), which returns XRTransientInputHitTestResult objects.None.Unsubscribes from the transient input hit test.Use the XRSession.requestHitTestSourceForTransientInput() method to get a transient input hit test source.To unsubscribe from a transient input hit test source, use the XRTransientInputHitTestSource.cancel() method. Since the object will no longer be usable, you can clean up and set the XRTransientInputHitTestSource object to null.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRTransientInputHitTestSource"
},
{
	"api_id": "1049",
	"name": "XRView",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRView interface describes a single view into the XR scene for a specific frame, providing orientation and position information for the viewpoint. You can think of it as a description of a specific eye or camera and how it views the world. A 3D frame will involve two views, one for each eye, separated by an appropriate distance which approximates the distance between the viewer's eyes. This allows the two views, when projected in isolation into the appropriate eyes, to simulate a 3D world.Which of the two eyes (left) or (right) for which this XRView represents the perspective. This value is used to ensure that any content which is pre-rendered for presenting to a specific eye is distributed or positioned correctly. The value can also be none if the XRView is presenting monoscopic data (such as a 2D image, a fullscreen view of text. or a close-up view of something that doesn't need to appear in 3D).Returns a boolean indicating if the XRView is a first-person observer view.The projection matrix that will transform the scene to appear correctly given the point-of-view indicated by eye. This matrix should be used directly in order to avoid presentation distortions that may lead to potentially serious user discomfort.The recommended viewport scale value that you can use for requestViewportScale() if the user agent has such a recommendation; null otherwise.An XRRigidTransform which describes the current position and orientation of the viewpoint in relation to the XRReferenceSpace specified when getViewerPose() was called on the XRFrame being rendered.Requests that the user agent should set the requested viewport scale for this viewport to the requested value.While rendering a scene, the set of views that are used to render the scene for the viewer as of the current frame are obtained by calling the XRFrame object's getViewerPose() method to get the XRViewerPose representing (in essence) the position of the viewer's head. That object's views property is a list of all of the XRView objects representing the viewpoints which can be used to construct the scene for presentation to the user.It's possible to have XRView objects which represent overlapping regions as well as entirely disparate regions; in a game, you might have views that can be presented to observe a remote site using a security camera or other device, for example. In other words, don't assume there are exactly two views on a given viewer; there can be as few as one (such as when rendering the scene in inline mode, and potentially many (especially if the field of view is very large). There might also be views representing observers watching the action, or other viewpoints not directly associated with a player's eye.In addition, the number of views can change at any time, depending on the needs of the time. So you should process the view list every time without making assumptions based on previous frames.All positions and orientations within the views for a given XRViewerPose are specified in the reference space that was passed to XRFrame.getViewerPose(); this is called the viewer reference space. The transform property describes the position and orientation of the eye or camera represented by the XRView, given in that reference space.To render a frame, you iterate over the XRViewerPose's views, rendering each of them into the appropriate viewport within the frame's XRWebGLLayer. Currently, the specification (and therefore all current implementations of WebXR) is designed around rendering every XRView into a single XRWebGLLayer, which is then presented on the XR device with half used for the left eye and half for the right eye. The XRViewport for each view is used to position the rendering into the correct half of the layer.If in the future it becomes possible for each view to render into a different layer, there would have to be changes made to the API, so it's safe for now to assume that all views will render into the same layer.To draw everything the user sees, each frame requires iterating over the list of views returned by the XRViewerPose object's views list:There are a few special transforms that are used on the view while rendering and lighting a scene.The model view matrix is a matrix which defines the position of an object relative to the space in which it's located: If objectMatrix is a transform applied to the object to provide its basic position and rotation, then the model view matrix can be computed by multiplying the object's matrix by the inverse of the view transform matrix, like this:The model view's normal matrix is used when lighting the scene, in order to transform each surface's normal vectors to ensure that the light is reflected in the correct direction given the orientation and position of the surface relative to the light source or sources. It's computed by inverting then transposing the model view matrix:To programmatically move and/or rotate (often referred to as teleporting) an object, you need to create a new reference space for that object which applies a transform that encapsulates the desired changes. The createTeleportTransform() function returns the transform needed to move and rotate an object whose current situation is described by the reference space refSpace to a new position and orientation which is computed using previously recorded mouse and keyboard input data which has generated offsets for yaw, pitch, and position along all three axes.This code is broken into four sections. In the first, the quaternion inverseOrientation is computed. This represents the rotation of the object given the values of mousePitch (rotation around the object's reference's space's X axis) and mouseYaw (rotation around the object's Y axis).The second section computes the "up" vector for the object. This vector indicates the direction which is "up" in the scene overall, but in the object's reference space.The third section creates the new XRRigidTransform, specifying a point providing the offsets along the three axes as the first parameter, and the orientation quaternion as the second parameter. The returned object's matrix property is the actual matrix that transforms points from the scene's reference space to the object's new position.Finally, a new reference space is created to describe the relationship between the two reference spaces fully. That reference space is returned to the caller.To use this function, we pass the returned reference space into XRFrame.getPose() or getViewerPose(), as appropriate for your needs. The returned XRPose will then be used to render the scene for the current frame.You can find a more extensive and complete example in our article Movement, orientation, and motion.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRView"
},
{
	"api_id": "1050",
	"name": "XRViewerPose",
	"description": "The WebXR Device API interface XRViewerPose represents the pose (the position and orientation) of a viewer's point of view on the scene. Each XRViewerPose can have multiple views to represent, for example, the slight separation between the left and right eye.This view can represent anything from the point-of-view of a user's XR headset to the viewpoint represented by a player's movement of an avatar using mouse and keyboard, presented on the screen, to a virtual camera capturing the scene for a spectator.In addition to the properties inherited from XRPose, XRViewerPose includes the following:An array of XRView objects, one for each viewpoint on the scene which is needed to represent the scene to the user. A typical headset provides a viewer pose with two views whose eye property is either left or right, indicating which eye that view represents. Taken together, these views can reproduce the 3D effect when displayed on the XR device.The XRViewerPose object is used to describe the state of a viewer of a WebXR scene as it's tracked by the user's XR hardware. The viewer may be the virtual representation of the user, or it may represent another device or interface which may serve as the source of a position and orientation that make up a view upon the scene. For example, every player in a MMORPG might have an instance of XRViewerPose to provide a way to calculate what they can see; if the game provides a mechanism that tells the player if another player sees them, or that they see another player, this information becomes crucial.An XRViewerPose is always obtained and referenced relative to an existing XRReferenceSpace. This ensures that positions and orientations are reported using the expected relative coordinate system.To render a scene using the XRViewerPose representing the user's head, one would iterate over the views in the views array, rendering them one after another. By calling viewport() on the WebGL context, specifying the XRView as input, you can get the viewport to use when rendering in order to draw the frame for that eye into the correct part of the drawing surface.Also, when rendering the scene for spectators or other players in a multiplayer game, the transform of the XRViewerPose can be used to determine both placement and facing direction of the other players in the game, so that they can be drawn in the correct place with the correct facing.The viewer's pose for the animation frame represented by XRFrame can be obtained by calling the frame's getViewerPose() method, specifying the reference space in which the origin's position should be computed. The returned XRViewerPose tells you where the viewer is and what direction they're facing at the time at which the frame takes place.\n  In this example—part of the code to render an XRFrame,\n  getViewerPose() is called to get an XRViewerPose using the\n  same reference space the code is using as its base reference space. If a valid pose is\n  returned, the frame is rendered by clearing the backbuffer and then rendering each of\n  the views in the pose; these are most likely the views for the left and right eyes.\n\n  Passing each view to getViewport() returns the WebGL viewport to apply in order to cause the rendered\n  output to be positioned correctly in the framebuffer for rendering to the corresponding eye on the output device.\nThis code is derived from Drawing a\n  frame in Movement, orientation, and motion: A WebXR example. You can see more context and see much more on that page.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewerPose"
},
{
	"api_id": "1051",
	"name": "XRViewport",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The WebXR Device API's XRViewport interface provides properties used to describe the size and position of the current viewport within the XRWebGLLayer being used to render the 3D scene.The height, in pixels, of the viewport.The width, in pixels, of the viewport.The offset from the origin of the destination graphics surface (typically a XRWebGLLayer) to the left edge of the viewport, in pixels.The offset from the origin of the viewport to the bottom edge of the viewport; WebGL's coordinate system places (0, 0) at the bottom left corner of the surface.Currently, the only type of surface available is the XRWebGLLayer. The precise orientation of the coordinate system may vary with other surface types, but in WebGL, the origin (0, 0) is located at the bottom-left corner of the surface. Thus the values specified in an XRViewport define a rectangle whose bottom-left corner is at (x, y) and which extends width pixels toward the left and height pixels upward.These values may be passed directly into the WebGLRenderingContext.viewport() method:This example sets up an animation frame callback using requestAnimationFrame(). After initial setup, it iterates over each of the views within the viewer's pose, configuring the viewport as dictated by the XRWebGLLayer.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRViewport"
},
{
	"api_id": "1052",
	"name": "XRWebGLBinding",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRWebGLBinding interface is used to create layers that have a GPU backend.Creates a new XRWebGLBinding object for the specified XR session and WebGL rendering context.The scaleFactor that was passed in during the construction of the projection layer. The native buffer size is scaled by this number.Returns an XRCubeLayer object, which is a layer that renders directly from a cubemap, and projects it onto the inside faces of a cube.Returns an XRCylinderLayer object which is a layer that takes up a curved rectangular space in the virtual environment.Returns an XREquirectLayer object which is a layer that maps equirectangular coded data onto the inside of a sphere.Returns an XRProjectionLayer object which is a layer that fills the entire view of the observer and is refreshed close to the device's native frame rate.Returns an XRQuadLayer object which is a two-dimensional object positioned and oriented in 3D space.Returns an XRWebGLDepthInformation object containing WebGL depth information.Returns a WebGLTexture object containing a reflection cube map texture.Returns an XRWebGLSubImage object representing the WebGL texture to render.Returns an XRWebGLSubImage object representing the WebGL texture to render for an XRView.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLBinding"
},
{
	"api_id": "1053",
	"name": "XRWebGLDepthInformation",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRWebGLDepthInformation interface contains depth information from the GPU/WebGL (returned by XRWebGLBinding.getDepthInformation()).This interface inherits properties from its parent, XRDepthInformation.Contains the height of the depth buffer (number of rows).An XRRigidTransform that needs to be applied when indexing into the depth buffer. The transformation that the matrix represents changes the coordinate system from normalized view coordinates to normalized depth buffer coordinates that can then be scaled by depth buffer's width and height to obtain the absolute depth buffer coordinates.Contains the scale factor by which the raw depth values must be multiplied in order to get the depths in meters.A WebGLTexture containing depth buffer information as an opaque texture.Contains the width of the depth buffer (number of columns).",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLDepthInformation"
},
{
	"api_id": "1054",
	"name": "XRWebGLLayer",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRWebGLLayer interface of the WebXR Device API provides a linkage between the WebXR device (or simulated XR device, in the case of an inline session) and a WebGL context used to render the scene for display on the device. In particular, it provides access to the WebGL framebuffer and viewport to ease access to the context.Although XRWebGLLayer is currently the only type of framebuffer layer supported by WebGL, it's entirely possible that future updates to the WebXR specification may allow for other layer types and corresponding image sources.Creates and returns a new XRWebGLLayer object for use by the specified XRSession, using a particular WebGLRenderingContext or WebGL2RenderingContext as the destination context.A Boolean value indicating whether or not the WebGL context's framebuffer supports anti-aliasing. The specific type of anti-aliasing is determined by the user agent.A number indicating the amount of foveation used by the XR compositor. Fixed Foveated Rendering (FFR) renders the edges of the eye textures at a lower resolution than the center and reduces the GPU load.Returns a WebGLFramebuffer suitable for passing into the bindFrameBuffer() method.Returns the width of the XRWebGLLayer's framebuffer.Returns the height of the layer's framebuffer.A Boolean which Indicates whether or not the WebXR compositor should make use of the contents of the layer's depth buffer while compositing the scene.Returns a new XRViewport instance representing the position, width, and height to which the WebGL context's viewport must be set to contain drawing to the area of the framebuffer designated for the specified view's contents. In this way, for example, the rendering of the left eye's point of view and of the right eye's point of view are each placed into the correct parts of the framebuffer.Returns the scaling factor that can be used to scale the resolution of the recommended WebGL framebuffer resolution to the rendering device's native resolution.This snippet, taken from Drawing a frame in Movement, orientation, and motion: A WebXR example, shows how the XRWebGLLayer is obtained from the XRSession object's rendering state and is then bound as the current rendering WebGL framebuffer by calling the WebGL bindFrameBuffer() function.Each time the GPU is ready to render the scene to the XR device, the XR runtime calls the function you specified when you called the XRSession method requestAnimationFrame() to ask to render the frame.That function receives as input an XRFrame which encapsulates the data needed to render the frame. This information includes the pose (an XRViewerPose object) that describes the position and facing direction of the viewer within the scene as well as a list of XRView objects, each representing one perspective on the scene. In current WebXR implementations, there will never be more than two entries in this list: one describing the position and viewing angle of the left eye and another doing the same for the right.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLLayer"
},
{
	"api_id": "1055",
	"name": "XRWebGLSubImage",
	"description": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers.The XRWebGLSubImage interface is used during rendering of WebGL layers.Inherits properties from its parent, XRSubImage.A color WebGLTexture object for the XRCompositionLayer to render.A depth/stencil WebGLTexture object for the XRCompositionLayer to render.A number representing the offset into the texture array if the layer was requested with texture-array; null otherwise.A number representing the width in pixels of the GL attachment.A number representing the height in pixels of the GL attachment.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XRWebGLSubImage"
},
{
	"api_id": "1056",
	"name": "XSLTProcessor",
	"description": "Non-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Experimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.\n  An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to\n  produce a new XML document as output. It has methods to load the XSLT stylesheet, to\n  manipulate <xsl:param> parameter values, and to apply the\n  transformation to documents.\nThe constructor has no parameters.\n  Imports the XSLT stylesheet. If the given node is a document node, you can pass in a\n  full XSL Transform or a literal result element transform; otherwise, it must be an <xsl:stylesheet> or\n  <xsl:transform> element.\n  \n  Transforms the node source by applying the stylesheet imported using the\n  XSLTProcessor.importStylesheet() function. The owner document of the\n  resulting document fragment is the owner node.\n  \n  Transforms the node source applying the stylesheet given importing using the\n  XSLTProcessor.importStylesheet() function.\n  The resultant object depends on the output method of the stylesheet:\n  Sets a parameter in the XSLT stylesheet that was imported. (Sets the value of an\n  <xsl:param>.) A null value for namespaceURI is treated\n  the same as an empty string.\n  \n  Gets the value of a parameter from the XSLT stylesheet. A null value for\n  namespaceURI is treated the same as an empty string.\n  \n  Removes the parameter if it was previously set. This will make the\n  XSLTProcessor use the default value for the parameter as specified in the\n  stylesheet. A null value for namespaceURI is treated the same as an empty\n  string.\n  \n  Removes all set parameters from the XSLTProcessor. The\n  XSLTProcessor will then use the defaults specified in the XSLT\n  stylesheet.\n  Removes all parameters and stylesheets from the XSLTProcessor.\n  The following properties are [ChromeOnly]\n  and not exposed to Web content:\n\n  Flags that tweak the behavior of the processor. Not reset by calling\n  XSLTProcessor.reset(). Default value: 0\n  Possible values are:\n  Not part of any specification. This is a proprietary interface that originated\n  in Gecko.\n",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor"
},
{
	"api_id": "1057",
	"name": "Event reference",
	"description": "Events are fired to notify code of "interesting changes" that may affect code execution. These can arise from user interactions such as using a mouse or resizing a window, changes in the state of the underlying environment (e.g. low battery or media events from the operating system), and other causes.Each event is represented by an object that is based on the Event interface, and may have additional custom fields and/or functions to provide information about what happened. The documentation for every event has a table (near the top) that includes a link to the associated event interface, and other relevant information. A full list of the different event types is given in Event > Interfaces based on Event.This topic provides an index to the main sorts of events you might be interested in (animation, clipboard, workers etc.) along with the main classes that implement those sorts of events. At the end is a flat list of all documented events.Note: This page lists many of the most common events you'll come across on the web. If you are searching for an event that isn't listed here, try searching for its name, topic area, or associated specification on the rest of MDN.\n    Events related to the\n    Web Animation API.\n    \n    Used to respond to changes in animation status (e.g. when an animation\n    starts or ends).\n    Events related to the fetching data.\n    Events related to the\n    Clipboard API.\n    Used to notify when content is cut, copied, or pasted.\n    Events related to composition; entering text "indirectly" (rather than\n    using normal keyboard presses).\n    \n    For example, text entered via a speech to text engine, or using\n    special key combinations that modify keyboard presses to represent new\n    characters in another language.\n    \n    Events related to\n    CSS Transitions.\n    \n    Provides notification events when CSS transitions start, stop, are\n    cancelled, etc.\n    \n    Events related to database operations: opening, closing, transactions,\n    errors, etc.\n    \n    Events related to modifications to the Document Object Model (DOM)\n    hierarchy and nodes.\n    \n    Warning:\n    Mutation Events are\n    deprecated.\n    Mutation Observers\n    should be used instead.\n    \n    Events related to using the\n    HTML Drag and Drop API\n    and wheel events.\n    \n    Drag and Wheel events are derived from mouse events. While they are\n    fired when using mouse wheel or drag/drop, they may also be used with\n    other appropriate hardware.\n    \n    Drag events fired on\n    Document\n    \n    Wheel events fired on\n    Document\n    and\n    Element\n    Events related to elements gaining and losing focus.Events related to forms being constructed, reset and submitted.\n    Events related to the\n    Fullscreen API.\n    \n    Used to notify when the transitioning between full screen and windowed\n    modes, and also of errors occurring during this transition.\n    \n    Events related to the\n    Gamepad API.\n    \n    Touch events are\n    recommended for implementing gestures.\n    \n    Events fired on\n    Document,\n    Element.\n    In addition there are a number of non-standard gesture events:\n    Events related to the\n    History API.\n    Events related to changing the state of a display or textual element.\n    Events related to HTML input elements e.g.\n    <input>, <select>, or\n    <textarea>.\n    \n    Events related to using a\n    keyboard.\n    Used to notify when keys are moved up, down, or just pressed.Events related to loading and unloading documents.\n    Events fired on\n    Document\n    and\n    Window.\n    \n    Events related to installation of\n    progressive web app manifests.\n    \n    Events related to media usage (including the\n    Media Capture and Streams API,\n    Web Audio API,\n    Picture-in-Picture API, etc.).\n    \n    Events related to a window receiving a message from another browsing\n    context.\n    \n    Events related to using a\n    computer mouse.\n    \n    Used to notify when the mouse is clicked, doubleclicked, up and down\n    events, right-click, movement in and out of an element, text\n    selection, etc.\n    \n    Pointer events provide a hardware-agnostic alternative to mouse\n    events. Drag and Wheel events are derived from mouse events.\n    Events related to gaining and losing network connection.\n    Events fired on\n    Window.\n    \n    Events fired on\n    NetworkInformation\n    (Network Information API).\n    \n    Events related to the\n    Payment Request API.\n    \n    Events fired on\n    PaymentRequest,\n    PaymentResponse.\n    \n    Events related to\n    High Resolution Time API,\n    Performance Timeline API,\n    Navigation Timing API, User Timing API,\n    and\n    Resource Timing API.\n    \n    Events fired on\n    Performance.\n    \n    Events related to the\n    Pointer Events API.\n    \n    Provides hardware-agnostic notification from pointing devices\n    including Mouse, Touch, pen/stylus.\n    Events related to printing.\n    Events sent to the global script context when any JavaScript promise\n    is rejected.\n    \n    Events related to the\n    WebSockets API.\n    Events related to SVG images.\n    Events fired on\n    SVGElement,\n    SVGAnimationElement,\n    SVGGraphicsElement.\n    \n    Selection API events\n    related to selecting text.\n    \n    Event (selectionchange) fired on\n    HTMLTextAreaElement,\n    HTMLInputElement.\n    \n    Events related to the\n    Touch Events API.\n    \n    Provides notification events from interacting with a touch sensitive\n    screen (i.e. using a finger or stylus). Not related to the\n    Force Touch API.\n    \n    Events related to the\n    WebXR Device API.\n    \n    Warning: The\n    WebVR API (and\n    associated\n    Window events) are deprecated.\n    \n    Events related to the\n    WebRTC API.\n    \n    Events related to the\n    server sent events API.\n    \n    Events related to the\n    Web Speech API.\n    \n    Events related to the\n    Web Workers API,\n    Service Worker API,\n    Broadcast Channel API, and\n    Channel Messaging API.\n    \n    Used to respond to new messages and message sending errors. Service\n    workers can also be notified of other events, including push\n    notifications, users clicking on displayed notifications, that push\n    subscription has been invalidated, deletion of items from the content\n    index, etc.\n    This section lists events that have their own reference pages on MDN. If you are interested in an event that isn't listed here, try searching for its name, topic area, or associated specification on the rest of MDN.",
	"example": "",
	"url": "https://developer.mozilla.org/en-US/docs/Web/Events"
}